_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.31M|{
 3807|  3.31M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.31M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.31M|    }
 3810|  3.31M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.31M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.31M|    }
 3813|  3.31M|    else {
 3814|       |        // utf-32
 3815|  3.31M|        static_assert(sizeof(U) == 4);
 3816|  3.31M|        SCN_UNUSED(ch);
 3817|  3.31M|        return 1;
 3818|  3.31M|    }
 3819|  3.31M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.31M|{
 3771|  3.31M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.31M|    SCN_GCC_COMPAT_PUSH
 3774|  3.31M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.31M|    constexpr char lengths[] =
 3776|  3.31M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.31M|        "\1\1\1\1\1\1\1\1"
 3778|  3.31M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.31M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.31M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.31M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.31M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.31M|    SCN_GCC_COMPAT_POP
 3785|  3.31M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.15M|{
 4013|  3.15M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  3.15M|        return decode_utf8_code_point_exhaustive(input);
 4015|  3.15M|    }
 4016|  3.15M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  3.15M|        return decode_utf16_code_point_exhaustive(input);
 4018|  3.15M|    }
 4019|  3.15M|    else {
 4020|  3.15M|        SCN_EXPECT(input.size() == 1);
 4021|  3.15M|        auto cp = static_cast<char32_t>(input.front());
 4022|  3.15M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  3.15M|            return invalid_code_point;
 4024|  3.15M|        }
 4025|  3.15M|        return cp;
 4026|  3.15M|    }
 4027|  3.15M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  3.15M|{
 3826|  3.15M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  3.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  3.15M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  3.15M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  3.15M|    };
 3831|       |
 3832|  3.15M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.69M, False: 464k]
  ------------------
 3833|  2.69M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 196, False: 2.69M]
  ------------------
 3834|    196|            SCN_UNLIKELY_ATTR
 3835|    196|            return invalid_code_point;
 3836|    196|        }
 3837|  2.69M|        return static_cast<char32_t>(input[0]);
 3838|  2.69M|    }
 3839|       |
 3840|   464k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 192k, False: 272k]
  ------------------
 3841|   192k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 89, False: 192k]
  ------------------
 3842|     89|            SCN_UNLIKELY_ATTR
 3843|     89|            return invalid_code_point;
 3844|     89|        }
 3845|   192k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 15.6k, False: 176k]
  ------------------
 3846|  15.6k|            SCN_UNLIKELY_ATTR
 3847|  15.6k|            return invalid_code_point;
 3848|  15.6k|        }
 3849|       |
 3850|   176k|        char32_t cp{};
 3851|   176k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   176k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   176k|        return cp;
 3854|   192k|    }
 3855|       |
 3856|   272k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 252k, False: 19.9k]
  ------------------
 3857|   252k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 25, False: 252k]
  ------------------
 3858|     25|            SCN_UNLIKELY_ATTR
 3859|     25|            return invalid_code_point;
 3860|     25|        }
 3861|   252k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 30.5k, False: 221k]
  ------------------
 3862|   252k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.57k, False: 220k]
  ------------------
 3863|  32.0k|            SCN_UNLIKELY_ATTR
 3864|  32.0k|            return invalid_code_point;
 3865|  32.0k|        }
 3866|       |
 3867|   220k|        char32_t cp{};
 3868|   220k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|   220k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|   220k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|   220k|        return cp;
 3872|   252k|    }
 3873|       |
 3874|  19.9k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 19.9k, False: 0]
  ------------------
 3875|  19.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 19.9k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  19.9k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 7.75k, False: 12.2k]
  ------------------
 3880|  7.75k|            SCN_UNLIKELY_ATTR
 3881|  7.75k|            return invalid_code_point;
 3882|  7.75k|        }
 3883|  12.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 2.71k, False: 9.49k]
  ------------------
 3884|  12.2k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 265, False: 9.23k]
  ------------------
 3885|  12.2k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 253, False: 8.98k]
  ------------------
 3886|  3.23k|            SCN_UNLIKELY_ATTR
 3887|  3.23k|            return invalid_code_point;
 3888|  3.23k|        }
 3889|       |
 3890|  8.98k|        char32_t cp{};
 3891|  8.98k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  8.98k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  8.98k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  8.98k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  8.98k|        return cp;
 3896|  12.2k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   697k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   697k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   697k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  2.89M|{
 3699|  2.89M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  2.89M|                                          decltype(first), decltype(last)> &&
 3701|  2.89M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  2.89M|        return {first, last};
 3703|  2.89M|    }
 3704|  2.89M|    else {
 3705|  2.89M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  2.89M|                                       to_address(first), to_address(last)))};
 3707|  2.89M|    }
 3708|  2.89M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  9.01M|{
  326|  9.01M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  9.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  9.01M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  9.18M|{
  304|  9.18M|    return p;
  305|  9.18M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  1.41M|{
 3730|  1.41M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  1.41M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  1.41M|                      decltype(it)> &&
 3733|  1.41M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  1.41M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.41M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  1.41M|        return it;
 3736|  1.41M|    }
 3737|  1.41M|    else {
 3738|  1.41M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  1.41M|    }
 3740|  1.41M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  20.1k|    {
 2724|  20.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  20.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  20.1k|    {
 2705|  20.1k|        return decay_copy(t.begin());
 2706|  20.1k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  1.60M|{
 1949|  1.60M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.60M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   375k|    {
 2781|   375k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   375k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   375k|    {
 2763|   375k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   375k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8866|  38.1k|{
 8867|  38.1k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  38.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  38.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.1k|    static_cast<    \
  |  |  929|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.1k|    static_cast<    \
  |  |  929|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  38.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|   154k|{
 5396|   154k|    detail::check_scan_arg_types<Args...>();
 5397|   154k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   154k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|   189k|{
 5135|   189k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   189k|                  "Scan argument types must be default constructible");
 5137|   189k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   189k|                  "Scan argument types must be Destructible");
 5139|   189k|    static_assert(
 5140|   189k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   189k|        "Scan argument types must not be references");
 5142|   189k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|   154k|    {
 5349|   154k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   154k|    {
 5360|   154k|        return {detail::make_arg<
 5361|   154k|            kind, Context,
 5362|   154k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   154k|                                 typename Context::char_type>::value>(args)...};
 5364|   154k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|   154k|{
 5170|   154k|    return make_value<Context>(value).ref_value;
 5171|   154k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|   189k|{
 5120|   189k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   189k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   189k|                                  needs_context_tag>) {
 5124|   189k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   189k|    }
 5126|   189k|    else {
 5127|   189k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   189k|            value, context_tag<Context>{}));
 5129|   189k|    }
 5130|   189k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|   189k|    {                                                                        \
 4959|   189k|        return val;                                                          \
 4960|   189k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|   189k|{
 5089|   189k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   189k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   189k|    constexpr bool scannable_char =
 5093|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   189k|    static_assert(scannable_char,
 5095|   189k|                  "Cannot scan an argument of an unsupported character "
 5096|   189k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   189k|    constexpr bool scannable_const =
 5099|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   189k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   189k|    constexpr bool scannable_disabled =
 5103|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   189k|    static_assert(scannable_disabled,
 5105|   189k|                  "Cannot scan an argument that has been disabled by "
 5106|   189k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   189k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   189k|    static_assert(
 5110|   189k|        scannable,
 5111|   189k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   189k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   189k|    return arg_value{arg};
 5115|   189k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|   189k|    {
 4902|   189k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  76.2k|{
 8654|  76.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  76.2k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  76.2k|{
 8591|  76.2k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  76.2k|    auto result = vscan_impl(buffer, format, args);
 8594|  76.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 67.3k]
  |  |  ------------------
  ------------------
 8595|  8.95k|        return unexpected(result.error());
 8596|  8.95k|    }
 8597|  67.3k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  67.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  76.2k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|   187k|{
 4720|   187k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   187k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   187k|                  "\n"
 4724|   187k|                  "Unsupported range type given as input to a scanning "
 4725|   187k|                  "function.\n"
 4726|   187k|                  "A range needs to have a character type (value type) "
 4727|   187k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   187k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   187k|                  "to be included.\n"
 4730|   187k|                  "See the scnlib documentation for more details.");
 4731|   187k|    static_assert(
 4732|   187k|        !std::is_same_v<T, custom_char_traits>,
 4733|   187k|        "\n"
 4734|   187k|        "Unsupported range type given as input to a scanning "
 4735|   187k|        "function.\n"
 4736|   187k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   187k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   187k|        "not supported.");
 4739|   187k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   187k|                  "\n"
 4741|   187k|                  "Unsupported range type given as input to a scanning "
 4742|   187k|                  "function.\n"
 4743|   187k|                  "file_marker_found cannot be used as an "
 4744|   187k|                  "source range type to scn::scan.\n"
 4745|   187k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   187k|                  "and do not provide an explicit source range, "
 4747|   187k|                  "or use scn::scan with a FILE* directly.");
 4748|   187k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   187k|                  "\n"
 4750|   187k|                  "Unsupported range type given as input to a scanning "
 4751|   187k|                  "function.\n"
 4752|   187k|                  "In order to be scannable, a range needs to satisfy "
 4753|   187k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   187k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   187k|                  "\n"
 4756|   187k|                  "Unsupported range type given as input to a scanning "
 4757|   187k|                  "function.\n"
 4758|   187k|                  "A range needs to model forward_range and have a valid "
 4759|   187k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   187k|                  "Examples of scannable ranges are std::string, "
 4761|   187k|                  "std::string_view, "
 4762|   187k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   187k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   187k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   187k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   187k|{
 4659|   187k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   187k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   187k|    }
 4662|   187k|    else {
 4663|   187k|        return invalid_char_type{};
 4664|   187k|    }
 4665|   187k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   187k|    {
 2855|   187k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   187k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   187k|    {
 2836|   187k|        return t.data();
 2837|   187k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|   187k|    {
 3231|   187k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.64k, False: 185k]
  ------------------
 3232|   187k|                   ? nullptr
 3233|   187k|                   : std::addressof(*ranges::begin(derived()));
 3234|   187k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   187k|    {
 3005|   187k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   187k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   187k|    {
 2978|   187k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   187k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|   703k|    {
 3339|   703k|        return m_iterator == m_sentinel;
 3340|   703k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   373k|    {
 3185|   373k|        return static_cast<const D&>(*this);
 3186|   373k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   353k|    {
 2724|   353k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   353k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   353k|    {
 2705|   353k|        return decay_copy(t.begin());
 2706|   353k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  2.06M|    {
 3330|  2.06M|        return m_iterator;
 3331|  2.06M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   187k|    {
 2930|   187k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   187k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   187k|    {
 2896|   187k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   187k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  21.6M|{
 1949|  21.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  21.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  21.6M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|   703k|    {
 3346|   703k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|   703k|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  43.3M|    {
 1598|  43.3M|        return has_value();
 1599|  43.3M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  86.6M|    {
  485|  86.6M|        return m_has_value;
  486|  86.6M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  87.2k|    {
 1604|  87.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  87.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  87.2k|        return this->get_unexpected().error();
 1606|  87.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  87.2k|    {
  468|  87.2k|        return m_unexpected;
  469|  87.2k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|   655k|    {
  361|   655k|        return m_unexpected;
  362|   655k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|   333k|    {
  347|   333k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   333k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   333k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  19.3k|    {
 1476|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  19.3k|    {
  447|  19.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|   380k|    {
  356|   380k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   380k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   380k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   187k|    {
 1177|   187k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   167k|{
 5923|   167k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   167k|                      ranges::iterator_t<SourceRange>>) {
 5925|   167k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   167k|    }
 5927|   167k|    else {
 5928|   167k|        auto it = ranges::begin(source);
 5929|   167k|        while (n > 0) {
 5930|   167k|            --n;
 5931|   167k|            ++it;
 5932|   167k|        }
 5933|   167k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   167k|    }
 5935|   167k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   683k|    {
 2724|   683k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   683k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   683k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   683k|    {
 2705|   683k|        return decay_copy(t.begin());
 2706|   683k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   167k|{
 5910|   167k|    return ranges::end(source);
 5911|   167k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   167k|    {
 2781|   167k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   167k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   167k|    {
 2763|   167k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   167k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  1.07M|    {
 3334|  1.07M|        return m_sentinel;
 3335|  1.07M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  43.2M|    {
 1653|  43.2M|        return value();
 1654|  43.2M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  43.2M|    {
 1627|  43.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  43.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  43.2M|        return this->get_value();
 1629|  43.2M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  43.2M|    {
  451|  43.2M|        return m_value;
  452|  43.2M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   167k|    {
 1430|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   167k|    {
  437|   167k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7974|  76.2k|    {
 7975|  76.2k|        return m_str;
 7976|  76.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   154k|    {
 5426|   154k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|   154k|    {
 5379|   154k|        return m_argptrs;
 5380|   154k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   230k|    {
 5478|   230k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  76.2k|{
 8820|  76.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 67.3k]
  |  |  ------------------
  ------------------
 8821|  8.95k|        return unexpected(result.error());
 8822|  8.95k|    }
 8823|  67.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.3k|    static_cast<    \
  |  |  929|  67.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.3k|    static_cast<    \
  |  |  929|  67.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  76.2k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   187k|    {
 1598|   187k|        return has_value();
 1599|   187k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   374k|    {
  485|   374k|        return m_has_value;
  486|   374k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  19.3k|    {
 1604|  19.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.3k|        return this->get_unexpected().error();
 1606|  19.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  19.3k|    {
  468|  19.3k|        return m_unexpected;
  469|  19.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  9.69k|    {
 1476|  9.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  9.69k|    {
  626|  9.69k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  9.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  9.69k|    {
  689|  9.69k|        scn::detail::construct_at(unexpected_ptr(),
  690|  9.69k|                                  std::forward<Args>(args)...);
  691|  9.69k|        m_has_value = false;
  692|  9.69k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  58.1k|{
  392|  58.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  58.1k|        T(std::forward<Args>(args)...);
  394|  58.1k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  19.3k|    {
  718|  19.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  19.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  19.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  19.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  93.6k|    {
 1177|  93.6k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   134k|    {
 1653|   134k|        return value();
 1654|   134k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   167k|    {
 1627|   167k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   167k|        return this->get_value();
 1629|   167k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   167k|    {
  451|   167k|        return m_value;
  452|   167k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  83.9k|    {
 5830|  83.9k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   167k|    {
 5681|   167k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|   170k|    {
 5616|   170k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  83.9k|    {
 1430|  83.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  83.9k|    {
  616|  83.9k|        construct(std::forward<Args>(args)...);
  617|  83.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  83.9k|    {
  682|  83.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  83.9k|        m_has_value = true;
  684|  83.9k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  83.9k|{
  392|  83.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  83.9k|        T(std::forward<Args>(args)...);
  394|  83.9k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|  83.9k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   251k|    {
  706|   251k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   251k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   251k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|   167k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|   154k|    {
 5374|   154k|        return m_args;
 5375|   154k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|   154k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  1.20M|    {
 3316|  1.20M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   230k|{
 7691|   230k|    return s;
 7692|   230k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   230k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  76.2k|    {
 7971|  76.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  93.6k|    {
 1598|  93.6k|        return has_value();
 1599|  93.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   271k|    {
  675|   271k|        return m_has_value;
  676|   271k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|  83.9k|    {
 1673|  83.9k|        return &value();
 1674|  83.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  83.9k|    {
 1627|  83.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  83.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  83.9k|        return this->get_value();
 1629|  83.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  83.9k|    {
  641|  83.9k|        return *value_ptr();
  642|  83.9k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   167k|    {
 5698|   167k|        return ranges::begin(m_range);
 5699|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  93.6k|    {
  631|  93.6k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 83.9k, False: 9.69k]
  ------------------
  632|  83.9k|            destroy_value();
  633|  83.9k|        }
  634|  9.69k|        else {
  635|  9.69k|            destroy_unexpected();
  636|  9.69k|        }
  637|  93.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  83.9k|    {
  696|  83.9k|        scn::detail::destroy_at(value_ptr());
  697|  83.9k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  83.9k|{
  398|  83.9k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  83.9k|        for (auto& elem : *p) {
  400|  83.9k|            scn::detail::destroy_at(&elem);
  401|  83.9k|        }
  402|  83.9k|    }
  403|  83.9k|    else {
  404|  83.9k|        p->~T();
  405|  83.9k|    }
  406|  83.9k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  9.69k|    {
  700|  9.69k|        scn::detail::destroy_at(unexpected_ptr());
  701|  9.69k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  58.1k|{
  398|  58.1k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  58.1k|        for (auto& elem : *p) {
  400|  58.1k|            scn::detail::destroy_at(&elem);
  401|  58.1k|        }
  402|  58.1k|    }
  403|  58.1k|    else {
  404|  58.1k|        p->~T();
  405|  58.1k|    }
  406|  58.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8933|  38.1k|{
 8934|  38.1k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  38.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  38.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.1k|    static_cast<    \
  |  |  929|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.1k|    static_cast<    \
  |  |  929|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  38.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  76.2k|{
 8672|  76.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  76.2k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  76.2k|{
 8607|  76.2k|#if !SCN_DISABLE_LOCALE
 8608|  76.2k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  76.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  76.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  76.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  76.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 67.3k]
  |  |  ------------------
  ------------------
 8615|  8.95k|        return unexpected(result.error());
 8616|  8.95k|    }
 8617|  67.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  67.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  76.2k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8972|  17.4k|{
 8973|  17.4k|    T value;
 8974|  17.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  17.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 746, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    746|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    746|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    746|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    746|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    746|    }                                                  \
  |  |  |  | 3671|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  16.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.6k|    static_cast<    \
  |  |  929|  16.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.6k|    static_cast<    \
  |  |  929|  16.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  17.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  35.3k|{
 5155|  35.3k|    check_scan_arg_types<T>();
 5156|       |
 5157|  35.3k|    basic_scan_arg<Context> arg;
 5158|  35.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  35.3k|    arg.m_value = make_value<Context>(value);
 5160|  35.3k|    return arg;
 5161|  35.3k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   283k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  32.4M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  34.8k|{
 8685|  34.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  34.8k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  34.8k|{
 8631|  34.8k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  34.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  34.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 33.3k]
  |  |  ------------------
  ------------------
 8635|  1.49k|        return unexpected(result.error());
 8636|  1.49k|    }
 8637|  33.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  34.8k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  33.3k|    {
 1663|  33.3k|        return std::move(value());
 1664|  33.3k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8866|  38.1k|{
 8867|  38.1k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  38.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  38.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.1k|    static_cast<    \
  |  |  929|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.1k|    static_cast<    \
  |  |  929|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  38.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  76.2k|{
 5396|  76.2k|    detail::check_scan_arg_types<Args...>();
 5397|  76.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  76.2k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  93.6k|{
 5135|  93.6k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  93.6k|                  "Scan argument types must be default constructible");
 5137|  93.6k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  93.6k|                  "Scan argument types must be Destructible");
 5139|  93.6k|    static_assert(
 5140|  93.6k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  93.6k|        "Scan argument types must not be references");
 5142|  93.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  76.2k|    {
 5349|  76.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  76.2k|    {
 5360|  76.2k|        return {detail::make_arg<
 5361|  76.2k|            kind, Context,
 5362|  76.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  76.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  76.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  76.2k|{
 5170|  76.2k|    return make_value<Context>(value).ref_value;
 5171|  76.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  93.6k|{
 5120|  93.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  93.6k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  93.6k|                                  needs_context_tag>) {
 5124|  93.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  93.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  93.6k|    }
 5126|  93.6k|    else {
 5127|  93.6k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  93.6k|            value, context_tag<Context>{}));
 5129|  93.6k|    }
 5130|  93.6k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  93.6k|    {                                                                        \
 4959|  93.6k|        return val;                                                          \
 4960|  93.6k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  93.6k|{
 5089|  93.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  93.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  93.6k|    constexpr bool scannable_char =
 5093|  93.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  93.6k|    static_assert(scannable_char,
 5095|  93.6k|                  "Cannot scan an argument of an unsupported character "
 5096|  93.6k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  93.6k|    constexpr bool scannable_const =
 5099|  93.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  93.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  93.6k|    constexpr bool scannable_disabled =
 5103|  93.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  93.6k|    static_assert(scannable_disabled,
 5105|  93.6k|                  "Cannot scan an argument that has been disabled by "
 5106|  93.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  93.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  93.6k|    static_assert(
 5110|  93.6k|        scannable,
 5111|  93.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  93.6k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  93.6k|    return arg_value{arg};
 5115|  93.6k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  93.6k|    {
 4902|  93.6k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7974|  76.2k|    {
 7975|  76.2k|        return m_str;
 7976|  76.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  76.2k|    {
 5426|  76.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  76.2k|    {
 5379|  76.2k|        return m_argptrs;
 5380|  76.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  76.2k|{
 8820|  76.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 67.3k]
  |  |  ------------------
  ------------------
 8821|  8.95k|        return unexpected(result.error());
 8822|  8.95k|    }
 8823|  67.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.3k|    static_cast<    \
  |  |  929|  67.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.3k|    static_cast<    \
  |  |  929|  67.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  76.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  9.69k|    {
 1476|  9.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  9.69k|    {
  447|  9.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  93.6k|    {
 1177|  93.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  83.9k|    {
 5830|  83.9k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  83.9k|    {
 5616|  83.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  83.9k|    {
 1430|  83.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  83.9k|    {
  437|  83.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  76.2k|    {
 5374|  76.2k|        return m_args;
 5375|  76.2k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  76.2k|    {
 7971|  76.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  93.6k|    {
 1598|  93.6k|        return has_value();
 1599|  93.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   177k|    {
  485|   177k|        return m_has_value;
  486|   177k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|  83.9k|    {
 1673|  83.9k|        return &value();
 1674|  83.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|  83.9k|    {
 1627|  83.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  83.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  83.9k|        return this->get_value();
 1629|  83.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  83.9k|    {
  451|  83.9k|        return m_value;
  452|  83.9k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8933|  38.1k|{
 8934|  38.1k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  38.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  38.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.1k|    static_cast<    \
  |  |  929|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  38.1k|    static_cast<    \
  |  |  929|  38.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  38.1k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8972|  17.4k|{
 8973|  17.4k|    T value;
 8974|  17.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  17.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 746, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    746|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    746|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    746|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    746|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    746|    }                                                  \
  |  |  |  | 3671|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  16.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.6k|    static_cast<    \
  |  |  929|  16.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.6k|    static_cast<    \
  |  |  929|  16.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  17.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  17.4k|{
 5155|  17.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  17.4k|    basic_scan_arg<Context> arg;
 5158|  17.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  17.4k|    arg.m_value = make_value<Context>(value);
 5160|  17.4k|    return arg;
 5161|  17.4k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  9.69k|    {
 2724|  9.69k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  9.69k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  9.69k|    {
 2705|  9.69k|        return decay_copy(t.begin());
 2706|  9.69k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  4.06M|{
 1949|  4.06M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.06M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   192k|    {
 2781|   192k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   192k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   192k|    {
 2763|   192k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   192k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8866|  39.0k|{
 8867|  39.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  39.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  39.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.0k|    static_cast<    \
  |  |  929|  39.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.0k|    static_cast<    \
  |  |  929|  39.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  39.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  39.0k|{
 8654|  39.0k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  39.0k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  39.0k|{
 8591|  39.0k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  39.0k|    auto result = vscan_impl(buffer, format, args);
 8594|  39.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.47k, False: 34.5k]
  |  |  ------------------
  ------------------
 8595|  4.47k|        return unexpected(result.error());
 8596|  4.47k|    }
 8597|  34.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  34.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  39.0k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  96.0k|{
 4720|  96.0k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  96.0k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  96.0k|                  "\n"
 4724|  96.0k|                  "Unsupported range type given as input to a scanning "
 4725|  96.0k|                  "function.\n"
 4726|  96.0k|                  "A range needs to have a character type (value type) "
 4727|  96.0k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  96.0k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  96.0k|                  "to be included.\n"
 4730|  96.0k|                  "See the scnlib documentation for more details.");
 4731|  96.0k|    static_assert(
 4732|  96.0k|        !std::is_same_v<T, custom_char_traits>,
 4733|  96.0k|        "\n"
 4734|  96.0k|        "Unsupported range type given as input to a scanning "
 4735|  96.0k|        "function.\n"
 4736|  96.0k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  96.0k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  96.0k|        "not supported.");
 4739|  96.0k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  96.0k|                  "\n"
 4741|  96.0k|                  "Unsupported range type given as input to a scanning "
 4742|  96.0k|                  "function.\n"
 4743|  96.0k|                  "file_marker_found cannot be used as an "
 4744|  96.0k|                  "source range type to scn::scan.\n"
 4745|  96.0k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  96.0k|                  "and do not provide an explicit source range, "
 4747|  96.0k|                  "or use scn::scan with a FILE* directly.");
 4748|  96.0k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  96.0k|                  "\n"
 4750|  96.0k|                  "Unsupported range type given as input to a scanning "
 4751|  96.0k|                  "function.\n"
 4752|  96.0k|                  "In order to be scannable, a range needs to satisfy "
 4753|  96.0k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  96.0k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  96.0k|                  "\n"
 4756|  96.0k|                  "Unsupported range type given as input to a scanning "
 4757|  96.0k|                  "function.\n"
 4758|  96.0k|                  "A range needs to model forward_range and have a valid "
 4759|  96.0k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  96.0k|                  "Examples of scannable ranges are std::string, "
 4761|  96.0k|                  "std::string_view, "
 4762|  96.0k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  96.0k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  96.0k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  96.0k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  96.0k|{
 4690|  96.0k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  96.0k|        return file_marker_found{};
 4692|  96.0k|    }
 4693|  96.0k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  96.0k|        if constexpr (ranges::range<Range>) {
 4695|  96.0k|            return insufficient_range{};
 4696|  96.0k|        }
 4697|  96.0k|        else {
 4698|  96.0k|            return invalid_input_range{};
 4699|  96.0k|        }
 4700|  96.0k|    }
 4701|  96.0k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  96.0k|        return invalid_char_type{};
 4703|  96.0k|    }
 4704|  96.0k|    else {
 4705|  96.0k|        return make_forward_scan_buffer(r);
 4706|  96.0k|    }
 4707|  96.0k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  96.0k|{
 4524|  96.0k|    return basic_scan_forward_buffer_impl(range);
 4525|  96.0k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  96.0k|    {
 4411|  96.0k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  96.0k|    {
 4382|  96.0k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  96.0k|    {
 4151|  96.0k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  96.0k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   182k|    {
 2724|   182k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   182k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   182k|    {
 2705|   182k|        return decay_copy(t.begin());
 2706|   182k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|   268k|    {
 3330|   268k|        return m_iterator;
 3331|   268k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  1.17M|    {
 4415|  1.17M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 13.0k, False: 1.16M]
  ------------------
 4416|  13.0k|            return false;
 4417|  13.0k|        }
 4418|  1.16M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  1.16M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  1.16M|        }
 4421|  1.16M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.07M, False: 90.7k]
  ------------------
 4422|  1.07M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.07M|                                          this->m_current_view.begin(),
 4424|  1.07M|                                          this->m_current_view.end());
 4425|  1.07M|        }
 4426|  1.16M|        m_latest = *m_cursor;
 4427|  1.16M|        ++m_cursor;
 4428|  1.16M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  1.16M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  1.16M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  1.16M|        }
 4432|  1.16M|        return true;
 4433|  1.16M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.50M|    {
 2781|  3.50M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.50M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.50M|    {
 2763|  3.50M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.50M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  3.59M|    {
 3334|  3.59M|        return m_sentinel;
 3335|  3.59M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  96.0k|    {
 4071|  96.0k|        SCN_UNUSED(position);
  ------------------
  |  |  909|  96.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  96.0k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  9.69k|    {
 1476|  9.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  9.69k|    {
  447|  9.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  96.0k|    {
 1177|  96.0k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  86.3k|{
 5923|  86.3k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  86.3k|                      ranges::iterator_t<SourceRange>>) {
 5925|  86.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  86.3k|    }
 5927|  86.3k|    else {
 5928|  86.3k|        auto it = ranges::begin(source);
 5929|  86.3k|        while (n > 0) {
 5930|  86.3k|            --n;
 5931|  86.3k|            ++it;
 5932|  86.3k|        }
 5933|  86.3k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  86.3k|    }
 5935|  86.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  86.3k|    {
 2724|  86.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  86.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  86.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  86.3k|    {
 2705|  86.3k|        return decay_copy(t.begin());
 2706|  86.3k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  86.3k|{
 5910|  86.3k|    return ranges::end(source);
 5911|  86.3k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  86.3k|    {
 2781|  86.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  86.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  86.3k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  86.3k|    {
 2763|  86.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  86.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  86.3k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  86.3k|    {
 1430|  86.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  86.3k|    {
  437|  86.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7974|  78.1k|    {
 7975|  78.1k|        return m_str;
 7976|  78.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|  78.1k|{
 8820|  78.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 69.1k]
  |  |  ------------------
  ------------------
 8821|  8.95k|        return unexpected(result.error());
 8822|  8.95k|    }
 8823|  69.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  69.1k|    static_cast<    \
  |  |  929|  69.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  69.1k|    static_cast<    \
  |  |  929|  69.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  78.1k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  96.0k|    {
 1598|  96.0k|        return has_value();
 1599|  96.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   192k|    {
  485|   192k|        return m_has_value;
  486|   192k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  9.69k|    {
 1604|  9.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.69k|        return this->get_unexpected().error();
 1606|  9.69k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  9.69k|    {
  468|  9.69k|        return m_unexpected;
  469|  9.69k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  9.69k|    {
 1476|  9.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  9.69k|    {
  626|  9.69k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  9.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  9.69k|    {
  689|  9.69k|        scn::detail::construct_at(unexpected_ptr(),
  690|  9.69k|                                  std::forward<Args>(args)...);
  691|  9.69k|        m_has_value = false;
  692|  9.69k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  19.3k|    {
  718|  19.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  19.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  19.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  19.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  96.0k|    {
 1177|  96.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  69.1k|    {
 1653|  69.1k|        return value();
 1654|  69.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  86.3k|    {
 1627|  86.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  86.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  86.3k|        return this->get_value();
 1629|  86.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  86.3k|    {
  451|  86.3k|        return m_value;
  452|  86.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|  86.3k|    {
 5830|  86.3k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  86.3k|    {
 5681|  86.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|  86.3k|    {
 1430|  86.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|  86.3k|    {
  616|  86.3k|        construct(std::forward<Args>(args)...);
  617|  86.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  86.3k|    {
  682|  86.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  86.3k|        m_has_value = true;
  684|  86.3k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  86.3k|{
  392|  86.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  86.3k|        T(std::forward<Args>(args)...);
  394|  86.3k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5821|  86.3k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   259k|    {
  706|   259k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   259k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   259k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5825|   172k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   182k|    {
 3316|   182k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  78.1k|    {
 7971|  78.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  96.0k|    {
 1598|  96.0k|        return has_value();
 1599|  96.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   278k|    {
  675|   278k|        return m_has_value;
  676|   278k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|  86.3k|    {
 1673|  86.3k|        return &value();
 1674|  86.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|  86.3k|    {
 1627|  86.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  86.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  86.3k|        return this->get_value();
 1629|  86.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  86.3k|    {
  641|  86.3k|        return *value_ptr();
  642|  86.3k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  86.3k|    {
 5698|  86.3k|        return ranges::begin(m_range);
 5699|  86.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  96.0k|    {
  631|  96.0k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 86.3k, False: 9.69k]
  ------------------
  632|  86.3k|            destroy_value();
  633|  86.3k|        }
  634|  9.69k|        else {
  635|  9.69k|            destroy_unexpected();
  636|  9.69k|        }
  637|  96.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  86.3k|    {
  696|  86.3k|        scn::detail::destroy_at(value_ptr());
  697|  86.3k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|  86.3k|{
  398|  86.3k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  86.3k|        for (auto& elem : *p) {
  400|  86.3k|            scn::detail::destroy_at(&elem);
  401|  86.3k|        }
  402|  86.3k|    }
  403|  86.3k|    else {
  404|  86.3k|        p->~T();
  405|  86.3k|    }
  406|  86.3k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  9.69k|    {
  700|  9.69k|        scn::detail::destroy_at(unexpected_ptr());
  701|  9.69k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8933|  39.0k|{
 8934|  39.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  39.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  39.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.0k|    static_cast<    \
  |  |  929|  39.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  39.0k|    static_cast<    \
  |  |  929|  39.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  39.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  39.0k|{
 8672|  39.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  39.0k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  39.0k|{
 8607|  39.0k|#if !SCN_DISABLE_LOCALE
 8608|  39.0k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  39.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  39.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  39.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  39.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.47k, False: 34.5k]
  |  |  ------------------
  ------------------
 8615|  4.47k|        return unexpected(result.error());
 8616|  4.47k|    }
 8617|  34.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  34.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  39.0k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8972|  17.9k|{
 8973|  17.9k|    T value;
 8974|  17.9k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  17.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 746, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    746|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    746|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    746|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    746|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    746|    }                                                  \
  |  |  |  | 3671|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  17.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  17.1k|    static_cast<    \
  |  |  929|  17.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  17.1k|    static_cast<    \
  |  |  929|  17.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  17.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  17.9k|{
 8685|  17.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  17.9k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  17.9k|{
 8631|  17.9k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  17.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  17.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 746, False: 17.1k]
  |  |  ------------------
  ------------------
 8635|    746|        return unexpected(result.error());
 8636|    746|    }
 8637|  17.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  17.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  17.1k|    {
 1663|  17.1k|        return std::move(value());
 1664|  17.1k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  40.2k|    {
 2724|  40.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  40.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  40.2k|    {
 2705|  40.2k|        return decay_copy(t.begin());
 2706|  40.2k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|   150M|{
 1949|   150M|    return SCN_FWD(t);
  ------------------
  |  |  930|   150M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   150M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  42.9M|    {
 2781|  42.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  42.9M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  42.9M|    {
 2763|  42.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  42.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  42.9M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  17.1M|{
 5396|  17.1M|    detail::check_scan_arg_types<Args...>();
 5397|  17.1M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  17.1M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  21.4M|{
 5135|  21.4M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  21.4M|                  "Scan argument types must be default constructible");
 5137|  21.4M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  21.4M|                  "Scan argument types must be Destructible");
 5139|  21.4M|    static_assert(
 5140|  21.4M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  21.4M|        "Scan argument types must not be references");
 5142|  21.4M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  17.1M|    {
 5349|  17.1M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  17.1M|    {
 5360|  17.1M|        return {detail::make_arg<
 5361|  17.1M|            kind, Context,
 5362|  17.1M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  17.1M|                                 typename Context::char_type>::value>(args)...};
 5364|  17.1M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  17.1M|{
 5170|  17.1M|    return make_value<Context>(value).ref_value;
 5171|  17.1M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  21.4M|{
 5120|  21.4M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  21.4M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  21.4M|                                  needs_context_tag>) {
 5124|  21.4M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  21.4M|    }
 5126|  21.4M|    else {
 5127|  21.4M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  21.4M|            value, context_tag<Context>{}));
 5129|  21.4M|    }
 5130|  21.4M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  21.4M|    {                                                                        \
 4959|  21.4M|        return val;                                                          \
 4960|  21.4M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  21.4M|{
 5089|  21.4M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  21.4M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  21.4M|    constexpr bool scannable_char =
 5093|  21.4M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  21.4M|    static_assert(scannable_char,
 5095|  21.4M|                  "Cannot scan an argument of an unsupported character "
 5096|  21.4M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  21.4M|    constexpr bool scannable_const =
 5099|  21.4M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  21.4M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  21.4M|    constexpr bool scannable_disabled =
 5103|  21.4M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  21.4M|    static_assert(scannable_disabled,
 5105|  21.4M|                  "Cannot scan an argument that has been disabled by "
 5106|  21.4M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  21.4M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  21.4M|    static_assert(
 5110|  21.4M|        scannable,
 5111|  21.4M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  21.4M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  21.4M|    return arg_value{arg};
 5115|  21.4M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  21.4M|    {
 4902|  21.4M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  8.59M|{
 8591|  8.59M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  8.59M|    auto result = vscan_impl(buffer, format, args);
 8594|  8.59M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 8.57M]
  |  |  ------------------
  ------------------
 8595|  17.9k|        return unexpected(result.error());
 8596|  17.9k|    }
 8597|  8.57M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  8.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  8.59M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|  21.4M|{
 4720|  21.4M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  21.4M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  21.4M|                  "\n"
 4724|  21.4M|                  "Unsupported range type given as input to a scanning "
 4725|  21.4M|                  "function.\n"
 4726|  21.4M|                  "A range needs to have a character type (value type) "
 4727|  21.4M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  21.4M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  21.4M|                  "to be included.\n"
 4730|  21.4M|                  "See the scnlib documentation for more details.");
 4731|  21.4M|    static_assert(
 4732|  21.4M|        !std::is_same_v<T, custom_char_traits>,
 4733|  21.4M|        "\n"
 4734|  21.4M|        "Unsupported range type given as input to a scanning "
 4735|  21.4M|        "function.\n"
 4736|  21.4M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  21.4M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  21.4M|        "not supported.");
 4739|  21.4M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  21.4M|                  "\n"
 4741|  21.4M|                  "Unsupported range type given as input to a scanning "
 4742|  21.4M|                  "function.\n"
 4743|  21.4M|                  "file_marker_found cannot be used as an "
 4744|  21.4M|                  "source range type to scn::scan.\n"
 4745|  21.4M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  21.4M|                  "and do not provide an explicit source range, "
 4747|  21.4M|                  "or use scn::scan with a FILE* directly.");
 4748|  21.4M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  21.4M|                  "\n"
 4750|  21.4M|                  "Unsupported range type given as input to a scanning "
 4751|  21.4M|                  "function.\n"
 4752|  21.4M|                  "In order to be scannable, a range needs to satisfy "
 4753|  21.4M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  21.4M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  21.4M|                  "\n"
 4756|  21.4M|                  "Unsupported range type given as input to a scanning "
 4757|  21.4M|                  "function.\n"
 4758|  21.4M|                  "A range needs to model forward_range and have a valid "
 4759|  21.4M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  21.4M|                  "Examples of scannable ranges are std::string, "
 4761|  21.4M|                  "std::string_view, "
 4762|  21.4M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  21.4M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  21.4M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  21.4M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  21.4M|{
 4659|  21.4M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  21.4M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  21.4M|    }
 4662|  21.4M|    else {
 4663|  21.4M|        return invalid_char_type{};
 4664|  21.4M|    }
 4665|  21.4M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  21.4M|    {
 2855|  21.4M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  21.4M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  21.4M|    {
 2836|  21.4M|        return t.data();
 2837|  21.4M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|  21.4M|    {
 3231|  21.4M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 5.36k, False: 21.4M]
  ------------------
 3232|  21.4M|                   ? nullptr
 3233|  21.4M|                   : std::addressof(*ranges::begin(derived()));
 3234|  21.4M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  21.4M|    {
 3005|  21.4M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  21.4M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  21.4M|    {
 2978|  21.4M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  21.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  42.9M|    {
 3339|  42.9M|        return m_iterator == m_sentinel;
 3340|  42.9M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  42.9M|    {
 3185|  42.9M|        return static_cast<const D&>(*this);
 3186|  42.9M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  42.9M|    {
 2724|  42.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  42.9M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  42.9M|    {
 2705|  42.9M|        return decay_copy(t.begin());
 2706|  42.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  1.02G|    {
 3330|  1.02G|        return m_iterator;
 3331|  1.02G|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  21.4M|    {
 2930|  21.4M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  21.4M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  21.4M|    {
 2896|  21.4M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  21.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  42.9M|    {
 3346|  42.9M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  42.9M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  38.7k|    {
 1476|  38.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  38.7k|    {
  447|  38.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.4M|    {
 1177|  21.4M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  21.4M|{
 5923|  21.4M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  21.4M|                      ranges::iterator_t<SourceRange>>) {
 5925|  21.4M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  21.4M|    }
 5927|  21.4M|    else {
 5928|  21.4M|        auto it = ranges::begin(source);
 5929|  21.4M|        while (n > 0) {
 5930|  21.4M|            --n;
 5931|  21.4M|            ++it;
 5932|  21.4M|        }
 5933|  21.4M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  21.4M|    }
 5935|  21.4M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  42.8M|    {
 2724|  42.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  42.8M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  42.8M|    {
 2705|  42.8M|        return decay_copy(t.begin());
 2706|  42.8M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|  21.4M|{
 5910|  21.4M|    return ranges::end(source);
 5911|  21.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  21.4M|    {
 2781|  21.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  21.4M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  21.4M|    {
 2763|  21.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  21.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   928M|    {
 3334|   928M|        return m_sentinel;
 3335|   928M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  21.4M|    {
 1430|  21.4M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  21.4M|    {
  437|  21.4M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7974|  8.59M|    {
 7975|  8.59M|        return m_str;
 7976|  8.59M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  17.1M|    {
 5426|  17.1M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  17.1M|    {
 5379|  17.1M|        return m_argptrs;
 5380|  17.1M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|  25.7M|    {
 5478|  25.7M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  8.59M|{
 8820|  8.59M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 8.57M]
  |  |  ------------------
  ------------------
 8821|  17.9k|        return unexpected(result.error());
 8822|  17.9k|    }
 8823|  8.57M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  8.57M|    static_cast<    \
  |  |  929|  8.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  8.57M|    static_cast<    \
  |  |  929|  8.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  8.59M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  21.4M|    {
 1598|  21.4M|        return has_value();
 1599|  21.4M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  42.9M|    {
  485|  42.9M|        return m_has_value;
  486|  42.9M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  38.7k|    {
 1604|  38.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  38.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  38.7k|        return this->get_unexpected().error();
 1606|  38.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  38.7k|    {
  468|  38.7k|        return m_unexpected;
  469|  38.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  19.3k|    {
 1476|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  19.3k|    {
  626|  19.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  19.3k|    {
  689|  19.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.3k|                                  std::forward<Args>(args)...);
  691|  19.3k|        m_has_value = false;
  692|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  38.7k|    {
  718|  38.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  38.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  38.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  38.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.7M|    {
 1177|  10.7M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  17.1M|    {
 1653|  17.1M|        return value();
 1654|  17.1M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  21.4M|    {
 1627|  21.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  21.4M|        return this->get_value();
 1629|  21.4M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  21.4M|    {
  451|  21.4M|        return m_value;
  452|  21.4M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  10.7M|    {
 5830|  10.7M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  21.4M|    {
 5681|  21.4M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  21.4M|    {
 5616|  21.4M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  10.7M|    {
 1430|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  10.7M|    {
  616|  10.7M|        construct(std::forward<Args>(args)...);
  617|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  10.7M|    {
  682|  10.7M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  10.7M|        m_has_value = true;
  684|  10.7M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  10.7M|{
  392|  10.7M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  10.7M|        T(std::forward<Args>(args)...);
  394|  10.7M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  10.7M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  32.1M|    {
  706|  32.1M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  32.1M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  32.1M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  21.4M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  17.1M|    {
 5374|  17.1M|        return m_args;
 5375|  17.1M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  17.1M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   425M|    {
 3316|   425M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  25.7M|{
 7696|  25.7M|    return s;
 7697|  25.7M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  25.7M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  8.59M|    {
 7971|  8.59M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  10.7M|    {
 1598|  10.7M|        return has_value();
 1599|  10.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  32.1M|    {
  675|  32.1M|        return m_has_value;
  676|  32.1M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  10.7M|    {
 1673|  10.7M|        return &value();
 1674|  10.7M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  10.7M|    {
 1627|  10.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.7M|        return this->get_value();
 1629|  10.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  10.7M|    {
  641|  10.7M|        return *value_ptr();
  642|  10.7M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|  21.4M|    {
 5698|  21.4M|        return ranges::begin(m_range);
 5699|  21.4M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  10.7M|    {
  631|  10.7M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 10.7M, False: 19.3k]
  ------------------
  632|  10.7M|            destroy_value();
  633|  10.7M|        }
  634|  19.3k|        else {
  635|  19.3k|            destroy_unexpected();
  636|  19.3k|        }
  637|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  10.7M|    {
  696|  10.7M|        scn::detail::destroy_at(value_ptr());
  697|  10.7M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  10.7M|{
  398|  10.7M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  10.7M|        for (auto& elem : *p) {
  400|  10.7M|            scn::detail::destroy_at(&elem);
  401|  10.7M|        }
  402|  10.7M|    }
  403|  10.7M|    else {
  404|  10.7M|        p->~T();
  405|  10.7M|    }
  406|  10.7M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.3k|    {
  700|  19.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  8.59M|{
 8607|  8.59M|#if !SCN_DISABLE_LOCALE
 8608|  8.59M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  8.59M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  8.59M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  8.59M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  8.59M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 8.57M]
  |  |  ------------------
  ------------------
 8615|  17.9k|        return unexpected(result.error());
 8616|  17.9k|    }
 8617|  8.57M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  8.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  8.59M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  4.29M|{
 5155|  4.29M|    check_scan_arg_types<T>();
 5156|       |
 5157|  4.29M|    basic_scan_arg<Context> arg;
 5158|  4.29M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  4.29M|    arg.m_value = make_value<Context>(value);
 5160|  4.29M|    return arg;
 5161|  4.29M|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  32.2M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  4.29M|{
 8631|  4.29M|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  4.29M|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  4.29M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 4.28M]
  |  |  ------------------
  ------------------
 8635|  2.98k|        return unexpected(result.error());
 8636|  2.98k|    }
 8637|  4.28M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  4.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  4.29M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.28M|    {
 1663|  4.28M|        return std::move(value());
 1664|  4.28M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  8.59M|{
 5396|  8.59M|    detail::check_scan_arg_types<Args...>();
 5397|  8.59M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  8.59M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  10.7M|{
 5135|  10.7M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  10.7M|                  "Scan argument types must be default constructible");
 5137|  10.7M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  10.7M|                  "Scan argument types must be Destructible");
 5139|  10.7M|    static_assert(
 5140|  10.7M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  10.7M|        "Scan argument types must not be references");
 5142|  10.7M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  8.59M|    {
 5349|  8.59M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  8.59M|    {
 5360|  8.59M|        return {detail::make_arg<
 5361|  8.59M|            kind, Context,
 5362|  8.59M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  8.59M|                                 typename Context::char_type>::value>(args)...};
 5364|  8.59M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  8.59M|{
 5170|  8.59M|    return make_value<Context>(value).ref_value;
 5171|  8.59M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  10.7M|{
 5120|  10.7M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  10.7M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  10.7M|                                  needs_context_tag>) {
 5124|  10.7M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  10.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  10.7M|    }
 5126|  10.7M|    else {
 5127|  10.7M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  10.7M|            value, context_tag<Context>{}));
 5129|  10.7M|    }
 5130|  10.7M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  10.7M|    {                                                                        \
 4959|  10.7M|        return val;                                                          \
 4960|  10.7M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  10.7M|{
 5089|  10.7M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  10.7M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  10.7M|    constexpr bool scannable_char =
 5093|  10.7M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  10.7M|    static_assert(scannable_char,
 5095|  10.7M|                  "Cannot scan an argument of an unsupported character "
 5096|  10.7M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  10.7M|    constexpr bool scannable_const =
 5099|  10.7M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  10.7M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  10.7M|    constexpr bool scannable_disabled =
 5103|  10.7M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  10.7M|    static_assert(scannable_disabled,
 5105|  10.7M|                  "Cannot scan an argument that has been disabled by "
 5106|  10.7M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  10.7M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  10.7M|    static_assert(
 5110|  10.7M|        scannable,
 5111|  10.7M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  10.7M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  10.7M|    return arg_value{arg};
 5115|  10.7M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  10.7M|    {
 4902|  10.7M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7974|  8.59M|    {
 7975|  8.59M|        return m_str;
 7976|  8.59M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  8.59M|    {
 5426|  8.59M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  8.59M|    {
 5379|  8.59M|        return m_argptrs;
 5380|  8.59M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  8.59M|{
 8820|  8.59M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 8.57M]
  |  |  ------------------
  ------------------
 8821|  17.9k|        return unexpected(result.error());
 8822|  17.9k|    }
 8823|  8.57M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  8.57M|    static_cast<    \
  |  |  929|  8.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  8.57M|    static_cast<    \
  |  |  929|  8.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  8.59M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  19.3k|    {
 1476|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  19.3k|    {
  447|  19.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.7M|    {
 1177|  10.7M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  10.7M|    {
 5830|  10.7M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  10.7M|    {
 5616|  10.7M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  10.7M|    {
 1430|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  10.7M|    {
  437|  10.7M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  8.59M|    {
 5374|  8.59M|        return m_args;
 5375|  8.59M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  8.59M|    {
 7971|  8.59M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  10.7M|    {
 1598|  10.7M|        return has_value();
 1599|  10.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  21.4M|    {
  485|  21.4M|        return m_has_value;
  486|  21.4M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  10.7M|    {
 1673|  10.7M|        return &value();
 1674|  10.7M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|  10.7M|    {
 1627|  10.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.7M|        return this->get_value();
 1629|  10.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  10.7M|    {
  451|  10.7M|        return m_value;
  452|  10.7M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  2.14M|{
 5155|  2.14M|    check_scan_arg_types<T>();
 5156|       |
 5157|  2.14M|    basic_scan_arg<Context> arg;
 5158|  2.14M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  2.14M|    arg.m_value = make_value<Context>(value);
 5160|  2.14M|    return arg;
 5161|  2.14M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  19.3k|    {
 2724|  19.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  19.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  19.3k|    {
 2705|  19.3k|        return decay_copy(t.begin());
 2706|  19.3k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   451M|{
 1949|   451M|    return SCN_FWD(t);
  ------------------
  |  |  930|   451M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   451M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  21.4M|    {
 2781|  21.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  21.4M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  21.4M|    {
 2763|  21.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  21.4M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  4.29M|{
 8591|  4.29M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  4.29M|    auto result = vscan_impl(buffer, format, args);
 8594|  4.29M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 4.28M]
  |  |  ------------------
  ------------------
 8595|  8.95k|        return unexpected(result.error());
 8596|  8.95k|    }
 8597|  4.28M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  4.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  4.29M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|  10.7M|{
 4720|  10.7M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  10.7M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  10.7M|                  "\n"
 4724|  10.7M|                  "Unsupported range type given as input to a scanning "
 4725|  10.7M|                  "function.\n"
 4726|  10.7M|                  "A range needs to have a character type (value type) "
 4727|  10.7M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  10.7M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  10.7M|                  "to be included.\n"
 4730|  10.7M|                  "See the scnlib documentation for more details.");
 4731|  10.7M|    static_assert(
 4732|  10.7M|        !std::is_same_v<T, custom_char_traits>,
 4733|  10.7M|        "\n"
 4734|  10.7M|        "Unsupported range type given as input to a scanning "
 4735|  10.7M|        "function.\n"
 4736|  10.7M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  10.7M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  10.7M|        "not supported.");
 4739|  10.7M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  10.7M|                  "\n"
 4741|  10.7M|                  "Unsupported range type given as input to a scanning "
 4742|  10.7M|                  "function.\n"
 4743|  10.7M|                  "file_marker_found cannot be used as an "
 4744|  10.7M|                  "source range type to scn::scan.\n"
 4745|  10.7M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  10.7M|                  "and do not provide an explicit source range, "
 4747|  10.7M|                  "or use scn::scan with a FILE* directly.");
 4748|  10.7M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  10.7M|                  "\n"
 4750|  10.7M|                  "Unsupported range type given as input to a scanning "
 4751|  10.7M|                  "function.\n"
 4752|  10.7M|                  "In order to be scannable, a range needs to satisfy "
 4753|  10.7M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  10.7M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  10.7M|                  "\n"
 4756|  10.7M|                  "Unsupported range type given as input to a scanning "
 4757|  10.7M|                  "function.\n"
 4758|  10.7M|                  "A range needs to model forward_range and have a valid "
 4759|  10.7M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  10.7M|                  "Examples of scannable ranges are std::string, "
 4761|  10.7M|                  "std::string_view, "
 4762|  10.7M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  10.7M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  10.7M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  10.7M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  10.7M|{
 4690|  10.7M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  10.7M|        return file_marker_found{};
 4692|  10.7M|    }
 4693|  10.7M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  10.7M|        if constexpr (ranges::range<Range>) {
 4695|  10.7M|            return insufficient_range{};
 4696|  10.7M|        }
 4697|  10.7M|        else {
 4698|  10.7M|            return invalid_input_range{};
 4699|  10.7M|        }
 4700|  10.7M|    }
 4701|  10.7M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  10.7M|        return invalid_char_type{};
 4703|  10.7M|    }
 4704|  10.7M|    else {
 4705|  10.7M|        return make_forward_scan_buffer(r);
 4706|  10.7M|    }
 4707|  10.7M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|  10.7M|{
 4524|  10.7M|    return basic_scan_forward_buffer_impl(range);
 4525|  10.7M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  10.7M|    {
 4411|  10.7M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|  10.7M|    {
 4382|  10.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|  10.7M|    {
 4151|  10.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|  10.7M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  21.4M|    {
 2724|  21.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  21.4M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  21.4M|    {
 2705|  21.4M|        return decay_copy(t.begin());
 2706|  21.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  32.1M|    {
 3330|  32.1M|        return m_iterator;
 3331|  32.1M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|   129M|    {
 4415|   129M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 28.4k, False: 129M]
  ------------------
 4416|  28.4k|            return false;
 4417|  28.4k|        }
 4418|   129M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|   129M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|   129M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   129M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|   129M|        }
 4421|   129M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 118M, False: 10.7M]
  ------------------
 4422|   118M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|   118M|                                          this->m_current_view.begin(),
 4424|   118M|                                          this->m_current_view.end());
 4425|   118M|        }
 4426|   129M|        m_latest = *m_cursor;
 4427|   129M|        ++m_cursor;
 4428|   129M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|   129M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|   129M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|   129M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   129M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|   129M|        }
 4432|   129M|        return true;
 4433|   129M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   387M|    {
 2781|   387M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   387M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   387M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   387M|    {
 2763|   387M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   387M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   387M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|   397M|    {
 3334|   397M|        return m_sentinel;
 3335|   397M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|  10.7M|    {
 4071|  10.7M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  10.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  10.7M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  19.3k|    {
 1476|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  19.3k|    {
  447|  19.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.7M|    {
 1177|  10.7M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  10.7M|{
 5923|  10.7M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  10.7M|                      ranges::iterator_t<SourceRange>>) {
 5925|  10.7M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  10.7M|    }
 5927|  10.7M|    else {
 5928|  10.7M|        auto it = ranges::begin(source);
 5929|  10.7M|        while (n > 0) {
 5930|  10.7M|            --n;
 5931|  10.7M|            ++it;
 5932|  10.7M|        }
 5933|  10.7M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  10.7M|    }
 5935|  10.7M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  10.7M|    {
 2724|  10.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  10.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  10.7M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  10.7M|    {
 2705|  10.7M|        return decay_copy(t.begin());
 2706|  10.7M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|  10.7M|{
 5910|  10.7M|    return ranges::end(source);
 5911|  10.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  10.7M|    {
 2781|  10.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  10.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  10.7M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  10.7M|    {
 2763|  10.7M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  10.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  10.7M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  10.7M|    {
 1430|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  10.7M|    {
  437|  10.7M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7974|  8.59M|    {
 7975|  8.59M|        return m_str;
 7976|  8.59M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|  8.59M|{
 8820|  8.59M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 8.57M]
  |  |  ------------------
  ------------------
 8821|  17.9k|        return unexpected(result.error());
 8822|  17.9k|    }
 8823|  8.57M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  8.57M|    static_cast<    \
  |  |  929|  8.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  8.57M|    static_cast<    \
  |  |  929|  8.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  8.59M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  10.7M|    {
 1598|  10.7M|        return has_value();
 1599|  10.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  21.4M|    {
  485|  21.4M|        return m_has_value;
  486|  21.4M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  19.3k|    {
 1604|  19.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.3k|        return this->get_unexpected().error();
 1606|  19.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  19.3k|    {
  468|  19.3k|        return m_unexpected;
  469|  19.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  19.3k|    {
 1476|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  19.3k|    {
  626|  19.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  19.3k|    {
  689|  19.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  19.3k|                                  std::forward<Args>(args)...);
  691|  19.3k|        m_has_value = false;
  692|  19.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  38.7k|    {
  718|  38.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  38.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  38.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  38.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.7M|    {
 1177|  10.7M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  8.57M|    {
 1653|  8.57M|        return value();
 1654|  8.57M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  10.7M|    {
 1627|  10.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.7M|        return this->get_value();
 1629|  10.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  10.7M|    {
  451|  10.7M|        return m_value;
  452|  10.7M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|  10.7M|    {
 5830|  10.7M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|  10.7M|    {
 5681|  10.7M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|  10.7M|    {
 1430|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|  10.7M|    {
  616|  10.7M|        construct(std::forward<Args>(args)...);
  617|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  10.7M|    {
  682|  10.7M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  10.7M|        m_has_value = true;
  684|  10.7M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  10.7M|{
  392|  10.7M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  10.7M|        T(std::forward<Args>(args)...);
  394|  10.7M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5821|  10.7M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  32.1M|    {
  706|  32.1M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  32.1M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  32.1M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5825|  21.4M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  21.4M|    {
 3316|  21.4M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  8.59M|    {
 7971|  8.59M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  10.7M|    {
 1598|  10.7M|        return has_value();
 1599|  10.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  32.1M|    {
  675|  32.1M|        return m_has_value;
  676|  32.1M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  10.7M|    {
 1673|  10.7M|        return &value();
 1674|  10.7M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|  10.7M|    {
 1627|  10.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.7M|        return this->get_value();
 1629|  10.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  10.7M|    {
  641|  10.7M|        return *value_ptr();
  642|  10.7M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|  10.7M|    {
 5698|  10.7M|        return ranges::begin(m_range);
 5699|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  10.7M|    {
  631|  10.7M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 10.7M, False: 19.3k]
  ------------------
  632|  10.7M|            destroy_value();
  633|  10.7M|        }
  634|  19.3k|        else {
  635|  19.3k|            destroy_unexpected();
  636|  19.3k|        }
  637|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  10.7M|    {
  696|  10.7M|        scn::detail::destroy_at(value_ptr());
  697|  10.7M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|  10.7M|{
  398|  10.7M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  10.7M|        for (auto& elem : *p) {
  400|  10.7M|            scn::detail::destroy_at(&elem);
  401|  10.7M|        }
  402|  10.7M|    }
  403|  10.7M|    else {
  404|  10.7M|        p->~T();
  405|  10.7M|    }
  406|  10.7M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  19.3k|    {
  700|  19.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  19.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  4.29M|{
 8607|  4.29M|#if !SCN_DISABLE_LOCALE
 8608|  4.29M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  4.29M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  4.29M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  4.29M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  4.29M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 4.28M]
  |  |  ------------------
  ------------------
 8615|  8.95k|        return unexpected(result.error());
 8616|  8.95k|    }
 8617|  4.28M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  4.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  4.29M|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  2.14M|{
 8631|  2.14M|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  2.14M|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  2.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 2.14M]
  |  |  ------------------
  ------------------
 8635|  1.49k|        return unexpected(result.error());
 8636|  1.49k|    }
 8637|  2.14M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  2.14M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  2.14M|    {
 1663|  2.14M|        return std::move(value());
 1664|  2.14M|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   114k|    {
 3568|   114k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   114k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   114k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  99.7M|    {
 3574|  99.7M|        return m_code == good;
 3575|  99.7M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|  40.2k|    {
 3585|  40.2k|        return m_code;
 3586|  40.2k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  3.73M|    {
 3330|  3.73M|        return m_iterator;
 3331|  3.73M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   481M|    {
 3330|   481M|        return m_iterator;
 3331|   481M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  13.0M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  26.8k|    {
 6282|  26.8k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 26.8k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  26.8k|        m_specs.width = width;
 6289|  26.8k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  13.0M|    {
 6303|  13.0M|        m_specs.type = type;
 6304|  13.0M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  30.8k|    {
 6320|  30.8k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  30.8k|        const auto end_value = static_cast<unsigned>(end);
 6322|  30.8k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  30.8k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  30.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.8k, False: 0]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  30.8k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  30.8k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   833k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 802k, False: 30.8k]
  ------------------
 6329|   802k|                m_specs.charset_literals[v / 8] |=
 6330|   802k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   802k|            }
 6332|  30.8k|        }
 6333|      0|        else {
 6334|      0|            m_specs.charset_has_nonascii = true;
 6335|      0|        }
 6336|  30.8k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  26.8k|    {
 6365|  26.8k|        SCN_UNLIKELY_ATTR
 6366|  26.8k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  26.8k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  13.0M|    {
 6376|  13.0M|        return static_cast<bool>(m_error);
 6377|  13.0M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|  40.2k|{
 3609|  40.2k|    return a.code() == b;
 3610|  40.2k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|  40.2k|{
 3613|  40.2k|    return !(a == b);
 3614|  40.2k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  13.4k|{
 7063|  13.4k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 13.4k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 13.4k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 13.4k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 13.4k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 13.4k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 13.4k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 13.4k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 13.4k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 13.4k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 13.4k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 13.4k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 13.4k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 13.4k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 13.4k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 13.4k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 13.4k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 13.4k]
  ------------------
 7091|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 13.4k]
  ------------------
 7092|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 13.4k]
  ------------------
 7093|      0|            return arg_type_category::floating;
 7094|       |
 7095|  1.49k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 1.49k, False: 11.9k]
  ------------------
 7096|  4.47k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 2.98k, False: 10.4k]
  ------------------
 7097|  7.46k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 2.98k, False: 10.4k]
  ------------------
 7098|  13.4k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 5.96k, False: 7.46k]
  ------------------
 7099|  13.4k|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 13.4k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 13.4k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  13.4k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  13.4k|            SCN_CLANG_POP
 7110|  13.4k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  13.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  13.4k|{
 3654|  13.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  13.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  10.4k|{
 3654|  10.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  10.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  5.30k|{
 3654|  5.30k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.30k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  13.0M|{
 7205|  13.0M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 0, False: 13.0M]
  ------------------
 7206|  13.0M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 12.9M, False: 28.8k]
  ------------------
 7207|  13.0M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 15.4k, False: 13.4k]
  ------------------
 7208|  13.0M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 0, False: 13.4k]
  ------------------
 7209|  13.0M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 0, False: 13.4k]
  ------------------
 7210|  12.9M|        return;
 7211|  12.9M|    }
 7212|  13.4k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 13.4k, False: 0]
  ------------------
 7213|  13.4k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.4k, False: 0]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|  13.4k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|  13.4k|        }
 7218|      0|        return;
 7219|  13.4k|    }
 7220|      0|    SCN_UNLIKELY_ATTR
 7221|      0|    handler.on_error("Invalid type specifier for string");
 7222|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|  21.5M|    {
 4195|  21.5M|        return m_end == nullptr;
 4196|  21.5M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  85.3k|{
 3715|  85.3k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  85.3k|                                          const CharT*, const CharT*>) {
 3717|  85.3k|        return {first, last};
 3718|  85.3k|    }
 3719|  85.3k|    else {
 3720|  85.3k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  85.3k|    }
 3722|  85.3k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|   444k|    {
 4211|   444k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 444k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   444k|        return parent()->get_segment_starting_at(position());
 4217|   444k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|  12.5M|    {
 4205|  12.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  12.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  12.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  12.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|   444k|    {
 4101|   444k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 256k, False: 188k]
  |  |  ------------------
  ------------------
 4102|   444k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   256k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   256k|        }
 4105|   188k|        const auto start = pos - m_putback_buffer.size();
 4106|   188k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   188k|        return m_current_view.substr(start);
 4108|   188k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|   502k|    {
 4190|   502k|        return m_position;
 4191|   502k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|   288k|    {
 4123|   288k|        return m_is_contiguous;
 4124|   288k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  2.38G|    {
 4195|  2.38G|        return m_end == nullptr;
 4196|  2.38G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  10.7M|{
 3715|  10.7M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  10.7M|                                          const CharT*, const CharT*>) {
 3717|  10.7M|        return {first, last};
 3718|  10.7M|    }
 3719|  10.7M|    else {
 3720|  10.7M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  10.7M|    }
 3722|  10.7M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  32.1M|    {
 4211|  32.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 32.1M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  32.1M|        return parent()->get_segment_starting_at(position());
 4217|  32.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  1.38G|    {
 4205|  1.38G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.38G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.38G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  1.38G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  1.38G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  32.1M|    {
 4101|  32.1M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  32.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.4M, False: 10.7M]
  |  |  ------------------
  ------------------
 4102|  32.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  21.4M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  21.4M|        }
 4105|  10.7M|        const auto start = pos - m_putback_buffer.size();
 4106|  10.7M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  10.7M|        return m_current_view.substr(start);
 4108|  10.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  38.6M|    {
 4190|  38.6M|        return m_position;
 4191|  38.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  32.2M|    {
 4123|  32.2M|        return m_is_contiguous;
 4124|  32.2M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.03M|    {
 3180|  1.03M|        return static_cast<D&>(*this);
 3181|  1.03M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   516k|    {
 2978|   516k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   516k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   516k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   516k|    {
 3005|   516k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   516k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   516k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|   516k|    {
 3221|   516k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 640, False: 515k]
  ------------------
 3222|   516k|                   ? nullptr
 3223|   516k|                   : std::addressof(*ranges::begin(derived()));
 3224|   516k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  42.8M|    {
 3180|  42.8M|        return static_cast<D&>(*this);
 3181|  42.8M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  21.4M|    {
 2978|  21.4M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  21.4M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  21.4M|    {
 3005|  21.4M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  21.4M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  21.4M|    {
 3221|  21.4M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 21.4M]
  ------------------
 3222|  21.4M|                   ? nullptr
 3223|  21.4M|                   : std::addressof(*ranges::begin(derived()));
 3224|  21.4M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  39.2k|    {
 8169|  39.2k|        return ranges::subrange{begin(), end()};
 8170|  39.2k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|   116k|    {
 8153|   116k|        return m_current;
 8154|   116k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  39.2k|    {
 8161|  39.2k|        return ranges::default_sentinel;
 8162|  39.2k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  1.36M|    {
 3316|  1.36M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  32.4M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  89.4k|    {
 1837|  89.4k|        return detail::transform_error_impl(std::move(*this),
 1838|  89.4k|                                            std::forward<F>(f));
 1839|  89.4k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  89.4k|{
 1323|  89.4k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  89.4k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  89.4k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  89.4k|            return result(*std::forward<Exp>(exp));
 1327|  89.4k|        }
 1328|       |
 1329|  89.4k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  89.4k|        return result(unexpect, monostate{});
 1331|  89.4k|    }
 1332|  89.4k|    else {
 1333|  89.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  89.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  89.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 87.6k, False: 1.76k]
  |  |  ------------------
  ------------------
 1335|  89.4k|                   ? result(*std::forward<Exp>(exp))
 1336|  89.4k|                   : result(unexpect,
 1337|  1.76k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.76k|                                           std::forward<Exp>(exp).error()));
 1339|  89.4k|    }
 1340|  89.4k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   178k|    {
  485|   178k|        return m_has_value;
  486|   178k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  87.6k|    {
 1663|  87.6k|        return std::move(value());
 1664|  87.6k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  87.6k|    {
 1627|  87.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  87.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  87.6k|        return this->get_value();
 1629|  87.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  87.6k|    {
  451|  87.6k|        return m_value;
  452|  87.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|   208k|    {
 1430|   208k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   208k|    {
  437|   208k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   221k|    {
 1177|   221k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  17.7k|{
 1211|  17.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  17.7k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  1.76k|    {
 1614|  1.76k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  1.76k|        return std::move(this->get_unexpected().error());
 1616|  1.76k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  1.76k|    {
  468|  1.76k|        return m_unexpected;
  469|  1.76k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  35.5k|    {
  361|  35.5k|        return m_unexpected;
  362|  35.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.76k|    {
 1486|  1.76k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  12.2k|    {
  447|  12.2k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|  4.29M|    {
 8169|  4.29M|        return ranges::subrange{begin(), end()};
 8170|  4.29M|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  12.8M|    {
 8153|  12.8M|        return m_current;
 8154|  12.8M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|  4.29M|    {
 8161|  4.29M|        return ranges::default_sentinel;
 8162|  4.29M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|   180M|    {
 3316|   180M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  10.7M|    {
 1837|  10.7M|        return detail::transform_error_impl(std::move(*this),
 1838|  10.7M|                                            std::forward<F>(f));
 1839|  10.7M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  10.7M|{
 1323|  10.7M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  10.7M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  10.7M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  10.7M|            return result(*std::forward<Exp>(exp));
 1327|  10.7M|        }
 1328|       |
 1329|  10.7M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  10.7M|        return result(unexpect, monostate{});
 1331|  10.7M|    }
 1332|  10.7M|    else {
 1333|  10.7M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  10.7M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  10.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.7M, False: 4.24k]
  |  |  ------------------
  ------------------
 1335|  10.7M|                   ? result(*std::forward<Exp>(exp))
 1336|  10.7M|                   : result(unexpect,
 1337|  4.24k|                            trivial_invoke(std::forward<F>(f),
 1338|  4.24k|                                           std::forward<Exp>(exp).error()));
 1339|  10.7M|    }
 1340|  10.7M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  21.4M|    {
  485|  21.4M|        return m_has_value;
  486|  21.4M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  10.7M|    {
 1663|  10.7M|        return std::move(value());
 1664|  10.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  10.7M|    {
 1627|  10.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  10.7M|        return this->get_value();
 1629|  10.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  10.7M|    {
  451|  10.7M|        return m_value;
  452|  10.7M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  25.7M|    {
 1430|  25.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  25.7M|    {
  437|  25.7M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  25.7M|    {
 1177|  25.7M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  4.24k|    {
 1614|  4.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  4.24k|        return std::move(this->get_unexpected().error());
 1616|  4.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  4.24k|    {
  468|  4.24k|        return m_unexpected;
  469|  4.24k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  4.24k|    {
 1486|  4.24k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  24.9k|    {
  447|  24.9k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  29.2k|    {
  347|  29.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  29.2k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  21.0k|    {
 1476|  21.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  24.3k|    {
  447|  24.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   432k|    {
 1177|   432k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|   406k|    {
 1430|   406k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   406k|    {
  437|   406k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   432k|    {
 1598|   432k|        return has_value();
 1599|   432k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   864k|    {
  485|   864k|        return m_has_value;
  486|   864k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  24.3k|    {
 1604|  24.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  24.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  24.3k|        return this->get_unexpected().error();
 1606|  24.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  24.3k|    {
  468|  24.3k|        return m_unexpected;
  469|  24.3k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   338k|    {
 1663|   338k|        return std::move(value());
 1664|   338k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   408k|    {
 1627|   408k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   408k|        return this->get_value();
 1629|   408k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   408k|    {
  451|   408k|        return m_value;
  452|   408k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  41.3k|    {
 1476|  41.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  49.8k|    {
  447|  49.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  51.5M|    {
 1177|  51.5M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  51.4M|    {
 1430|  51.4M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  51.4M|    {
  437|  51.4M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  51.5M|    {
 1598|  51.5M|        return has_value();
 1599|  51.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   103M|    {
  485|   103M|        return m_has_value;
  486|   103M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  49.8k|    {
 1604|  49.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  49.8k|        return this->get_unexpected().error();
 1606|  49.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  49.8k|    {
  468|  49.8k|        return m_unexpected;
  469|  49.8k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  42.8M|    {
 1663|  42.8M|        return std::move(value());
 1664|  42.8M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  51.4M|    {
 1627|  51.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  51.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  51.4M|        return this->get_value();
 1629|  51.4M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  51.4M|    {
  451|  51.4M|        return m_value;
  452|  51.4M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   174k|    {
 1837|   174k|        return detail::transform_error_impl(std::move(*this),
 1838|   174k|                                            std::forward<F>(f));
 1839|   174k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   174k|{
 1323|   174k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   174k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   174k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   174k|            return result(*std::forward<Exp>(exp));
 1327|   174k|        }
 1328|       |
 1329|   174k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   174k|        return result(unexpect, monostate{});
 1331|   174k|    }
 1332|   174k|    else {
 1333|   174k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   174k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   174k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 170k, False: 3.29k]
  |  |  ------------------
  ------------------
 1335|   174k|                   ? result(*std::forward<Exp>(exp))
 1336|   174k|                   : result(unexpect,
 1337|  3.29k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.29k|                                           std::forward<Exp>(exp).error()));
 1339|   174k|    }
 1340|   174k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   348k|    {
  485|   348k|        return m_has_value;
  486|   348k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|   170k|    {
 1663|   170k|        return std::move(value());
 1664|   170k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|   170k|    {
 1627|   170k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   170k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   170k|        return this->get_value();
 1629|   170k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   170k|    {
  451|   170k|        return m_value;
  452|   170k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  3.29k|    {
 1614|  3.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  3.29k|        return std::move(this->get_unexpected().error());
 1616|  3.29k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  3.29k|    {
  468|  3.29k|        return m_unexpected;
  469|  3.29k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  3.29k|    {
 1486|  3.29k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  73.6M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  10.4k|    {
 1476|  10.4k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  1.06M|    {
 4280|  1.06M|        return x.is_at_end();
 4281|  1.06M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  2.26M|    {
 4324|  2.26M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 2.26M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  2.26M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 2.26M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  2.26M|        return !read_at_position();
 4331|  2.26M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|  6.45M|    {
 4304|  6.45M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  6.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  6.45M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 6.45M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  6.45M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  6.45M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.27M, False: 1.17M]
  |  |  ------------------
  ------------------
 4311|  5.27M|            return true;
 4312|  5.27M|        }
 4313|       |
 4314|  2.34M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 1.17M, False: 1.16M]
  ------------------
 4315|  1.17M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 13.0k, False: 1.16M]
  ------------------
 4316|  13.0k|                return false;
 4317|  13.0k|            }
 4318|  1.17M|        }
 4319|  1.16M|        return true;
 4320|  1.17M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|  8.80M|    {
 4081|  8.80M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  8.80M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  2.09M|    {
 4239|  2.09M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  2.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  2.09M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 2.09M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  2.09M|        auto res = read_at_position();
 4248|  2.09M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  2.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  2.09M|        return parent()->get_character_at(m_position);
 4250|  2.09M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  2.09M|    {
 4112|  2.09M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.18M, False: 915k]
  |  |  ------------------
  ------------------
 4113|  2.09M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  1.18M|            return m_putback_buffer[pos];
 4115|  1.18M|        }
 4116|   915k|        const auto start = pos - m_putback_buffer.size();
 4117|   915k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   915k|        return m_current_view[start];
 4119|   915k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  87.6k|    {
 1430|  87.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  87.6k|    {
  437|  87.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  89.4k|    {
 1177|  89.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.76k|    {
 1476|  1.76k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  1.76k|    {
  447|  1.76k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  17.7k|    {
  356|  17.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  17.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  17.7k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  1.04M|    {
 4274|  1.04M|        return !(lhs == rhs);
 4275|  1.04M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  1.04M|    {
 4269|  1.04M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 1.04M, False: 0]
  |  Branch (4269:46): [True: 191k, False: 854k]
  ------------------
 4270|  1.04M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  2.09M|    {
 4225|  2.09M|        ++m_position;
 4226|  2.09M|        (void)read_at_position();
 4227|  2.09M|        return *this;
 4228|  2.09M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  17.7k|    {
  347|  17.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  17.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  17.7k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    734|    {
 1476|    734|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    734|    {
  447|    734|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  72.2k|    {
 1177|  72.2k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  71.5k|    {
 1430|  71.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  71.5k|    {
  437|  71.5k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  72.2k|    {
 1598|  72.2k|        return has_value();
 1599|  72.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   144k|    {
  485|   144k|        return m_has_value;
  486|   144k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|    734|    {
 1604|    734|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    734|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    734|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    734|        return this->get_unexpected().error();
 1606|    734|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    734|    {
  468|    734|        return m_unexpected;
  469|    734|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  71.5k|    {
 1663|  71.5k|        return std::move(value());
 1664|  71.5k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  71.5k|    {
 1627|  71.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  71.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  71.5k|        return this->get_value();
 1629|  71.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  71.5k|    {
  451|  71.5k|        return m_value;
  452|  71.5k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  3.36M|    {
 3334|  3.36M|        return m_sentinel;
 3335|  3.36M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  94.2k|    {
 3330|  94.2k|        return m_iterator;
 3331|  94.2k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  94.2k|    {
 3334|  94.2k|        return m_sentinel;
 3335|  94.2k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   221k|    {
 1598|   221k|        return has_value();
 1599|   221k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   443k|    {
  485|   443k|        return m_has_value;
  486|   443k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  12.2k|    {
 1604|  12.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  12.2k|        return this->get_unexpected().error();
 1606|  12.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  12.2k|    {
  468|  12.2k|        return m_unexpected;
  469|  12.2k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   174k|    {
 1663|   174k|        return std::move(value());
 1664|   174k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   209k|    {
 1627|   209k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   209k|        return this->get_value();
 1629|   209k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   209k|    {
  451|   209k|        return m_value;
  452|   209k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   176k|{
  326|   176k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   176k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  88.3k|    {
 3316|  88.3k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.20M|    {
 4291|  1.20M|        return !x.is_at_end();
 4292|  1.20M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  3.29k|    {
 1476|  3.29k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  3.29k|    {
  447|  3.29k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   174k|    {
 1177|   174k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|   170k|    {
 1430|   170k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   170k|    {
  437|   170k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.31k|    {
 1476|  1.31k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  1.31k|    {
  447|  1.31k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   141k|    {
 1177|   141k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   139k|    {
 1430|   139k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   139k|    {
  437|   139k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   141k|    {
 1598|   141k|        return has_value();
 1599|   141k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   282k|    {
  485|   282k|        return m_has_value;
  486|   282k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  1.31k|    {
 1604|  1.31k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.31k|        return this->get_unexpected().error();
 1606|  1.31k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.31k|    {
  468|  1.31k|        return m_unexpected;
  469|  1.31k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   139k|    {
 1663|   139k|        return std::move(value());
 1664|   139k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   139k|    {
 1627|   139k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   139k|        return this->get_value();
 1629|   139k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   139k|    {
  451|   139k|        return m_value;
  452|   139k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   516k|    {
 2855|   516k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   516k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   516k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   516k|    {
 2836|   516k|        return t.data();
 2837|   516k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|  87.2k|    {
 1476|  87.2k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|  87.2k|    {
  447|  87.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  32.4M|    {
 1177|  32.4M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  32.4M|    {
 1430|  32.4M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  32.4M|    {
  437|  32.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  35.4k|    {
 1653|  35.4k|        return value();
 1654|  35.4k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  69.2k|    {
 1653|  69.2k|        return value();
 1654|  69.2k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|    638|    {
 1430|    638|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|    638|    {
  437|    638|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.27k|    {
 1430|  1.27k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.27k|    {
  437|  1.27k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  20.6k|    {
 1476|  20.6k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|   146M|    {
 4280|   146M|        return x.is_at_end();
 4281|   146M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|   279M|    {
 4324|   279M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 279M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|   279M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 279M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|   279M|        return !read_at_position();
 4331|   279M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|   710M|    {
 4304|   710M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   710M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   710M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   710M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 710M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   710M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   710M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 581M, False: 129M]
  |  |  ------------------
  ------------------
 4311|   581M|            return true;
 4312|   581M|        }
 4313|       |
 4314|   258M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 129M, False: 129M]
  ------------------
 4315|   129M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 28.4k, False: 129M]
  ------------------
 4316|  28.4k|                return false;
 4317|  28.4k|            }
 4318|   129M|        }
 4319|   129M|        return true;
 4320|   129M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|   968M|    {
 4081|   968M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   968M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|   258M|    {
 4239|   258M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   258M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   258M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|   258M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 258M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|   258M|        auto res = read_at_position();
 4248|   258M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   258M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   258M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|   258M|        return parent()->get_character_at(m_position);
 4250|   258M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|   258M|    {
 4112|   258M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   258M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140M, False: 118M]
  |  |  ------------------
  ------------------
 4113|   258M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|   140M|            return m_putback_buffer[pos];
 4115|   140M|        }
 4116|   118M|        const auto start = pos - m_putback_buffer.size();
 4117|   118M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   118M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   118M|        return m_current_view[start];
 4119|   118M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   656M|{
 3807|   656M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   656M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   656M|    }
 3810|   656M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   656M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   656M|    }
 3813|   656M|    else {
 3814|       |        // utf-32
 3815|   656M|        static_assert(sizeof(U) == 4);
 3816|   656M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   656M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   656M|        return 1;
 3818|   656M|    }
 3819|   656M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  10.7M|    {
 1430|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  10.7M|    {
  437|  10.7M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.7M|    {
 1177|  10.7M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  4.24k|    {
 1476|  4.24k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  4.24k|    {
  447|  4.24k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  47.5M|    {
 4274|  47.5M|        return !(lhs == rhs);
 4275|  47.5M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  47.5M|    {
 4269|  47.5M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 47.5M, False: 0]
  |  Branch (4269:46): [True: 4.29M, False: 43.2M]
  ------------------
 4270|  47.5M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|   172M|    {
 4225|   172M|        ++m_position;
 4226|   172M|        (void)read_at_position();
 4227|   172M|        return *this;
 4228|   172M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   656M|{
 4013|   656M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   656M|        return decode_utf8_code_point_exhaustive(input);
 4015|   656M|    }
 4016|   656M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   656M|        return decode_utf16_code_point_exhaustive(input);
 4018|   656M|    }
 4019|   656M|    else {
 4020|   656M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   656M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   656M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   656M|        auto cp = static_cast<char32_t>(input.front());
 4022|   656M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   656M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 710k, False: 655M]
  |  |  ------------------
  ------------------
 4023|   710k|            return invalid_code_point;
 4024|   710k|        }
 4025|   655M|        return cp;
 4026|   656M|    }
 4027|   656M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.69k|    {
 1476|  1.69k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.69k|    {
  447|  1.69k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.58M|    {
 1177|  8.58M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  8.57M|    {
 1430|  8.57M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  8.57M|    {
  437|  8.57M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  8.58M|    {
 1598|  8.58M|        return has_value();
 1599|  8.58M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  17.1M|    {
  485|  17.1M|        return m_has_value;
  486|  17.1M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.69k|    {
 1604|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.69k|        return this->get_unexpected().error();
 1606|  1.69k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.69k|    {
  468|  1.69k|        return m_unexpected;
  469|  1.69k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  8.57M|    {
 1663|  8.57M|        return std::move(value());
 1664|  8.57M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  8.57M|    {
 1627|  8.57M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  8.57M|        return this->get_value();
 1629|  8.57M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  8.57M|    {
  451|  8.57M|        return m_value;
  452|  8.57M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|   444M|    {
 3334|   444M|        return m_sentinel;
 3335|   444M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|  10.7M|    {
 3330|  10.7M|        return m_iterator;
 3331|  10.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|  10.7M|    {
 3334|  10.7M|        return m_sentinel;
 3335|  10.7M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  25.7M|    {
 1598|  25.7M|        return has_value();
 1599|  25.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  51.5M|    {
  485|  51.5M|        return m_has_value;
  486|  51.5M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  24.9k|    {
 1604|  24.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  24.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  24.9k|        return this->get_unexpected().error();
 1606|  24.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  24.9k|    {
  468|  24.9k|        return m_unexpected;
  469|  24.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  21.4M|    {
 1663|  21.4M|        return std::move(value());
 1664|  21.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  25.7M|    {
 1627|  25.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  25.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  25.7M|        return this->get_value();
 1629|  25.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  25.7M|    {
  451|  25.7M|        return m_value;
  452|  25.7M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|   269M|{
 3699|   269M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|   269M|                                          decltype(first), decltype(last)> &&
 3701|   269M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|   269M|        return {first, last};
 3703|   269M|    }
 3704|   269M|    else {
 3705|   269M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|   269M|                                       to_address(first), to_address(last)))};
 3707|   269M|    }
 3708|   269M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   808M|{
  326|   808M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   808M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   808M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   829M|{
  304|   829M|    return p;
  305|   829M|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  21.4M|{
  326|  21.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  21.4M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  10.7M|    {
 3316|  10.7M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|   133M|    {
 4291|   133M|        return !x.is_at_end();
 4292|   133M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  8.49k|    {
 1476|  8.49k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  8.49k|    {
  447|  8.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.4M|    {
 1177|  21.4M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  21.4M|    {
 1430|  21.4M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  21.4M|    {
  437|  21.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  42.9M|    {
  485|  42.9M|        return m_has_value;
  486|  42.9M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  21.4M|    {
 1627|  21.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  21.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  21.4M|        return this->get_value();
 1629|  21.4M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  21.4M|    {
  451|  21.4M|        return m_value;
  452|  21.4M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  3.39k|    {
 1476|  3.39k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  3.39k|    {
  447|  3.39k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.1M|    {
 1177|  17.1M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  17.1M|    {
 1430|  17.1M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  17.1M|    {
  437|  17.1M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  21.4M|    {
 1837|  21.4M|        return detail::transform_error_impl(std::move(*this),
 1838|  21.4M|                                            std::forward<F>(f));
 1839|  21.4M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  21.4M|{
 1323|  21.4M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  21.4M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  21.4M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  21.4M|            return result(*std::forward<Exp>(exp));
 1327|  21.4M|        }
 1328|       |
 1329|  21.4M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  21.4M|        return result(unexpect, monostate{});
 1331|  21.4M|    }
 1332|  21.4M|    else {
 1333|  21.4M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  21.4M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  21.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 21.4M, False: 8.49k]
  |  |  ------------------
  ------------------
 1335|  21.4M|                   ? result(*std::forward<Exp>(exp))
 1336|  21.4M|                   : result(unexpect,
 1337|  8.49k|                            trivial_invoke(std::forward<F>(f),
 1338|  8.49k|                                           std::forward<Exp>(exp).error()));
 1339|  21.4M|    }
 1340|  21.4M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  21.4M|    {
 1663|  21.4M|        return std::move(value());
 1664|  21.4M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  8.49k|    {
 1614|  8.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  8.49k|        return std::move(this->get_unexpected().error());
 1616|  8.49k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  8.49k|    {
  468|  8.49k|        return m_unexpected;
  469|  8.49k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  8.49k|    {
 1486|  8.49k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  17.1M|    {
 1598|  17.1M|        return has_value();
 1599|  17.1M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.3M|    {
  485|  34.3M|        return m_has_value;
  486|  34.3M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  3.39k|    {
 1604|  3.39k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.39k|        return this->get_unexpected().error();
 1606|  3.39k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.39k|    {
  468|  3.39k|        return m_unexpected;
  469|  3.39k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  17.1M|    {
 1663|  17.1M|        return std::move(value());
 1664|  17.1M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  17.1M|    {
 1627|  17.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  17.1M|        return this->get_value();
 1629|  17.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  17.1M|    {
  451|  17.1M|        return m_value;
  452|  17.1M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  21.4M|    {
 2855|  21.4M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  21.4M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  21.4M|    {
 2836|  21.4M|        return t.data();
 2837|  21.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  4.28M|    {
 1653|  4.28M|        return value();
 1654|  4.28M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  8.57M|    {
 1653|  8.57M|        return value();
 1654|  8.57M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|     32|    {
 1430|     32|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|     32|    {
  437|     32|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|     64|    {
 1430|     64|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|     64|    {
  437|     64|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   230k|    {
 5466|   230k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 230k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   230k|        return static_cast<std::size_t>(m_desc &
 5471|   230k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   230k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   461k|    {
 5491|   461k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   461k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   230k|    {
 5434|   230k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 230k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   230k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 230k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   230k|        const auto t = type(id);
 5446|   230k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 230k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   230k|        basic_scan_arg<Context> arg;
 5451|   230k|        arg.m_type = t;
 5452|   230k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 230k, False: 0]
  ------------------
 5453|   230k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   230k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   230k|        return arg;
 5459|   230k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   230k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   230k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   230k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   230k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   230k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   230k|    {
 5495|   230k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   230k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   399k|    {
 5247|   399k|        return m_type != detail::arg_type::none_type;
 5248|   399k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   104k|{
 8417|   104k|#define SCN_VISIT(Type)                                         \
 8418|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   104k|    }                                                           \
 8421|   104k|    else {                                                      \
 8422|   104k|        return vis(monostate_val);                              \
 8423|   104k|    }
 8424|       |
 8425|   104k|    monostate monostate_val{};
 8426|       |
 8427|   104k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 104k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 104k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 104k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 104k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 104k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 104k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 104k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 104k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 104k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 104k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 104k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 104k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 104k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 104k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 104k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 104k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 104k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 104k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  52.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 52.2k, False: 52.2k]
  ------------------
 8465|  52.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  52.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  52.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  52.2k|    }                                                           \
  |  | 8421|  52.2k|    else {                                                      \
  |  | 8422|  52.2k|        return vis(monostate_val);                              \
  |  | 8423|  52.2k|    }
  ------------------
 8466|  52.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 52.2k, False: 52.2k]
  ------------------
 8467|  52.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  52.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  52.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  52.2k|    }                                                           \
  |  | 8421|  52.2k|    else {                                                      \
  |  | 8422|  52.2k|        return vis(monostate_val);                              \
  |  | 8423|  52.2k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 104k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 104k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 104k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 104k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 104k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 104k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 104k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   104k|            SCN_CLANG_POP
 8495|   104k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   125k|    {
 5545|   125k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  42.2k|    {
 8138|  42.2k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   125k|    {
 8056|   125k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  96.0k|{
 4344|  96.0k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 96.0k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  96.0k|    return ranges::subrange{forward_iterator{this, 0},
 4349|  96.0k|                            ranges::default_sentinel};
 4350|  96.0k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  96.0k|    {
 4177|  96.0k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  96.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  96.0k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  96.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  96.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  53.7k|{
 8417|  53.7k|#define SCN_VISIT(Type)                                         \
 8418|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  53.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  53.7k|    }                                                           \
 8421|  53.7k|    else {                                                      \
 8422|  53.7k|        return vis(monostate_val);                              \
 8423|  53.7k|    }
 8424|       |
 8425|  53.7k|    monostate monostate_val{};
 8426|       |
 8427|  53.7k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 53.7k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 53.7k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 53.7k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 53.7k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 53.7k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 53.7k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 53.7k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 53.7k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 53.7k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 53.7k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 53.7k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 53.7k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 53.7k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 53.7k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 53.7k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 53.7k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 53.7k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 53.7k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 53.7k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  53.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 53.7k, False: 0]
  ------------------
 8467|  53.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  53.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  53.7k|    }                                                           \
  |  | 8421|  53.7k|    else {                                                      \
  |  | 8422|  53.7k|        return vis(monostate_val);                              \
  |  | 8423|  53.7k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 53.7k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 53.7k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 53.7k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 53.7k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 53.7k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 53.7k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 53.7k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  53.7k|            SCN_CLANG_POP
 8495|  53.7k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  82.8k|{
 7044|  82.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  82.8k|    handler.check_args_exhausted();
 7046|  82.8k|    return handler.get_error();
 7047|  82.8k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  82.8k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  82.8k|    auto begin = format.data();
 7013|  82.8k|    auto it = begin;
 7014|  82.8k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   150k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 82.8k, False: 67.9k]
  ------------------
 7017|  82.8k|        const auto ch = *it++;
 7018|  82.8k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 82.8k, False: 0]
  ------------------
 7019|  82.8k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  82.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  82.8k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 14.9k, False: 67.9k]
  ------------------
 7023|  14.9k|                return;
 7024|  14.9k|            }
 7025|  82.8k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  82.8k|    }
 7036|       |
 7037|  67.9k|    handler.on_literal_text(begin, end);
 7038|  67.9k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  82.8k|{
 6942|  82.8k|    struct id_adapter {
 6943|  82.8k|        constexpr void operator()()
 6944|  82.8k|        {
 6945|  82.8k|            arg_id = handler.on_arg_id();
 6946|  82.8k|        }
 6947|  82.8k|        constexpr void operator()(std::size_t id)
 6948|  82.8k|        {
 6949|  82.8k|            arg_id = handler.on_arg_id(id);
 6950|  82.8k|        }
 6951|       |
 6952|  82.8k|        constexpr void on_error(const char* msg)
 6953|  82.8k|        {
 6954|  82.8k|            SCN_UNLIKELY_ATTR
 6955|  82.8k|            handler.on_error(msg);
 6956|  82.8k|        }
 6957|       |
 6958|  82.8k|        Handler& handler;
 6959|  82.8k|        std::size_t arg_id;
 6960|  82.8k|    };
 6961|       |
 6962|  82.8k|    ++begin;
 6963|  82.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.8k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  82.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 82.8k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  82.8k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 82.8k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  82.8k|    else {
 6975|  82.8k|        auto adapter = id_adapter{handler, 0};
 6976|  82.8k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  82.8k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  82.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.8k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  82.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 82.8k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  82.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 82.8k, False: 0]
  ------------------
 6987|  82.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  82.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.8k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  82.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  82.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.96k, False: 76.9k]
  |  |  |  Branch (859:45): [True: 0, False: 82.8k]
  |  |  |  Branch (859:45): [True: 5.96k, False: 76.9k]
  |  |  ------------------
  ------------------
 6993|  5.96k|                handler.on_error("Unknown format specifier");
 6994|  5.96k|                return begin;
 6995|  5.96k|            }
 6996|  82.8k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  82.8k|    }
 7003|  76.9k|    return begin + 1;
 7004|  82.8k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   125k|    {
 8039|   125k|        return m_args.get(id);
 8040|   125k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   116k|    {
 8049|   116k|        return m_locale;
 8050|   116k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   125k|    {
 5566|   125k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   125k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   125k|        do_check_arg_id(id);
 5574|   125k|        return id;
 5575|   125k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   125k|{
 6054|   125k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   125k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   125k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  82.8k|{
 6443|  82.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  82.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  82.8k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 82.8k, False: 0]
  |  Branch (6444:26): [True: 0, False: 82.8k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  82.8k|    handler();
 6449|  82.8k|    return begin;
 6450|  82.8k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  8.95k|{
 6392|  8.95k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  8.95k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  8.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  8.95k|    unsigned long long value = 0;
 6396|  17.9k|    do {
 6397|  17.9k|        value *= 10;
 6398|  17.9k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  17.9k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 17.9k]
  ------------------
 6400|  17.9k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  17.9k|        ++begin;
 6404|  17.9k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 17.9k, False: 0]
  |  Branch (6404:30): [True: 17.9k, False: 0]
  |  Branch (6404:47): [True: 8.95k, False: 8.95k]
  ------------------
 6405|  8.95k|    return static_cast<int>(value);
 6406|  8.95k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  82.8k|        {
 6945|  82.8k|            arg_id = handler.on_arg_id();
 6946|  82.8k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   250k|    {
 5252|   250k|        return m_type;
 5253|   250k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   116k|    {
 5561|   116k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   116k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   241k|    {
 5550|   241k|        return m_format.data();
 5551|   241k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  82.8k|    {
 7122|  82.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  82.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  82.8k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  82.8k|{
 6858|  82.8k|    auto do_presentation = [&]() -> const CharT* {
 6859|  82.8k|        if (*begin == CharT{'['}) {
 6860|  82.8k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  82.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  82.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  82.8k|                return begin;
 6866|  82.8k|            }
 6867|  82.8k|            handler.on_character_set_string(set);
 6868|  82.8k|            return begin;
 6869|  82.8k|        }
 6870|  82.8k|        if (*begin == CharT{'/'}) {
 6871|  82.8k|            return parse_presentation_regex(begin, end, handler);
 6872|  82.8k|        }
 6873|  82.8k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  82.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  82.8k|            handler.on_error("Invalid type specifier in format string");
 6876|  82.8k|            return begin;
 6877|  82.8k|        }
 6878|  82.8k|        handler.on_type(type);
 6879|  82.8k|        return begin;
 6880|  82.8k|    };
 6881|       |
 6882|  82.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 82.8k, False: 0]
  |  Branch (6882:28): [True: 72.6k, False: 10.2k]
  ------------------
 6883|  82.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 72.6k, False: 0]
  |  Branch (6883:36): [True: 69.6k, False: 2.98k]
  ------------------
 6884|  69.6k|        return do_presentation();
 6885|  69.6k|    }
 6886|       |
 6887|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  13.2k|    begin = parse_align(begin, end, handler);
 6893|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  13.2k|    begin = parse_width(begin, end, handler);
 6899|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  13.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 13.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  13.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 2.98k, False: 10.2k]
  ------------------
 6918|  2.98k|        handler.on_localized();
 6919|  2.98k|        ++begin;
 6920|  2.98k|    }
 6921|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  13.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 13.2k, False: 0]
  |  Branch (6926:25): [True: 10.2k, False: 2.98k]
  ------------------
 6927|  10.2k|        do_presentation();
 6928|  10.2k|    }
 6929|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  13.2k|    return begin;
 6935|  13.2k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|   109k|{
 6507|   109k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 105k, False: 4.47k]
  |  Branch (6507:33): [True: 105k, False: 0]
  ------------------
 6508|   109k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 4.47k, False: 0]
  |  Branch (6508:33): [True: 4.47k, False: 0]
  ------------------
 6509|   109k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  79.9k|    auto do_presentation = [&]() -> const CharT* {
 6859|  79.9k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 4.26k, False: 75.6k]
  ------------------
 6860|  4.26k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  4.26k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.26k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  4.26k|            handler.on_character_set_string(set);
 6868|  4.26k|            return begin;
 6869|  4.26k|        }
 6870|  75.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 75.6k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  75.6k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  75.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 72.6k]
  |  |  ------------------
  ------------------
 6875|  2.98k|            handler.on_error("Invalid type specifier in format string");
 6876|  2.98k|            return begin;
 6877|  2.98k|        }
 6878|  72.6k|        handler.on_type(type);
 6879|  72.6k|        return begin;
 6880|  75.6k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  4.26k|{
 6697|  4.26k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  4.26k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  4.26k|    auto start = begin;
 6701|  4.26k|    ++begin;
 6702|       |
 6703|  4.26k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.26k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  4.26k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 4.26k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  4.26k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 4.26k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  12.7k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 12.7k, False: 0]
  ------------------
 6728|  12.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  12.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 4.26k, False: 8.52k]
  ------------------
 6733|  4.26k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  4.26k|        }
 6735|       |
 6736|  8.52k|        parse_presentation_set_literal(begin, end, handler);
 6737|  8.52k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  4.26k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  8.52k|{
 6661|  8.52k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  8.52k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  8.52k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  8.52k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 8.52k, False: 0]
  |  Branch (6668:25): [True: 8.52k, False: 0]
  |  Branch (6668:49): [True: 8.52k, False: 0]
  ------------------
 6669|  8.52k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 8.52k, False: 0]
  ------------------
 6670|  8.52k|        ++begin;
 6671|       |
 6672|  8.52k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  8.52k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  8.52k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  8.52k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  8.52k|        return;
 6686|  8.52k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  17.0k|{
 6637|  17.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  17.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  17.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.0k]
  |  |  |  Branch (859:45): [True: 0, False: 17.0k]
  |  |  |  Branch (859:45): [True: 0, False: 17.0k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  17.0k|    const auto cp =
 6646|  17.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  17.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.0k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  17.0k|    begin += len;
 6653|  17.0k|    return cp;
 6654|  17.0k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  6.39k|    {
 6346|  6.39k|        m_specs.charset_string_data = fmt.data();
 6347|  6.39k|        m_specs.charset_string_size = fmt.size();
 6348|  6.39k|        on_type(presentation_type::string_set);
 6349|  6.39k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|   114k|{
 6455|   114k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 114k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 114k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 114k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 114k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 114k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 114k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 114k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 114k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 114k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 114k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 114k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 114k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 114k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 114k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 114k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 114k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 114k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 114k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|   105k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 105k, False: 8.95k]
  ------------------
 6486|   105k|            return presentation_type::string;
 6487|  4.47k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 4.47k, False: 109k]
  ------------------
 6488|  4.47k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 114k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 114k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 114k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 114k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  4.47k|        default:
  ------------------
  |  Branch (6499:9): [True: 4.47k, False: 109k]
  ------------------
 6500|  4.47k|            return presentation_type::none;
 6501|   114k|    }
 6502|   114k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  13.2k|{
 6532|  13.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  13.2k|    auto check_align = [](wchar_t ch) {
 6535|  13.2k|        switch (ch) {
 6536|  13.2k|            case L'<':
 6537|  13.2k|                return align_type::left;
 6538|  13.2k|            case L'>':
 6539|  13.2k|                return align_type::right;
 6540|  13.2k|            case L'^':
 6541|  13.2k|                return align_type::center;
 6542|  13.2k|            default:
 6543|  13.2k|                return align_type::none;
 6544|  13.2k|        }
 6545|  13.2k|    };
 6546|       |
 6547|  13.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  13.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  |  Branch (859:45): [True: 0, False: 13.2k]
  |  |  |  Branch (859:45): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 6549|  13.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  13.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  13.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  13.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  13.2k|    const auto begin_before_fill = begin;
 6559|  13.2k|    begin += potential_fill_len;
 6560|       |
 6561|  13.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 13.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  13.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  13.2k|    const auto begin_after_fill = begin;
 6567|  13.2k|    ++begin;
 6568|       |
 6569|  13.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 13.2k, False: 0]
  ------------------
 6570|  13.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  13.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 4.26k, False: 8.95k]
  ------------------
 6575|  4.26k|            return begin_before_fill;
 6576|  4.26k|        }
 6577|  13.2k|    }
 6578|       |
 6579|  8.95k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 8.95k, False: 0]
  ------------------
 6580|  8.95k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 8.95k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  8.95k|        return begin_before_fill;
 6585|  8.95k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  8.95k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  19.8k|{
 6514|  19.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  19.8k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  19.8k|        return 1;
 6517|  19.8k|    }
 6518|  19.8k|    else {
 6519|  19.8k|        const auto lengths =
 6520|  19.8k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  19.8k|            "\3\4";
 6522|  19.8k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  19.8k|        return len;
 6524|  19.8k|    }
 6525|  19.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  26.4k|    auto check_align = [](wchar_t ch) {
 6535|  26.4k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 26.4k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 26.4k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 26.4k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  26.4k|            default:
  ------------------
  |  Branch (6542:13): [True: 26.4k, False: 0]
  ------------------
 6543|  26.4k|                return align_type::none;
 6544|  26.4k|        }
 6545|  26.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  13.2k|{
 6597|  13.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  13.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 13.2k, False: 0]
  |  Branch (6599:33): [True: 5.96k, False: 7.24k]
  ------------------
 6600|  5.96k|        int width = parse_simple_int(begin, end);
 6601|  5.96k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.96k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.96k, False: 0]
  |  |  ------------------
  ------------------
 6602|  5.96k|            handler.on_width(width);
 6603|  5.96k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  5.96k|    }
 6609|  13.2k|    return begin;
 6610|  13.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|  2.98k|    {
 7127|  2.98k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  2.98k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 2.98k, False: 0]
  ------------------
 7129|  2.98k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 2.98k, False: 0]
  ------------------
 7130|  2.98k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 2.98k, False: 0]
  ------------------
 7131|  2.98k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 2.98k, False: 0]
  ------------------
 7132|  2.98k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  2.98k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  2.98k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  76.9k|{
 8417|  76.9k|#define SCN_VISIT(Type)                                         \
 8418|  76.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  76.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  76.9k|    }                                                           \
 8421|  76.9k|    else {                                                      \
 8422|  76.9k|        return vis(monostate_val);                              \
 8423|  76.9k|    }
 8424|       |
 8425|  76.9k|    monostate monostate_val{};
 8426|       |
 8427|  76.9k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 76.9k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 76.9k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 76.9k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 76.9k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 76.9k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 76.9k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 76.9k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 76.9k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 76.9k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 76.9k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 76.9k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 76.9k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 76.9k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 76.9k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 76.9k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 76.9k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 76.9k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 76.9k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  38.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 38.4k, False: 38.4k]
  ------------------
 8465|  38.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  38.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  38.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.4k|    }                                                           \
  |  | 8421|  38.4k|    else {                                                      \
  |  | 8422|  38.4k|        return vis(monostate_val);                              \
  |  | 8423|  38.4k|    }
  ------------------
 8466|  38.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 38.4k, False: 38.4k]
  ------------------
 8467|  38.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  38.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  38.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  38.4k|    }                                                           \
  |  | 8421|  38.4k|    else {                                                      \
  |  | 8422|  38.4k|        return vis(monostate_val);                              \
  |  | 8423|  38.4k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 76.9k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 76.9k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 76.9k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 76.9k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 76.9k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 76.9k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 76.9k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  76.9k|            SCN_CLANG_POP
 8495|  76.9k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  42.2k|{
 7044|  42.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  42.2k|    handler.check_args_exhausted();
 7046|  42.2k|    return handler.get_error();
 7047|  42.2k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  42.2k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  42.2k|    auto begin = format.data();
 7013|  42.2k|    auto it = begin;
 7014|  42.2k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  77.0k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 42.2k, False: 34.8k]
  ------------------
 7017|  42.2k|        const auto ch = *it++;
 7018|  42.2k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 42.2k, False: 0]
  ------------------
 7019|  42.2k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  42.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  42.2k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 7.46k, False: 34.8k]
  ------------------
 7023|  7.46k|                return;
 7024|  7.46k|            }
 7025|  42.2k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  42.2k|    }
 7036|       |
 7037|  34.8k|    handler.on_literal_text(begin, end);
 7038|  34.8k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  34.8k|    {
 8175|  34.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  34.8k|    static_cast<    \
  |  |  929|  34.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  34.8k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  42.2k|{
 6942|  42.2k|    struct id_adapter {
 6943|  42.2k|        constexpr void operator()()
 6944|  42.2k|        {
 6945|  42.2k|            arg_id = handler.on_arg_id();
 6946|  42.2k|        }
 6947|  42.2k|        constexpr void operator()(std::size_t id)
 6948|  42.2k|        {
 6949|  42.2k|            arg_id = handler.on_arg_id(id);
 6950|  42.2k|        }
 6951|       |
 6952|  42.2k|        constexpr void on_error(const char* msg)
 6953|  42.2k|        {
 6954|  42.2k|            SCN_UNLIKELY_ATTR
 6955|  42.2k|            handler.on_error(msg);
 6956|  42.2k|        }
 6957|       |
 6958|  42.2k|        Handler& handler;
 6959|  42.2k|        std::size_t arg_id;
 6960|  42.2k|    };
 6961|       |
 6962|  42.2k|    ++begin;
 6963|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  42.2k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 42.2k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  42.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 42.2k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  42.2k|    else {
 6975|  42.2k|        auto adapter = id_adapter{handler, 0};
 6976|  42.2k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  42.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  42.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 42.2k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  42.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 42.2k, False: 0]
  ------------------
 6987|  42.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  42.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  42.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  84.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 39.2k]
  |  |  |  Branch (859:45): [True: 0, False: 42.2k]
  |  |  |  Branch (859:45): [True: 2.98k, False: 39.2k]
  |  |  ------------------
  ------------------
 6993|  2.98k|                handler.on_error("Unknown format specifier");
 6994|  2.98k|                return begin;
 6995|  2.98k|            }
 6996|  42.2k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  42.2k|    }
 7003|  39.2k|    return begin + 1;
 7004|  42.2k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  42.2k|{
 6443|  42.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  42.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 42.2k, False: 0]
  |  Branch (6444:26): [True: 0, False: 42.2k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  42.2k|    handler();
 6449|  42.2k|    return begin;
 6450|  42.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  42.2k|        {
 6945|  42.2k|            arg_id = handler.on_arg_id();
 6946|  42.2k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  42.2k|    {
 7122|  42.2k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  42.2k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  42.2k|{
 6858|  42.2k|    auto do_presentation = [&]() -> const CharT* {
 6859|  42.2k|        if (*begin == CharT{'['}) {
 6860|  42.2k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  42.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  42.2k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  42.2k|                return begin;
 6866|  42.2k|            }
 6867|  42.2k|            handler.on_character_set_string(set);
 6868|  42.2k|            return begin;
 6869|  42.2k|        }
 6870|  42.2k|        if (*begin == CharT{'/'}) {
 6871|  42.2k|            return parse_presentation_regex(begin, end, handler);
 6872|  42.2k|        }
 6873|  42.2k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  42.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  42.2k|            handler.on_error("Invalid type specifier in format string");
 6876|  42.2k|            return begin;
 6877|  42.2k|        }
 6878|  42.2k|        handler.on_type(type);
 6879|  42.2k|        return begin;
 6880|  42.2k|    };
 6881|       |
 6882|  42.2k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 42.2k, False: 0]
  |  Branch (6882:28): [True: 37.1k, False: 5.11k]
  ------------------
 6883|  42.2k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 37.1k, False: 0]
  |  Branch (6883:36): [True: 35.6k, False: 1.49k]
  ------------------
 6884|  35.6k|        return do_presentation();
 6885|  35.6k|    }
 6886|       |
 6887|  6.60k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.60k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  6.60k|    begin = parse_align(begin, end, handler);
 6893|  6.60k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.60k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  6.60k|    begin = parse_width(begin, end, handler);
 6899|  6.60k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.60k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  6.60k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 6.60k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  6.60k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 1.49k, False: 5.11k]
  ------------------
 6918|  1.49k|        handler.on_localized();
 6919|  1.49k|        ++begin;
 6920|  1.49k|    }
 6921|  6.60k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.60k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  6.60k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 6.60k, False: 0]
  |  Branch (6926:25): [True: 5.11k, False: 1.49k]
  ------------------
 6927|  5.11k|        do_presentation();
 6928|  5.11k|    }
 6929|  6.60k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.60k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  6.60k|    return begin;
 6935|  6.60k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  40.7k|    auto do_presentation = [&]() -> const CharT* {
 6859|  40.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 2.13k, False: 38.6k]
  ------------------
 6860|  2.13k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.13k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.13k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  2.13k|            handler.on_character_set_string(set);
 6868|  2.13k|            return begin;
 6869|  2.13k|        }
 6870|  38.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 38.6k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  38.6k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  38.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 37.1k]
  |  |  ------------------
  ------------------
 6875|  1.49k|            handler.on_error("Invalid type specifier in format string");
 6876|  1.49k|            return begin;
 6877|  1.49k|        }
 6878|  37.1k|        handler.on_type(type);
 6879|  37.1k|        return begin;
 6880|  38.6k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  2.13k|{
 6697|  2.13k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.13k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.13k|    auto start = begin;
 6701|  2.13k|    ++begin;
 6702|       |
 6703|  2.13k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.13k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  2.13k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 2.13k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  2.13k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 2.13k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  6.39k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 6.39k, False: 0]
  ------------------
 6728|  6.39k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  6.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.39k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  6.39k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.13k, False: 4.26k]
  ------------------
 6733|  2.13k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.13k|        }
 6735|       |
 6736|  4.26k|        parse_presentation_set_literal(begin, end, handler);
 6737|  4.26k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  2.13k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6660|  4.26k|{
 6661|  4.26k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  4.26k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  4.26k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.26k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  4.26k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 4.26k, False: 0]
  |  Branch (6668:25): [True: 4.26k, False: 0]
  |  Branch (6668:49): [True: 4.26k, False: 0]
  ------------------
 6669|  4.26k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 4.26k, False: 0]
  ------------------
 6670|  4.26k|        ++begin;
 6671|       |
 6672|  4.26k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  4.26k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.26k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  4.26k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.26k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  4.26k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  4.26k|        return;
 6686|  4.26k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6636|  8.52k|{
 6637|  8.52k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  8.52k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  8.52k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.52k]
  |  |  |  Branch (859:45): [True: 0, False: 8.52k]
  |  |  |  Branch (859:45): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  8.52k|    const auto cp =
 6646|  8.52k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  8.52k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  8.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  8.52k|    begin += len;
 6653|  8.52k|    return cp;
 6654|  8.52k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|  6.60k|{
 6532|  6.60k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  6.60k|    auto check_align = [](wchar_t ch) {
 6535|  6.60k|        switch (ch) {
 6536|  6.60k|            case L'<':
 6537|  6.60k|                return align_type::left;
 6538|  6.60k|            case L'>':
 6539|  6.60k|                return align_type::right;
 6540|  6.60k|            case L'^':
 6541|  6.60k|                return align_type::center;
 6542|  6.60k|            default:
 6543|  6.60k|                return align_type::none;
 6544|  6.60k|        }
 6545|  6.60k|    };
 6546|       |
 6547|  6.60k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  6.60k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.60k]
  |  |  |  Branch (859:45): [True: 0, False: 6.60k]
  |  |  |  Branch (859:45): [True: 0, False: 6.60k]
  |  |  ------------------
  ------------------
 6549|  6.60k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  6.60k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  6.60k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  6.60k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  6.60k|    const auto begin_before_fill = begin;
 6559|  6.60k|    begin += potential_fill_len;
 6560|       |
 6561|  6.60k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 6.60k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  6.60k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  6.60k|    const auto begin_after_fill = begin;
 6567|  6.60k|    ++begin;
 6568|       |
 6569|  6.60k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 6.60k, False: 0]
  ------------------
 6570|  6.60k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  6.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.60k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  6.60k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 2.13k, False: 4.47k]
  ------------------
 6575|  2.13k|            return begin_before_fill;
 6576|  2.13k|        }
 6577|  6.60k|    }
 6578|       |
 6579|  4.47k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 4.47k, False: 0]
  ------------------
 6580|  4.47k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 4.47k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  4.47k|        return begin_before_fill;
 6585|  4.47k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  4.47k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  13.2k|    auto check_align = [](wchar_t ch) {
 6535|  13.2k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 13.2k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 13.2k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 13.2k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  13.2k|            default:
  ------------------
  |  Branch (6542:13): [True: 13.2k, False: 0]
  ------------------
 6543|  13.2k|                return align_type::none;
 6544|  13.2k|        }
 6545|  13.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|  6.60k|{
 6597|  6.60k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  6.60k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 6.60k, False: 0]
  |  Branch (6599:33): [True: 2.98k, False: 3.62k]
  ------------------
 6600|  2.98k|        int width = parse_simple_int(begin, end);
 6601|  2.98k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  2.98k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.98k, False: 0]
  |  |  ------------------
  ------------------
 6602|  2.98k|            handler.on_width(width);
 6603|  2.98k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  2.98k|    }
 6609|  6.60k|    return begin;
 6610|  6.60k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|  1.49k|    {
 7127|  1.49k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  1.49k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 1.49k, False: 0]
  ------------------
 7129|  1.49k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 1.49k, False: 0]
  ------------------
 7130|  1.49k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 1.49k, False: 0]
  ------------------
 7131|  1.49k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 1.49k, False: 0]
  ------------------
 7132|  1.49k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  1.49k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  1.49k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  39.2k|{
 8417|  39.2k|#define SCN_VISIT(Type)                                         \
 8418|  39.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  39.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  39.2k|    }                                                           \
 8421|  39.2k|    else {                                                      \
 8422|  39.2k|        return vis(monostate_val);                              \
 8423|  39.2k|    }
 8424|       |
 8425|  39.2k|    monostate monostate_val{};
 8426|       |
 8427|  39.2k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 39.2k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 39.2k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 39.2k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 39.2k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 39.2k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 39.2k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 39.2k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 39.2k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 39.2k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 39.2k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 39.2k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 39.2k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 39.2k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 39.2k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 39.2k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 39.2k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 39.2k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 39.2k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 39.2k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  39.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 39.2k, False: 0]
  ------------------
 8467|  39.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  39.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  39.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  39.2k|    }                                                           \
  |  | 8421|  39.2k|    else {                                                      \
  |  | 8422|  39.2k|        return vis(monostate_val);                              \
  |  | 8423|  39.2k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 39.2k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 39.2k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 39.2k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 39.2k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 39.2k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 39.2k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 39.2k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  39.2k|            SCN_CLANG_POP
 8495|  39.2k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  9.69k|    {
 4076|  9.69k|        sync(0);
 4077|  9.69k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  25.7M|    {
 5466|  25.7M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  25.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.7M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  25.7M|        return static_cast<std::size_t>(m_desc &
 5471|  25.7M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  25.7M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  51.5M|    {
 5491|  51.5M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  51.5M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  25.7M|    {
 5434|  25.7M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  25.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.7M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  25.7M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  25.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.7M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  25.7M|        const auto t = type(id);
 5446|  25.7M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  25.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.7M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  25.7M|        basic_scan_arg<Context> arg;
 5451|  25.7M|        arg.m_type = t;
 5452|  25.7M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 25.7M, False: 0]
  ------------------
 5453|  25.7M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  25.7M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  25.7M|        return arg;
 5459|  25.7M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  25.7M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  25.7M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  25.7M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  25.7M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  25.7M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  25.7M|    {
 5495|  25.7M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  25.7M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  45.1M|    {
 5247|  45.1M|        return m_type != detail::arg_type::none_type;
 5248|  45.1M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  12.8M|{
 8417|  12.8M|#define SCN_VISIT(Type)                                         \
 8418|  12.8M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  12.8M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  12.8M|    }                                                           \
 8421|  12.8M|    else {                                                      \
 8422|  12.8M|        return vis(monostate_val);                              \
 8423|  12.8M|    }
 8424|       |
 8425|  12.8M|    monostate monostate_val{};
 8426|       |
 8427|  12.8M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 12.8M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 12.8M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 12.8M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 12.8M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 12.8M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 12.8M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 12.8M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 12.8M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 12.8M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 12.8M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 12.8M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 12.8M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 12.8M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 12.8M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 12.8M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 12.8M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 12.8M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 12.8M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 12.8M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 12.8M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|  6.43M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 6.43M, False: 6.43M]
  ------------------
 8469|  6.43M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  6.43M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.43M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.43M|    }                                                           \
  |  | 8421|  6.43M|    else {                                                      \
  |  | 8422|  6.43M|        return vis(monostate_val);                              \
  |  | 8423|  6.43M|    }
  ------------------
 8470|  6.43M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 6.43M, False: 6.43M]
  ------------------
 8471|  6.43M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  6.43M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.43M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.43M|    }                                                           \
  |  | 8421|  6.43M|    else {                                                      \
  |  | 8422|  6.43M|        return vis(monostate_val);                              \
  |  | 8423|  6.43M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 12.8M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 12.8M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 12.8M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 12.8M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 12.8M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  12.8M|            SCN_CLANG_POP
 8495|  12.8M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|  12.9M|    {
 5545|  12.9M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  4.30M|    {
 8138|  4.30M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|  12.9M|    {
 8056|  12.9M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  8.60M|{
 7044|  8.60M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  8.60M|    handler.check_args_exhausted();
 7046|  8.60M|    return handler.get_error();
 7047|  8.60M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  8.60M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  8.60M|    auto begin = format.data();
 7013|  8.60M|    auto it = begin;
 7014|  8.60M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  17.1M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 8.60M, False: 8.57M]
  ------------------
 7017|  8.60M|        const auto ch = *it++;
 7018|  8.60M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 8.60M, False: 0]
  ------------------
 7019|  8.60M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  8.60M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  8.60M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 29.8k, False: 8.57M]
  ------------------
 7023|  29.8k|                return;
 7024|  29.8k|            }
 7025|  8.60M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  8.60M|    }
 7036|       |
 7037|  8.57M|    handler.on_literal_text(begin, end);
 7038|  8.57M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  8.60M|{
 6942|  8.60M|    struct id_adapter {
 6943|  8.60M|        constexpr void operator()()
 6944|  8.60M|        {
 6945|  8.60M|            arg_id = handler.on_arg_id();
 6946|  8.60M|        }
 6947|  8.60M|        constexpr void operator()(std::size_t id)
 6948|  8.60M|        {
 6949|  8.60M|            arg_id = handler.on_arg_id(id);
 6950|  8.60M|        }
 6951|       |
 6952|  8.60M|        constexpr void on_error(const char* msg)
 6953|  8.60M|        {
 6954|  8.60M|            SCN_UNLIKELY_ATTR
 6955|  8.60M|            handler.on_error(msg);
 6956|  8.60M|        }
 6957|       |
 6958|  8.60M|        Handler& handler;
 6959|  8.60M|        std::size_t arg_id;
 6960|  8.60M|    };
 6961|       |
 6962|  8.60M|    ++begin;
 6963|  8.60M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  8.60M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 8.60M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  8.60M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 8.60M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  8.60M|    else {
 6975|  8.60M|        auto adapter = id_adapter{handler, 0};
 6976|  8.60M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  8.60M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  8.60M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 8.60M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  8.60M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 8.60M, False: 0]
  ------------------
 6987|  8.60M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  8.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  8.60M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  8.60M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  17.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 8.59M]
  |  |  |  Branch (859:45): [True: 0, False: 8.60M]
  |  |  |  Branch (859:45): [True: 11.9k, False: 8.59M]
  |  |  ------------------
  ------------------
 6993|  11.9k|                handler.on_error("Unknown format specifier");
 6994|  11.9k|                return begin;
 6995|  11.9k|            }
 6996|  8.60M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  8.60M|    }
 7003|  8.59M|    return begin + 1;
 7004|  8.60M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  12.9M|    {
 8039|  12.9M|        return m_args.get(id);
 8040|  12.9M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  12.8M|    {
 8049|  12.8M|        return m_locale;
 8050|  12.8M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  12.9M|    {
 5566|  12.9M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  12.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.9M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  12.9M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  12.9M|        do_check_arg_id(id);
 5574|  12.9M|        return id;
 5575|  12.9M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  12.9M|{
 6054|  12.9M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  12.9M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  12.9M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  8.60M|{
 6443|  8.60M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  8.60M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 8.60M, False: 0]
  |  Branch (6444:26): [True: 0, False: 8.60M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  8.60M|    handler();
 6449|  8.60M|    return begin;
 6450|  8.60M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  17.9k|{
 6392|  17.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  17.9k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  17.9k|    unsigned long long value = 0;
 6396|  35.8k|    do {
 6397|  35.8k|        value *= 10;
 6398|  35.8k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  35.8k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 35.8k]
  ------------------
 6400|  35.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  35.8k|        ++begin;
 6404|  35.8k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 35.8k, False: 0]
  |  Branch (6404:30): [True: 35.8k, False: 0]
  |  Branch (6404:47): [True: 17.9k, False: 17.9k]
  ------------------
 6405|  17.9k|    return static_cast<int>(value);
 6406|  17.9k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  8.60M|        {
 6945|  8.60M|            arg_id = handler.on_arg_id();
 6946|  8.60M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  25.8M|    {
 5252|  25.8M|        return m_type;
 5253|  25.8M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  12.8M|    {
 5561|  12.8M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  12.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|  10.7M|{
 4344|  10.7M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 10.7M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  10.7M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  10.7M|                            ranges::default_sentinel};
 4350|  10.7M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|  10.7M|    {
 4177|  10.7M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  10.7M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  10.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  10.7M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  25.7M|    {
 5550|  25.7M|        return m_format.data();
 5551|  25.7M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  8.60M|    {
 7122|  8.60M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  8.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  8.60M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  8.60M|{
 6858|  8.60M|    auto do_presentation = [&]() -> const CharT* {
 6859|  8.60M|        if (*begin == CharT{'['}) {
 6860|  8.60M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  8.60M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  8.60M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  8.60M|                return begin;
 6866|  8.60M|            }
 6867|  8.60M|            handler.on_character_set_string(set);
 6868|  8.60M|            return begin;
 6869|  8.60M|        }
 6870|  8.60M|        if (*begin == CharT{'/'}) {
 6871|  8.60M|            return parse_presentation_regex(begin, end, handler);
 6872|  8.60M|        }
 6873|  8.60M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  8.60M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  8.60M|            handler.on_error("Invalid type specifier in format string");
 6876|  8.60M|            return begin;
 6877|  8.60M|        }
 6878|  8.60M|        handler.on_type(type);
 6879|  8.60M|        return begin;
 6880|  8.60M|    };
 6881|       |
 6882|  8.60M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 8.60M, False: 0]
  |  Branch (6882:28): [True: 8.58M, False: 17.9k]
  ------------------
 6883|  8.60M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 8.58M, False: 0]
  |  Branch (6883:36): [True: 8.58M, False: 5.96k]
  ------------------
 6884|  8.58M|        return do_presentation();
 6885|  8.58M|    }
 6886|       |
 6887|  23.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  23.9k|    begin = parse_align(begin, end, handler);
 6893|  23.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  23.9k|    begin = parse_width(begin, end, handler);
 6899|  23.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  23.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 23.9k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  23.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 5.96k, False: 17.9k]
  ------------------
 6918|  5.96k|        handler.on_localized();
 6919|  5.96k|        ++begin;
 6920|  5.96k|    }
 6921|  23.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  23.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 23.9k, False: 0]
  |  Branch (6926:25): [True: 17.9k, False: 5.96k]
  ------------------
 6927|  17.9k|        do_presentation();
 6928|  17.9k|    }
 6929|  23.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  23.9k|    return begin;
 6935|  23.9k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  12.8M|{
 6507|  12.8M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 12.8M, False: 8.95k]
  |  Branch (6507:33): [True: 12.8M, False: 0]
  ------------------
 6508|  12.8M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 8.95k, False: 0]
  |  Branch (6508:33): [True: 8.95k, False: 0]
  ------------------
 6509|  12.8M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  8.59M|    auto do_presentation = [&]() -> const CharT* {
 6859|  8.59M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 6.03k, False: 8.59M]
  ------------------
 6860|  6.03k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  6.03k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  6.03k|            handler.on_character_set_string(set);
 6868|  6.03k|            return begin;
 6869|  6.03k|        }
 6870|  8.59M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 8.59M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  8.59M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  8.59M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  8.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.96k, False: 8.58M]
  |  |  ------------------
  ------------------
 6875|  5.96k|            handler.on_error("Invalid type specifier in format string");
 6876|  5.96k|            return begin;
 6877|  5.96k|        }
 6878|  8.58M|        handler.on_type(type);
 6879|  8.58M|        return begin;
 6880|  8.59M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  6.03k|{
 6697|  6.03k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  6.03k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  6.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  6.03k|    auto start = begin;
 6701|  6.03k|    ++begin;
 6702|       |
 6703|  6.03k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  6.03k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 6.03k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  6.03k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 6.03k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  18.0k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 18.0k, False: 0]
  ------------------
 6728|  18.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  18.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 6.03k, False: 12.0k]
  ------------------
 6733|  6.03k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  6.03k|        }
 6735|       |
 6736|  12.0k|        parse_presentation_set_literal(begin, end, handler);
 6737|  12.0k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  6.03k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  12.0k|{
 6661|  12.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  12.0k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  12.0k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.0k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  12.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 12.0k, False: 0]
  |  Branch (6668:25): [True: 12.0k, False: 0]
  |  Branch (6668:49): [True: 12.0k, False: 0]
  ------------------
 6669|  12.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 12.0k, False: 0]
  ------------------
 6670|  12.0k|        ++begin;
 6671|       |
 6672|  12.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  12.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.0k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  12.0k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.0k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  12.0k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  12.0k|        return;
 6686|  12.0k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  24.1k|{
 6637|  24.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  24.1k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  24.1k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  48.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.1k]
  |  |  |  Branch (859:45): [True: 0, False: 24.1k]
  |  |  |  Branch (859:45): [True: 0, False: 24.1k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  24.1k|    const auto cp =
 6646|  24.1k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  24.1k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.1k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  24.1k|    begin += len;
 6653|  24.1k|    return cp;
 6654|  24.1k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  9.04k|    {
 6346|  9.04k|        m_specs.charset_string_data = fmt.data();
 6347|  9.04k|        m_specs.charset_string_size = fmt.size();
 6348|  9.04k|        on_type(presentation_type::string_set);
 6349|  9.04k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  12.8M|{
 6455|  12.8M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 12.8M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 12.8M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 12.8M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 12.8M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 12.8M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 12.8M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 12.8M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 12.8M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 12.8M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 12.8M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 12.8M]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 12.8M]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 12.8M]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 12.8M]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 12.8M]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 12.8M]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 12.8M]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 12.8M]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|  12.8M|        case 's':
  ------------------
  |  Branch (6485:9): [True: 12.8M, False: 17.9k]
  ------------------
 6486|  12.8M|            return presentation_type::string;
 6487|  8.95k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 8.95k, False: 12.8M]
  ------------------
 6488|  8.95k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 12.8M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 12.8M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 12.8M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 12.8M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  8.95k|        default:
  ------------------
  |  Branch (6499:9): [True: 8.95k, False: 12.8M]
  ------------------
 6500|  8.95k|            return presentation_type::none;
 6501|  12.8M|    }
 6502|  12.8M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  23.9k|{
 6532|  23.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  23.9k|    auto check_align = [](wchar_t ch) {
 6535|  23.9k|        switch (ch) {
 6536|  23.9k|            case L'<':
 6537|  23.9k|                return align_type::left;
 6538|  23.9k|            case L'>':
 6539|  23.9k|                return align_type::right;
 6540|  23.9k|            case L'^':
 6541|  23.9k|                return align_type::center;
 6542|  23.9k|            default:
 6543|  23.9k|                return align_type::none;
 6544|  23.9k|        }
 6545|  23.9k|    };
 6546|       |
 6547|  23.9k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  23.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  |  Branch (859:45): [True: 0, False: 23.9k]
  |  |  |  Branch (859:45): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
 6549|  23.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  23.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  23.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  23.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  23.9k|    const auto begin_before_fill = begin;
 6559|  23.9k|    begin += potential_fill_len;
 6560|       |
 6561|  23.9k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 23.9k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  23.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  23.9k|    const auto begin_after_fill = begin;
 6567|  23.9k|    ++begin;
 6568|       |
 6569|  23.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 23.9k, False: 0]
  ------------------
 6570|  23.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  23.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 6.03k, False: 17.9k]
  ------------------
 6575|  6.03k|            return begin_before_fill;
 6576|  6.03k|        }
 6577|  23.9k|    }
 6578|       |
 6579|  17.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 17.9k, False: 0]
  ------------------
 6580|  17.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 17.9k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  17.9k|        return begin_before_fill;
 6585|  17.9k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  17.9k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  35.9k|{
 6514|  35.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  35.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  35.9k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  35.9k|        return 1;
 6517|  35.9k|    }
 6518|  35.9k|    else {
 6519|  35.9k|        const auto lengths =
 6520|  35.9k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  35.9k|            "\3\4";
 6522|  35.9k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  35.9k|        return len;
 6524|  35.9k|    }
 6525|  35.9k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  47.8k|    auto check_align = [](wchar_t ch) {
 6535|  47.8k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 47.8k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 47.8k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 47.8k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  47.8k|            default:
  ------------------
  |  Branch (6542:13): [True: 47.8k, False: 0]
  ------------------
 6543|  47.8k|                return align_type::none;
 6544|  47.8k|        }
 6545|  47.8k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  23.9k|{
 6597|  23.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  23.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 23.9k, False: 0]
  |  Branch (6599:33): [True: 11.9k, False: 12.0k]
  ------------------
 6600|  11.9k|        int width = parse_simple_int(begin, end);
 6601|  11.9k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  11.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.9k, False: 0]
  |  |  ------------------
  ------------------
 6602|  11.9k|            handler.on_width(width);
 6603|  11.9k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  11.9k|    }
 6609|  23.9k|    return begin;
 6610|  23.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  5.96k|    {
 7127|  5.96k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  5.96k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 5.96k, False: 0]
  ------------------
 7129|  5.96k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 5.96k, False: 0]
  ------------------
 7130|  5.96k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 5.96k, False: 0]
  ------------------
 7131|  5.96k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 5.96k, False: 0]
  ------------------
 7132|  5.96k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  5.96k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  5.96k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  8.59M|{
 8417|  8.59M|#define SCN_VISIT(Type)                                         \
 8418|  8.59M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  8.59M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  8.59M|    }                                                           \
 8421|  8.59M|    else {                                                      \
 8422|  8.59M|        return vis(monostate_val);                              \
 8423|  8.59M|    }
 8424|       |
 8425|  8.59M|    monostate monostate_val{};
 8426|       |
 8427|  8.59M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 8.59M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 8.59M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 8.59M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 8.59M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 8.59M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 8.59M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 8.59M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 8.59M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 8.59M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 8.59M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 8.59M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 8.59M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 8.59M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 8.59M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 8.59M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 8.59M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 8.59M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 8.59M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 8.59M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 8.59M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|  4.29M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 4.29M, False: 4.29M]
  ------------------
 8469|  4.29M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  4.29M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.29M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.29M|    }                                                           \
  |  | 8421|  4.29M|    else {                                                      \
  |  | 8422|  4.29M|        return vis(monostate_val);                              \
  |  | 8423|  4.29M|    }
  ------------------
 8470|  4.29M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 4.29M, False: 4.29M]
  ------------------
 8471|  4.29M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  4.29M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.29M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.29M|    }                                                           \
  |  | 8421|  4.29M|    else {                                                      \
  |  | 8422|  4.29M|        return vis(monostate_val);                              \
  |  | 8423|  4.29M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 8.59M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 8.59M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 8.59M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 8.59M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 8.59M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  8.59M|            SCN_CLANG_POP
 8495|  8.59M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  6.43M|{
 8417|  6.43M|#define SCN_VISIT(Type)                                         \
 8418|  6.43M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  6.43M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  6.43M|    }                                                           \
 8421|  6.43M|    else {                                                      \
 8422|  6.43M|        return vis(monostate_val);                              \
 8423|  6.43M|    }
 8424|       |
 8425|  6.43M|    monostate monostate_val{};
 8426|       |
 8427|  6.43M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 6.43M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 6.43M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 6.43M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 6.43M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 6.43M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.43M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 6.43M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 6.43M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 6.43M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 6.43M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 6.43M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 6.43M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 6.43M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 6.43M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 6.43M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 6.43M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 6.43M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 6.43M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 6.43M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 6.43M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 6.43M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  6.43M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 6.43M, False: 0]
  ------------------
 8471|  6.43M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  6.43M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  6.43M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  6.43M|    }                                                           \
  |  | 8421|  6.43M|    else {                                                      \
  |  | 8422|  6.43M|        return vis(monostate_val);                              \
  |  | 8423|  6.43M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 6.43M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 6.43M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 6.43M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 6.43M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 6.43M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  6.43M|            SCN_CLANG_POP
 8495|  6.43M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  4.30M|{
 7044|  4.30M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  4.30M|    handler.check_args_exhausted();
 7046|  4.30M|    return handler.get_error();
 7047|  4.30M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  4.30M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  4.30M|    auto begin = format.data();
 7013|  4.30M|    auto it = begin;
 7014|  4.30M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  8.59M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 4.30M, False: 4.28M]
  ------------------
 7017|  4.30M|        const auto ch = *it++;
 7018|  4.30M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 4.30M, False: 0]
  ------------------
 7019|  4.30M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  4.30M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  4.30M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 14.9k, False: 4.28M]
  ------------------
 7023|  14.9k|                return;
 7024|  14.9k|            }
 7025|  4.30M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  4.30M|    }
 7036|       |
 7037|  4.28M|    handler.on_literal_text(begin, end);
 7038|  4.28M|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|  4.28M|    {
 8175|  4.28M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  4.28M|    static_cast<    \
  |  |  929|  4.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  4.28M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|  4.30M|{
 6942|  4.30M|    struct id_adapter {
 6943|  4.30M|        constexpr void operator()()
 6944|  4.30M|        {
 6945|  4.30M|            arg_id = handler.on_arg_id();
 6946|  4.30M|        }
 6947|  4.30M|        constexpr void operator()(std::size_t id)
 6948|  4.30M|        {
 6949|  4.30M|            arg_id = handler.on_arg_id(id);
 6950|  4.30M|        }
 6951|       |
 6952|  4.30M|        constexpr void on_error(const char* msg)
 6953|  4.30M|        {
 6954|  4.30M|            SCN_UNLIKELY_ATTR
 6955|  4.30M|            handler.on_error(msg);
 6956|  4.30M|        }
 6957|       |
 6958|  4.30M|        Handler& handler;
 6959|  4.30M|        std::size_t arg_id;
 6960|  4.30M|    };
 6961|       |
 6962|  4.30M|    ++begin;
 6963|  4.30M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.30M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  4.30M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 4.30M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  4.30M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 4.30M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  4.30M|    else {
 6975|  4.30M|        auto adapter = id_adapter{handler, 0};
 6976|  4.30M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  4.30M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.30M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  4.30M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 4.30M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  4.30M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 4.30M, False: 0]
  ------------------
 6987|  4.30M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  4.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.30M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  4.30M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  4.30M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  8.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.96k, False: 4.29M]
  |  |  |  Branch (859:45): [True: 0, False: 4.30M]
  |  |  |  Branch (859:45): [True: 5.96k, False: 4.29M]
  |  |  ------------------
  ------------------
 6993|  5.96k|                handler.on_error("Unknown format specifier");
 6994|  5.96k|                return begin;
 6995|  5.96k|            }
 6996|  4.30M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  4.30M|    }
 7003|  4.29M|    return begin + 1;
 7004|  4.30M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  4.30M|{
 6443|  4.30M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  4.30M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 4.30M, False: 0]
  |  Branch (6444:26): [True: 0, False: 4.30M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  4.30M|    handler();
 6449|  4.30M|    return begin;
 6450|  4.30M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  4.30M|        {
 6945|  4.30M|            arg_id = handler.on_arg_id();
 6946|  4.30M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  4.30M|    {
 7122|  4.30M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  4.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  4.30M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|  4.30M|{
 6858|  4.30M|    auto do_presentation = [&]() -> const CharT* {
 6859|  4.30M|        if (*begin == CharT{'['}) {
 6860|  4.30M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  4.30M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  4.30M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  4.30M|                return begin;
 6866|  4.30M|            }
 6867|  4.30M|            handler.on_character_set_string(set);
 6868|  4.30M|            return begin;
 6869|  4.30M|        }
 6870|  4.30M|        if (*begin == CharT{'/'}) {
 6871|  4.30M|            return parse_presentation_regex(begin, end, handler);
 6872|  4.30M|        }
 6873|  4.30M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.30M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  4.30M|            handler.on_error("Invalid type specifier in format string");
 6876|  4.30M|            return begin;
 6877|  4.30M|        }
 6878|  4.30M|        handler.on_type(type);
 6879|  4.30M|        return begin;
 6880|  4.30M|    };
 6881|       |
 6882|  4.30M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 4.30M, False: 0]
  |  Branch (6882:28): [True: 4.29M, False: 8.98k]
  ------------------
 6883|  4.30M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 4.29M, False: 0]
  |  Branch (6883:36): [True: 4.29M, False: 2.98k]
  ------------------
 6884|  4.29M|        return do_presentation();
 6885|  4.29M|    }
 6886|       |
 6887|  11.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  11.9k|    begin = parse_align(begin, end, handler);
 6893|  11.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  11.9k|    begin = parse_width(begin, end, handler);
 6899|  11.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  11.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 11.9k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  11.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 2.98k, False: 8.98k]
  ------------------
 6918|  2.98k|        handler.on_localized();
 6919|  2.98k|        ++begin;
 6920|  2.98k|    }
 6921|  11.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  11.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 11.9k, False: 0]
  |  Branch (6926:25): [True: 8.98k, False: 2.98k]
  ------------------
 6927|  8.98k|        do_presentation();
 6928|  8.98k|    }
 6929|  11.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  11.9k|    return begin;
 6935|  11.9k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  4.29M|    auto do_presentation = [&]() -> const CharT* {
 6859|  4.29M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 3.01k, False: 4.29M]
  ------------------
 6860|  3.01k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  3.01k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.01k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  3.01k|            handler.on_character_set_string(set);
 6868|  3.01k|            return begin;
 6869|  3.01k|        }
 6870|  4.29M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 4.29M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  4.29M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.29M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 4.29M]
  |  |  ------------------
  ------------------
 6875|  2.98k|            handler.on_error("Invalid type specifier in format string");
 6876|  2.98k|            return begin;
 6877|  2.98k|        }
 6878|  4.29M|        handler.on_type(type);
 6879|  4.29M|        return begin;
 6880|  4.29M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  3.01k|{
 6697|  3.01k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  3.01k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  3.01k|    auto start = begin;
 6701|  3.01k|    ++begin;
 6702|       |
 6703|  3.01k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.01k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  3.01k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 3.01k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  3.01k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 3.01k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  9.04k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 9.04k, False: 0]
  ------------------
 6728|  9.04k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.04k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  9.04k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 3.01k, False: 6.03k]
  ------------------
 6733|  3.01k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  3.01k|        }
 6735|       |
 6736|  6.03k|        parse_presentation_set_literal(begin, end, handler);
 6737|  6.03k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  3.01k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6660|  6.03k|{
 6661|  6.03k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  6.03k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  6.03k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  6.03k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 6.03k, False: 0]
  |  Branch (6668:25): [True: 6.03k, False: 0]
  |  Branch (6668:49): [True: 6.03k, False: 0]
  ------------------
 6669|  6.03k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 6.03k, False: 0]
  ------------------
 6670|  6.03k|        ++begin;
 6671|       |
 6672|  6.03k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  6.03k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  6.03k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  6.03k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  6.03k|        return;
 6686|  6.03k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6636|  12.0k|{
 6637|  12.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  12.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  12.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.0k]
  |  |  |  Branch (859:45): [True: 0, False: 12.0k]
  |  |  |  Branch (859:45): [True: 0, False: 12.0k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  12.0k|    const auto cp =
 6646|  12.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  12.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.0k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  12.0k|    begin += len;
 6653|  12.0k|    return cp;
 6654|  12.0k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  11.9k|{
 6532|  11.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  11.9k|    auto check_align = [](wchar_t ch) {
 6535|  11.9k|        switch (ch) {
 6536|  11.9k|            case L'<':
 6537|  11.9k|                return align_type::left;
 6538|  11.9k|            case L'>':
 6539|  11.9k|                return align_type::right;
 6540|  11.9k|            case L'^':
 6541|  11.9k|                return align_type::center;
 6542|  11.9k|            default:
 6543|  11.9k|                return align_type::none;
 6544|  11.9k|        }
 6545|  11.9k|    };
 6546|       |
 6547|  11.9k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  11.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  |  Branch (859:45): [True: 0, False: 11.9k]
  |  |  |  Branch (859:45): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6549|  11.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  11.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  11.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  11.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  11.9k|    const auto begin_before_fill = begin;
 6559|  11.9k|    begin += potential_fill_len;
 6560|       |
 6561|  11.9k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 11.9k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  11.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  11.9k|    const auto begin_after_fill = begin;
 6567|  11.9k|    ++begin;
 6568|       |
 6569|  11.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 11.9k, False: 0]
  ------------------
 6570|  11.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  11.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 3.01k, False: 8.95k]
  ------------------
 6575|  3.01k|            return begin_before_fill;
 6576|  3.01k|        }
 6577|  11.9k|    }
 6578|       |
 6579|  8.95k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 8.95k, False: 0]
  ------------------
 6580|  8.95k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 8.95k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  8.95k|        return begin_before_fill;
 6585|  8.95k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  8.95k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  23.9k|    auto check_align = [](wchar_t ch) {
 6535|  23.9k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 23.9k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 23.9k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 23.9k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  23.9k|            default:
  ------------------
  |  Branch (6542:13): [True: 23.9k, False: 0]
  ------------------
 6543|  23.9k|                return align_type::none;
 6544|  23.9k|        }
 6545|  23.9k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  11.9k|{
 6597|  11.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  11.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 11.9k, False: 0]
  |  Branch (6599:33): [True: 5.96k, False: 6.00k]
  ------------------
 6600|  5.96k|        int width = parse_simple_int(begin, end);
 6601|  5.96k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.96k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.96k, False: 0]
  |  |  ------------------
  ------------------
 6602|  5.96k|            handler.on_width(width);
 6603|  5.96k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  5.96k|    }
 6609|  11.9k|    return begin;
 6610|  11.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  2.98k|    {
 7127|  2.98k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  2.98k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 2.98k, False: 0]
  ------------------
 7129|  2.98k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 2.98k, False: 0]
  ------------------
 7130|  2.98k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 2.98k, False: 0]
  ------------------
 7131|  2.98k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 2.98k, False: 0]
  ------------------
 7132|  2.98k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  2.98k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  2.98k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  4.29M|{
 8417|  4.29M|#define SCN_VISIT(Type)                                         \
 8418|  4.29M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  4.29M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  4.29M|    }                                                           \
 8421|  4.29M|    else {                                                      \
 8422|  4.29M|        return vis(monostate_val);                              \
 8423|  4.29M|    }
 8424|       |
 8425|  4.29M|    monostate monostate_val{};
 8426|       |
 8427|  4.29M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 4.29M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 4.29M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 4.29M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 4.29M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 4.29M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 4.29M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 4.29M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 4.29M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 4.29M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 4.29M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 4.29M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 4.29M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 4.29M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 4.29M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 4.29M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 4.29M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 4.29M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 4.29M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 4.29M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 4.29M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 4.29M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  4.29M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 4.29M, False: 0]
  ------------------
 8471|  4.29M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  4.29M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  4.29M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  4.29M|    }                                                           \
  |  | 8421|  4.29M|    else {                                                      \
  |  | 8422|  4.29M|        return vis(monostate_val);                              \
  |  | 8423|  4.29M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 4.29M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 4.29M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 4.29M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 4.29M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 4.29M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  4.29M|            SCN_CLANG_POP
 8495|  4.29M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|  19.3k|    {
 4076|  19.3k|        sync(0);
 4077|  19.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|  52.7k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  6.43M|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  4.29M|{
   89|  4.29M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  4.29M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  4.29M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  4.29M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  8.59M|{
   44|  8.59M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  8.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  8.59M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNSQ_13type_identityISL_E4typeEJDpNS15_ISW_E4typeEEEE:
  126|  4.29M|{
  127|  4.29M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  4.29M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  4.29M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  4.29M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  8.59M|{
   60|  8.59M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  8.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  8.59M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  162|  2.14M|{
  163|  2.14M|    T value;
  164|  2.14M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  2.14M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  2.14M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.14M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.14M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 2.14M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.49k|    }                                                  \
  |  |  |  | 3671|  2.14M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.14M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.14M|    static_cast<    \
  |  |  929|  2.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.14M|    static_cast<    \
  |  |  929|  2.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  2.14M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  4.29M|{
   72|  4.29M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.29M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  4.29M|{
   89|  4.29M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  4.29M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  4.29M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  4.29M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EELPv0ELSF_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
  126|  4.29M|{
  127|  4.29M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  4.29M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  4.29M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  4.29M|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
  162|  2.14M|{
  163|  2.14M|    T value;
  164|  2.14M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  2.14M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  2.14M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.14M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.14M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 2.14M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.49k|    }                                                  \
  |  |  |  | 3671|  2.14M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.14M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.14M|    static_cast<    \
  |  |  929|  2.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.14M|    static_cast<    \
  |  |  929|  2.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  2.14M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEEOSP_NS0_24basic_scan_format_stringIwNSU_13type_identityISP_E4typeEJDpNS16_IS10_E4typeEEEE:
   88|  4.29M|{
   89|  4.29M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  4.29M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  4.29M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  4.29M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  4.29M|{
   44|  4.29M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  4.29M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EELPv0ELSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSQ_NS0_24basic_scan_format_stringIwNSV_13type_identityISQ_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|  4.29M|{
  127|  4.29M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  4.29M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  4.29M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  4.29M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  4.29M|{
   60|  4.29M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  4.29M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJT_EEEEEOSP_:
  162|  2.14M|{
  163|  2.14M|    T value;
  164|  2.14M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  2.14M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  2.14M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.14M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.14M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 2.14M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.49k|    }                                                  \
  |  |  |  | 3671|  2.14M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.14M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.14M|    static_cast<    \
  |  |  929|  2.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.14M|    static_cast<    \
  |  |  929|  2.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  2.14M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  2.14M|{
   72|  2.14M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  2.14M|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  13.0M|{
  653|  13.0M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  13.0M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  76.2k|{
 2184|  76.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  76.2k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  39.0k|{
 2192|  39.0k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  39.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  39.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34.5k, False: 4.47k]
  |  |  ------------------
  ------------------
 2194|  34.5k|        source.sync(*n);
 2195|  34.5k|    }
 2196|  4.47k|    else {
 2197|  4.47k|        source.sync_all();
 2198|  4.47k|    }
 2199|  39.0k|    return n;
 2200|  39.0k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  8.59M|{
 2208|  8.59M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  8.59M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|  4.29M|{
 2216|  4.29M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|  4.29M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  4.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.28M, False: 8.95k]
  |  |  ------------------
  ------------------
 2218|  4.28M|        source.sync(*n);
 2219|  4.28M|    }
 2220|  8.95k|    else {
 2221|  8.95k|        source.sync_all();
 2222|  8.95k|    }
 2223|  4.29M|    return n;
 2224|  4.29M|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   258k|{
  194|   258k|    return find_classic_impl(
  195|   258k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   258k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   258k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   262k|{
  202|   262k|    return find_classic_impl(
  203|   262k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   262k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   262k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  76.2k|{
 2141|  76.2k|    return vscan_internal(source, format, args);
 2142|  76.2k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  39.0k|{
 2147|  39.0k|    auto n = vscan_internal(source, format, args);
 2148|  39.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  39.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34.5k, False: 4.47k]
  |  |  ------------------
  ------------------
 2149|  34.5k|        source.sync(*n);
 2150|  34.5k|    }
 2151|  4.47k|    else {
 2152|  4.47k|        source.sync_all();
 2153|  4.47k|    }
 2154|  39.0k|    return n;
 2155|  39.0k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  8.59M|{
 2161|  8.59M|    return vscan_internal(source, format, args);
 2162|  8.59M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|  4.29M|{
 2167|  4.29M|    auto n = vscan_internal(source, format, args);
 2168|  4.29M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  4.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.28M, False: 8.95k]
  |  |  ------------------
  ------------------
 2169|  4.28M|        source.sync(*n);
 2170|  4.28M|    }
 2171|  8.95k|    else {
 2172|  8.95k|        source.sync_all();
 2173|  8.95k|    }
 2174|  4.29M|    return n;
 2175|  4.29M|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  34.8k|{
 2251|  34.8k|    return vscan_value_internal(source, arg);
 2252|  34.8k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  17.9k|{
 2256|  17.9k|    auto n = vscan_value_internal(source, arg);
 2257|  17.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 17.1k, False: 746]
  |  |  ------------------
  ------------------
 2258|  17.1k|        source.sync(*n);
 2259|  17.1k|    }
 2260|    746|    else {
 2261|    746|        source.sync_all();
 2262|    746|    }
 2263|  17.9k|    return n;
 2264|  17.9k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  4.29M|{
 2270|  4.29M|    return vscan_value_internal(source, arg);
 2271|  4.29M|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  2.14M|{
 2276|  2.14M|    auto n = vscan_value_internal(source, arg);
 2277|  2.14M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  2.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.14M, False: 1.49k]
  |  |  ------------------
  ------------------
 2278|  2.14M|        source.sync(*n);
 2279|  2.14M|    }
 2280|  1.49k|    else {
 2281|  1.49k|        source.sync_all();
 2282|  1.49k|    }
 2283|  2.14M|    return n;
 2284|  2.14M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   258k|{
  118|   258k|    auto it = source.begin();
  119|       |
  120|   481k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 390k, False: 91.0k]
  ------------------
  121|   390k|        auto sv =
  122|   390k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   390k|                .substr(0, 8);
  124|       |
  125|   390k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 251k, False: 139k]
  ------------------
  126|   251k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   251k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   251k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 118k, False: 132k]
  ------------------
  129|   118k|                break;
  130|   118k|            }
  131|   132k|            continue;
  132|   251k|        }
  133|       |
  134|   415k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 325k, False: 89.9k]
  ------------------
  135|   325k|            auto tmp =
  136|   325k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   325k|            auto res = get_next_code_point(tmp);
  138|   325k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 49.1k, False: 276k]
  ------------------
  139|  49.1k|                return it;
  140|  49.1k|            }
  141|   276k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   276k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   276k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   276k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   276k|        }
  145|   139k|    }
  146|       |
  147|   209k|    return detail::make_string_view_iterator(source, it);
  148|   258k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   649k|{
  105|   649k|    static_assert(sizeof(*source.data()) == 1);
  106|   649k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   649k|    uint64_t word{};
  108|   649k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   649k|    return has_byte_greater(word, 127) != 0;
  111|   649k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  1.07M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   325k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   262k|{
  118|   262k|    auto it = source.begin();
  119|       |
  120|   346k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 258k, False: 87.5k]
  ------------------
  121|   258k|        auto sv =
  122|   258k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   258k|                .substr(0, 8);
  124|       |
  125|   258k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 202k, False: 56.6k]
  ------------------
  126|   202k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   202k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   202k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 119k, False: 82.3k]
  ------------------
  129|   119k|                break;
  130|   119k|            }
  131|  82.3k|            continue;
  132|   202k|        }
  133|       |
  134|   116k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 114k, False: 1.81k]
  ------------------
  135|   114k|            auto tmp =
  136|   114k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   114k|            auto res = get_next_code_point(tmp);
  138|   114k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 54.8k, False: 59.5k]
  ------------------
  139|  54.8k|                return it;
  140|  54.8k|            }
  141|  59.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  59.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  59.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  59.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  59.5k|        }
  145|  56.6k|    }
  146|       |
  147|   207k|    return detail::make_string_view_iterator(source, it);
  148|   262k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|   588k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   114k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  78.1k|{
 2073|  78.1k|    const auto argcount = args.size();
 2074|  78.1k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 35.8k, False: 42.2k]
  |  Branch (2074:60): [True: 35.8k, False: 0]
  ------------------
 2075|  35.8k|        auto arg = args.get(0);
 2076|  35.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  35.8k|    static_cast<    \
  |  |  929|  35.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  35.8k|    }
 2078|       |
 2079|  42.2k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 42.2k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  42.2k|    SCN_UNLIKELY_ATTR
 2087|  42.2k|    {
 2088|  42.2k|        auto handler = format_handler<false, CharT>{
 2089|  42.2k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  42.2k|    static_cast<    \
  |  |  929|  42.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  42.2k|    static_cast<    \
  |  |  929|  42.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  42.2k|        return vscan_parse_format_string(format, handler);
 2091|  42.2k|    }
 2092|  42.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   230k|{
 1625|   230k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 125k, False: 105k]
  ------------------
 1626|   125k|        return false;
 1627|   125k|    }
 1628|   105k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 105k, False: 0]
  |  Branch (1628:39): [True: 105k, False: 0]
  ------------------
 1629|   230k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  53.7k|{
 1658|  53.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 53.7k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  53.7k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  53.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 53.7k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  53.7k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  53.7k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  53.7k|    static_cast<    \
  |  |  929|  53.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  53.7k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  53.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  53.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  53.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.23k, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.23k|    }                                                  \
  |  |  |  | 3671|  53.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  51.5k|    return it.position();
 1675|  53.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  82.8k|    {
 1903|  82.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  13.0M|    {
 1722|  13.0M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  13.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.0M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  13.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  82.8k|    {
 1853|  82.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  82.8k|{
 2038|  82.8k|    const auto beg = handler.get_ctx().begin();
 2039|  82.8k|    detail::parse_format_string<false>(format, handler);
 2040|  82.8k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  82.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 67.9k]
  |  |  ------------------
  ------------------
 2041|  14.9k|        return unexpected(handler.error);
 2042|  14.9k|    }
 2043|  67.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  82.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   538k|    {
 2022|   538k|        return ctx.get();
 2023|   538k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   538k|    {
 1857|   538k|        return contiguous_ctx;
 1858|   538k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   150k|    {
 1907|   150k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 150k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   150k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  82.8k|{
 1681|  82.8k|    auto arg = ctx.arg(id);
 1682|  82.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  82.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 82.8k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  82.8k|    return arg;
 1686|  82.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  13.0M|    {
 1797|  13.0M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  13.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.0M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  13.0M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  13.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.0M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  13.0M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  13.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 13.0M, False: 0]
  |  |  ------------------
  ------------------
 1807|  13.0M|            visited_args_lower64 |= (1ull << id);
 1808|  13.0M|            return;
 1809|  13.0M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  13.0M|    {
 1782|  13.0M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  13.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.0M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  13.0M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  13.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 13.0M, False: 0]
  |  |  ------------------
  ------------------
 1788|  13.0M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  13.0M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  13.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  40.2k|    {
 1766|  40.2k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  40.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.2k, False: 0]
  |  |  ------------------
  ------------------
 1767|  40.2k|            error = err;
 1768|  40.2k|        }
 1769|  40.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  82.8k|    {
 1944|  82.8k|        return parse_ctx.next_arg_id();
 1945|  82.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  82.8k|    {
 1985|  82.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  82.8k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  82.8k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 82.8k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  82.8k|        auto specs = detail::format_specs{};
 1998|  82.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  82.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  82.8k|            arg.type()};
 2001|       |
 2002|  82.8k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  82.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 82.8k]
  |  Branch (2003:29): [True: 0, False: 82.8k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  82.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  82.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.96k, False: 76.9k]
  |  |  ------------------
  ------------------
 2009|  5.96k|            return parse_ctx.begin();
 2010|  5.96k|        }
 2011|  76.9k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  76.9k|        on_visit_scan_arg(
 2014|  76.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  76.9k|                                           get_ctx().locale()},
 2016|  76.9k|            arg);
 2017|  76.9k|        return parse_ctx.begin();
 2018|  82.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  82.8k|    {
 1701|  82.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  76.9k|    {
 1956|  76.9k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 76.9k]
  |  Branch (1956:23): [True: 0, False: 76.9k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  76.9k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  76.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  76.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  76.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 67.9k]
  |  |  ------------------
  ------------------
 1963|  8.95k|            on_error(r.error());
 1964|  8.95k|        }
 1965|  67.9k|        else {
 1966|  67.9k|            get_ctx().advance_to(*r);
 1967|  67.9k|        }
 1968|  76.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  26.8k|    {
 1761|  26.8k|        SCN_UNLIKELY_ATTR
 1762|  26.8k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  26.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  13.0M|    {
 1729|  13.0M|        {
 1730|  13.0M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 13.0M]
  ------------------
 1731|  13.0M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 13.0M]
  ------------------
 1732|  13.0M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  13.0M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  13.0M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 13.0M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  13.0M|        }
 1739|       |
 1740|  13.0M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 13.0M, False: 0]
  ------------------
 1741|  13.0M|            return;
 1742|  13.0M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  13.0M|    {
 1777|  13.0M|        return error;
 1778|  13.0M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  39.0M|    {
 1773|  39.0M|        return static_cast<bool>(error);
 1774|  39.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  42.2k|    {
 1903|  42.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  42.2k|    {
 1830|  42.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  42.2k|{
 2038|  42.2k|    const auto beg = handler.get_ctx().begin();
 2039|  42.2k|    detail::parse_format_string<false>(format, handler);
 2040|  42.2k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.46k, False: 34.8k]
  |  |  ------------------
  ------------------
 2041|  7.46k|        return unexpected(handler.error);
 2042|  7.46k|    }
 2043|  34.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  42.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   275k|    {
 2022|   275k|        return ctx.get();
 2023|   275k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   275k|    {
 1834|   275k|        return ctx;
 1835|   275k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  77.0k|    {
 1907|  77.0k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 77.0k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  77.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  42.2k|{
 1681|  42.2k|    auto arg = ctx.arg(id);
 1682|  42.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  42.2k|    return arg;
 1686|  42.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  42.2k|    {
 1944|  42.2k|        return parse_ctx.next_arg_id();
 1945|  42.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  42.2k|    {
 1985|  42.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  42.2k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  42.2k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 42.2k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  42.2k|        auto specs = detail::format_specs{};
 1998|  42.2k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  42.2k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  42.2k|            arg.type()};
 2001|       |
 2002|  42.2k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  42.2k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 42.2k]
  |  Branch (2003:29): [True: 0, False: 42.2k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  42.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 39.2k]
  |  |  ------------------
  ------------------
 2009|  2.98k|            return parse_ctx.begin();
 2010|  2.98k|        }
 2011|  39.2k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  39.2k|        on_visit_scan_arg(
 2014|  39.2k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  39.2k|                                           get_ctx().locale()},
 2016|  39.2k|            arg);
 2017|  39.2k|        return parse_ctx.begin();
 2018|  42.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  42.2k|    {
 1701|  42.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  39.2k|    {
 1956|  39.2k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 39.2k]
  |  Branch (1956:23): [True: 0, False: 39.2k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  39.2k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  39.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.47k, False: 34.8k]
  |  |  ------------------
  ------------------
 1963|  4.47k|            on_error(r.error());
 1964|  4.47k|        }
 1965|  34.8k|        else {
 1966|  34.8k|            get_ctx().advance_to(*r);
 1967|  34.8k|        }
 1968|  39.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   152k|{
 2053|   152k|    const auto argcount = args.size();
 2054|   152k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 69.6k, False: 82.8k]
  |  Branch (2054:60): [True: 69.6k, False: 0]
  ------------------
 2055|  69.6k|        auto arg = args.get(0);
 2056|  69.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  69.6k|    static_cast<    \
  |  |  929|  69.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  69.6k|    }
 2058|       |
 2059|  82.8k|    auto handler = format_handler<true, CharT>{
 2060|  82.8k|        ranges::subrange<const CharT*>{source.data(),
 2061|  82.8k|                                       source.data() + source.size()},
 2062|  82.8k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  82.8k|    static_cast<    \
  |  |  929|  82.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  82.8k|    static_cast<    \
  |  |  929|  82.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  82.8k|    return vscan_parse_format_string(format, handler);
 2064|   152k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   104k|{
 1638|   104k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 104k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   104k|    auto reader =
 1644|   104k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   104k|            ranges::subrange<const CharT*>{source.data(),
 1646|   104k|                                           source.data() + source.size()},
 1647|   104k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   104k|    static_cast<    \
  |  |  929|   104k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   104k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.47k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.47k|    }                                                  \
  |  |  |  | 3671|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   100k|    return ranges::distance(source.data(), it);
 1650|   104k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  17.1M|{
 2053|  17.1M|    const auto argcount = args.size();
 2054|  17.1M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 8.58M, False: 8.60M]
  |  Branch (2054:60): [True: 8.58M, False: 0]
  ------------------
 2055|  8.58M|        auto arg = args.get(0);
 2056|  8.58M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  8.58M|    static_cast<    \
  |  |  929|  8.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  8.58M|    }
 2058|       |
 2059|  8.60M|    auto handler = format_handler<true, CharT>{
 2060|  8.60M|        ranges::subrange<const CharT*>{source.data(),
 2061|  8.60M|                                       source.data() + source.size()},
 2062|  8.60M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  8.60M|    static_cast<    \
  |  |  929|  8.60M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  8.60M|    static_cast<    \
  |  |  929|  8.60M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  8.60M|    return vscan_parse_format_string(format, handler);
 2064|  17.1M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  25.7M|{
 1625|  25.7M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 12.9M, False: 12.8M]
  ------------------
 1626|  12.9M|        return false;
 1627|  12.9M|    }
 1628|  12.8M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 12.8M, False: 0]
  |  Branch (1628:39): [True: 12.8M, False: 0]
  ------------------
 1629|  25.7M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  12.8M|{
 1638|  12.8M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  12.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.8M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  12.8M|    auto reader =
 1644|  12.8M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  12.8M|            ranges::subrange<const CharT*>{source.data(),
 1646|  12.8M|                                           source.data() + source.size()},
 1647|  12.8M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  12.8M|    static_cast<    \
  |  |  929|  12.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  12.8M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  12.8M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  12.8M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  12.8M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.95k, False: 12.8M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.95k|    }                                                  \
  |  |  |  | 3671|  12.8M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  12.8M|    return ranges::distance(source.data(), it);
 1650|  12.8M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|  8.60M|    {
 1903|  8.60M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|  8.60M|    {
 1853|  8.60M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  8.60M|{
 2038|  8.60M|    const auto beg = handler.get_ctx().begin();
 2039|  8.60M|    detail::parse_format_string<false>(format, handler);
 2040|  8.60M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.8k, False: 8.57M]
  |  |  ------------------
  ------------------
 2041|  29.8k|        return unexpected(handler.error);
 2042|  29.8k|    }
 2043|  8.57M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  8.60M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  60.1M|    {
 2022|  60.1M|        return ctx.get();
 2023|  60.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  60.1M|    {
 1857|  60.1M|        return contiguous_ctx;
 1858|  60.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  17.1M|    {
 1907|  17.1M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 17.1M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  17.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  8.60M|{
 1681|  8.60M|    auto arg = ctx.arg(id);
 1682|  8.60M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  8.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  8.60M|    return arg;
 1686|  8.60M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  8.60M|    {
 1944|  8.60M|        return parse_ctx.next_arg_id();
 1945|  8.60M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  8.60M|    {
 1985|  8.60M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  8.60M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  8.60M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 8.60M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  8.60M|        auto specs = detail::format_specs{};
 1998|  8.60M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  8.60M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  8.60M|            arg.type()};
 2001|       |
 2002|  8.60M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  8.60M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 8.60M]
  |  Branch (2003:29): [True: 0, False: 8.60M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  8.60M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 8.59M]
  |  |  ------------------
  ------------------
 2009|  11.9k|            return parse_ctx.begin();
 2010|  11.9k|        }
 2011|  8.59M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  8.59M|        on_visit_scan_arg(
 2014|  8.59M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  8.59M|                                           get_ctx().locale()},
 2016|  8.59M|            arg);
 2017|  8.59M|        return parse_ctx.begin();
 2018|  8.60M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  8.60M|    {
 1701|  8.60M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  8.59M|    {
 1956|  8.59M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 8.59M]
  |  Branch (1956:23): [True: 0, False: 8.59M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  8.59M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  8.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  8.59M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  8.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 8.57M]
  |  |  ------------------
  ------------------
 1963|  17.9k|            on_error(r.error());
 1964|  17.9k|        }
 1965|  8.57M|        else {
 1966|  8.57M|            get_ctx().advance_to(*r);
 1967|  8.57M|        }
 1968|  8.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  8.59M|{
 2073|  8.59M|    const auto argcount = args.size();
 2074|  8.59M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 4.29M, False: 4.30M]
  |  Branch (2074:60): [True: 4.29M, False: 0]
  ------------------
 2075|  4.29M|        auto arg = args.get(0);
 2076|  4.29M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  4.29M|    static_cast<    \
  |  |  929|  4.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  4.29M|    }
 2078|       |
 2079|  4.30M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 4.30M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  4.30M|    SCN_UNLIKELY_ATTR
 2087|  4.30M|    {
 2088|  4.30M|        auto handler = format_handler<false, CharT>{
 2089|  4.30M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  4.30M|    static_cast<    \
  |  |  929|  4.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  4.30M|    static_cast<    \
  |  |  929|  4.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  4.30M|        return vscan_parse_format_string(format, handler);
 2091|  4.30M|    }
 2092|  4.30M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  6.43M|{
 1658|  6.43M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  6.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.43M]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  6.43M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  6.43M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6.43M]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  6.43M|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  6.43M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  6.43M|    static_cast<    \
  |  |  929|  6.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  6.43M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  6.43M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.43M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.43M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.47k, False: 6.43M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.47k|    }                                                  \
  |  |  |  | 3671|  6.43M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  6.43M|    return it.position();
 1675|  6.43M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|  4.30M|    {
 1903|  4.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|  4.30M|    {
 1830|  4.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  4.30M|{
 2038|  4.30M|    const auto beg = handler.get_ctx().begin();
 2039|  4.30M|    detail::parse_format_string<false>(format, handler);
 2040|  4.30M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  4.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 4.28M]
  |  |  ------------------
  ------------------
 2041|  14.9k|        return unexpected(handler.error);
 2042|  14.9k|    }
 2043|  4.28M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  4.30M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  30.0M|    {
 2022|  30.0M|        return ctx.get();
 2023|  30.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  30.0M|    {
 1834|  30.0M|        return ctx;
 1835|  30.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  8.59M|    {
 1907|  8.59M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 8.59M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  8.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  4.30M|{
 1681|  4.30M|    auto arg = ctx.arg(id);
 1682|  4.30M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  4.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.30M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  4.30M|    return arg;
 1686|  4.30M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|  4.30M|    {
 1944|  4.30M|        return parse_ctx.next_arg_id();
 1945|  4.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|  4.30M|    {
 1985|  4.30M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  4.30M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  4.30M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 4.30M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  4.30M|        auto specs = detail::format_specs{};
 1998|  4.30M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  4.30M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  4.30M|            arg.type()};
 2001|       |
 2002|  4.30M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  4.30M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 4.30M]
  |  Branch (2003:29): [True: 0, False: 4.30M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  4.30M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  4.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.96k, False: 4.29M]
  |  |  ------------------
  ------------------
 2009|  5.96k|            return parse_ctx.begin();
 2010|  5.96k|        }
 2011|  4.29M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  4.29M|        on_visit_scan_arg(
 2014|  4.29M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  4.29M|                                           get_ctx().locale()},
 2016|  4.29M|            arg);
 2017|  4.29M|        return parse_ctx.begin();
 2018|  4.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|  4.30M|    {
 1701|  4.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  4.29M|    {
 1956|  4.29M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 4.29M]
  |  Branch (1956:23): [True: 0, False: 4.29M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  4.29M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  4.29M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 4.28M]
  |  |  ------------------
  ------------------
 1963|  8.95k|            on_error(r.error());
 1964|  8.95k|        }
 1965|  4.28M|        else {
 1966|  4.28M|            get_ctx().advance_to(*r);
 1967|  4.28M|        }
 1968|  4.29M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  34.8k|{
 2099|  34.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  34.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  17.9k|{
 2099|  17.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  17.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  4.29M|{
 2099|  4.29M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  4.29M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  2.14M|{
 2099|  2.14M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  2.14M|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|    746|{
 1363|    746|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|    746|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|    746|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|    746|            std::u32string tmp;
 1368|    746|            transcode_to_string_impl_to32(src, tmp);
 1369|    746|            return transcode_to_string_impl_32to16<false>(
 1370|    746|                std::u32string_view{tmp}, dest);
 1371|    746|        }
 1372|    746|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|    746|            return transcode_to_string_impl_to32(src, dest);
 1374|    746|        }
 1375|    746|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|    746|{
 1256|    746|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|    746|    auto it = src.begin();
 1259|   210k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 209k, False: 746]
  ------------------
 1260|   209k|        auto res = get_next_code_point(
 1261|   209k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   209k|                                                                 src.end()));
 1263|   209k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.58k, False: 203k]
  |  |  ------------------
  ------------------
 1264|  6.58k|            dest.push_back(DestCharT{0xfffd});
 1265|  6.58k|        }
 1266|   203k|        else {
 1267|   203k|            dest.push_back(res.value);
 1268|   203k|        }
 1269|   209k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   209k|    }
 1271|    746|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   649k|{
 1169|   649k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   649k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   649k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   649k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.6k, False: 631k]
  |  |  ------------------
  ------------------
 1173|  18.6k|        return {get_start_for_next_code_point(input),
 1174|  18.6k|                detail::invalid_code_point};
 1175|  18.6k|    }
 1176|   631k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.93k, False: 626k]
  |  |  ------------------
  ------------------
 1177|  4.93k|        return {input.end(), detail::invalid_code_point};
 1178|  4.93k|    }
 1179|       |
 1180|   626k|    return {input.begin() + len,
 1181|   626k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   631k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  18.6k|{
 1155|  18.6k|    auto it = input.begin();
 1156|  93.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 92.6k, False: 715]
  ------------------
 1157|  92.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 17.8k, False: 74.7k]
  ------------------
 1158|  17.8k|            break;
 1159|  17.8k|        }
 1160|  92.6k|    }
 1161|  18.6k|    return it;
 1162|  18.6k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  13.4k|    {
 2931|  13.4k|        SCN_UNLIKELY_ATTR
 2932|  13.4k|        m_msg = msg;
 2933|  13.4k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  13.0M|    {
 2936|  13.0M|        return m_msg == nullptr;
 2937|  13.0M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  1.66M|{
  458|  1.66M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.66M|        static_cast<unsigned char>(ch))];
  460|  1.66M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  32.6k|{
  469|  32.6k|    return static_cast<unsigned char>(ch) <= 127;
  470|  32.6k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  9.08k|{
  474|  9.08k|#if WCHAR_MIN < 0
  475|  9.08k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 8.12k, False: 960]
  |  Branch (475:23): [True: 4.99k, False: 3.12k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  9.08k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   649k|{
  539|   649k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   649k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  51.9M|{
  784|  51.9M|    return e != eof_error::good;
  785|  51.9M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  17.7k|{
  798|  17.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  17.7k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  17.7k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   388M|{
 1200|       |    // Pattern_White_Space property
 1201|   388M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 279M, False: 108M]
  |  Branch (1201:27): [True: 32.2M, False: 247M]
  ------------------
 1202|   388M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 48.7M, False: 307M]
  ------------------
 1203|   388M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 2.45M, False: 304M]
  ------------------
 1204|   388M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 516k, False: 304M]
  ------------------
 1205|   388M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 498k, False: 303M]
  ------------------
 1206|   388M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 649k, False: 303M]
  ------------------
 1207|   388M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 15, False: 303M]
  ------------------
 1208|   388M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  12.9M|{
 6008|  12.9M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 12.9M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  12.9M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 12.9M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  12.9M|    return {};
 6023|  12.9M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   344k|    {
  304|   344k|        ranges::advance(x, n);
  305|   344k|        return x;
  306|   344k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   344k|    {
  268|   344k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   344k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   344k|    {
  151|   344k|        i += n;
  152|   344k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   852k|    {
  108|   852k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   852k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   852k|    {
   87|   852k|        return s - i;
   88|   852k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  21.4M|    {
  108|  21.4M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  21.4M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  21.4M|    {
   87|  21.4M|        return s - i;
   88|  21.4M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  91.5k|{
  981|  91.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  91.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  91.5k|        return true;
  984|  91.5k|    }
  985|  91.5k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  91.5k|                           ranges::const_iterator_t<Range>,
  987|  91.5k|                           typename detail::basic_scan_buffer<
  988|  91.5k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  91.5k|        auto beg = r.begin();
  990|  91.5k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 91.5k, False: 0]
  ------------------
  991|  91.5k|            return false;
  992|  91.5k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  91.5k|    else {
 1006|  91.5k|        return false;
 1007|  91.5k|    }
 1008|  91.5k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  28.9k|    {
  763|  28.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.9k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  6.39k|    {
  754|  6.39k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  14.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.4k|              cvref<T> obj = *get<T>(fn);
  745|  14.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.4k|              }
  748|  14.4k|              else {
  749|  14.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.4k|              }
  751|  14.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.4k|    {
  684|  14.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.4k|            return static_cast<T*>(s.m_cp);
  686|  14.4k|        }
  687|  14.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.4k|            return static_cast<T*>(s.m_p);
  689|  14.4k|        }
  690|  14.4k|        else {
  691|  14.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.4k|        }
  693|  14.4k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  6.39k|        {
  662|  6.39k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   472M|    {
  763|   472M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   472M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   472M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  32.2M|    {
  754|  32.2M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  85.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.0M|              cvref<T> obj = *get<T>(fn);
  745|  85.0M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  85.0M|                  obj(static_cast<decltype(args)>(args)...);
  747|  85.0M|              }
  748|  85.0M|              else {
  749|  85.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.0M|              }
  751|  85.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  85.0M|    {
  684|  85.0M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  85.0M|            return static_cast<T*>(s.m_cp);
  686|  85.0M|        }
  687|  85.0M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  85.0M|            return static_cast<T*>(s.m_p);
  689|  85.0M|        }
  690|  85.0M|        else {
  691|  85.0M|            return reinterpret_cast<T*>(s.m_fp);
  692|  85.0M|        }
  693|  85.0M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  32.2M|        {
  662|  32.2M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  37.7k|    {
 6037|  37.7k|        const bool need_skipped_width =
 6038|  37.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 37.7k]
  |  Branch (6038:33): [True: 0, False: 37.7k]
  ------------------
 6039|  37.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  37.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 37.7k]
  ------------------
 6043|  37.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 37.7k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  37.7k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 37.7k, False: 0]
  |  Branch (6047:56): [True: 35.6k, False: 2.13k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  35.6k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 35.6k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  70.5k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  35.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 734, False: 34.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    734|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    734|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    734|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    734|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    734|    }                                                  \
  |  |  |  | 3671|  35.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  70.5k|                            make_eof_scan_error));
 6058|       |
 6059|  70.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 34.9k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  34.9k|            return result_type{it, 0};
 6067|  70.5k|        }
 6068|       |
 6069|  2.13k|        return result_type{rng.begin(), 0};
 6070|  37.7k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.13k|{
 1976|  2.13k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.13k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.13k|{
 1957|  2.13k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.13k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.13k|    }
 1960|  2.13k|    else {
 1961|  2.13k|        auto first = range.begin();
 1962|  4.87k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 4.83k, False: 40]
  ------------------
 1963|  4.83k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.09k, False: 2.74k]
  ------------------
 1964|  2.09k|                return first;
 1965|  2.09k|            }
 1966|  4.83k|        }
 1967|     40|        return first;
 1968|  2.13k|    }
 1969|  2.13k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  34.8k|    {
  108|  34.8k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  34.8k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  34.8k|    {
   94|  34.8k|        iter_difference_t<I> counter{0};
   95|   381k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 346k, False: 34.8k]
  ------------------
   96|   346k|            ++i;
   97|   346k|            ++counter;
   98|   346k|        }
   99|  34.8k|        return counter;
  100|  34.8k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   142k|{
  950|   142k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.76k, False: 140k]
  |  |  ------------------
  ------------------
  951|  1.76k|        return eof_error::eof;
  952|  1.76k|    }
  953|   140k|    return eof_error::good;
  954|   142k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.06M|{
  944|  1.06M|    return is_range_eof(r.begin(), r.end());
  945|  1.06M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.06M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.06M|    {
  937|  1.06M|        return begin == end;
  938|  1.06M|    }
  939|  1.06M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|  88.3k|{
 1683|  88.3k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  88.3k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  88.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  88.3k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  88.3k|    }
 1688|  88.3k|    else {
 1689|  88.3k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  88.3k|    }
 1691|  88.3k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  88.3k|    {
 1537|  88.3k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  88.3k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  88.3k|    {
 1621|  88.3k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  88.3k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  88.3k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  88.3k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  88.3k|            m_storage.reset();
 1627|  88.3k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  88.3k|        }
 1629|  88.3k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  88.3k|                                          std::basic_string<CharT>>) {
 1631|  88.3k|            m_storage.emplace(SCN_FWD(range));
 1632|  88.3k|            m_view = string_view_type{*m_storage};
 1633|  88.3k|        }
 1634|  88.3k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  88.3k|                                          typename detail::basic_scan_buffer<
 1636|  88.3k|                                              value_t>::forward_iterator> &&
 1637|  88.3k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  88.3k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  88.3k|            auto end_seg = range.end().contiguous_segment();
 1640|  88.3k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.95k, False: 85.3k]
  |  |  ------------------
  ------------------
 1641|  88.3k|                             detail::to_address(end_seg.end()))) {
 1642|  2.95k|                auto& str = m_storage.emplace();
 1643|  2.95k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.95k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.95k|                m_view = string_view_type{str};
 1646|  2.95k|                return;
 1647|  2.95k|            }
 1648|       |
 1649|  85.3k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  85.3k|                                                            end_seg.data());
 1651|  85.3k|            m_storage.reset();
 1652|  85.3k|        }
 1653|  88.3k|        else {
 1654|  88.3k|            auto& str = m_storage.emplace();
 1655|  88.3k|            if constexpr (ranges::sized_range<Range>) {
 1656|  88.3k|                str.reserve(range.size());
 1657|  88.3k|            }
 1658|  88.3k|            if constexpr (ranges::common_range<Range>) {
 1659|  88.3k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  88.3k|                          std::back_inserter(str));
 1661|  88.3k|            }
 1662|  88.3k|            else {
 1663|  88.3k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  88.3k|                     ++it) {
 1665|  88.3k|                    str.push_back(*it);
 1666|  88.3k|                }
 1667|  88.3k|            }
 1668|  88.3k|            m_view = string_view_type{str};
 1669|  88.3k|        }
 1670|  88.3k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   172k|    {
 1582|   172k|        return m_view;
 1583|   172k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  88.3k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  34.4k|    {
 6079|  34.4k|        const bool need_skipped_width =
 6080|  34.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 34.4k]
  |  Branch (6080:33): [True: 0, False: 34.4k]
  ------------------
 6081|  34.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  34.4k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 34.4k]
  ------------------
 6084|  34.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 34.4k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  34.4k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 34.4k, False: 0]
  ------------------
 6093|  34.4k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 618, False: 33.8k]
  ------------------
 6094|  34.4k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 618]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|    618|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 618]
  ------------------
 6096|    618|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  34.4k|        return result_type{rng.begin(), 0};
 6118|  34.4k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   277k|{
  950|   277k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.29k, False: 274k]
  |  |  ------------------
  ------------------
  951|  3.29k|        return eof_error::eof;
  952|  3.29k|    }
  953|   274k|    return eof_error::good;
  954|   277k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   277k|{
  944|   277k|    return is_range_eof(r.begin(), r.end());
  945|   277k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   277k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   277k|    {
  937|   277k|        return begin == end;
  938|   277k|    }
  939|   277k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   172k|{
 1683|   172k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   172k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   172k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   172k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   172k|    }
 1688|   172k|    else {
 1689|   172k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   172k|    }
 1691|   172k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   172k|    {
 1490|   172k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   944k|    {
 1503|   944k|        return sv;
 1504|   944k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  4.26k|{
 1976|  4.26k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.26k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  4.26k|{
 1957|  4.26k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.26k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.26k|    }
 1960|  4.26k|    else {
 1961|  4.26k|        auto first = range.begin();
 1962|  4.26k|        for (; first != range.end(); ++first) {
 1963|  4.26k|            if (pred(*first)) {
 1964|  4.26k|                return first;
 1965|  4.26k|            }
 1966|  4.26k|        }
 1967|  4.26k|        return first;
 1968|  4.26k|    }
 1969|  4.26k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   173k|{
 2951|   173k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 173k, False: 0]
  ------------------
 2952|   173k|        auto it = read_while_classic_space(range);
 2953|   173k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   173k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.33k, False: 170k]
  |  |  ------------------
  ------------------
 2955|  2.33k|            return unexpected(e);
 2956|  2.33k|        }
 2957|       |
 2958|   170k|        return it;
 2959|   173k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   173k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   173k|{
 2117|   173k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   173k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   173k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   173k|        auto buf = make_contiguous_buffer(range);
 2121|   173k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   173k|        return ranges::next(range.begin(),
 2123|   173k|                            ranges::distance(buf.view().begin(), it));
 2124|   173k|    }
 2125|   173k|    else {
 2126|   173k|        auto it = range.begin();
 2127|       |
 2128|   173k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   173k|            auto seg = get_contiguous_beginning(range);
 2130|   173k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   173k|                seg_it != seg.end()) {
 2132|   173k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   173k|            }
 2134|   173k|            ranges::advance(it, seg.size());
 2135|   173k|        }
 2136|       |
 2137|   173k|        return read_while_code_point(
 2138|   173k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   173k|    }
 2140|   173k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   344k|{
 1683|   344k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   344k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   344k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   344k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   344k|    }
 1688|   344k|    else {
 1689|   344k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   344k|    }
 1691|   344k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   344k|    {
 1490|   344k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.74k|    {
  304|  3.74k|        ranges::advance(x, n);
  305|  3.74k|        return x;
  306|  3.74k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   176k|    {
  268|   176k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   176k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   176k|    {
  181|   341k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 165k, False: 176k]
  ------------------
  182|   165k|            ++i;
  183|   165k|        }
  184|   176k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  88.3k|    {
 1587|  88.3k|        return m_storage.has_value();
 1588|  88.3k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  2.02k|    {
 1592|  2.02k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  2.02k|        return *m_storage;
 1594|  2.02k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|  39.2k|    {
 6193|  39.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  39.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  39.2k|            auto rd = make_reader<T, char_type>();
 6198|  39.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  39.2k|                return unexpected(e);
 6200|  39.2k|            }
 6201|       |
 6202|  39.2k|            return impl(rd, range, value);
 6203|  39.2k|        }
 6204|  39.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  39.2k|            auto rd = make_reader<T, char_type>();
 6206|  39.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 37.7k]
  |  |  ------------------
  ------------------
 6207|  1.49k|                return unexpected(e);
 6208|  1.49k|            }
 6209|       |
 6210|  37.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 37.7k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  37.7k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  37.7k|                return impl(rd, range, value);
 6213|  37.7k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  39.2k|        else {
 6221|  39.2k|            SCN_EXPECT(false);
 6222|  39.2k|            SCN_UNREACHABLE;
 6223|  39.2k|        }
 6224|  39.2k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|   183k|{
 5809|   183k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   183k|        return reader_impl_for_bool<CharT>{};
 5811|   183k|    }
 5812|   183k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   183k|        return reader_impl_for_char<CharT>{};
 5814|   183k|    }
 5815|   183k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   183k|        return reader_impl_for_wchar<CharT>{};
 5817|   183k|    }
 5818|   183k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   183k|        return reader_impl_for_code_point<CharT>{};
 5820|   183k|    }
 5821|   183k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   183k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   183k|        return reader_impl_for_string<CharT>{};
 5824|   183k|    }
 5825|   183k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|   183k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|   183k|        return reader_impl_for_string<CharT>{};
 5828|   183k|    }
 5829|   183k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   183k|                       std::is_same_v<T, wregex_matches>) {
 5831|   183k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   183k|    }
 5833|   183k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   183k|        return reader_impl_for_voidptr<CharT>{};
 5835|   183k|    }
 5836|   183k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   183k|        return reader_impl_for_float<CharT>{};
 5838|   183k|    }
 5839|   183k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   183k|                       !std::is_same_v<T, wchar_t> &&
 5841|   183k|                       !std::is_same_v<T, char32_t> &&
 5842|   183k|                       !std::is_same_v<T, bool>) {
 5843|   183k|        return reader_impl_for_int<CharT>{};
 5844|   183k|    }
 5845|   183k|    else {
 5846|   183k|        return reader_impl_for_monostate<CharT>{};
 5847|   183k|    }
 5848|   183k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|   274k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   116k|    {
 3040|   116k|        reader_error_handler eh{};
 3041|   116k|        get_derived().check_specs_impl(specs, eh);
 3042|   116k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.47k, False: 111k]
  |  |  ------------------
  ------------------
 3043|  4.47k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.47k|        }
 3045|   111k|        return {};
 3046|   116k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   116k|    {
 3051|   116k|        return static_cast<Derived&>(*this);
 3052|   116k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   116k|    {
 5210|   116k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   116k|        SCN_GCC_PUSH
 5213|   116k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   116k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   116k|        SCN_CLANG_PUSH
 5217|   116k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   116k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   116k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 116k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 116k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   105k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 105k, False: 10.8k]
  ------------------
 5226|   105k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 105k]
  ------------------
 5227|   105k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 105k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   105k|                else {
 5231|   105k|                    m_type = reader_type::word;
 5232|   105k|                }
 5233|   105k|                break;
 5234|      0|            }
 5235|       |
 5236|  4.47k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 4.47k, False: 111k]
  ------------------
 5237|  4.47k|                m_type = reader_type::character;
 5238|  4.47k|                break;
 5239|       |
 5240|  6.39k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 6.39k, False: 109k]
  ------------------
 5241|  6.39k|                m_type = reader_type::character_set;
 5242|  6.39k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 116k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 116k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   116k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   116k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  37.7k|    {
 6124|  37.7k|        const bool need_skipped_width =
 6125|  37.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 37.7k]
  |  Branch (6125:33): [True: 0, False: 37.7k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  37.7k|        auto it = rng.begin();
 6129|  37.7k|        std::ptrdiff_t prefix_width = 0;
 6130|  37.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 37.7k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  37.7k|        else {
 6138|  37.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  37.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 734, False: 37.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    734|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    734|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    734|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    734|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    734|    }                                                  \
  |  |  |  | 3671|  37.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  37.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  37.0k|            std::tie(it, prefix_width) = prefix_result;
 6140|  37.0k|        }
 6141|  37.0k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  37.0k|        std::ptrdiff_t value_width = 0;
 6145|  37.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 37.0k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  37.0k|        else {
 6161|  37.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  37.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  37.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.25k, False: 34.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.25k|    }                                                  \
  |  | 3671|  37.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  37.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  34.8k|                                             specs, value, loc));
 6163|       |
 6164|  34.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 34.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  34.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  34.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  34.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 34.4k, False: 370]
  ------------------
 6174|  34.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  34.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 34.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  34.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  34.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  34.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  34.4k|                                 value_width));
 6178|  34.4k|            std::tie(it, postfix_width) = postfix_result;
 6179|  34.4k|        }
 6180|       |
 6181|  34.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  34.8k|                                                 value_width, postfix_width);
 6183|  34.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 34.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  34.8k|        return it;
 6188|  34.8k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|   371k|    {
 5259|   371k|        return m_type == reader_type::word;
 5260|   371k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   260k|{
 1132|   260k|    auto it = src.begin();
 1133|  1.85M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 1.59M, False: 254k]
  ------------------
 1134|  1.59M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  1.59M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 2.84k, False: 1.59M]
  ------------------
 1136|  2.84k|            return false;
 1137|  2.84k|        }
 1138|  1.59M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 394, False: 1.59M]
  ------------------
 1139|    394|            return false;
 1140|    394|        }
 1141|  1.59M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  1.59M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  1.59M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.89k, False: 1.59M]
  ------------------
 1144|  2.89k|            return false;
 1145|  2.89k|        }
 1146|  1.59M|        it += len;
 1147|  1.59M|    }
 1148|   254k|    return true;
 1149|   260k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  86.3k|{
 2993|  86.3k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|  86.3k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 2.02k, False: 84.3k]
  ------------------
 2995|  2.02k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.02k|    static_cast<    \
  |  |  929|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  2.02k|        }
 2997|  84.3k|        else {
 2998|  84.3k|            dest.assign(source.view());
 2999|  84.3k|        }
 3000|  86.3k|    }
 3001|  86.3k|    else {
 3002|  86.3k|        return transcode_impl(source.view(), dest);
 3003|  86.3k|    }
 3004|       |
 3005|  86.3k|    return {};
 3006|  86.3k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  6.39k|        {
 5103|  6.39k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 6.39k, False: 0]
  ------------------
 5104|  6.39k|                return {};
 5105|  6.39k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  13.1k|        {
 5076|  13.1k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  13.1k|            const auto val =
 5078|  13.1k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  13.1k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  13.1k|                    (val % 8)) &
 5081|  13.1k|                   1u;
 5082|  13.1k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  14.4k|        {
 5129|  14.4k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 1.38k, False: 13.1k]
  ------------------
 5130|  1.38k|                return false;
 5131|  1.38k|            }
 5132|       |
 5133|  13.1k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  14.4k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  6.39k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  37.0k|    {
 5277|  37.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  37.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  37.0k|        return read_impl(range, specs, value);
 5279|  37.0k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  37.0k|    {
 5295|  37.0k|        SCN_CLANG_PUSH
 5296|  37.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  37.0k|        switch (m_type) {
 5299|  34.9k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 34.9k, False: 2.13k]
  ------------------
 5300|  34.9k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 37.0k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 37.0k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.13k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.13k, False: 34.9k]
  ------------------
 5310|  2.13k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.13k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 37.0k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 37.0k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 37.0k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  37.0k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  37.0k|        }
 5331|       |
 5332|  37.0k|        SCN_CLANG_POP
 5333|  37.0k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|  87.6k|    {
 4820|  87.6k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  87.6k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|  87.6k|{
 4752|  87.6k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  87.6k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  87.6k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 1.96k, False: 85.7k]
  ------------------
 4756|  1.96k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  1.96k|                                     "Invalid encoding in scanned string");
 4758|  1.96k|    }
 4759|  85.7k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  85.7k|    static_cast<    \
  |  |  929|  85.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  85.7k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  85.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.7k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  85.7k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  85.7k|    static_cast<    \
  |  |  929|  85.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  85.7k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  87.6k|{
 2088|  87.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  87.6k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  87.6k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  87.6k|        auto buf = make_contiguous_buffer(range);
 2092|  87.6k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  87.6k|        return ranges::next(range.begin(),
 2094|  87.6k|                            ranges::distance(buf.view().begin(), it));
 2095|  87.6k|    }
 2096|  87.6k|    else {
 2097|  87.6k|        auto it = range.begin();
 2098|       |
 2099|  87.6k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  87.6k|            auto seg = get_contiguous_beginning(range);
 2101|  87.6k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  87.6k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 87.6k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|  87.6k|            ranges::advance(it, seg.size());
 2106|  87.6k|        }
 2107|       |
 2108|  87.6k|        return read_until_code_point(
 2109|  87.6k|            ranges::subrange{it, range.end()},
 2110|  87.6k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  87.6k|    }
 2112|  87.6k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   176k|{
 1039|   176k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   176k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   176k|        return r;
 1042|   176k|    }
 1043|   176k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   176k|                           ranges::const_iterator_t<Range>,
 1045|   176k|                           typename detail::basic_scan_buffer<
 1046|   176k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   176k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   176k|            auto seg = r.begin().contiguous_segment();
 1049|   176k|            auto dist =
 1050|   176k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   176k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   176k|        }
 1053|   176k|        else {
 1054|   176k|            return r.begin().contiguous_segment();
 1055|   176k|        }
 1056|   176k|    }
 1057|   176k|    else {
 1058|   176k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   176k|    }
 1060|   176k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   172k|{
 2061|   172k|    auto it = range.begin();
 2062|   924k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 921k, False: 2.95k]
  ------------------
 2063|   921k|        const auto val =
 2064|   921k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   921k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   921k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 911k, False: 9.48k]
  |  |  ------------------
  ------------------
 2066|   911k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   911k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   911k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 169k, False: 741k]
  ------------------
 2069|   169k|                return it;
 2070|   169k|            }
 2071|   911k|        }
 2072|   751k|        it = val.iterator;
 2073|   751k|    }
 2074|       |
 2075|  2.95k|    return it;
 2076|   172k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   921k|{
 1899|   921k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   921k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   921k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   921k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   921k|    auto it = range.begin();
 1903|   921k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   921k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   921k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.48k, False: 911k]
  |  |  ------------------
  ------------------
 1906|  9.48k|        ++it;
 1907|  9.48k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  9.48k|        return {it, {}};
 1909|  9.48k|    }
 1910|       |
 1911|   911k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 835k, False: 76.2k]
  ------------------
 1912|   835k|        ++it;
 1913|   835k|        return {it, string_type(1, *range.begin())};
 1914|   835k|    }
 1915|       |
 1916|  76.2k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  76.2k|    return {it, string_type{range.begin(), it}};
 1918|   911k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  9.48k|{
 1155|  9.48k|    auto it = input.begin();
 1156|  33.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 33.8k, False: 181]
  ------------------
 1157|  33.8k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.30k, False: 24.5k]
  ------------------
 1158|  9.30k|            break;
 1159|  9.30k|        }
 1160|  33.8k|    }
 1161|  9.48k|    return it;
 1162|  9.48k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  76.2k|    {
  283|  76.2k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  76.2k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  76.2k|    {
  252|  76.2k|        constexpr iter_difference_t<I> zero{0};
  253|  76.2k|        iter_difference_t<I> counter{0};
  254|       |
  255|   278k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 202k, False: 75.9k]
  |  Branch (255:30): [True: 202k, False: 310]
  ------------------
  256|   202k|            ++i;
  257|   202k|            ++counter;
  258|   202k|        }
  259|       |
  260|  76.2k|        return counter;
  261|  76.2k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|   921k|    {
 1890|   921k|        return !codepoint.empty();
 1891|   921k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  87.6k|    {
  754|  87.6k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   578k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   578k|              cvref<T> obj = *get<T>(fn);
  745|   578k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   578k|                  obj(static_cast<decltype(args)>(args)...);
  747|   578k|              }
  748|   578k|              else {
  749|   578k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   578k|              }
  751|   578k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   578k|    {
  684|   578k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   578k|            return static_cast<T*>(s.m_cp);
  686|   578k|        }
  687|   578k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   578k|            return static_cast<T*>(s.m_p);
  689|   578k|        }
  690|   578k|        else {
  691|   578k|            return reinterpret_cast<T*>(s.m_fp);
  692|   578k|        }
  693|   578k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|   578k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  87.6k|        {
  662|  87.6k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  2.13k|    {
 5048|  2.13k|        auto it = read_source_impl(range, {specs});
 5049|  2.13k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 638]
  |  |  ------------------
  ------------------
 5050|  1.49k|            return unexpected(it.error());
 5051|  1.49k|        }
 5052|       |
 5053|    638|        return read_string_impl(range, *it, value);
 5054|  2.13k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  2.13k|    {
 5153|  2.13k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.13k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.13k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.13k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.13k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.13k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 2.13k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  2.13k|        const auto cb = [&](SourceCharT ch) {
 5176|  2.13k|            return cb_wrapper.on_ascii_only(ch);
 5177|  2.13k|        };
 5178|       |
 5179|  2.13k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 2.13k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  2.13k|        auto it = read_while_code_unit(range, cb);
 5184|  2.13k|        return check_nonempty(it, range);
 5185|  2.13k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  2.13k|    {
 5191|  2.13k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.49k, False: 638]
  ------------------
 5192|  1.49k|            return unexpected_scan_error(
 5193|  1.49k|                scan_error::invalid_scanned_value,
 5194|  1.49k|                "No characters matched in [character set]");
 5195|  1.49k|        }
 5196|       |
 5197|    638|        return it;
 5198|  2.13k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  85.2k|{
 2082|  85.2k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  85.2k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_:
  753|  2.13k|    {
  754|  2.13k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  4.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.83k|              cvref<T> obj = *get<T>(fn);
  745|  4.83k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.83k|              }
  748|  4.83k|              else {
  749|  4.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.83k|              }
  751|  4.83k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.83k|    {
  684|  4.83k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.83k|            return static_cast<T*>(s.m_cp);
  686|  4.83k|        }
  687|  4.83k|        else if constexpr (std::is_object_v<T>) {
  688|  4.83k|            return static_cast<T*>(s.m_p);
  689|  4.83k|        }
  690|  4.83k|        else {
  691|  4.83k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.83k|        }
  693|  4.83k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.83k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.83k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.83k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  666|  2.13k|        {
  667|  2.13k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|    638|{
 4752|    638|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    638|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    638|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 638]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    638|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    638|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    638|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 638]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    638|    return SCN_MOVE(result);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    638|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  36.3k|    {
 5277|  36.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  36.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  36.3k|        return read_impl(range, specs, value);
 5279|  36.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  36.3k|    {
 5295|  36.3k|        SCN_CLANG_PUSH
 5296|  36.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  36.3k|        switch (m_type) {
 5299|  34.1k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 34.1k, False: 2.13k]
  ------------------
 5300|  34.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 36.3k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 36.3k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.13k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.13k, False: 34.1k]
  ------------------
 5310|  2.13k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.13k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 36.3k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 36.3k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 36.3k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  36.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  36.3k|        }
 5331|       |
 5332|  36.3k|        SCN_CLANG_POP
 5333|  36.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  85.4k|    {
 4820|  85.4k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  85.4k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  85.4k|{
 4752|  85.4k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  85.4k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  85.4k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 2.08k, False: 83.3k]
  ------------------
 4756|  2.08k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  2.08k|                                     "Invalid encoding in scanned string");
 4758|  2.08k|    }
 4759|  83.3k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  83.3k|    static_cast<    \
  |  |  929|  83.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  83.3k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  83.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.3k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  83.3k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  83.3k|    static_cast<    \
  |  |  929|  83.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  83.3k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  83.9k|{
 3012|  83.9k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  83.9k|        dest.assign(source.view());
 3014|  83.9k|    }
 3015|  83.9k|    else {
 3016|  83.9k|        return transcode_impl(source.view(), dest);
 3017|  83.9k|    }
 3018|       |
 3019|  83.9k|    return {};
 3020|  83.9k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   170k|{
 2088|   170k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   170k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   170k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   170k|        auto buf = make_contiguous_buffer(range);
 2092|   170k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   170k|        return ranges::next(range.begin(),
 2094|   170k|                            ranges::distance(buf.view().begin(), it));
 2095|   170k|    }
 2096|   170k|    else {
 2097|   170k|        auto it = range.begin();
 2098|       |
 2099|   170k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   170k|            auto seg = get_contiguous_beginning(range);
 2101|   170k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   170k|                seg_it != seg.end()) {
 2103|   170k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   170k|            }
 2105|   170k|            ranges::advance(it, seg.size());
 2106|   170k|        }
 2107|       |
 2108|   170k|        return read_until_code_point(
 2109|   170k|            ranges::subrange{it, range.end()},
 2110|   170k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   170k|    }
 2112|   170k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.13k|    {
 5048|  2.13k|        auto it = read_source_impl(range, {specs});
 5049|  2.13k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 638]
  |  |  ------------------
  ------------------
 5050|  1.49k|            return unexpected(it.error());
 5051|  1.49k|        }
 5052|       |
 5053|    638|        return read_string_impl(range, *it, value);
 5054|  2.13k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  4.26k|    {
 5153|  4.26k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  4.26k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  4.26k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.26k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  4.26k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  4.26k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 4.26k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  4.26k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.26k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.26k|        };
 5178|       |
 5179|  4.26k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 4.26k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  4.26k|        auto it = read_while_code_unit(range, cb);
 5184|  4.26k|        return check_nonempty(it, range);
 5185|  4.26k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  4.26k|    {
 5191|  4.26k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 2.98k, False: 1.27k]
  ------------------
 5192|  2.98k|            return unexpected_scan_error(
 5193|  2.98k|                scan_error::invalid_scanned_value,
 5194|  2.98k|                "No characters matched in [character set]");
 5195|  2.98k|        }
 5196|       |
 5197|  1.27k|        return it;
 5198|  4.26k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|  4.26k|    {
  754|  4.26k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  9.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.66k|              cvref<T> obj = *get<T>(fn);
  745|  9.66k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.66k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.66k|              }
  748|  9.66k|              else {
  749|  9.66k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.66k|              }
  751|  9.66k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  9.66k|    {
  684|  9.66k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.66k|            return static_cast<T*>(s.m_cp);
  686|  9.66k|        }
  687|  9.66k|        else if constexpr (std::is_object_v<T>) {
  688|  9.66k|            return static_cast<T*>(s.m_p);
  689|  9.66k|        }
  690|  9.66k|        else {
  691|  9.66k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.66k|        }
  693|  9.66k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  9.66k|        const auto cb = [&](SourceCharT ch) {
 5176|  9.66k|            return cb_wrapper.on_ascii_only(ch);
 5177|  9.66k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|  4.26k|        {
  667|  4.26k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    638|{
 4752|    638|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    638|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    638|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 638]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    638|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    638|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    638|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 638]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    638|    return SCN_MOVE(result);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    638|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  90.7k|{
 5809|  90.7k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  90.7k|        return reader_impl_for_bool<CharT>{};
 5811|  90.7k|    }
 5812|  90.7k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  90.7k|        return reader_impl_for_char<CharT>{};
 5814|  90.7k|    }
 5815|  90.7k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  90.7k|        return reader_impl_for_wchar<CharT>{};
 5817|  90.7k|    }
 5818|  90.7k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  90.7k|        return reader_impl_for_code_point<CharT>{};
 5820|  90.7k|    }
 5821|  90.7k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  90.7k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  90.7k|        return reader_impl_for_string<CharT>{};
 5824|  90.7k|    }
 5825|  90.7k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  90.7k|                       std::is_same_v<T, std::wstring>) {
 5827|  90.7k|        return reader_impl_for_string<CharT>{};
 5828|  90.7k|    }
 5829|  90.7k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  90.7k|                       std::is_same_v<T, wregex_matches>) {
 5831|  90.7k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  90.7k|    }
 5833|  90.7k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  90.7k|        return reader_impl_for_voidptr<CharT>{};
 5835|  90.7k|    }
 5836|  90.7k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  90.7k|        return reader_impl_for_float<CharT>{};
 5838|  90.7k|    }
 5839|  90.7k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  90.7k|                       !std::is_same_v<T, wchar_t> &&
 5841|  90.7k|                       !std::is_same_v<T, char32_t> &&
 5842|  90.7k|                       !std::is_same_v<T, bool>) {
 5843|  90.7k|        return reader_impl_for_int<CharT>{};
 5844|  90.7k|    }
 5845|  90.7k|    else {
 5846|  90.7k|        return reader_impl_for_monostate<CharT>{};
 5847|  90.7k|    }
 5848|  90.7k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  36.3k|    {
 5277|  36.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  36.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  36.3k|        return read_impl(range, specs, value);
 5279|  36.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  36.3k|    {
 5295|  36.3k|        SCN_CLANG_PUSH
 5296|  36.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  36.3k|        switch (m_type) {
 5299|  34.1k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 34.1k, False: 2.13k]
  ------------------
 5300|  34.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 36.3k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 36.3k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.13k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.13k, False: 34.1k]
  ------------------
 5310|  2.13k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.13k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 36.3k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 36.3k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 36.3k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  36.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  36.3k|        }
 5331|       |
 5332|  36.3k|        SCN_CLANG_POP
 5333|  36.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  85.4k|    {
 4827|  85.4k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  85.4k|                                     value);
 4829|  85.4k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  85.4k|{
 4773|  85.4k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  85.4k|    auto src = [&]() {
 4776|  85.4k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  85.4k|            return make_contiguous_buffer(
 4778|  85.4k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  85.4k|        }
 4780|  85.4k|        else {
 4781|  85.4k|            return make_contiguous_buffer(
 4782|  85.4k|                ranges::subrange{range.begin(), result});
 4783|  85.4k|        }
 4784|  85.4k|    }();
 4785|  85.4k|    using src_type = decltype(src);
 4786|       |
 4787|  85.4k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  85.4k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  85.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  85.4k|                                     "Cannot read a string_view from "
 4796|  85.4k|                                     "this source range (would require "
 4797|  85.4k|                                     "transcoding)");
 4798|  85.4k|    }
 4799|  85.4k|    else {
 4800|  85.4k|        const auto view = src.view();
 4801|  85.4k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  85.4k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 2.08k, False: 83.3k]
  ------------------
 4804|  2.08k|            return unexpected_scan_error(
 4805|  2.08k|                scan_error::invalid_scanned_value,
 4806|  2.08k|                "Invalid encoding in scanned string_view");
 4807|  2.08k|        }
 4808|       |
 4809|  83.3k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  83.3k|    static_cast<    \
  |  |  929|  83.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  85.4k|    }
 4811|  85.4k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  85.4k|    auto src = [&]() {
 4776|  85.4k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  85.4k|            return make_contiguous_buffer(
 4778|  85.4k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  85.4k|        }
 4780|  85.4k|        else {
 4781|  85.4k|            return make_contiguous_buffer(
 4782|  85.4k|                ranges::subrange{range.begin(), result});
 4783|  85.4k|        }
 4784|  85.4k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  2.13k|    {
 5062|  2.13k|        auto it = read_source_impl(range, {specs});
 5063|  2.13k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 638]
  |  |  ------------------
  ------------------
 5064|  1.49k|            return unexpected(it.error());
 5065|  1.49k|        }
 5066|       |
 5067|    638|        return read_string_view_impl(range, *it, value);
 5068|  2.13k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    638|{
 4773|    638|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    638|    auto src = [&]() {
 4776|    638|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    638|            return make_contiguous_buffer(
 4778|    638|                ranges::subrange{range.begin().base(), result.base()});
 4779|    638|        }
 4780|    638|        else {
 4781|    638|            return make_contiguous_buffer(
 4782|    638|                ranges::subrange{range.begin(), result});
 4783|    638|        }
 4784|    638|    }();
 4785|    638|    using src_type = decltype(src);
 4786|       |
 4787|    638|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    638|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    638|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    638|                                     "Cannot read a string_view from "
 4796|    638|                                     "this source range (would require "
 4797|    638|                                     "transcoding)");
 4798|    638|    }
 4799|    638|    else {
 4800|    638|        const auto view = src.view();
 4801|    638|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    638|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 638]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|    638|        return SCN_MOVE(result);
  ------------------
  |  |  928|    638|    static_cast<    \
  |  |  929|    638|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    638|    }
 4811|    638|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    638|    auto src = [&]() {
 4776|    638|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    638|            return make_contiguous_buffer(
 4778|    638|                ranges::subrange{range.begin().base(), result.base()});
 4779|    638|        }
 4780|    638|        else {
 4781|    638|            return make_contiguous_buffer(
 4782|    638|                ranges::subrange{range.begin(), result});
 4783|    638|        }
 4784|    638|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  88.9k|{
 2951|  88.9k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 88.9k, False: 0]
  ------------------
 2952|  88.9k|        auto it = read_while_classic_space(range);
 2953|  88.9k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  88.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  88.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.25k, False: 87.6k]
  |  |  ------------------
  ------------------
 2955|  1.25k|            return unexpected(e);
 2956|  1.25k|        }
 2957|       |
 2958|  87.6k|        return it;
 2959|  88.9k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  88.9k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  88.9k|{
 2117|  88.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  88.9k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  88.9k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  88.9k|        auto buf = make_contiguous_buffer(range);
 2121|  88.9k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  88.9k|        return ranges::next(range.begin(),
 2123|  88.9k|                            ranges::distance(buf.view().begin(), it));
 2124|  88.9k|    }
 2125|  88.9k|    else {
 2126|  88.9k|        auto it = range.begin();
 2127|       |
 2128|  88.9k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  88.9k|            auto seg = get_contiguous_beginning(range);
 2130|  88.9k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  88.9k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 3.74k, False: 85.2k]
  ------------------
 2132|  3.74k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  3.74k|            }
 2134|  85.2k|            ranges::advance(it, seg.size());
 2135|  85.2k|        }
 2136|       |
 2137|  85.2k|        return read_while_code_point(
 2138|  85.2k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  88.9k|    }
 2140|  88.9k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  85.2k|    {
  754|  85.2k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   333k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   333k|              cvref<T> obj = *get<T>(fn);
  745|   333k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   333k|                  obj(static_cast<decltype(args)>(args)...);
  747|   333k|              }
  748|   333k|              else {
  749|   333k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   333k|              }
  751|   333k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   333k|    {
  684|   333k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   333k|            return static_cast<T*>(s.m_cp);
  686|   333k|        }
  687|   333k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   333k|            return static_cast<T*>(s.m_p);
  689|   333k|        }
  690|   333k|        else {
  691|   333k|            return reinterpret_cast<T*>(s.m_fp);
  692|   333k|        }
  693|   333k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   333k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  85.2k|        {
  662|  85.2k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  10.7M|{
  981|  10.7M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  10.7M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  10.7M|        return true;
  984|  10.7M|    }
  985|  10.7M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  10.7M|                           ranges::const_iterator_t<Range>,
  987|  10.7M|                           typename detail::basic_scan_buffer<
  988|  10.7M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  10.7M|        auto beg = r.begin();
  990|  10.7M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 10.7M, False: 0]
  ------------------
  991|  10.7M|            return false;
  992|  10.7M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  10.7M|    else {
 1006|  10.7M|        return false;
 1007|  10.7M|    }
 1008|  10.7M|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  18.1k|    {
  763|  18.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  18.1k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  9.04k|    {
  754|  9.04k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  9.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.08k|              cvref<T> obj = *get<T>(fn);
  745|  9.08k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.08k|              }
  748|  9.08k|              else {
  749|  9.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.08k|              }
  751|  9.08k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  9.08k|    {
  684|  9.08k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.08k|            return static_cast<T*>(s.m_cp);
  686|  9.08k|        }
  687|  9.08k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.08k|            return static_cast<T*>(s.m_p);
  689|  9.08k|        }
  690|  9.08k|        else {
  691|  9.08k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.08k|        }
  693|  9.08k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  9.04k|        {
  662|  9.04k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  4.29M|    {
 6037|  4.29M|        const bool need_skipped_width =
 6038|  4.29M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 4.29M]
  |  Branch (6038:33): [True: 0, False: 4.29M]
  ------------------
 6039|  4.29M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  4.29M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 4.29M]
  ------------------
 6043|  4.29M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 4.29M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  4.29M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 4.29M, False: 0]
  |  Branch (6047:56): [True: 4.29M, False: 3.01k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  4.29M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 4.29M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  8.57M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  4.29M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.69k, False: 4.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.69k|    }                                                  \
  |  |  |  | 3671|  4.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  8.57M|                            make_eof_scan_error));
 6058|       |
 6059|  8.57M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 4.28M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  4.28M|            return result_type{it, 0};
 6067|  8.57M|        }
 6068|       |
 6069|  3.01k|        return result_type{rng.begin(), 0};
 6070|  4.29M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  3.01k|{
 1976|  3.01k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  3.01k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  3.01k|{
 1957|  3.01k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  3.01k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  3.01k|    }
 1960|  3.01k|    else {
 1961|  3.01k|        auto first = range.begin();
 1962|  3.04k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 3.02k, False: 20]
  ------------------
 1963|  3.02k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.99k, False: 32]
  ------------------
 1964|  2.99k|                return first;
 1965|  2.99k|            }
 1966|  3.02k|        }
 1967|     20|        return first;
 1968|  3.01k|    }
 1969|  3.01k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  4.28M|    {
  108|  4.28M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.28M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  4.28M|    {
   94|  4.28M|        iter_difference_t<I> counter{0};
   95|  47.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 42.9M, False: 4.28M]
  ------------------
   96|  42.9M|            ++i;
   97|  42.9M|            ++counter;
   98|  42.9M|        }
   99|  4.28M|        return counter;
  100|  4.28M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  17.1M|{
  950|  17.1M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  17.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.24k, False: 17.1M]
  |  |  ------------------
  ------------------
  951|  4.24k|        return eof_error::eof;
  952|  4.24k|    }
  953|  17.1M|    return eof_error::good;
  954|  17.1M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   146M|{
  944|   146M|    return is_range_eof(r.begin(), r.end());
  945|   146M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   146M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   146M|    {
  937|   146M|        return begin == end;
  938|   146M|    }
  939|   146M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  10.7M|{
 1683|  10.7M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  10.7M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  10.7M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  10.7M|        return string_view_wrapper{SCN_FWD(range)};
 1687|  10.7M|    }
 1688|  10.7M|    else {
 1689|  10.7M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  10.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  10.7M|    }
 1691|  10.7M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  10.7M|    {
 1537|  10.7M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  10.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  10.7M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  10.7M|    {
 1621|  10.7M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  10.7M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  10.7M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  10.7M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  10.7M|            m_storage.reset();
 1627|  10.7M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  10.7M|        }
 1629|  10.7M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  10.7M|                                          std::basic_string<CharT>>) {
 1631|  10.7M|            m_storage.emplace(SCN_FWD(range));
 1632|  10.7M|            m_view = string_view_type{*m_storage};
 1633|  10.7M|        }
 1634|  10.7M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  10.7M|                                          typename detail::basic_scan_buffer<
 1636|  10.7M|                                              value_t>::forward_iterator> &&
 1637|  10.7M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  10.7M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  10.7M|            auto end_seg = range.end().contiguous_segment();
 1640|  10.7M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  10.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.73k, False: 10.7M]
  |  |  ------------------
  ------------------
 1641|  10.7M|                             detail::to_address(end_seg.end()))) {
 1642|  5.73k|                auto& str = m_storage.emplace();
 1643|  5.73k|                str.reserve(range.end().position() - range.begin().position());
 1644|  5.73k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  5.73k|                m_view = string_view_type{str};
 1646|  5.73k|                return;
 1647|  5.73k|            }
 1648|       |
 1649|  10.7M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  10.7M|                                                            end_seg.data());
 1651|  10.7M|            m_storage.reset();
 1652|  10.7M|        }
 1653|  10.7M|        else {
 1654|  10.7M|            auto& str = m_storage.emplace();
 1655|  10.7M|            if constexpr (ranges::sized_range<Range>) {
 1656|  10.7M|                str.reserve(range.size());
 1657|  10.7M|            }
 1658|  10.7M|            if constexpr (ranges::common_range<Range>) {
 1659|  10.7M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  10.7M|                          std::back_inserter(str));
 1661|  10.7M|            }
 1662|  10.7M|            else {
 1663|  10.7M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  10.7M|                     ++it) {
 1665|  10.7M|                    str.push_back(*it);
 1666|  10.7M|                }
 1667|  10.7M|            }
 1668|  10.7M|            m_view = string_view_type{str};
 1669|  10.7M|        }
 1670|  10.7M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  21.4M|    {
 1582|  21.4M|        return m_view;
 1583|  21.4M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  10.7M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  4.28M|    {
 6079|  4.28M|        const bool need_skipped_width =
 6080|  4.28M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 4.28M]
  |  Branch (6080:33): [True: 0, False: 4.28M]
  ------------------
 6081|  4.28M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  4.28M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 4.28M]
  ------------------
 6084|  4.28M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 4.28M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  4.28M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 4.28M, False: 0]
  ------------------
 6093|  4.28M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 22, False: 4.28M]
  ------------------
 6094|  4.28M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 22]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     22|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 22]
  ------------------
 6096|     22|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  4.28M|        return result_type{rng.begin(), 0};
 6118|  4.28M|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   258M|{
 1899|   258M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   258M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   258M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   258M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   258M|    auto it = range.begin();
 1903|   258M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   258M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   258M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 258M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   258M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 258M, False: 0]
  ------------------
 1912|   258M|        ++it;
 1913|   258M|        return {it, string_type(1, *range.begin())};
 1914|   258M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   258M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   292M|{
  944|   292M|    return is_range_eof(r.begin(), r.end());
  945|   292M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   292M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   292M|    {
  937|   292M|        return begin == end;
  938|   292M|    }
  939|   292M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   258M|    {
 1890|   258M|        return !codepoint.empty();
 1891|   258M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  34.3M|{
  950|  34.3M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  34.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.49k, False: 34.3M]
  |  |  ------------------
  ------------------
  951|  8.49k|        return eof_error::eof;
  952|  8.49k|    }
  953|  34.3M|    return eof_error::good;
  954|  34.3M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  21.4M|{
 1683|  21.4M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  21.4M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  21.4M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  21.4M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  21.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  21.4M|    }
 1688|  21.4M|    else {
 1689|  21.4M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  21.4M|    }
 1691|  21.4M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  21.4M|    {
 1490|  21.4M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  32.1M|    {
 1503|  32.1M|        return sv;
 1504|  32.1M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  6.03k|{
 1976|  6.03k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  6.03k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  6.03k|{
 1957|  6.03k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  6.03k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  6.03k|    }
 1960|  6.03k|    else {
 1961|  6.03k|        auto first = range.begin();
 1962|  6.03k|        for (; first != range.end(); ++first) {
 1963|  6.03k|            if (pred(*first)) {
 1964|  6.03k|                return first;
 1965|  6.03k|            }
 1966|  6.03k|        }
 1967|  6.03k|        return first;
 1968|  6.03k|    }
 1969|  6.03k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  21.4M|{
 2951|  21.4M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 21.4M, False: 0]
  ------------------
 2952|  21.4M|        auto it = read_while_classic_space(range);
 2953|  21.4M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  21.4M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  21.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.28k, False: 21.4M]
  |  |  ------------------
  ------------------
 2955|  5.28k|            return unexpected(e);
 2956|  5.28k|        }
 2957|       |
 2958|  21.4M|        return it;
 2959|  21.4M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  21.4M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  21.4M|{
 2117|  21.4M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  21.4M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  21.4M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  21.4M|        auto buf = make_contiguous_buffer(range);
 2121|  21.4M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  21.4M|        return ranges::next(range.begin(),
 2123|  21.4M|                            ranges::distance(buf.view().begin(), it));
 2124|  21.4M|    }
 2125|  21.4M|    else {
 2126|  21.4M|        auto it = range.begin();
 2127|       |
 2128|  21.4M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  21.4M|            auto seg = get_contiguous_beginning(range);
 2130|  21.4M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  21.4M|                seg_it != seg.end()) {
 2132|  21.4M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  21.4M|            }
 2134|  21.4M|            ranges::advance(it, seg.size());
 2135|  21.4M|        }
 2136|       |
 2137|  21.4M|        return read_while_code_point(
 2138|  21.4M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  21.4M|    }
 2140|  21.4M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  21.4M|{
 2082|  21.4M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  21.4M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  42.8M|{
 2061|  42.8M|    auto it = range.begin();
 2062|   258M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 258M, False: 16.2k]
  ------------------
 2063|   258M|        const auto val =
 2064|   258M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   258M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   258M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 258M, False: 0]
  |  |  ------------------
  ------------------
 2066|   258M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   258M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   258M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 42.8M, False: 215M]
  ------------------
 2069|  42.8M|                return it;
 2070|  42.8M|            }
 2071|   258M|        }
 2072|   215M|        it = val.iterator;
 2073|   215M|    }
 2074|       |
 2075|  16.2k|    return it;
 2076|  42.8M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  21.4M|    {
  754|  21.4M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  56.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.4M|              cvref<T> obj = *get<T>(fn);
  745|  56.4M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  56.4M|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.4M|              }
  748|  56.4M|              else {
  749|  56.4M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.4M|              }
  751|  56.4M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  56.4M|    {
  684|  56.4M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  56.4M|            return static_cast<T*>(s.m_cp);
  686|  56.4M|        }
  687|  56.4M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  56.4M|            return static_cast<T*>(s.m_p);
  689|  56.4M|        }
  690|  56.4M|        else {
  691|  56.4M|            return reinterpret_cast<T*>(s.m_fp);
  692|  56.4M|        }
  693|  56.4M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  56.4M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  21.4M|        {
  662|  21.4M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  10.7M|    {
 1587|  10.7M|        return m_storage.has_value();
 1588|  10.7M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  3.32k|    {
 1592|  3.32k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.32k|        return *m_storage;
 1594|  3.32k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  32.1M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  12.8M|    {
 3040|  12.8M|        reader_error_handler eh{};
 3041|  12.8M|        get_derived().check_specs_impl(specs, eh);
 3042|  12.8M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  12.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.95k, False: 12.8M]
  |  |  ------------------
  ------------------
 3043|  8.95k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  8.95k|        }
 3045|  12.8M|        return {};
 3046|  12.8M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  12.8M|    {
 3051|  12.8M|        return static_cast<Derived&>(*this);
 3052|  12.8M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  12.8M|    {
 5210|  12.8M|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  12.8M|        SCN_GCC_PUSH
 5213|  12.8M|        SCN_GCC_IGNORE("-Wswitch")
 5214|  12.8M|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  12.8M|        SCN_CLANG_PUSH
 5217|  12.8M|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  12.8M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  12.8M|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 12.8M]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 12.8M]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|  12.8M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 12.8M, False: 18.0k]
  ------------------
 5226|  12.8M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 12.8M]
  ------------------
 5227|  12.8M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 12.8M]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|  12.8M|                else {
 5231|  12.8M|                    m_type = reader_type::word;
 5232|  12.8M|                }
 5233|  12.8M|                break;
 5234|      0|            }
 5235|       |
 5236|  8.95k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 8.95k, False: 12.8M]
  ------------------
 5237|  8.95k|                m_type = reader_type::character;
 5238|  8.95k|                break;
 5239|       |
 5240|  9.04k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 9.04k, False: 12.8M]
  ------------------
 5241|  9.04k|                m_type = reader_type::character_set;
 5242|  9.04k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 12.8M]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 12.8M]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|  12.8M|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  12.8M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  45.0M|    {
 5259|  45.0M|        return m_type == reader_type::word;
 5260|  45.0M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  32.1M|{
 1132|  32.1M|    auto it = src.begin();
 1133|   301M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 269M, False: 32.1M]
  ------------------
 1134|   269M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   269M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 269M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   269M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 269M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   269M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   269M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   269M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 9.64k, False: 269M]
  ------------------
 1144|  9.64k|            return false;
 1145|  9.64k|        }
 1146|   269M|        it += len;
 1147|   269M|    }
 1148|  32.1M|    return true;
 1149|  32.1M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  9.04k|        {
 5103|  9.04k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 9.04k, False: 0]
  ------------------
 5104|  9.04k|                return {};
 5105|  9.04k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  4.99k|        {
 5076|  4.99k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  4.99k|            const auto val =
 5078|  4.99k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  4.99k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  4.99k|                    (val % 8)) &
 5081|  4.99k|                   1u;
 5082|  4.99k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  9.08k|        {
 5129|  9.08k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 4.08k, False: 4.99k]
  ------------------
 5130|  4.08k|                return false;
 5131|  4.08k|            }
 5132|       |
 5133|  4.99k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  9.08k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  9.04k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  10.7M|{
 2088|  10.7M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  10.7M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  10.7M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  10.7M|        auto buf = make_contiguous_buffer(range);
 2092|  10.7M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  10.7M|        return ranges::next(range.begin(),
 2094|  10.7M|                            ranges::distance(buf.view().begin(), it));
 2095|  10.7M|    }
 2096|  10.7M|    else {
 2097|  10.7M|        auto it = range.begin();
 2098|       |
 2099|  10.7M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  10.7M|            auto seg = get_contiguous_beginning(range);
 2101|  10.7M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  10.7M|                seg_it != seg.end()) {
 2103|  10.7M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  10.7M|            }
 2105|  10.7M|            ranges::advance(it, seg.size());
 2106|  10.7M|        }
 2107|       |
 2108|  10.7M|        return read_until_code_point(
 2109|  10.7M|            ranges::subrange{it, range.end()},
 2110|  10.7M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  10.7M|    }
 2112|  10.7M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  21.4M|{
 2061|  21.4M|    auto it = range.begin();
 2062|   129M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 129M, False: 8.12k]
  ------------------
 2063|   129M|        const auto val =
 2064|   129M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   129M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   129M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 129M, False: 0]
  |  |  ------------------
  ------------------
 2066|   129M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   129M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   129M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 21.4M, False: 107M]
  ------------------
 2069|  21.4M|                return it;
 2070|  21.4M|            }
 2071|   129M|        }
 2072|   107M|        it = val.iterator;
 2073|   107M|    }
 2074|       |
 2075|  8.12k|    return it;
 2076|  21.4M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   129M|{
 1899|   129M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   129M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   129M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   129M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   129M|    auto it = range.begin();
 1903|   129M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   129M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   129M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 129M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   129M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 129M, False: 0]
  ------------------
 1912|   129M|        ++it;
 1913|   129M|        return {it, string_type(1, *range.begin())};
 1914|   129M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   129M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   129M|    {
 1890|   129M|        return !codepoint.empty();
 1891|   129M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  10.7M|    {
  754|  10.7M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   100M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100M|              cvref<T> obj = *get<T>(fn);
  745|   100M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   100M|                  obj(static_cast<decltype(args)>(args)...);
  747|   100M|              }
  748|   100M|              else {
  749|   100M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100M|              }
  751|   100M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   100M|    {
  684|   100M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   100M|            return static_cast<T*>(s.m_cp);
  686|   100M|        }
  687|   100M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   100M|            return static_cast<T*>(s.m_p);
  689|   100M|        }
  690|   100M|        else {
  691|   100M|            return reinterpret_cast<T*>(s.m_fp);
  692|   100M|        }
  693|   100M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|   100M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  10.7M|        {
  662|  10.7M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  3.01k|    {
 5153|  3.01k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  3.01k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  3.01k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.01k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  3.01k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  3.01k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 3.01k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  3.01k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.01k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.01k|        };
 5178|       |
 5179|  3.01k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 3.01k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  3.01k|        auto it = read_while_code_unit(range, cb);
 5184|  3.01k|        return check_nonempty(it, range);
 5185|  3.01k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  3.01k|    {
 5191|  3.01k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 2.98k, False: 32]
  ------------------
 5192|  2.98k|            return unexpected_scan_error(
 5193|  2.98k|                scan_error::invalid_scanned_value,
 5194|  2.98k|                "No characters matched in [character set]");
 5195|  2.98k|        }
 5196|       |
 5197|     32|        return it;
 5198|  3.01k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  10.7M|{
 2082|  10.7M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  10.7M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_:
  753|  3.01k|    {
  754|  3.01k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|  3.02k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.02k|              cvref<T> obj = *get<T>(fn);
  745|  3.02k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.02k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.02k|              }
  748|  3.02k|              else {
  749|  3.02k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.02k|              }
  751|  3.02k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  3.02k|    {
  684|  3.02k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.02k|            return static_cast<T*>(s.m_cp);
  686|  3.02k|        }
  687|  3.02k|        else if constexpr (std::is_object_v<T>) {
  688|  3.02k|            return static_cast<T*>(s.m_p);
  689|  3.02k|        }
  690|  3.02k|        else {
  691|  3.02k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.02k|        }
  693|  3.02k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5175|  3.02k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.02k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.02k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  666|  3.01k|        {
  667|  3.01k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  21.4M|{
 2088|  21.4M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  21.4M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  21.4M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  21.4M|        auto buf = make_contiguous_buffer(range);
 2092|  21.4M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  21.4M|        return ranges::next(range.begin(),
 2094|  21.4M|                            ranges::distance(buf.view().begin(), it));
 2095|  21.4M|    }
 2096|  21.4M|    else {
 2097|  21.4M|        auto it = range.begin();
 2098|       |
 2099|  21.4M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  21.4M|            auto seg = get_contiguous_beginning(range);
 2101|  21.4M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  21.4M|                seg_it != seg.end()) {
 2103|  21.4M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  21.4M|            }
 2105|  21.4M|            ranges::advance(it, seg.size());
 2106|  21.4M|        }
 2107|       |
 2108|  21.4M|        return read_until_code_point(
 2109|  21.4M|            ranges::subrange{it, range.end()},
 2110|  21.4M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  21.4M|    }
 2112|  21.4M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  21.4M|    {
  754|  21.4M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   201M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   201M|              cvref<T> obj = *get<T>(fn);
  745|   201M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   201M|                  obj(static_cast<decltype(args)>(args)...);
  747|   201M|              }
  748|   201M|              else {
  749|   201M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   201M|              }
  751|   201M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   201M|    {
  684|   201M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   201M|            return static_cast<T*>(s.m_cp);
  686|   201M|        }
  687|   201M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   201M|            return static_cast<T*>(s.m_p);
  689|   201M|        }
  690|   201M|        else {
  691|   201M|            return reinterpret_cast<T*>(s.m_fp);
  692|   201M|        }
  693|   201M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   201M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  21.4M|        {
  662|  21.4M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  6.03k|    {
 5153|  6.03k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  6.03k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  6.03k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  6.03k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  6.03k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 6.03k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  6.03k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.03k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.03k|        };
 5178|       |
 5179|  6.03k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 6.03k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  6.03k|        auto it = read_while_code_unit(range, cb);
 5184|  6.03k|        return check_nonempty(it, range);
 5185|  6.03k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  6.03k|    {
 5191|  6.03k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 5.96k, False: 64]
  ------------------
 5192|  5.96k|            return unexpected_scan_error(
 5193|  5.96k|                scan_error::invalid_scanned_value,
 5194|  5.96k|                "No characters matched in [character set]");
 5195|  5.96k|        }
 5196|       |
 5197|     64|        return it;
 5198|  6.03k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|  6.03k|    {
  754|  6.03k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  6.05k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.05k|              cvref<T> obj = *get<T>(fn);
  745|  6.05k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.05k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.05k|              }
  748|  6.05k|              else {
  749|  6.05k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.05k|              }
  751|  6.05k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  6.05k|    {
  684|  6.05k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.05k|            return static_cast<T*>(s.m_cp);
  686|  6.05k|        }
  687|  6.05k|        else if constexpr (std::is_object_v<T>) {
  688|  6.05k|            return static_cast<T*>(s.m_p);
  689|  6.05k|        }
  690|  6.05k|        else {
  691|  6.05k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.05k|        }
  693|  6.05k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  6.05k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.05k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.05k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|  6.03k|        {
  667|  6.03k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  4.29M|    {
 6193|  4.29M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.29M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.29M|            auto rd = make_reader<T, char_type>();
 6198|  4.29M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  4.29M|                return unexpected(e);
 6200|  4.29M|            }
 6201|       |
 6202|  4.29M|            return impl(rd, range, value);
 6203|  4.29M|        }
 6204|  4.29M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  4.29M|            auto rd = make_reader<T, char_type>();
 6206|  4.29M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 4.29M]
  |  |  ------------------
  ------------------
 6207|  2.98k|                return unexpected(e);
 6208|  2.98k|            }
 6209|       |
 6210|  4.29M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 4.29M, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  4.29M|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  4.29M|                return impl(rd, range, value);
 6213|  4.29M|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  4.29M|        else {
 6221|  4.29M|            SCN_EXPECT(false);
 6222|  4.29M|            SCN_UNREACHABLE;
 6223|  4.29M|        }
 6224|  4.29M|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  21.4M|{
 5809|  21.4M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  21.4M|        return reader_impl_for_bool<CharT>{};
 5811|  21.4M|    }
 5812|  21.4M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  21.4M|        return reader_impl_for_char<CharT>{};
 5814|  21.4M|    }
 5815|  21.4M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  21.4M|        return reader_impl_for_wchar<CharT>{};
 5817|  21.4M|    }
 5818|  21.4M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  21.4M|        return reader_impl_for_code_point<CharT>{};
 5820|  21.4M|    }
 5821|  21.4M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  21.4M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  21.4M|        return reader_impl_for_string<CharT>{};
 5824|  21.4M|    }
 5825|  21.4M|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  21.4M|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  21.4M|        return reader_impl_for_string<CharT>{};
 5828|  21.4M|    }
 5829|  21.4M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  21.4M|                       std::is_same_v<T, wregex_matches>) {
 5831|  21.4M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  21.4M|    }
 5833|  21.4M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  21.4M|        return reader_impl_for_voidptr<CharT>{};
 5835|  21.4M|    }
 5836|  21.4M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  21.4M|        return reader_impl_for_float<CharT>{};
 5838|  21.4M|    }
 5839|  21.4M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  21.4M|                       !std::is_same_v<T, wchar_t> &&
 5841|  21.4M|                       !std::is_same_v<T, char32_t> &&
 5842|  21.4M|                       !std::is_same_v<T, bool>) {
 5843|  21.4M|        return reader_impl_for_int<CharT>{};
 5844|  21.4M|    }
 5845|  21.4M|    else {
 5846|  21.4M|        return reader_impl_for_monostate<CharT>{};
 5847|  21.4M|    }
 5848|  21.4M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  4.29M|    {
 6124|  4.29M|        const bool need_skipped_width =
 6125|  4.29M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 4.29M]
  |  Branch (6125:33): [True: 0, False: 4.29M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  4.29M|        auto it = rng.begin();
 6129|  4.29M|        std::ptrdiff_t prefix_width = 0;
 6130|  4.29M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 4.29M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  4.29M|        else {
 6138|  4.29M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.29M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.69k, False: 4.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.69k|    }                                                  \
  |  |  |  | 3671|  4.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.29M|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.29M|        }
 6141|  4.29M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  4.29M|        std::ptrdiff_t value_width = 0;
 6145|  4.29M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 4.29M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  4.29M|        else {
 6161|  4.29M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 4.28M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.27k|    }                                                  \
  |  | 3671|  4.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  4.28M|                                             specs, value, loc));
 6163|       |
 6164|  4.28M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 4.28M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  4.28M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  4.28M|        std::ptrdiff_t postfix_width = 0;
 6173|  4.28M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 4.28M, False: 1.07k]
  ------------------
 6174|  4.28M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  4.28M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.28M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.28M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.28M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  4.28M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  4.28M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  4.28M|                                 value_width));
 6178|  4.28M|            std::tie(it, postfix_width) = postfix_result;
 6179|  4.28M|        }
 6180|       |
 6181|  4.28M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  4.28M|                                                 value_width, postfix_width);
 6183|  4.28M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 4.28M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  4.28M|        return it;
 6188|  4.28M|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  10.7M|{
 2993|  10.7M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|  10.7M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 3.32k, False: 10.7M]
  ------------------
 2995|  3.32k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.32k|    static_cast<    \
  |  |  929|  3.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  3.32k|        }
 2997|  10.7M|        else {
 2998|  10.7M|            dest.assign(source.view());
 2999|  10.7M|        }
 3000|  10.7M|    }
 3001|  10.7M|    else {
 3002|  10.7M|        return transcode_impl(source.view(), dest);
 3003|  10.7M|    }
 3004|       |
 3005|  10.7M|    return {};
 3006|  10.7M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  4.29M|    {
 5277|  4.29M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.29M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.29M|        return read_impl(range, specs, value);
 5279|  4.29M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  4.29M|    {
 5295|  4.29M|        SCN_CLANG_PUSH
 5296|  4.29M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.29M|        switch (m_type) {
 5299|  4.28M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 4.28M, False: 3.01k]
  ------------------
 5300|  4.28M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 4.29M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.29M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.01k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.01k, False: 4.28M]
  ------------------
 5310|  3.01k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.01k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 4.29M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 4.29M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.29M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.29M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.29M|        }
 5331|       |
 5332|  4.29M|        SCN_CLANG_POP
 5333|  4.29M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|  10.7M|    {
 4820|  10.7M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  10.7M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|  10.7M|{
 4752|  10.7M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  10.7M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  10.7M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.21k, False: 10.7M]
  ------------------
 4756|  3.21k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.21k|                                     "Invalid encoding in scanned string");
 4758|  3.21k|    }
 4759|  10.7M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  10.7M|    static_cast<    \
  |  |  929|  10.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  10.7M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.7M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  10.7M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  10.7M|    static_cast<    \
  |  |  929|  10.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  10.7M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  3.01k|    {
 5048|  3.01k|        auto it = read_source_impl(range, {specs});
 5049|  3.01k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 32]
  |  |  ------------------
  ------------------
 5050|  2.98k|            return unexpected(it.error());
 5051|  2.98k|        }
 5052|       |
 5053|     32|        return read_string_impl(range, *it, value);
 5054|  3.01k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|     32|{
 4752|     32|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     32|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     32|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 32]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     32|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     32|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     32|    return SCN_MOVE(result);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     32|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.29M|    {
 5277|  4.29M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.29M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.29M|        return read_impl(range, specs, value);
 5279|  4.29M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.29M|    {
 5295|  4.29M|        SCN_CLANG_PUSH
 5296|  4.29M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.29M|        switch (m_type) {
 5299|  4.28M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 4.28M, False: 3.01k]
  ------------------
 5300|  4.28M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 4.29M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.29M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.01k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.01k, False: 4.28M]
  ------------------
 5310|  3.01k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.01k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 4.29M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 4.29M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.29M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.29M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.29M|        }
 5331|       |
 5332|  4.29M|        SCN_CLANG_POP
 5333|  4.29M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  10.7M|    {
 4820|  10.7M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  10.7M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  10.7M|{
 4752|  10.7M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  10.7M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  10.7M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.21k, False: 10.7M]
  ------------------
 4756|  3.21k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.21k|                                     "Invalid encoding in scanned string");
 4758|  3.21k|    }
 4759|  10.7M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  10.7M|    static_cast<    \
  |  |  929|  10.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  10.7M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.7M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  10.7M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  10.7M|    static_cast<    \
  |  |  929|  10.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  10.7M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  10.7M|{
 3012|  10.7M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  10.7M|        dest.assign(source.view());
 3014|  10.7M|    }
 3015|  10.7M|    else {
 3016|  10.7M|        return transcode_impl(source.view(), dest);
 3017|  10.7M|    }
 3018|       |
 3019|  10.7M|    return {};
 3020|  10.7M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  3.01k|    {
 5048|  3.01k|        auto it = read_source_impl(range, {specs});
 5049|  3.01k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 32]
  |  |  ------------------
  ------------------
 5050|  2.98k|            return unexpected(it.error());
 5051|  2.98k|        }
 5052|       |
 5053|     32|        return read_string_impl(range, *it, value);
 5054|  3.01k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|     32|{
 4752|     32|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     32|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     32|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 32]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     32|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     32|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     32|    return SCN_MOVE(result);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     32|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  10.7M|{
 5809|  10.7M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  10.7M|        return reader_impl_for_bool<CharT>{};
 5811|  10.7M|    }
 5812|  10.7M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  10.7M|        return reader_impl_for_char<CharT>{};
 5814|  10.7M|    }
 5815|  10.7M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  10.7M|        return reader_impl_for_wchar<CharT>{};
 5817|  10.7M|    }
 5818|  10.7M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  10.7M|        return reader_impl_for_code_point<CharT>{};
 5820|  10.7M|    }
 5821|  10.7M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  10.7M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  10.7M|        return reader_impl_for_string<CharT>{};
 5824|  10.7M|    }
 5825|  10.7M|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  10.7M|                       std::is_same_v<T, std::wstring>) {
 5827|  10.7M|        return reader_impl_for_string<CharT>{};
 5828|  10.7M|    }
 5829|  10.7M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  10.7M|                       std::is_same_v<T, wregex_matches>) {
 5831|  10.7M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  10.7M|    }
 5833|  10.7M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  10.7M|        return reader_impl_for_voidptr<CharT>{};
 5835|  10.7M|    }
 5836|  10.7M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  10.7M|        return reader_impl_for_float<CharT>{};
 5838|  10.7M|    }
 5839|  10.7M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  10.7M|                       !std::is_same_v<T, wchar_t> &&
 5841|  10.7M|                       !std::is_same_v<T, char32_t> &&
 5842|  10.7M|                       !std::is_same_v<T, bool>) {
 5843|  10.7M|        return reader_impl_for_int<CharT>{};
 5844|  10.7M|    }
 5845|  10.7M|    else {
 5846|  10.7M|        return reader_impl_for_monostate<CharT>{};
 5847|  10.7M|    }
 5848|  10.7M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  4.29M|    {
 5277|  4.29M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.29M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.29M|        return read_impl(range, specs, value);
 5279|  4.29M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  4.29M|    {
 5295|  4.29M|        SCN_CLANG_PUSH
 5296|  4.29M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.29M|        switch (m_type) {
 5299|  4.28M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 4.28M, False: 3.01k]
  ------------------
 5300|  4.28M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 4.29M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.29M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.01k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.01k, False: 4.28M]
  ------------------
 5310|  3.01k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.01k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 4.29M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 4.29M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.29M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.29M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.29M|        }
 5331|       |
 5332|  4.29M|        SCN_CLANG_POP
 5333|  4.29M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  10.7M|    {
 4827|  10.7M|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  10.7M|                                     value);
 4829|  10.7M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  10.7M|{
 4773|  10.7M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  10.7M|    auto src = [&]() {
 4776|  10.7M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  10.7M|            return make_contiguous_buffer(
 4778|  10.7M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  10.7M|        }
 4780|  10.7M|        else {
 4781|  10.7M|            return make_contiguous_buffer(
 4782|  10.7M|                ranges::subrange{range.begin(), result});
 4783|  10.7M|        }
 4784|  10.7M|    }();
 4785|  10.7M|    using src_type = decltype(src);
 4786|       |
 4787|  10.7M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  10.7M|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  10.7M|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  10.7M|                                     "Cannot read a string_view from "
 4796|  10.7M|                                     "this source range (would require "
 4797|  10.7M|                                     "transcoding)");
 4798|  10.7M|    }
 4799|  10.7M|    else {
 4800|  10.7M|        const auto view = src.view();
 4801|  10.7M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  10.7M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 3.21k, False: 10.7M]
  ------------------
 4804|  3.21k|            return unexpected_scan_error(
 4805|  3.21k|                scan_error::invalid_scanned_value,
 4806|  3.21k|                "Invalid encoding in scanned string_view");
 4807|  3.21k|        }
 4808|       |
 4809|  10.7M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  10.7M|    static_cast<    \
  |  |  929|  10.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  10.7M|    }
 4811|  10.7M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  10.7M|    auto src = [&]() {
 4776|  10.7M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  10.7M|            return make_contiguous_buffer(
 4778|  10.7M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  10.7M|        }
 4780|  10.7M|        else {
 4781|  10.7M|            return make_contiguous_buffer(
 4782|  10.7M|                ranges::subrange{range.begin(), result});
 4783|  10.7M|        }
 4784|  10.7M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  3.01k|    {
 5062|  3.01k|        auto it = read_source_impl(range, {specs});
 5063|  3.01k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 32]
  |  |  ------------------
  ------------------
 5064|  2.98k|            return unexpected(it.error());
 5065|  2.98k|        }
 5066|       |
 5067|     32|        return read_string_view_impl(range, *it, value);
 5068|  3.01k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|     32|{
 4773|     32|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|     32|    auto src = [&]() {
 4776|     32|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|     32|            return make_contiguous_buffer(
 4778|     32|                ranges::subrange{range.begin().base(), result.base()});
 4779|     32|        }
 4780|     32|        else {
 4781|     32|            return make_contiguous_buffer(
 4782|     32|                ranges::subrange{range.begin(), result});
 4783|     32|        }
 4784|     32|    }();
 4785|     32|    using src_type = decltype(src);
 4786|       |
 4787|     32|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|     32|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|     32|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|     32|                                     "Cannot read a string_view from "
 4796|     32|                                     "this source range (would require "
 4797|     32|                                     "transcoding)");
 4798|     32|    }
 4799|     32|    else {
 4800|     32|        const auto view = src.view();
 4801|     32|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|     32|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 32]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|     32|        return SCN_MOVE(result);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|     32|    }
 4811|     32|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|     32|    auto src = [&]() {
 4776|     32|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|     32|            return make_contiguous_buffer(
 4778|     32|                ranges::subrange{range.begin().base(), result.base()});
 4779|     32|        }
 4780|     32|        else {
 4781|     32|            return make_contiguous_buffer(
 4782|     32|                ranges::subrange{range.begin(), result});
 4783|     32|        }
 4784|     32|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  10.7M|{
 2951|  10.7M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 10.7M, False: 0]
  ------------------
 2952|  10.7M|        auto it = read_while_classic_space(range);
 2953|  10.7M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  10.7M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.64k, False: 10.7M]
  |  |  ------------------
  ------------------
 2955|  2.64k|            return unexpected(e);
 2956|  2.64k|        }
 2957|       |
 2958|  10.7M|        return it;
 2959|  10.7M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  10.7M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  10.7M|{
 2117|  10.7M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  10.7M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  10.7M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  10.7M|        auto buf = make_contiguous_buffer(range);
 2121|  10.7M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  10.7M|        return ranges::next(range.begin(),
 2123|  10.7M|                            ranges::distance(buf.view().begin(), it));
 2124|  10.7M|    }
 2125|  10.7M|    else {
 2126|  10.7M|        auto it = range.begin();
 2127|       |
 2128|  10.7M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  10.7M|            auto seg = get_contiguous_beginning(range);
 2130|  10.7M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  10.7M|                seg_it != seg.end()) {
 2132|  10.7M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  10.7M|            }
 2134|  10.7M|            ranges::advance(it, seg.size());
 2135|  10.7M|        }
 2136|       |
 2137|  10.7M|        return read_while_code_point(
 2138|  10.7M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  10.7M|    }
 2140|  10.7M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  10.7M|    {
  754|  10.7M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  28.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.2M|              cvref<T> obj = *get<T>(fn);
  745|  28.2M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.2M|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.2M|              }
  748|  28.2M|              else {
  749|  28.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.2M|              }
  751|  28.2M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  28.2M|    {
  684|  28.2M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.2M|            return static_cast<T*>(s.m_cp);
  686|  28.2M|        }
  687|  28.2M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.2M|            return static_cast<T*>(s.m_p);
  689|  28.2M|        }
  690|  28.2M|        else {
  691|  28.2M|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.2M|        }
  693|  28.2M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  28.2M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  10.7M|        {
  662|  10.7M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   104k|{
 5795|   104k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 960, False: 103k]
  |  |  ------------------
  ------------------
 5796|    960|        return unexpected(e);
 5797|    960|    }
 5798|       |
 5799|   103k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 103k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   103k|    return skip_classic_whitespace(range);
 5804|   103k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  52.2k|    {
 5871|  52.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  52.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  52.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  52.2k|            auto rd = make_reader<T, char_type>();
 5876|  52.2k|            return impl(rd, range, value);
 5877|  52.2k|        }
 5878|  52.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  52.2k|            auto rd = make_reader<T, char_type>();
 5880|  52.2k|            if (!is_segment_contiguous(range)) {
 5881|  52.2k|                return impl(rd, range, value);
 5882|  52.2k|            }
 5883|  52.2k|            auto crange = get_as_contiguous(range);
 5884|  52.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  52.2k|            return ranges::next(range.begin(),
 5886|  52.2k|                                ranges::distance(crange.begin(), it));
 5887|  52.2k|        }
 5888|  52.2k|        else {
 5889|  52.2k|            SCN_EXPECT(false);
 5890|  52.2k|            SCN_UNREACHABLE;
 5891|  52.2k|        }
 5892|  52.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  52.2k|    {
 5863|  52.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 987, False: 51.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    987|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    987|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    987|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    987|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    987|    }                                                  \
  |  |  |  | 3671|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  51.2k|                        .transform_error(make_eof_scan_error));
 5865|  51.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  52.2k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  51.2k|    {
 5266|  51.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  51.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  51.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  51.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|  52.2k|    {
 5871|  52.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  52.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  52.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  52.2k|            auto rd = make_reader<T, char_type>();
 5876|  52.2k|            return impl(rd, range, value);
 5877|  52.2k|        }
 5878|  52.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  52.2k|            auto rd = make_reader<T, char_type>();
 5880|  52.2k|            if (!is_segment_contiguous(range)) {
 5881|  52.2k|                return impl(rd, range, value);
 5882|  52.2k|            }
 5883|  52.2k|            auto crange = get_as_contiguous(range);
 5884|  52.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  52.2k|            return ranges::next(range.begin(),
 5886|  52.2k|                                ranges::distance(crange.begin(), it));
 5887|  52.2k|        }
 5888|  52.2k|        else {
 5889|  52.2k|            SCN_EXPECT(false);
 5890|  52.2k|            SCN_UNREACHABLE;
 5891|  52.2k|        }
 5892|  52.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  52.2k|    {
 5863|  52.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 987, False: 51.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    987|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    987|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    987|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    987|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    987|    }                                                  \
  |  |  |  | 3671|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  51.2k|                        .transform_error(make_eof_scan_error));
 5865|  51.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  52.2k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  51.2k|    {
 5266|  51.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  51.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  51.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  51.2k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  53.7k|{
 5795|  53.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 516, False: 53.2k]
  |  |  ------------------
  ------------------
 5796|    516|        return unexpected(e);
 5797|    516|    }
 5798|       |
 5799|  53.2k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 53.2k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  53.2k|    return skip_classic_whitespace(range);
 5804|  53.2k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|  53.7k|    {
 5871|  53.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  53.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  53.7k|            auto rd = make_reader<T, char_type>();
 5876|  53.7k|            return impl(rd, range, value);
 5877|  53.7k|        }
 5878|  53.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  53.7k|            auto rd = make_reader<T, char_type>();
 5880|  53.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 53.7k, False: 0]
  ------------------
 5881|  53.7k|                return impl(rd, range, value);
 5882|  53.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  53.7k|        else {
 5889|  53.7k|            SCN_EXPECT(false);
 5890|  53.7k|            SCN_UNREACHABLE;
 5891|  53.7k|        }
 5892|  53.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  53.7k|    {
 5863|  53.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  53.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  53.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  53.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.03k, False: 52.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.03k|    }                                                  \
  |  |  |  | 3671|  53.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  52.7k|                        .transform_error(make_eof_scan_error));
 5865|  52.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  53.7k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  52.7k|    {
 5266|  52.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  52.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  52.7k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  52.7k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  82.8k|    {
 2879|  82.8k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   227k|    {
 2883|   227k|        return m_current;
 2884|   227k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   144k|    {
 2888|   144k|        return m_range.end();
 2889|   144k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  67.9k|    {
 2903|  67.9k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  67.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  67.9k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  67.9k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 67.9k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  67.9k|        }
 2909|  67.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  67.9k|    static_cast<    \
  |  |  929|  67.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  67.9k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  76.9k|    {
 2893|  76.9k|        return ranges::subrange{begin(), end()};
 2894|  76.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  73.9k|    {
 6037|  73.9k|        const bool need_skipped_width =
 6038|  73.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 73.9k]
  |  Branch (6038:33): [True: 0, False: 73.9k]
  ------------------
 6039|  73.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  73.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 73.9k]
  ------------------
 6043|  73.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 73.9k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  73.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 73.9k, False: 0]
  |  Branch (6047:56): [True: 69.6k, False: 4.26k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  69.6k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 69.6k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   138k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  69.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.31k, False: 68.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.31k|    }                                                  \
  |  |  |  | 3671|  69.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   138k|                            make_eof_scan_error));
 6058|       |
 6059|   138k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 68.3k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  68.3k|            return result_type{it, 0};
 6067|   138k|        }
 6068|       |
 6069|  4.26k|        return result_type{rng.begin(), 0};
 6070|  73.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  67.2k|    {
 6079|  67.2k|        const bool need_skipped_width =
 6080|  67.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 67.2k]
  |  Branch (6080:33): [True: 0, False: 67.2k]
  ------------------
 6081|  67.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  67.2k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 67.2k]
  ------------------
 6084|  67.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 67.2k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  67.2k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 67.2k, False: 0]
  ------------------
 6093|  67.2k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.23k, False: 66.0k]
  ------------------
 6094|  67.2k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 1.23k]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|  1.23k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 1.23k]
  ------------------
 6096|  1.23k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  67.2k|        return result_type{rng.begin(), 0};
 6118|  67.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  38.4k|    {
 6193|  38.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  38.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  38.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  38.4k|            auto rd = make_reader<T, char_type>();
 6198|  38.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 36.9k]
  |  |  ------------------
  ------------------
 6199|  1.49k|                return unexpected(e);
 6200|  1.49k|            }
 6201|       |
 6202|  36.9k|            return impl(rd, range, value);
 6203|  38.4k|        }
 6204|  38.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  38.4k|            auto rd = make_reader<T, char_type>();
 6206|  38.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  38.4k|                return unexpected(e);
 6208|  38.4k|            }
 6209|       |
 6210|  38.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  38.4k|                specs.width != 0) {
 6212|  38.4k|                return impl(rd, range, value);
 6213|  38.4k|            }
 6214|       |
 6215|  38.4k|            auto crange = get_as_contiguous(range);
 6216|  38.4k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  38.4k|            return ranges::next(range.begin(),
 6218|  38.4k|                                ranges::distance(crange.begin(), it));
 6219|  38.4k|        }
 6220|  38.4k|        else {
 6221|  38.4k|            SCN_EXPECT(false);
 6222|  38.4k|            SCN_UNREACHABLE;
 6223|  38.4k|        }
 6224|  38.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  36.9k|    {
 6124|  36.9k|        const bool need_skipped_width =
 6125|  36.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 36.9k]
  |  Branch (6125:33): [True: 0, False: 36.9k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  36.9k|        auto it = rng.begin();
 6129|  36.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  36.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 36.9k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  36.9k|        else {
 6138|  36.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 658, False: 36.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    658|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    658|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    658|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    658|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    658|    }                                                  \
  |  |  |  | 3671|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  36.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  36.3k|        }
 6141|  36.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  36.3k|        std::ptrdiff_t value_width = 0;
 6145|  36.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 36.3k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  36.3k|        else {
 6161|  36.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  36.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  36.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 33.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.32k|    }                                                  \
  |  | 3671|  36.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  33.9k|                                             specs, value, loc));
 6163|       |
 6164|  33.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 33.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  33.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  33.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  33.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 33.6k, False: 340]
  ------------------
 6174|  33.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  33.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  33.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  33.6k|                                 value_width));
 6178|  33.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  33.6k|        }
 6180|       |
 6181|  33.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  33.9k|                                                 value_width, postfix_width);
 6183|  33.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 33.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  33.9k|        return it;
 6188|  33.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  38.4k|    {
 6193|  38.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  38.4k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  38.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  38.4k|            auto rd = make_reader<T, char_type>();
 6198|  38.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 36.9k]
  |  |  ------------------
  ------------------
 6199|  1.49k|                return unexpected(e);
 6200|  1.49k|            }
 6201|       |
 6202|  36.9k|            return impl(rd, range, value);
 6203|  38.4k|        }
 6204|  38.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  38.4k|            auto rd = make_reader<T, char_type>();
 6206|  38.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  38.4k|                return unexpected(e);
 6208|  38.4k|            }
 6209|       |
 6210|  38.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  38.4k|                specs.width != 0) {
 6212|  38.4k|                return impl(rd, range, value);
 6213|  38.4k|            }
 6214|       |
 6215|  38.4k|            auto crange = get_as_contiguous(range);
 6216|  38.4k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  38.4k|            return ranges::next(range.begin(),
 6218|  38.4k|                                ranges::distance(crange.begin(), it));
 6219|  38.4k|        }
 6220|  38.4k|        else {
 6221|  38.4k|            SCN_EXPECT(false);
 6222|  38.4k|            SCN_UNREACHABLE;
 6223|  38.4k|        }
 6224|  38.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  36.9k|    {
 6124|  36.9k|        const bool need_skipped_width =
 6125|  36.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 36.9k]
  |  Branch (6125:33): [True: 0, False: 36.9k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  36.9k|        auto it = rng.begin();
 6129|  36.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  36.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 36.9k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  36.9k|        else {
 6138|  36.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 658, False: 36.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    658|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    658|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    658|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    658|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    658|    }                                                  \
  |  |  |  | 3671|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  36.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  36.3k|        }
 6141|  36.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  36.3k|        std::ptrdiff_t value_width = 0;
 6145|  36.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 36.3k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  36.3k|        else {
 6161|  36.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  36.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  36.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.32k, False: 33.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.32k|    }                                                  \
  |  | 3671|  36.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  33.9k|                                             specs, value, loc));
 6163|       |
 6164|  33.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 33.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  33.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  33.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  33.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 33.6k, False: 340]
  ------------------
 6174|  33.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 33.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  33.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  33.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  33.6k|                                 value_width));
 6178|  33.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  33.6k|        }
 6180|       |
 6181|  33.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  33.9k|                                                 value_width, postfix_width);
 6183|  33.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 33.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  33.9k|        return it;
 6188|  33.9k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  12.8M|{
 5795|  12.8M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.20k, False: 12.8M]
  |  |  ------------------
  ------------------
 5796|  3.20k|        return unexpected(e);
 5797|  3.20k|    }
 5798|       |
 5799|  12.8M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 12.8M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  12.8M|    return skip_classic_whitespace(range);
 5804|  12.8M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  6.43M|    {
 5871|  6.43M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  6.43M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  6.43M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  6.43M|            auto rd = make_reader<T, char_type>();
 5876|  6.43M|            return impl(rd, range, value);
 5877|  6.43M|        }
 5878|  6.43M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  6.43M|            auto rd = make_reader<T, char_type>();
 5880|  6.43M|            if (!is_segment_contiguous(range)) {
 5881|  6.43M|                return impl(rd, range, value);
 5882|  6.43M|            }
 5883|  6.43M|            auto crange = get_as_contiguous(range);
 5884|  6.43M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  6.43M|            return ranges::next(range.begin(),
 5886|  6.43M|                                ranges::distance(crange.begin(), it));
 5887|  6.43M|        }
 5888|  6.43M|        else {
 5889|  6.43M|            SCN_EXPECT(false);
 5890|  6.43M|            SCN_UNREACHABLE;
 5891|  6.43M|        }
 5892|  6.43M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  6.43M|    {
 5863|  6.43M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  6.43M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.43M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.43M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.54k, False: 6.43M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.54k|    }                                                  \
  |  |  |  | 3671|  6.43M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  6.43M|                        .transform_error(make_eof_scan_error));
 5865|  6.43M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  6.43M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  6.43M|    {
 5266|  6.43M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.43M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  6.43M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  6.43M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  6.43M|    {
 5871|  6.43M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  6.43M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  6.43M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  6.43M|            auto rd = make_reader<T, char_type>();
 5876|  6.43M|            return impl(rd, range, value);
 5877|  6.43M|        }
 5878|  6.43M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  6.43M|            auto rd = make_reader<T, char_type>();
 5880|  6.43M|            if (!is_segment_contiguous(range)) {
 5881|  6.43M|                return impl(rd, range, value);
 5882|  6.43M|            }
 5883|  6.43M|            auto crange = get_as_contiguous(range);
 5884|  6.43M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  6.43M|            return ranges::next(range.begin(),
 5886|  6.43M|                                ranges::distance(crange.begin(), it));
 5887|  6.43M|        }
 5888|  6.43M|        else {
 5889|  6.43M|            SCN_EXPECT(false);
 5890|  6.43M|            SCN_UNREACHABLE;
 5891|  6.43M|        }
 5892|  6.43M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  6.43M|    {
 5863|  6.43M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  6.43M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.43M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.43M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.54k, False: 6.43M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.54k|    }                                                  \
  |  |  |  | 3671|  6.43M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  6.43M|                        .transform_error(make_eof_scan_error));
 5865|  6.43M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  6.43M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  6.43M|    {
 5266|  6.43M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.43M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  6.43M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  6.43M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|  8.60M|    {
 2879|  8.60M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  25.7M|    {
 2883|  25.7M|        return m_current;
 2884|  25.7M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  17.1M|    {
 2888|  17.1M|        return m_range.end();
 2889|  17.1M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  8.57M|    {
 2903|  8.57M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  8.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  8.57M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  8.57M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 8.57M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  8.57M|        }
 2909|  8.57M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  8.57M|    static_cast<    \
  |  |  929|  8.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  8.57M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  8.59M|    {
 2893|  8.59M|        return ranges::subrange{begin(), end()};
 2894|  8.59M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  8.58M|    {
 6037|  8.58M|        const bool need_skipped_width =
 6038|  8.58M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 8.58M]
  |  Branch (6038:33): [True: 0, False: 8.58M]
  ------------------
 6039|  8.58M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  8.58M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 8.58M]
  ------------------
 6043|  8.58M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 8.58M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  8.58M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 8.58M, False: 0]
  |  Branch (6047:56): [True: 8.58M, False: 6.03k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  8.58M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 8.58M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  17.1M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  8.58M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.58M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.58M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.39k, False: 8.57M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.39k|    }                                                  \
  |  |  |  | 3671|  8.58M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  17.1M|                            make_eof_scan_error));
 6058|       |
 6059|  17.1M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 8.57M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  8.57M|            return result_type{it, 0};
 6067|  17.1M|        }
 6068|       |
 6069|  6.03k|        return result_type{rng.begin(), 0};
 6070|  8.58M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  8.57M|    {
 6079|  8.57M|        const bool need_skipped_width =
 6080|  8.57M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 8.57M]
  |  Branch (6080:33): [True: 0, False: 8.57M]
  ------------------
 6081|  8.57M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  8.57M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 8.57M]
  ------------------
 6084|  8.57M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 8.57M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  8.57M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 8.57M, False: 0]
  ------------------
 6093|  8.57M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 44, False: 8.57M]
  ------------------
 6094|  8.57M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 44]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     44|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 44]
  ------------------
 6096|     44|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  8.57M|        return result_type{rng.begin(), 0};
 6118|  8.57M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  4.29M|    {
 6193|  4.29M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.29M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.29M|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.29M|            auto rd = make_reader<T, char_type>();
 6198|  4.29M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 4.29M]
  |  |  ------------------
  ------------------
 6199|  2.98k|                return unexpected(e);
 6200|  2.98k|            }
 6201|       |
 6202|  4.29M|            return impl(rd, range, value);
 6203|  4.29M|        }
 6204|  4.29M|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.29M|            auto rd = make_reader<T, char_type>();
 6206|  4.29M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.29M|                return unexpected(e);
 6208|  4.29M|            }
 6209|       |
 6210|  4.29M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.29M|                specs.width != 0) {
 6212|  4.29M|                return impl(rd, range, value);
 6213|  4.29M|            }
 6214|       |
 6215|  4.29M|            auto crange = get_as_contiguous(range);
 6216|  4.29M|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.29M|            return ranges::next(range.begin(),
 6218|  4.29M|                                ranges::distance(crange.begin(), it));
 6219|  4.29M|        }
 6220|  4.29M|        else {
 6221|  4.29M|            SCN_EXPECT(false);
 6222|  4.29M|            SCN_UNREACHABLE;
 6223|  4.29M|        }
 6224|  4.29M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  4.29M|    {
 6124|  4.29M|        const bool need_skipped_width =
 6125|  4.29M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 4.29M]
  |  Branch (6125:33): [True: 0, False: 4.29M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  4.29M|        auto it = rng.begin();
 6129|  4.29M|        std::ptrdiff_t prefix_width = 0;
 6130|  4.29M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 4.29M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  4.29M|        else {
 6138|  4.29M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.29M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.69k, False: 4.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.69k|    }                                                  \
  |  |  |  | 3671|  4.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.29M|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.29M|        }
 6141|  4.29M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  4.29M|        std::ptrdiff_t value_width = 0;
 6145|  4.29M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 4.29M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  4.29M|        else {
 6161|  4.29M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 4.28M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.27k|    }                                                  \
  |  | 3671|  4.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  4.28M|                                             specs, value, loc));
 6163|       |
 6164|  4.28M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 4.28M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  4.28M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  4.28M|        std::ptrdiff_t postfix_width = 0;
 6173|  4.28M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 4.28M, False: 1.07k]
  ------------------
 6174|  4.28M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  4.28M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.28M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.28M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.28M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  4.28M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  4.28M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  4.28M|                                 value_width));
 6178|  4.28M|            std::tie(it, postfix_width) = postfix_result;
 6179|  4.28M|        }
 6180|       |
 6181|  4.28M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  4.28M|                                                 value_width, postfix_width);
 6183|  4.28M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 4.28M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  4.28M|        return it;
 6188|  4.28M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  4.29M|    {
 6193|  4.29M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  4.29M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  4.29M|                          basic_contiguous_scan_context<char_type>>) {
 6197|  4.29M|            auto rd = make_reader<T, char_type>();
 6198|  4.29M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 4.29M]
  |  |  ------------------
  ------------------
 6199|  2.98k|                return unexpected(e);
 6200|  2.98k|            }
 6201|       |
 6202|  4.29M|            return impl(rd, range, value);
 6203|  4.29M|        }
 6204|  4.29M|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  4.29M|            auto rd = make_reader<T, char_type>();
 6206|  4.29M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  4.29M|                return unexpected(e);
 6208|  4.29M|            }
 6209|       |
 6210|  4.29M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  4.29M|                specs.width != 0) {
 6212|  4.29M|                return impl(rd, range, value);
 6213|  4.29M|            }
 6214|       |
 6215|  4.29M|            auto crange = get_as_contiguous(range);
 6216|  4.29M|            SCN_TRY(it, impl(rd, crange, value));
 6217|  4.29M|            return ranges::next(range.begin(),
 6218|  4.29M|                                ranges::distance(crange.begin(), it));
 6219|  4.29M|        }
 6220|  4.29M|        else {
 6221|  4.29M|            SCN_EXPECT(false);
 6222|  4.29M|            SCN_UNREACHABLE;
 6223|  4.29M|        }
 6224|  4.29M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  4.29M|    {
 6124|  4.29M|        const bool need_skipped_width =
 6125|  4.29M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 4.29M]
  |  Branch (6125:33): [True: 0, False: 4.29M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  4.29M|        auto it = rng.begin();
 6129|  4.29M|        std::ptrdiff_t prefix_width = 0;
 6130|  4.29M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 4.29M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  4.29M|        else {
 6138|  4.29M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  4.29M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.69k, False: 4.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.69k|    }                                                  \
  |  |  |  | 3671|  4.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  4.29M|            std::tie(it, prefix_width) = prefix_result;
 6140|  4.29M|        }
 6141|  4.29M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  4.29M|        std::ptrdiff_t value_width = 0;
 6145|  4.29M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 4.29M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  4.29M|        else {
 6161|  4.29M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  4.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  4.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 4.28M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.27k|    }                                                  \
  |  | 3671|  4.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  4.28M|                                             specs, value, loc));
 6163|       |
 6164|  4.28M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 4.28M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  4.28M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  4.28M|        std::ptrdiff_t postfix_width = 0;
 6173|  4.28M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 4.28M, False: 1.07k]
  ------------------
 6174|  4.28M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  4.28M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.28M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.28M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  4.28M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  4.28M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  4.28M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  4.28M|                                 value_width));
 6178|  4.28M|            std::tie(it, postfix_width) = postfix_result;
 6179|  4.28M|        }
 6180|       |
 6181|  4.28M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  4.28M|                                                 value_width, postfix_width);
 6183|  4.28M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 4.28M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  4.28M|        return it;
 6188|  4.28M|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  6.43M|{
 5795|  6.43M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.60k, False: 6.43M]
  |  |  ------------------
  ------------------
 5796|  1.60k|        return unexpected(e);
 5797|  1.60k|    }
 5798|       |
 5799|  6.43M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 6.43M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  6.43M|    return skip_classic_whitespace(range);
 5804|  6.43M|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  6.43M|    {
 5871|  6.43M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  6.43M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  6.43M|            auto rd = make_reader<T, char_type>();
 5876|  6.43M|            return impl(rd, range, value);
 5877|  6.43M|        }
 5878|  6.43M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  6.43M|            auto rd = make_reader<T, char_type>();
 5880|  6.43M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 6.43M, False: 0]
  ------------------
 5881|  6.43M|                return impl(rd, range, value);
 5882|  6.43M|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  6.43M|        else {
 5889|  6.43M|            SCN_EXPECT(false);
 5890|  6.43M|            SCN_UNREACHABLE;
 5891|  6.43M|        }
 5892|  6.43M|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  6.43M|    {
 5863|  6.43M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  6.43M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.43M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.43M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.54k, False: 6.43M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.54k|    }                                                  \
  |  |  |  | 3671|  6.43M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  6.43M|                        .transform_error(make_eof_scan_error));
 5865|  6.43M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  6.43M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  6.43M|    {
 5266|  6.43M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.43M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  6.43M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  6.43M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    746|{
   52|    746|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    746|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    746|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    746|    string_buffer.resize(size);
   56|    746|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    746|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    746|    const auto wsv_reinterpret_size =
   61|    746|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 87, False: 659]
  ------------------
   62|    746|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    746|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    746|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    746|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    746|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    746|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    746|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    746|{
  122|    746|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    746|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    746|    buf.resize(sizeof...(Args));
  125|    746|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    746|    return buf;
  127|    746|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    746|{
  108|    746|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    746|        return format_string_view_buffer;
  110|    746|    }
  111|    746|    else {
  112|    746|        return wformat_string_view_buffer;
  113|    746|    }
  114|    746|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    746|{
  185|    746|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    746|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    746|                                   format_strings);
  188|    746|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|    746|{
  133|       |    // Regular scan
  134|  4.47k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.47k, False: 746]
  ------------------
  135|  4.47k|        auto it = scn::ranges::begin(source);
  136|  38.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  38.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  38.1k|            auto result = scn::scan<T>(
  139|  38.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  38.1k|                scn::runtime_format(f));
  141|  38.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 4.47k, False: 33.6k]
  ------------------
  142|  4.47k|                break;
  143|  4.47k|            }
  144|  33.6k|            it = result->begin();
  145|  33.6k|        }
  146|  4.47k|    }
  147|       |
  148|       |    // scan localized
  149|  4.47k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 4.47k, False: 746]
  ------------------
  150|  4.47k|        auto it = scn::ranges::begin(source);
  151|  38.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  38.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  38.1k|            auto result = scn::scan<T>(
  154|  38.1k|                global_locale,
  155|  38.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  38.1k|                scn::runtime_format(f));
  157|  38.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 4.47k, False: 33.6k]
  ------------------
  158|  4.47k|                break;
  159|  4.47k|            }
  160|  33.6k|            it = result->begin();
  161|  33.6k|        }
  162|  4.47k|    }
  163|       |
  164|       |    // scan_value
  165|    746|    {
  166|    746|        auto it = scn::ranges::begin(source);
  167|  17.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.4k|            auto result = scn::scan_value<T>(
  170|  17.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 746, False: 16.6k]
  ------------------
  172|    746|                break;
  173|    746|            }
  174|  16.6k|            it = result->begin();
  175|  16.6k|        }
  176|    746|    }
  177|    746|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    746|{
  133|       |    // Regular scan
  134|  4.47k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.47k, False: 746]
  ------------------
  135|  4.47k|        auto it = scn::ranges::begin(source);
  136|  38.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  38.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  38.1k|            auto result = scn::scan<T>(
  139|  38.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  38.1k|                scn::runtime_format(f));
  141|  38.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 4.47k, False: 33.6k]
  ------------------
  142|  4.47k|                break;
  143|  4.47k|            }
  144|  33.6k|            it = result->begin();
  145|  33.6k|        }
  146|  4.47k|    }
  147|       |
  148|       |    // scan localized
  149|  4.47k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 4.47k, False: 746]
  ------------------
  150|  4.47k|        auto it = scn::ranges::begin(source);
  151|  38.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  38.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  38.1k|            auto result = scn::scan<T>(
  154|  38.1k|                global_locale,
  155|  38.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  38.1k|                scn::runtime_format(f));
  157|  38.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 4.47k, False: 33.6k]
  ------------------
  158|  4.47k|                break;
  159|  4.47k|            }
  160|  33.6k|            it = result->begin();
  161|  33.6k|        }
  162|  4.47k|    }
  163|       |
  164|       |    // scan_value
  165|    746|    {
  166|    746|        auto it = scn::ranges::begin(source);
  167|  17.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.4k|            auto result = scn::scan_value<T>(
  170|  17.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 746, False: 16.6k]
  ------------------
  172|    746|                break;
  173|    746|            }
  174|  16.6k|            it = result->begin();
  175|  16.6k|        }
  176|    746|    }
  177|    746|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|    746|{
  133|       |    // Regular scan
  134|  4.47k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.47k, False: 746]
  ------------------
  135|  4.47k|        auto it = scn::ranges::begin(source);
  136|  39.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  39.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  39.0k|            auto result = scn::scan<T>(
  139|  39.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  39.0k|                scn::runtime_format(f));
  141|  39.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 4.47k, False: 34.5k]
  ------------------
  142|  4.47k|                break;
  143|  4.47k|            }
  144|  34.5k|            it = result->begin();
  145|  34.5k|        }
  146|  4.47k|    }
  147|       |
  148|       |    // scan localized
  149|  4.47k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 4.47k, False: 746]
  ------------------
  150|  4.47k|        auto it = scn::ranges::begin(source);
  151|  39.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  39.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  39.0k|            auto result = scn::scan<T>(
  154|  39.0k|                global_locale,
  155|  39.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  39.0k|                scn::runtime_format(f));
  157|  39.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 4.47k, False: 34.5k]
  ------------------
  158|  4.47k|                break;
  159|  4.47k|            }
  160|  34.5k|            it = result->begin();
  161|  34.5k|        }
  162|  4.47k|    }
  163|       |
  164|       |    // scan_value
  165|    746|    {
  166|    746|        auto it = scn::ranges::begin(source);
  167|  17.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.9k|            auto result = scn::scan_value<T>(
  170|  17.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 746, False: 17.1k]
  ------------------
  172|    746|                break;
  173|    746|            }
  174|  17.1k|            it = result->begin();
  175|  17.1k|        }
  176|    746|    }
  177|    746|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    746|{
   90|    746|    using char_type = ranges::range_value_t<Source>;
   91|    746|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    746|    deque.clear();
   93|    746|    std::copy(ranges::begin(source), ranges::end(source),
   94|    746|              std::back_inserter(deque));
   95|    746|    return deque;
   96|    746|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    746|{
   79|    746|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|    746|        return noncontiguous_buffer;
   81|    746|    }
   82|    746|    else {
   83|    746|        return wnoncontiguous_buffer;
   84|    746|    }
   85|    746|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    746|{
  122|    746|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    746|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    746|    buf.resize(sizeof...(Args));
  125|    746|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    746|    return buf;
  127|    746|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    746|{
  108|    746|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    746|        return format_string_view_buffer;
  110|    746|    }
  111|    746|    else {
  112|    746|        return wformat_string_view_buffer;
  113|    746|    }
  114|    746|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.49k|{
  185|  1.49k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.49k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.49k|                                   format_strings);
  188|  1.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.49k|{
  133|       |    // Regular scan
  134|  8.95k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.95k, False: 1.49k]
  ------------------
  135|  8.95k|        auto it = scn::ranges::begin(source);
  136|  4.29M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  4.29M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  4.29M|            auto result = scn::scan<T>(
  139|  4.29M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  4.29M|                scn::runtime_format(f));
  141|  4.29M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 8.95k, False: 4.28M]
  ------------------
  142|  8.95k|                break;
  143|  8.95k|            }
  144|  4.28M|            it = result->begin();
  145|  4.28M|        }
  146|  8.95k|    }
  147|       |
  148|       |    // scan localized
  149|  8.95k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 8.95k, False: 1.49k]
  ------------------
  150|  8.95k|        auto it = scn::ranges::begin(source);
  151|  4.29M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  4.29M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  4.29M|            auto result = scn::scan<T>(
  154|  4.29M|                global_locale,
  155|  4.29M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  4.29M|                scn::runtime_format(f));
  157|  4.29M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 8.95k, False: 4.28M]
  ------------------
  158|  8.95k|                break;
  159|  8.95k|            }
  160|  4.28M|            it = result->begin();
  161|  4.28M|        }
  162|  8.95k|    }
  163|       |
  164|       |    // scan_value
  165|  1.49k|    {
  166|  1.49k|        auto it = scn::ranges::begin(source);
  167|  2.14M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  2.14M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  2.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  2.14M|            auto result = scn::scan_value<T>(
  170|  2.14M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  2.14M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.49k, False: 2.14M]
  ------------------
  172|  1.49k|                break;
  173|  1.49k|            }
  174|  2.14M|            it = result->begin();
  175|  2.14M|        }
  176|  1.49k|    }
  177|  1.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.49k|{
  133|       |    // Regular scan
  134|  8.95k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.95k, False: 1.49k]
  ------------------
  135|  8.95k|        auto it = scn::ranges::begin(source);
  136|  4.29M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  4.29M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  4.29M|            auto result = scn::scan<T>(
  139|  4.29M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  4.29M|                scn::runtime_format(f));
  141|  4.29M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 8.95k, False: 4.28M]
  ------------------
  142|  8.95k|                break;
  143|  8.95k|            }
  144|  4.28M|            it = result->begin();
  145|  4.28M|        }
  146|  8.95k|    }
  147|       |
  148|       |    // scan localized
  149|  8.95k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 8.95k, False: 1.49k]
  ------------------
  150|  8.95k|        auto it = scn::ranges::begin(source);
  151|  4.29M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  4.29M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  4.29M|            auto result = scn::scan<T>(
  154|  4.29M|                global_locale,
  155|  4.29M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  4.29M|                scn::runtime_format(f));
  157|  4.29M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 8.95k, False: 4.28M]
  ------------------
  158|  8.95k|                break;
  159|  8.95k|            }
  160|  4.28M|            it = result->begin();
  161|  4.28M|        }
  162|  8.95k|    }
  163|       |
  164|       |    // scan_value
  165|  1.49k|    {
  166|  1.49k|        auto it = scn::ranges::begin(source);
  167|  2.14M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  2.14M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  2.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  2.14M|            auto result = scn::scan_value<T>(
  170|  2.14M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  2.14M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.49k, False: 2.14M]
  ------------------
  172|  1.49k|                break;
  173|  1.49k|            }
  174|  2.14M|            it = result->begin();
  175|  2.14M|        }
  176|  1.49k|    }
  177|  1.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.49k|{
  133|       |    // Regular scan
  134|  8.95k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.95k, False: 1.49k]
  ------------------
  135|  8.95k|        auto it = scn::ranges::begin(source);
  136|  4.29M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  4.29M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  4.29M|            auto result = scn::scan<T>(
  139|  4.29M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  4.29M|                scn::runtime_format(f));
  141|  4.29M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 8.95k, False: 4.28M]
  ------------------
  142|  8.95k|                break;
  143|  8.95k|            }
  144|  4.28M|            it = result->begin();
  145|  4.28M|        }
  146|  8.95k|    }
  147|       |
  148|       |    // scan localized
  149|  8.95k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 8.95k, False: 1.49k]
  ------------------
  150|  8.95k|        auto it = scn::ranges::begin(source);
  151|  4.29M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  4.29M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  4.29M|            auto result = scn::scan<T>(
  154|  4.29M|                global_locale,
  155|  4.29M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  4.29M|                scn::runtime_format(f));
  157|  4.29M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 8.95k, False: 4.28M]
  ------------------
  158|  8.95k|                break;
  159|  8.95k|            }
  160|  4.28M|            it = result->begin();
  161|  4.28M|        }
  162|  8.95k|    }
  163|       |
  164|       |    // scan_value
  165|  1.49k|    {
  166|  1.49k|        auto it = scn::ranges::begin(source);
  167|  2.14M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  2.14M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  2.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  2.14M|            auto result = scn::scan_value<T>(
  170|  2.14M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  2.14M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.49k, False: 2.14M]
  ------------------
  172|  1.49k|                break;
  173|  1.49k|            }
  174|  2.14M|            it = result->begin();
  175|  2.14M|        }
  176|  1.49k|    }
  177|  1.49k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.49k|{
   90|  1.49k|    using char_type = ranges::range_value_t<Source>;
   91|  1.49k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.49k|    deque.clear();
   93|  1.49k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.49k|              std::back_inserter(deque));
   95|  1.49k|    return deque;
   96|  1.49k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.49k|{
   79|  1.49k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  1.49k|        return noncontiguous_buffer;
   81|  1.49k|    }
   82|  1.49k|    else {
   83|  1.49k|        return wnoncontiguous_buffer;
   84|  1.49k|    }
   85|  1.49k|}

LLVMFuzzerTestOneInput:
   57|    747|{
   58|    747|    scn::fuzz::run(data, size);
   59|    747|    return 0;
   60|    747|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    747|{
   36|    747|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 746]
  |  Branch (36:35): [True: 0, False: 746]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    746|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    746|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    746|                                             "{:64U}", "{:[A-Za-z]}");
   44|    746|    do_basic_run(sv, f);
   45|       |
   46|    746|    const auto& wf = get_format_strings<wchar_t>(
   47|    746|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    746|    do_basic_run(wsv_reinterpret, wf);
   49|    746|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 746, False: 0]
  ------------------
   50|    746|        do_basic_run(wsv_transcode, wf);
   51|    746|    }
   52|    746|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    746|{
   25|    746|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    746|                                                           format_strings);
   27|    746|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    746|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    746|            source, format_strings);
   30|    746|    }
   31|    746|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    746|{
   25|    746|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    746|                                                           format_strings);
   27|    746|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    746|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    746|            source, format_strings);
   30|    746|    }
   31|    746|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.49k|{
   25|  1.49k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.49k|                                                           format_strings);
   27|  1.49k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.49k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.49k|            source, format_strings);
   30|  1.49k|    }
   31|  1.49k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.49k|{
   25|  1.49k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.49k|                                                           format_strings);
   27|  1.49k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.49k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.49k|            source, format_strings);
   30|  1.49k|    }
   31|  1.49k|}

