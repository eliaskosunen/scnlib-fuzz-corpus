_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4123|  3.71M|{
 4124|  3.71M|    if constexpr (sizeof(U) == 1) {
 4125|  3.71M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|       |    else {
 4131|       |        // utf-32
 4132|       |        static_assert(sizeof(U) == 4);
 4133|       |        SCN_UNUSED(ch);
 4134|       |        return 1;
 4135|       |    }
 4136|  3.71M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4087|  3.71M|{
 4088|  3.71M|    static_assert(sizeof(U8) == 1);
 4089|       |
 4090|  3.71M|    SCN_GCC_COMPAT_PUSH
 4091|  3.71M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4092|  3.71M|    constexpr char lengths[] =
 4093|  3.71M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4094|  3.71M|        "\1\1\1\1\1\1\1\1"
 4095|  3.71M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4096|       |                            // byte
 4097|  3.71M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4098|  3.71M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4099|  3.71M|        "\4";               // highest bits 11110 -> 4-byte cp
 4100|  3.71M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4101|  3.71M|    SCN_GCC_COMPAT_POP
 4102|  3.71M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|  3.56M|{
 4330|  3.56M|    if constexpr (sizeof(CharT) == 1) {
 4331|  3.56M|        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|       |    else {
 4337|       |        SCN_EXPECT(input.size() == 1);
 4338|       |        auto cp = static_cast<char32_t>(input.front());
 4339|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4340|       |            return invalid_code_point;
 4341|       |        }
 4342|       |        return cp;
 4343|       |    }
 4344|  3.56M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4142|  3.56M|{
 4143|  3.56M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1079|  3.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4144|       |
 4145|  3.56M|    const auto is_trailing_code_unit = [](char ch) {
 4146|  3.56M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  3.56M|    };
 4148|       |
 4149|  3.56M|    if (input.size() == 1) {
  ------------------
  |  Branch (4149:9): [True: 3.19M, False: 372k]
  ------------------
 4150|  3.19M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4150:13): [True: 315, False: 3.19M]
  ------------------
 4151|    315|            SCN_UNLIKELY_ATTR
 4152|    315|            return invalid_code_point;
 4153|    315|        }
 4154|  3.19M|        return static_cast<char32_t>(input[0]);
 4155|  3.19M|    }
 4156|       |
 4157|   372k|    if (input.size() == 2) {
  ------------------
  |  Branch (4157:9): [True: 112k, False: 259k]
  ------------------
 4158|   112k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4158:13): [True: 177, False: 112k]
  ------------------
 4159|    177|            SCN_UNLIKELY_ATTR
 4160|    177|            return invalid_code_point;
 4161|    177|        }
 4162|   112k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4162:13): [True: 11.7k, False: 100k]
  ------------------
 4163|  11.7k|            SCN_UNLIKELY_ATTR
 4164|  11.7k|            return invalid_code_point;
 4165|  11.7k|        }
 4166|       |
 4167|   100k|        char32_t cp{};
 4168|   100k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4169|   100k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4170|   100k|        return cp;
 4171|   112k|    }
 4172|       |
 4173|   259k|    if (input.size() == 3) {
  ------------------
  |  Branch (4173:9): [True: 250k, False: 8.53k]
  ------------------
 4174|   250k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4174:13): [True: 43, False: 250k]
  ------------------
 4175|     43|            SCN_UNLIKELY_ATTR
 4176|     43|            return invalid_code_point;
 4177|     43|        }
 4178|   250k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4178:13): [True: 1.89k, False: 248k]
  ------------------
 4179|   250k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4179:13): [True: 862, False: 248k]
  ------------------
 4180|  2.75k|            SCN_UNLIKELY_ATTR
 4181|  2.75k|            return invalid_code_point;
 4182|  2.75k|        }
 4183|       |
 4184|   248k|        char32_t cp{};
 4185|   248k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4186|   248k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4187|   248k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4188|   248k|        return cp;
 4189|   250k|    }
 4190|       |
 4191|  8.53k|    if (input.size() == 4) {
  ------------------
  |  Branch (4191:9): [True: 8.53k, False: 0]
  ------------------
 4192|  8.53k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4192:13): [True: 0, False: 8.53k]
  ------------------
 4193|      0|            SCN_UNLIKELY_ATTR
 4194|      0|            return invalid_code_point;
 4195|      0|        }
 4196|  8.53k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4196:13): [True: 2.82k, False: 5.70k]
  ------------------
 4197|  2.82k|            SCN_UNLIKELY_ATTR
 4198|  2.82k|            return invalid_code_point;
 4199|  2.82k|        }
 4200|  5.70k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4200:13): [True: 2.13k, False: 3.56k]
  ------------------
 4201|  5.70k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4201:13): [True: 155, False: 3.41k]
  ------------------
 4202|  5.70k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4202:13): [True: 112, False: 3.30k]
  ------------------
 4203|  2.40k|            SCN_UNLIKELY_ATTR
 4204|  2.40k|            return invalid_code_point;
 4205|  2.40k|        }
 4206|       |
 4207|  3.30k|        char32_t cp{};
 4208|  3.30k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4209|  3.30k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4210|  3.30k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4211|  3.30k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4212|  3.30k|        return cp;
 4213|  5.70k|    }
 4214|       |
 4215|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4216|       |    // gcc 7 thinks we'll get here, even when we won't
 4217|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4218|      0|#endif
 4219|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4220|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4145|   624k|    const auto is_trailing_code_unit = [](char ch) {
 4146|   624k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|   624k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|  3.07M|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|  3.07M|    else {
 4022|  3.07M|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|  3.07M|                                       to_address(first), to_address(last)))};
 4024|  3.07M|    }
 4025|  3.07M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  9.57M|{
  341|  9.57M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  9.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  9.57M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  318|  10.7M|{
  319|  10.7M|    return p;
  320|  10.7M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4046|  1.59M|{
 4047|       |    if constexpr (std::is_constructible_v<
 4048|       |                      typename std::basic_string_view<CharT>::iterator,
 4049|       |                      decltype(it)> &&
 4050|  1.59M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4051|  1.59M|        SCN_UNUSED(sv);
  ------------------
  |  | 1064|  1.59M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4052|  1.59M|        return it;
 4053|       |    }
 4054|       |    else {
 4055|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4056|       |    }
 4057|  1.59M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  24.3k|    {
 2901|  24.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  24.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  24.3k|    {
 2882|  24.3k|        return decay_copy(t.begin());
 2883|  24.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2125|  1.94M|{
 2126|  1.94M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  1.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  1.94M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   414k|    {
 2958|   414k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   414k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   414k|    {
 2940|   414k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   414k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
10004|  42.1k|{
10005|  42.1k|    auto result = make_scan_result<Source, Args...>();
10006|  42.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  42.1k|                                   make_scan_args(result->values())));
10008|  42.1k|    return result;
10009|  42.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9960|   103k|{
 9961|   103k|    return scan_result_type<Source, Args...>();
 9962|   103k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   103k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|   103k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|   103k|    {
  646|   103k|        construct();
  647|   103k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|   103k|    {
  727|   103k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|   103k|        m_has_value = true;
  729|   103k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  428|   103k|{
  429|   103k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   103k|        T(std::forward<Args>(args)...);
  431|   103k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6775|   103k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6618|   206k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3491|   206k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6549|   236k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   493k|    {
  751|   493k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   493k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   493k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|   103k|{
 9946|   103k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.7k, False: 91.7k]
  |  |  ------------------
  ------------------
 9947|  11.7k|        out = unexpected(in.error());
 9948|  11.7k|    }
 9949|  91.7k|    else {
 9950|  91.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  91.7k|    static_cast<    \
  |  | 1084|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  91.7k|    }
 9952|   103k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1771|   206k|    {
 1772|   206k|        return has_value();
 1773|   206k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   413k|    {
  523|   413k|        return m_has_value;
  524|   413k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1777|  23.4k|    {
 1778|  23.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  23.4k|        return this->get_unexpected().error();
 1780|  23.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  23.4k|    {
  506|  23.4k|        return m_unexpected;
  507|  23.4k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  397|  1.01M|    {
  398|  1.01M|        return m_unexpected;
  399|  1.01M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  380|   443k|        : m_unexpected(std::forward<Err>(e))
  381|   443k|    {
  382|   443k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   443k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|   443k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  11.7k|        : base(unexpect, std::move(e.error())),
 1648|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.7k|    {
 1650|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  11.7k|        : m_has_value(false)
  670|  11.7k|    {
  671|  11.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  733|  11.7k|    {
  734|  11.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  11.7k|                                  std::forward<Args>(args)...);
  736|  11.7k|        m_has_value = false;
  737|  11.7k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  428|  70.4k|{
  429|  70.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  70.4k|        T(std::forward<Args>(args)...);
  431|  70.4k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  391|   581k|        : m_unexpected(std::forward<Args>(args)...)
  392|   581k|    {
  393|   581k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   581k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|   581k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  58.6k|    {
  763|  58.6k|        return reinterpret_cast<unexpected<E>*>(
  764|  58.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  58.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  58.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.7k|    {
 1348|  11.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  11.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  934|  11.7k|    {
  935|  11.7k|        assign_common(std::move(other));
  936|  11.7k|        return *this;
  937|  11.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  11.7k|    {
  982|  11.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.7k, False: 0]
  ------------------
  983|  11.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   529k|    {
  720|   529k|        return m_has_value;
  721|   529k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|   286k|    {
  686|   286k|        return *value_ptr();
  687|   286k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  11.7k|    {
 1078|  11.7k|        this->destroy_value();
 1079|  11.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|   103k|    {
  741|   103k|        scn::detail::destroy_at(value_ptr());
  742|   103k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  434|   103k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   103k|    else {
  441|   103k|        p->~T();
  442|   103k|    }
  443|   103k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6782|   103k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  11.7k|    {
  734|  11.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  11.7k|                                  std::forward<Args>(args)...);
  736|  11.7k|        m_has_value = false;
  737|  11.7k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  428|   105k|{
  429|   105k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   105k|        T(std::forward<Args>(args)...);
  431|   105k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  11.7k|    {
  711|  11.7k|        return std::move(*unexpected_ptr());
  712|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  23.4k|    {
  745|  23.4k|        scn::detail::destroy_at(unexpected_ptr());
  746|  23.4k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  434|   140k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   140k|    else {
  441|   140k|        p->~T();
  442|   140k|    }
  443|   140k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6649|   183k|    {
 6650|   183k|        m_range = std::forward<Other>(r);
 6651|   183k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|   183k|    {
 1827|   183k|        return value();
 1828|   183k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   183k|    {
 1801|   183k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   183k|        return this->get_value();
 1803|   183k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   183k|    {
  489|   183k|        return m_value;
  490|   183k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9766|  84.3k|{
 9767|  84.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  84.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|  84.3k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|  84.3k|{
 9704|  84.3k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  84.3k|    auto result = vscan_impl(buffer, format, args);
 9707|  84.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  84.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.8k, False: 73.5k]
  |  |  ------------------
  ------------------
 9708|  10.8k|        return unexpected(result.error());
 9709|  10.8k|    }
 9710|  73.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  73.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  84.3k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5465|   206k|{
 5466|   206k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   206k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   206k|                  "\n"
 5470|   206k|                  "Unsupported range type given as input to a scanning "
 5471|   206k|                  "function.\n"
 5472|   206k|                  "A range needs to have a character type (value type) "
 5473|   206k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   206k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   206k|                  "to be included.\n"
 5476|   206k|                  "See the scnlib documentation for more details.");
 5477|   206k|    static_assert(
 5478|   206k|        !std::is_same_v<T, custom_char_traits>,
 5479|   206k|        "\n"
 5480|   206k|        "Unsupported range type given as input to a scanning "
 5481|   206k|        "function.\n"
 5482|   206k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   206k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   206k|        "not supported.");
 5485|   206k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   206k|                  "\n"
 5487|   206k|                  "Unsupported range type given as input to a scanning "
 5488|   206k|                  "function.\n"
 5489|   206k|                  "file_marker_found cannot be used as an "
 5490|   206k|                  "source range type to scn::scan.\n"
 5491|   206k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   206k|                  "and do not provide an explicit source range, "
 5493|   206k|                  "or use scn::scan with a FILE* directly.");
 5494|   206k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   206k|                  "\n"
 5496|   206k|                  "Unsupported range type given as input to a scanning "
 5497|   206k|                  "function.\n"
 5498|   206k|                  "In order to be scannable, a range needs to satisfy "
 5499|   206k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   206k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   206k|                  "\n"
 5502|   206k|                  "Unsupported range type given as input to a scanning "
 5503|   206k|                  "function.\n"
 5504|   206k|                  "A range needs to model forward_range and have a valid "
 5505|   206k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   206k|                  "Examples of scannable ranges are std::string, "
 5507|   206k|                  "std::string_view, "
 5508|   206k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   206k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   206k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   206k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|   206k|{
 5404|   206k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|   206k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|   206k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|   206k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   206k|    {
 3032|   206k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   206k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   206k|    {
 3013|   206k|        return t.data();
 3014|   206k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3414|   206k|    {
 3415|   206k|        return detail::to_address(ranges::begin(derived()));
 3416|   206k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  1.20M|{
  341|  1.20M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  1.20M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   390k|    {
 2901|   390k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   390k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   390k|    {
 2882|   390k|        return decay_copy(t.begin());
 2883|   390k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3512|  2.45M|    {
 3513|  2.45M|        return m_iterator;
 3514|  2.45M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3370|   206k|    {
 3371|   206k|        return static_cast<const D&>(*this);
 3372|   206k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|   206k|    {
 3107|   206k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   206k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|   206k|    {
 3073|   206k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   206k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2125|  2.35M|{
 2126|  2.35M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  2.35M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|   866k|    {
 3530|   866k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|   866k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1771|  3.38M|    {
 1772|  3.38M|        return has_value();
 1773|  3.38M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  522|  6.72M|    {
  523|  6.72M|        return m_has_value;
  524|  6.72M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1777|   105k|    {
 1778|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   105k|        return this->get_unexpected().error();
 1780|   105k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   105k|    {
  506|   105k|        return m_unexpected;
  507|   105k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  23.4k|        : base(unexpect, std::move(e.error())),
 1648|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.4k|    {
 1650|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  23.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  23.4k|          m_has_value(false)
  484|  23.4k|    {
  485|  23.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   206k|    {
 1348|   206k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|   183k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   183k|                      ranges::iterator_t<SourceRange>>) {
 6882|   183k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   183k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   934k|    {
 2901|   934k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   934k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   934k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   934k|    {
 2882|   934k|        return decay_copy(t.begin());
 2883|   934k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6866|   183k|{
 6867|   183k|    return ranges::end(source);
 6868|   183k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   183k|    {
 2958|   183k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   183k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   183k|    {
 2940|   183k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   183k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3517|  1.18M|    {
 3518|  1.18M|        return m_sentinel;
 3519|  1.18M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1826|  3.23M|    {
 1827|  3.23M|        return value();
 1828|  3.23M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1800|  3.23M|    {
 1801|  3.23M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.23M|        return this->get_value();
 1803|  3.23M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  488|  3.23M|    {
  489|  3.23M|        return m_value;
  490|  3.23M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   183k|        : base(std::in_place, std::forward<U>(val)),
 1602|   183k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   183k|    {
 1604|   183k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|   183k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   183k|    {
  475|   183k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8962|  84.3k|    {
 8963|  84.3k|        return m_str;
 8964|  84.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|   192k|{
 6275|   192k|    detail::check_scan_arg_types<Args...>();
 6276|   192k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   192k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5985|   236k|{
 5986|   236k|    constexpr bool default_constructible_constraint =
 5987|   236k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   236k|    static_assert(default_constructible_constraint,
 5989|   236k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   236k|    constexpr bool destructible_constraint =
 5992|   236k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   236k|    static_assert(destructible_constraint,
 5994|   236k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   236k|    constexpr bool non_reference_constraint =
 5997|   236k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   236k|    static_assert(non_reference_constraint,
 5999|   236k|                  "Scan argument types must not be references");
 6000|       |
 6001|   236k|    constexpr bool movable_constraint =
 6002|   236k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   236k|    static_assert(movable_constraint,
 6004|   236k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   236k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   236k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   236k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6250|   192k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   192k|    {
 6252|   192k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|   192k|    {
 6260|   192k|        return {detail::make_arg<
 6261|   192k|            kind, Context,
 6262|   192k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   192k|                                 typename Context::char_type>::value>(args)...};
 6264|   192k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 6035|   192k|{
 6036|   192k|    return make_value<Context>(value).ref_value;
 6037|   192k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5970|   236k|{
 5971|   236k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   236k|                                  needs_context_tag>) {
 5975|   236k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   236k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5772|   236k|    {                                                                        \
 5773|   236k|        return val;                                                          \
 5774|   236k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5939|   236k|{
 5940|   236k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   236k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   236k|    constexpr bool scannable_char =
 5944|   236k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   236k|    static_assert(scannable_char,
 5946|   236k|                  "Cannot scan an argument of an unsupported character "
 5947|   236k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   236k|    constexpr bool scannable_const =
 5950|   236k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   236k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   236k|    constexpr bool scannable_disabled =
 5954|   236k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   236k|    static_assert(scannable_disabled,
 5956|   236k|                  "Cannot scan an argument that has been disabled by "
 5957|   236k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   236k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   236k|    static_assert(
 5961|   236k|        scannable,
 5962|   236k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   236k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   236k|    return arg_value{arg};
 5966|   236k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5715|   236k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   236k|    {
 5717|   236k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6558|   192k|    {
 6559|   192k|        return m_values;
 6560|   192k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   192k|        : basic_scan_args(store.desc, store.args.data())
 6301|   192k|    {
 6302|   192k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6352|   277k|        : m_desc(desc), m_builtin_values(data)
 6353|   277k|    {
 6354|   277k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  1.41M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.41M|    static_cast<    \
  |  | 1084|  1.41M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.41M|    static_cast<    \
  |  | 1084|  1.41M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  1.41M|    {
 3498|  1.41M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8639|   277k|{
 8640|   277k|    return s;
 8641|   277k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8616|   277k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  84.3k|        : m_str(r.str)
 8958|  84.3k|    {
 8959|  84.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   103k|    {
 1772|   103k|        return has_value();
 1773|   103k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1846|   286k|    {
 1847|   286k|        return &value();
 1848|   286k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|   286k|    {
 1801|   286k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   286k|        return this->get_value();
 1803|   286k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6638|   183k|    {
 6639|   183k|        return ranges::begin(m_range);
 6640|   183k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|   115k|    {
  676|   115k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 91.7k, False: 23.4k]
  ------------------
  677|  91.7k|            destroy_value();
  678|  91.7k|        }
  679|  23.4k|        else {
  680|  23.4k|            destroy_unexpected();
  681|  23.4k|        }
  682|   115k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
10073|  42.1k|{
10074|  42.1k|    auto result = make_scan_result<Source, Args...>();
10075|  42.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  42.1k|                                   make_scan_args(result->values())));
10077|  42.1k|    return result;
10078|  42.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9784|  84.3k|{
 9785|  84.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  84.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|  84.3k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|  84.3k|{
 9720|  84.3k|#if !SCN_DISABLE_LOCALE
 9721|  84.3k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  84.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  84.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  84.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  84.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  84.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.8k, False: 73.5k]
  |  |  ------------------
  ------------------
 9728|  10.8k|        return unexpected(result.error());
 9729|  10.8k|    }
 9730|  73.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  73.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  84.3k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10114|  19.1k|{
10115|  19.1k|    auto result = make_scan_result<Source, T>();
10116|  19.1k|    fill_scan_result(
10117|  19.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  19.1k|                            detail::make_arg<scan_context>(result->value())));
10119|  19.1k|    return result;
10120|  19.1k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9797|  38.2k|{
 9798|  38.2k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  38.2k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  38.2k|{
 9744|  38.2k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  38.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  38.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.80k, False: 36.4k]
  |  |  ------------------
  ------------------
 9748|  1.80k|        return unexpected(result.error());
 9749|  1.80k|    }
 9750|  36.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  38.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 6020|  44.0k|{
 6021|  44.0k|    check_scan_arg_types<T>();
 6022|       |
 6023|  44.0k|    basic_scan_arg<Context> arg;
 6024|  44.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  44.0k|    arg.m_value = make_value<Context>(value);
 6026|  44.0k|    return arg;
 6027|  44.0k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6118|   340k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5711|  2.52M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  44.0k|    {
 6581|  44.0k|        return std::get<0>(m_values);
 6582|  44.0k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
10004|  42.1k|{
10005|  42.1k|    auto result = make_scan_result<Source, Args...>();
10006|  42.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  42.1k|                                   make_scan_args(result->values())));
10008|  42.1k|    return result;
10009|  42.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9960|   103k|{
 9961|   103k|    return scan_result_type<Source, Args...>();
 9962|   103k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   103k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  459|   103k|        : m_value(T{}), m_has_value(true)
  460|   103k|    {
  461|   103k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6775|   103k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6549|   103k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9945|   103k|{
 9946|   103k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.7k, False: 91.7k]
  |  |  ------------------
  ------------------
 9947|  11.7k|        out = unexpected(in.error());
 9948|  11.7k|    }
 9949|  91.7k|    else {
 9950|  91.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  91.7k|    static_cast<    \
  |  | 1084|  91.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  91.7k|    }
 9952|   103k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1647|  11.7k|        : base(unexpect, std::move(e.error())),
 1648|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.7k|    {
 1650|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  482|  11.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.7k|          m_has_value(false)
  484|  11.7k|    {
  485|  11.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.7k|    {
 1348|  11.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1588|  11.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  934|  11.7k|    {
  935|  11.7k|        assign_common(std::move(other));
  936|  11.7k|        return *this;
  937|  11.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  981|  11.7k|    {
  982|  11.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.7k, False: 0]
  ------------------
  983|  11.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   413k|    {
  523|   413k|        return m_has_value;
  524|   413k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   286k|    {
  489|   286k|        return m_value;
  490|   286k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1077|  11.7k|    {
 1078|  11.7k|        this->destroy_value();
 1079|  11.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  11.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  536|  11.7k|    {
  537|  11.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  11.7k|                                  std::forward<Args>(args)...);
  539|  11.7k|        m_has_value = false;
  540|  11.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  11.7k|    {
  506|  11.7k|        return m_unexpected;
  507|  11.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  11.7k|    {
  514|  11.7k|        return std::move(m_unexpected);
  515|  11.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8962|  84.3k|    {
 8963|  84.3k|        return m_str;
 8964|  84.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  84.3k|{
 6275|  84.3k|    detail::check_scan_arg_types<Args...>();
 6276|  84.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  84.3k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5985|   103k|{
 5986|   103k|    constexpr bool default_constructible_constraint =
 5987|   103k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   103k|    static_assert(default_constructible_constraint,
 5989|   103k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   103k|    constexpr bool destructible_constraint =
 5992|   103k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   103k|    static_assert(destructible_constraint,
 5994|   103k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   103k|    constexpr bool non_reference_constraint =
 5997|   103k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   103k|    static_assert(non_reference_constraint,
 5999|   103k|                  "Scan argument types must not be references");
 6000|       |
 6001|   103k|    constexpr bool movable_constraint =
 6002|   103k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   103k|    static_assert(movable_constraint,
 6004|   103k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   103k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   103k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   103k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6250|  84.3k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  84.3k|    {
 6252|  84.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  84.3k|    {
 6260|  84.3k|        return {detail::make_arg<
 6261|  84.3k|            kind, Context,
 6262|  84.3k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  84.3k|                                 typename Context::char_type>::value>(args)...};
 6264|  84.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE26ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 6035|  84.3k|{
 6036|  84.3k|    return make_value<Context>(value).ref_value;
 6037|  84.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5970|   103k|{
 5971|   103k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   103k|                                  needs_context_tag>) {
 5975|   103k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   103k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5772|   103k|    {                                                                        \
 5773|   103k|        return val;                                                          \
 5774|   103k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5939|   103k|{
 5940|   103k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   103k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   103k|    constexpr bool scannable_char =
 5944|   103k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   103k|    static_assert(scannable_char,
 5946|   103k|                  "Cannot scan an argument of an unsupported character "
 5947|   103k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   103k|    constexpr bool scannable_const =
 5950|   103k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   103k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   103k|    constexpr bool scannable_disabled =
 5954|   103k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   103k|    static_assert(scannable_disabled,
 5956|   103k|                  "Cannot scan an argument that has been disabled by "
 5957|   103k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   103k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   103k|    static_assert(
 5961|   103k|        scannable,
 5962|   103k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   103k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   103k|    return arg_value{arg};
 5966|   103k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5715|   103k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   103k|    {
 5717|   103k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6558|  84.3k|    {
 6559|  84.3k|        return m_values;
 6560|  84.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  84.3k|        : basic_scan_args(store.desc, store.args.data())
 6301|  84.3k|    {
 6302|  84.3k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  84.3k|        : m_str(r.str)
 8958|  84.3k|    {
 8959|  84.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   103k|    {
 1772|   103k|        return has_value();
 1773|   103k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1846|   286k|    {
 1847|   286k|        return &value();
 1848|   286k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1800|   286k|    {
 1801|   286k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   286k|        return this->get_value();
 1803|   286k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
10073|  42.1k|{
10074|  42.1k|    auto result = make_scan_result<Source, Args...>();
10075|  42.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  42.1k|                                   make_scan_args(result->values())));
10077|  42.1k|    return result;
10078|  42.1k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
10114|  19.1k|{
10115|  19.1k|    auto result = make_scan_result<Source, T>();
10116|  19.1k|    fill_scan_result(
10117|  19.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  19.1k|                            detail::make_arg<scan_context>(result->value())));
10119|  19.1k|    return result;
10120|  19.1k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 6020|  19.1k|{
 6021|  19.1k|    check_scan_arg_types<T>();
 6022|       |
 6023|  19.1k|    basic_scan_arg<Context> arg;
 6024|  19.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  19.1k|    arg.m_value = make_value<Context>(value);
 6026|  19.1k|    return arg;
 6027|  19.1k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  19.1k|    {
 6581|  19.1k|        return std::get<0>(m_values);
 6582|  19.1k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  11.7k|    {
 2901|  11.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  11.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  11.7k|    {
 2882|  11.7k|        return decay_copy(t.begin());
 2883|  11.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2125|  5.26M|{
 2126|  5.26M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  5.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  5.26M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   266k|    {
 2958|   266k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   266k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   266k|    {
 2940|   266k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   266k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
10004|  54.1k|{
10005|  54.1k|    auto result = make_scan_result<Source, Args...>();
10006|  54.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  54.1k|                                   make_scan_args(result->values())));
10008|  54.1k|    return result;
10009|  54.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9960|   133k|{
 9961|   133k|    return scan_result_type<Source, Args...>();
 9962|   133k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   133k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|   133k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|   133k|    {
  646|   133k|        construct();
  647|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|   133k|    {
  727|   133k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|   133k|        m_has_value = true;
  729|   133k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  428|   133k|{
  429|   133k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   133k|        T(std::forward<Args>(args)...);
  431|   133k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6775|   133k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6618|   133k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3491|   133k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   642k|    {
  751|   642k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   642k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   642k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9945|   133k|{
 9946|   133k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.7k, False: 121k]
  |  |  ------------------
  ------------------
 9947|  11.7k|        out = unexpected(in.error());
 9948|  11.7k|    }
 9949|   121k|    else {
 9950|   121k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   121k|    static_cast<    \
  |  | 1084|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   121k|    }
 9952|   133k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   133k|    {
 1772|   133k|        return has_value();
 1773|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   266k|    {
  523|   266k|        return m_has_value;
  524|   266k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1777|  11.7k|    {
 1778|  11.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  11.7k|        return this->get_unexpected().error();
 1780|  11.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  11.7k|    {
  506|  11.7k|        return m_unexpected;
  507|  11.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1647|  11.7k|        : base(unexpect, std::move(e.error())),
 1648|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.7k|    {
 1650|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  669|  11.7k|        : m_has_value(false)
  670|  11.7k|    {
  671|  11.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  733|  11.7k|    {
  734|  11.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  11.7k|                                  std::forward<Args>(args)...);
  736|  11.7k|        m_has_value = false;
  737|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  58.6k|    {
  763|  58.6k|        return reinterpret_cast<unexpected<E>*>(
  764|  58.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  58.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  58.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.7k|    {
 1348|  11.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1588|  11.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  934|  11.7k|    {
  935|  11.7k|        assign_common(std::move(other));
  936|  11.7k|        return *this;
  937|  11.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  981|  11.7k|    {
  982|  11.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.7k, False: 0]
  ------------------
  983|  11.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   678k|    {
  720|   678k|        return m_has_value;
  721|   678k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|   376k|    {
  686|   376k|        return *value_ptr();
  687|   376k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1077|  11.7k|    {
 1078|  11.7k|        this->destroy_value();
 1079|  11.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|   133k|    {
  741|   133k|        scn::detail::destroy_at(value_ptr());
  742|   133k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  434|   133k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   133k|    else {
  441|   133k|        p->~T();
  442|   133k|    }
  443|   133k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6782|   133k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  733|  11.7k|    {
  734|  11.7k|        scn::detail::construct_at(unexpected_ptr(),
  735|  11.7k|                                  std::forward<Args>(args)...);
  736|  11.7k|        m_has_value = false;
  737|  11.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  11.7k|    {
  711|  11.7k|        return std::move(*unexpected_ptr());
  712|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  23.4k|    {
  745|  23.4k|        scn::detail::destroy_at(unexpected_ptr());
  746|  23.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6649|   121k|    {
 6650|   121k|        m_range = std::forward<Other>(r);
 6651|   121k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|   121k|    {
 1827|   121k|        return value();
 1828|   121k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|   121k|    {
 1801|   121k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   121k|        return this->get_value();
 1803|   121k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   121k|    {
  489|   121k|        return m_value;
  490|   121k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9766|  54.1k|{
 9767|  54.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|  54.1k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|  54.1k|{
 9704|  54.1k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  54.1k|    auto result = vscan_impl(buffer, format, args);
 9707|  54.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.41k, False: 48.7k]
  |  |  ------------------
  ------------------
 9708|  5.41k|        return unexpected(result.error());
 9709|  5.41k|    }
 9710|  48.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  54.1k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5465|   133k|{
 5466|   133k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   133k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   133k|                  "\n"
 5470|   133k|                  "Unsupported range type given as input to a scanning "
 5471|   133k|                  "function.\n"
 5472|   133k|                  "A range needs to have a character type (value type) "
 5473|   133k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   133k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   133k|                  "to be included.\n"
 5476|   133k|                  "See the scnlib documentation for more details.");
 5477|   133k|    static_assert(
 5478|   133k|        !std::is_same_v<T, custom_char_traits>,
 5479|   133k|        "\n"
 5480|   133k|        "Unsupported range type given as input to a scanning "
 5481|   133k|        "function.\n"
 5482|   133k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   133k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   133k|        "not supported.");
 5485|   133k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   133k|                  "\n"
 5487|   133k|                  "Unsupported range type given as input to a scanning "
 5488|   133k|                  "function.\n"
 5489|   133k|                  "file_marker_found cannot be used as an "
 5490|   133k|                  "source range type to scn::scan.\n"
 5491|   133k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   133k|                  "and do not provide an explicit source range, "
 5493|   133k|                  "or use scn::scan with a FILE* directly.");
 5494|   133k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   133k|                  "\n"
 5496|   133k|                  "Unsupported range type given as input to a scanning "
 5497|   133k|                  "function.\n"
 5498|   133k|                  "In order to be scannable, a range needs to satisfy "
 5499|   133k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   133k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   133k|                  "\n"
 5502|   133k|                  "Unsupported range type given as input to a scanning "
 5503|   133k|                  "function.\n"
 5504|   133k|                  "A range needs to model forward_range and have a valid "
 5505|   133k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   133k|                  "Examples of scannable ranges are std::string, "
 5507|   133k|                  "std::string_view, "
 5508|   133k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   133k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   133k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   133k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   133k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   133k|    else {
 5451|   133k|        return make_forward_scan_buffer(r);
 5452|   133k|    }
 5453|   133k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5268|   133k|{
 5269|   133k|    return basic_scan_forward_buffer_impl(range);
 5270|   133k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   133k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   133k|          m_cursor(ranges::begin(*m_range))
 4830|   133k|    {
 4831|   133k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4800|   133k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   133k|    {
 4802|   133k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4491|   133k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   133k|    {
 4493|   133k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4396|   133k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   254k|    {
 2901|   254k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   254k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   254k|    {
 2882|   254k|        return decay_copy(t.begin());
 2883|   254k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3512|   376k|    {
 3513|   376k|        return m_iterator;
 3514|   376k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4834|  1.50M|    {
 4835|  1.50M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 18.0k, False: 1.49M]
  ------------------
 4836|  18.0k|            return false;
 4837|  18.0k|        }
 4838|  1.49M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  1.49M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  1.49M|        }
 4841|  1.49M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 1.36M, False: 126k]
  ------------------
 4842|  1.36M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  1.36M|                                          this->m_current_view.begin(),
 4844|  1.36M|                                          this->m_current_view.end());
 4845|  1.36M|        }
 4846|  1.49M|        m_latest = *m_cursor;
 4847|  1.49M|        ++m_cursor;
 4848|  1.49M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  1.49M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  1.49M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  1.49M|        }
 4852|  1.49M|        return true;
 4853|  1.50M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  4.49M|    {
 2958|  4.49M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  4.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  4.49M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  4.49M|    {
 2940|  4.49M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  4.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  4.49M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3517|  4.61M|    {
 3518|  4.61M|        return m_sentinel;
 3519|  4.61M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4401|   133k|    {
 4402|   133k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   133k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   133k|        return true;
 4404|   133k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  11.7k|        : base(unexpect, std::move(e.error())),
 1648|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.7k|    {
 1650|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|  11.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.7k|          m_has_value(false)
  484|  11.7k|    {
  485|  11.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   133k|    {
 1348|   133k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|   121k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   121k|                      ranges::iterator_t<SourceRange>>) {
 6882|   121k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   121k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   121k|    {
 2901|   121k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   121k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   121k|    {
 2882|   121k|        return decay_copy(t.begin());
 2883|   121k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6866|   121k|{
 6867|   121k|    return ranges::end(source);
 6868|   121k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   121k|    {
 2958|   121k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   121k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   121k|    {
 2940|   121k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   121k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|   121k|        : base(std::in_place, std::forward<U>(val)),
 1602|   121k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   121k|    {
 1604|   121k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|   121k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   121k|    {
  475|   121k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8962|   108k|    {
 8963|   108k|        return m_str;
 8964|   108k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|   254k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   254k|    static_cast<    \
  |  | 1084|   254k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   254k|    static_cast<    \
  |  | 1084|   254k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   254k|    {
 3498|   254k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   108k|        : m_str(r.str)
 8958|   108k|    {
 8959|   108k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   133k|    {
 1772|   133k|        return has_value();
 1773|   133k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1846|   376k|    {
 1847|   376k|        return &value();
 1848|   376k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1800|   376k|    {
 1801|   376k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   376k|        return this->get_value();
 1803|   376k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6638|   121k|    {
 6639|   121k|        return ranges::begin(m_range);
 6640|   121k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|   145k|    {
  676|   145k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 121k, False: 23.4k]
  ------------------
  677|   121k|            destroy_value();
  678|   121k|        }
  679|  23.4k|        else {
  680|  23.4k|            destroy_unexpected();
  681|  23.4k|        }
  682|   145k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
10073|  54.1k|{
10074|  54.1k|    auto result = make_scan_result<Source, Args...>();
10075|  54.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  54.1k|                                   make_scan_args(result->values())));
10077|  54.1k|    return result;
10078|  54.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9784|  54.1k|{
 9785|  54.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  54.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|  54.1k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|  54.1k|{
 9720|  54.1k|#if !SCN_DISABLE_LOCALE
 9721|  54.1k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  54.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  54.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  54.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  54.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.41k, False: 48.7k]
  |  |  ------------------
  ------------------
 9728|  5.41k|        return unexpected(result.error());
 9729|  5.41k|    }
 9730|  48.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  54.1k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
10114|  24.9k|{
10115|  24.9k|    auto result = make_scan_result<Source, T>();
10116|  24.9k|    fill_scan_result(
10117|  24.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  24.9k|                            detail::make_arg<scan_context>(result->value())));
10119|  24.9k|    return result;
10120|  24.9k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9797|  24.9k|{
 9798|  24.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  24.9k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  24.9k|{
 9744|  24.9k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  24.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  24.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 903, False: 24.0k]
  |  |  ------------------
  ------------------
 9748|    903|        return unexpected(result.error());
 9749|    903|    }
 9750|  24.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  24.9k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  48.7k|    {
 2901|  48.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  48.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  48.7k|    {
 2882|  48.7k|        return decay_copy(t.begin());
 2883|  48.7k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2125|  11.2M|{
 2126|  11.2M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  11.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  2.90M|    {
 2958|  2.90M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  2.90M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  2.90M|    {
 2940|  2.90M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  2.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.90M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9960|   726k|{
 9961|   726k|    return scan_result_type<Source, Args...>();
 9962|   726k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   726k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|   726k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|   726k|    {
  646|   726k|        construct();
  647|   726k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|   726k|    {
  727|   726k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|   726k|        m_has_value = true;
  729|   726k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  428|   726k|{
  429|   726k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   726k|        T(std::forward<Args>(args)...);
  431|   726k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6775|   726k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6618|  1.45M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3491|  1.45M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6549|  1.45M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  3.58M|    {
  751|  3.58M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  3.58M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  3.58M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|   726k|{
 9946|   726k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 23.4k, False: 703k]
  |  |  ------------------
  ------------------
 9947|  23.4k|        out = unexpected(in.error());
 9948|  23.4k|    }
 9949|   703k|    else {
 9950|   703k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   703k|    static_cast<    \
  |  | 1084|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   703k|    }
 9952|   726k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1771|  1.45M|    {
 1772|  1.45M|        return has_value();
 1773|  1.45M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  2.90M|    {
  523|  2.90M|        return m_has_value;
  524|  2.90M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1777|  46.9k|    {
 1778|  46.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  46.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  46.9k|        return this->get_unexpected().error();
 1780|  46.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  46.9k|    {
  506|  46.9k|        return m_unexpected;
  507|  46.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  23.4k|        : base(unexpect, std::move(e.error())),
 1648|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.4k|    {
 1650|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  23.4k|        : m_has_value(false)
  670|  23.4k|    {
  671|  23.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  733|  23.4k|    {
  734|  23.4k|        scn::detail::construct_at(unexpected_ptr(),
  735|  23.4k|                                  std::forward<Args>(args)...);
  736|  23.4k|        m_has_value = false;
  737|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|   117k|    {
  763|   117k|        return reinterpret_cast<unexpected<E>*>(
  764|   117k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|   117k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|   117k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  23.4k|    {
 1348|  23.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  23.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  934|  23.4k|    {
  935|  23.4k|        assign_common(std::move(other));
  936|  23.4k|        return *this;
  937|  23.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  23.4k|    {
  982|  23.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 23.4k, False: 0]
  ------------------
  983|  23.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 23.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  23.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  23.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  3.65M|    {
  720|  3.65M|        return m_has_value;
  721|  3.65M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  2.13M|    {
  686|  2.13M|        return *value_ptr();
  687|  2.13M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  23.4k|    {
 1078|  23.4k|        this->destroy_value();
 1079|  23.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|   726k|    {
  741|   726k|        scn::detail::destroy_at(value_ptr());
  742|   726k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  434|   726k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   726k|    else {
  441|   726k|        p->~T();
  442|   726k|    }
  443|   726k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6782|   726k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  23.4k|    {
  734|  23.4k|        scn::detail::construct_at(unexpected_ptr(),
  735|  23.4k|                                  std::forward<Args>(args)...);
  736|  23.4k|        m_has_value = false;
  737|  23.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  23.4k|    {
  711|  23.4k|        return std::move(*unexpected_ptr());
  712|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  46.9k|    {
  745|  46.9k|        scn::detail::destroy_at(unexpected_ptr());
  746|  46.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6649|  1.40M|    {
 6650|  1.40M|        m_range = std::forward<Other>(r);
 6651|  1.40M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|  1.40M|    {
 1827|  1.40M|        return value();
 1828|  1.40M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|  1.40M|    {
 1801|  1.40M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.40M|        return this->get_value();
 1803|  1.40M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.40M|    {
  489|  1.40M|        return m_value;
  490|  1.40M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|   584k|{
 9704|   584k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   584k|    auto result = vscan_impl(buffer, format, args);
 9707|   584k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 21.6k, False: 562k]
  |  |  ------------------
  ------------------
 9708|  21.6k|        return unexpected(result.error());
 9709|  21.6k|    }
 9710|   562k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   584k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5465|  1.45M|{
 5466|  1.45M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|  1.45M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|  1.45M|                  "\n"
 5470|  1.45M|                  "Unsupported range type given as input to a scanning "
 5471|  1.45M|                  "function.\n"
 5472|  1.45M|                  "A range needs to have a character type (value type) "
 5473|  1.45M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|  1.45M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|  1.45M|                  "to be included.\n"
 5476|  1.45M|                  "See the scnlib documentation for more details.");
 5477|  1.45M|    static_assert(
 5478|  1.45M|        !std::is_same_v<T, custom_char_traits>,
 5479|  1.45M|        "\n"
 5480|  1.45M|        "Unsupported range type given as input to a scanning "
 5481|  1.45M|        "function.\n"
 5482|  1.45M|        "String types (std::basic_string, and std::basic_string_view) "
 5483|  1.45M|        "need to use std::char_traits. Strings with custom Traits are "
 5484|  1.45M|        "not supported.");
 5485|  1.45M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|  1.45M|                  "\n"
 5487|  1.45M|                  "Unsupported range type given as input to a scanning "
 5488|  1.45M|                  "function.\n"
 5489|  1.45M|                  "file_marker_found cannot be used as an "
 5490|  1.45M|                  "source range type to scn::scan.\n"
 5491|  1.45M|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|  1.45M|                  "and do not provide an explicit source range, "
 5493|  1.45M|                  "or use scn::scan with a FILE* directly.");
 5494|  1.45M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|  1.45M|                  "\n"
 5496|  1.45M|                  "Unsupported range type given as input to a scanning "
 5497|  1.45M|                  "function.\n"
 5498|  1.45M|                  "In order to be scannable, a range needs to satisfy "
 5499|  1.45M|                  "`forward_range`. `input_range` is not sufficient.");
 5500|  1.45M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|  1.45M|                  "\n"
 5502|  1.45M|                  "Unsupported range type given as input to a scanning "
 5503|  1.45M|                  "function.\n"
 5504|  1.45M|                  "A range needs to model forward_range and have a valid "
 5505|  1.45M|                  "character type (char or wchar_t) to be scannable.\n"
 5506|  1.45M|                  "Examples of scannable ranges are std::string, "
 5507|  1.45M|                  "std::string_view, "
 5508|  1.45M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|  1.45M|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|  1.45M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|  1.45M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|  1.45M|{
 5404|  1.45M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|  1.45M|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|  1.45M|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|  1.45M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  1.45M|    {
 3032|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  1.45M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  1.45M|    {
 3013|  1.45M|        return t.data();
 3014|  1.45M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3414|  1.45M|    {
 3415|  1.45M|        return detail::to_address(ranges::begin(derived()));
 3416|  1.45M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  5.49M|{
  341|  5.49M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  5.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  5.49M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  318|   189M|{
  319|   189M|    return p;
  320|   189M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  2.85M|    {
 2901|  2.85M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  2.85M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  2.85M|    {
 2882|  2.85M|        return decay_copy(t.begin());
 2883|  2.85M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3512|   156M|    {
 3513|   156M|        return m_iterator;
 3514|   156M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3370|  1.45M|    {
 3371|  1.45M|        return static_cast<const D&>(*this);
 3372|  1.45M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|  1.45M|    {
 3107|  1.45M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  1.45M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|  1.45M|    {
 3073|  1.45M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  1.45M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|  3.47M|    {
 3530|  3.47M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|  3.47M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  46.9k|        : base(unexpect, std::move(e.error())),
 1648|  46.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  46.9k|    {
 1650|  46.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  46.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  46.9k|          m_has_value(false)
  484|  46.9k|    {
  485|  46.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.45M|    {
 1348|  1.45M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|  1.40M|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  1.40M|                      ranges::iterator_t<SourceRange>>) {
 6882|  1.40M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  1.40M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  4.02M|    {
 2901|  4.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  4.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  4.02M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  4.02M|    {
 2882|  4.02M|        return decay_copy(t.begin());
 2883|  4.02M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6866|  1.40M|{
 6867|  1.40M|    return ranges::end(source);
 6868|  1.40M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.40M|    {
 2958|  1.40M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.40M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.40M|    {
 2940|  1.40M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.40M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3517|   148M|    {
 3518|   148M|        return m_sentinel;
 3519|   148M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|  1.40M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.40M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.40M|    {
 1604|  1.40M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|  1.40M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.40M|    {
  475|  1.40M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8962|   584k|    {
 8963|   584k|        return m_str;
 8964|   584k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  1.16M|{
 6275|  1.16M|    detail::check_scan_arg_types<Args...>();
 6276|  1.16M|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  1.16M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5985|  1.45M|{
 5986|  1.45M|    constexpr bool default_constructible_constraint =
 5987|  1.45M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  1.45M|    static_assert(default_constructible_constraint,
 5989|  1.45M|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  1.45M|    constexpr bool destructible_constraint =
 5992|  1.45M|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  1.45M|    static_assert(destructible_constraint,
 5994|  1.45M|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  1.45M|    constexpr bool non_reference_constraint =
 5997|  1.45M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  1.45M|    static_assert(non_reference_constraint,
 5999|  1.45M|                  "Scan argument types must not be references");
 6000|       |
 6001|  1.45M|    constexpr bool movable_constraint =
 6002|  1.45M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  1.45M|    static_assert(movable_constraint,
 6004|  1.45M|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  1.45M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  1.45M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  1.45M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6250|  1.16M|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  1.16M|    {
 6252|  1.16M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  1.16M|    {
 6260|  1.16M|        return {detail::make_arg<
 6261|  1.16M|            kind, Context,
 6262|  1.16M|            mapped_type_constant<remove_cvref_t<A>,
 6263|  1.16M|                                 typename Context::char_type>::value>(args)...};
 6264|  1.16M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 6035|  1.16M|{
 6036|  1.16M|    return make_value<Context>(value).ref_value;
 6037|  1.16M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5970|  1.45M|{
 5971|  1.45M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  1.45M|                                  needs_context_tag>) {
 5975|  1.45M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  1.45M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5772|  1.45M|    {                                                                        \
 5773|  1.45M|        return val;                                                          \
 5774|  1.45M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5939|  1.45M|{
 5940|  1.45M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  1.45M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  1.45M|    constexpr bool scannable_char =
 5944|  1.45M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  1.45M|    static_assert(scannable_char,
 5946|  1.45M|                  "Cannot scan an argument of an unsupported character "
 5947|  1.45M|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  1.45M|    constexpr bool scannable_const =
 5950|  1.45M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  1.45M|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  1.45M|    constexpr bool scannable_disabled =
 5954|  1.45M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  1.45M|    static_assert(scannable_disabled,
 5956|  1.45M|                  "Cannot scan an argument that has been disabled by "
 5957|  1.45M|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  1.45M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  1.45M|    static_assert(
 5961|  1.45M|        scannable,
 5962|  1.45M|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  1.45M|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  1.45M|    return arg_value{arg};
 5966|  1.45M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5715|  1.45M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  1.45M|    {
 5717|  1.45M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6558|  1.16M|    {
 6559|  1.16M|        return m_values;
 6560|  1.16M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  1.16M|        : basic_scan_args(store.desc, store.args.data())
 6301|  1.16M|    {
 6302|  1.16M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6352|  1.75M|        : m_desc(desc), m_builtin_values(data)
 6353|  1.75M|    {
 6354|  1.75M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  57.8M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  57.8M|    static_cast<    \
  |  | 1084|  57.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  57.8M|    static_cast<    \
  |  | 1084|  57.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  57.8M|    {
 3498|  57.8M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8644|  1.75M|{
 8645|  1.75M|    return s;
 8646|  1.75M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8616|  1.75M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   584k|        : m_str(r.str)
 8958|   584k|    {
 8959|   584k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   726k|    {
 1772|   726k|        return has_value();
 1773|   726k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1846|  2.13M|    {
 1847|  2.13M|        return &value();
 1848|  2.13M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  2.13M|    {
 1801|  2.13M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.13M|        return this->get_value();
 1803|  2.13M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6638|  1.40M|    {
 6639|  1.40M|        return ranges::begin(m_range);
 6640|  1.40M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|   750k|    {
  676|   750k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 703k, False: 46.9k]
  ------------------
  677|   703k|            destroy_value();
  678|   703k|        }
  679|  46.9k|        else {
  680|  46.9k|            destroy_unexpected();
  681|  46.9k|        }
  682|   750k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|   584k|{
 9720|   584k|#if !SCN_DISABLE_LOCALE
 9721|   584k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   584k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   584k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   584k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   584k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 21.6k, False: 562k]
  |  |  ------------------
  ------------------
 9728|  21.6k|        return unexpected(result.error());
 9729|  21.6k|    }
 9730|   562k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   584k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|   284k|{
 9744|   284k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|   284k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|   284k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.61k, False: 281k]
  |  |  ------------------
  ------------------
 9748|  3.61k|        return unexpected(result.error());
 9749|  3.61k|    }
 9750|   281k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|   284k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 6020|   284k|{
 6021|   284k|    check_scan_arg_types<T>();
 6022|       |
 6023|   284k|    basic_scan_arg<Context> arg;
 6024|   284k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|   284k|    arg.m_value = make_value<Context>(value);
 6026|   284k|    return arg;
 6027|   284k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6118|  2.17M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|   284k|    {
 6581|   284k|        return std::get<0>(m_values);
 6582|   284k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9960|   726k|{
 9961|   726k|    return scan_result_type<Source, Args...>();
 9962|   726k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   726k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  459|   726k|        : m_value(T{}), m_has_value(true)
  460|   726k|    {
  461|   726k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6775|   726k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6549|   726k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9945|   726k|{
 9946|   726k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 23.4k, False: 703k]
  |  |  ------------------
  ------------------
 9947|  23.4k|        out = unexpected(in.error());
 9948|  23.4k|    }
 9949|   703k|    else {
 9950|   703k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   703k|    static_cast<    \
  |  | 1084|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   703k|    }
 9952|   726k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1647|  23.4k|        : base(unexpect, std::move(e.error())),
 1648|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.4k|    {
 1650|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  482|  23.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  23.4k|          m_has_value(false)
  484|  23.4k|    {
  485|  23.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  23.4k|    {
 1348|  23.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1588|  23.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  934|  23.4k|    {
  935|  23.4k|        assign_common(std::move(other));
  936|  23.4k|        return *this;
  937|  23.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  981|  23.4k|    {
  982|  23.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 23.4k, False: 0]
  ------------------
  983|  23.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 23.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  23.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  23.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  2.90M|    {
  523|  2.90M|        return m_has_value;
  524|  2.90M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  2.13M|    {
  489|  2.13M|        return m_value;
  490|  2.13M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1077|  23.4k|    {
 1078|  23.4k|        this->destroy_value();
 1079|  23.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  23.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  536|  23.4k|    {
  537|  23.4k|        scn::detail::construct_at(&get_unexpected(),
  538|  23.4k|                                  std::forward<Args>(args)...);
  539|  23.4k|        m_has_value = false;
  540|  23.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  23.4k|    {
  506|  23.4k|        return m_unexpected;
  507|  23.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  23.4k|    {
  514|  23.4k|        return std::move(m_unexpected);
  515|  23.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8962|   584k|    {
 8963|   584k|        return m_str;
 8964|   584k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|   584k|{
 6275|   584k|    detail::check_scan_arg_types<Args...>();
 6276|   584k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   584k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5985|   726k|{
 5986|   726k|    constexpr bool default_constructible_constraint =
 5987|   726k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   726k|    static_assert(default_constructible_constraint,
 5989|   726k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   726k|    constexpr bool destructible_constraint =
 5992|   726k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   726k|    static_assert(destructible_constraint,
 5994|   726k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   726k|    constexpr bool non_reference_constraint =
 5997|   726k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   726k|    static_assert(non_reference_constraint,
 5999|   726k|                  "Scan argument types must not be references");
 6000|       |
 6001|   726k|    constexpr bool movable_constraint =
 6002|   726k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   726k|    static_assert(movable_constraint,
 6004|   726k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   726k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   726k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   726k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6250|   584k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   584k|    {
 6252|   584k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|   584k|    {
 6260|   584k|        return {detail::make_arg<
 6261|   584k|            kind, Context,
 6262|   584k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   584k|                                 typename Context::char_type>::value>(args)...};
 6264|   584k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE26ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 6035|   584k|{
 6036|   584k|    return make_value<Context>(value).ref_value;
 6037|   584k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5970|   726k|{
 5971|   726k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   726k|                                  needs_context_tag>) {
 5975|   726k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   726k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   726k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5772|   726k|    {                                                                        \
 5773|   726k|        return val;                                                          \
 5774|   726k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5939|   726k|{
 5940|   726k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   726k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   726k|    constexpr bool scannable_char =
 5944|   726k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   726k|    static_assert(scannable_char,
 5946|   726k|                  "Cannot scan an argument of an unsupported character "
 5947|   726k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   726k|    constexpr bool scannable_const =
 5950|   726k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   726k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   726k|    constexpr bool scannable_disabled =
 5954|   726k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   726k|    static_assert(scannable_disabled,
 5956|   726k|                  "Cannot scan an argument that has been disabled by "
 5957|   726k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   726k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   726k|    static_assert(
 5961|   726k|        scannable,
 5962|   726k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   726k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   726k|    return arg_value{arg};
 5966|   726k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5715|   726k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   726k|    {
 5717|   726k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6558|   584k|    {
 6559|   584k|        return m_values;
 6560|   584k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   584k|        : basic_scan_args(store.desc, store.args.data())
 6301|   584k|    {
 6302|   584k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   584k|        : m_str(r.str)
 8958|   584k|    {
 8959|   584k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   726k|    {
 1772|   726k|        return has_value();
 1773|   726k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1846|  2.13M|    {
 1847|  2.13M|        return &value();
 1848|  2.13M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1800|  2.13M|    {
 1801|  2.13M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.13M|        return this->get_value();
 1803|  2.13M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 6020|   142k|{
 6021|   142k|    check_scan_arg_types<T>();
 6022|       |
 6023|   142k|    basic_scan_arg<Context> arg;
 6024|   142k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|   142k|    arg.m_value = make_value<Context>(value);
 6026|   142k|    return arg;
 6027|   142k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|   142k|    {
 6581|   142k|        return std::get<0>(m_values);
 6582|   142k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  23.4k|    {
 2901|  23.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  23.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  23.4k|    {
 2882|  23.4k|        return decay_copy(t.begin());
 2883|  23.4k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2125|  73.5M|{
 2126|  73.5M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  73.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  73.5M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.45M|    {
 2958|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.45M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.45M|    {
 2940|  1.45M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.45M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9960|   726k|{
 9961|   726k|    return scan_result_type<Source, Args...>();
 9962|   726k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   726k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|   726k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|   726k|    {
  646|   726k|        construct();
  647|   726k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|   726k|    {
  727|   726k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|   726k|        m_has_value = true;
  729|   726k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  428|   726k|{
  429|   726k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   726k|        T(std::forward<Args>(args)...);
  431|   726k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6775|   726k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6618|   726k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3491|   726k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  3.58M|    {
  751|  3.58M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  3.58M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  3.58M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9945|   726k|{
 9946|   726k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 23.4k, False: 703k]
  |  |  ------------------
  ------------------
 9947|  23.4k|        out = unexpected(in.error());
 9948|  23.4k|    }
 9949|   703k|    else {
 9950|   703k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   703k|    static_cast<    \
  |  | 1084|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   703k|    }
 9952|   726k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   726k|    {
 1772|   726k|        return has_value();
 1773|   726k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.45M|    {
  523|  1.45M|        return m_has_value;
  524|  1.45M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1777|  23.4k|    {
 1778|  23.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  23.4k|        return this->get_unexpected().error();
 1780|  23.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  23.4k|    {
  506|  23.4k|        return m_unexpected;
  507|  23.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1647|  23.4k|        : base(unexpect, std::move(e.error())),
 1648|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.4k|    {
 1650|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  669|  23.4k|        : m_has_value(false)
  670|  23.4k|    {
  671|  23.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  733|  23.4k|    {
  734|  23.4k|        scn::detail::construct_at(unexpected_ptr(),
  735|  23.4k|                                  std::forward<Args>(args)...);
  736|  23.4k|        m_has_value = false;
  737|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|   117k|    {
  763|   117k|        return reinterpret_cast<unexpected<E>*>(
  764|   117k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|   117k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|   117k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  23.4k|    {
 1348|  23.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1588|  23.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  934|  23.4k|    {
  935|  23.4k|        assign_common(std::move(other));
  936|  23.4k|        return *this;
  937|  23.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  981|  23.4k|    {
  982|  23.4k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 23.4k, False: 0]
  ------------------
  983|  23.4k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 23.4k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  23.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  23.4k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  3.65M|    {
  720|  3.65M|        return m_has_value;
  721|  3.65M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  2.13M|    {
  686|  2.13M|        return *value_ptr();
  687|  2.13M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1077|  23.4k|    {
 1078|  23.4k|        this->destroy_value();
 1079|  23.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|   726k|    {
  741|   726k|        scn::detail::destroy_at(value_ptr());
  742|   726k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  434|   726k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   726k|    else {
  441|   726k|        p->~T();
  442|   726k|    }
  443|   726k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6782|   726k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  733|  23.4k|    {
  734|  23.4k|        scn::detail::construct_at(unexpected_ptr(),
  735|  23.4k|                                  std::forward<Args>(args)...);
  736|  23.4k|        m_has_value = false;
  737|  23.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  23.4k|    {
  711|  23.4k|        return std::move(*unexpected_ptr());
  712|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  46.9k|    {
  745|  46.9k|        scn::detail::destroy_at(unexpected_ptr());
  746|  46.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6649|   703k|    {
 6650|   703k|        m_range = std::forward<Other>(r);
 6651|   703k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|   703k|    {
 1827|   703k|        return value();
 1828|   703k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|   703k|    {
 1801|   703k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   703k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   703k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   703k|        return this->get_value();
 1803|   703k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   703k|    {
  489|   703k|        return m_value;
  490|   703k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|   292k|{
 9704|   292k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   292k|    auto result = vscan_impl(buffer, format, args);
 9707|   292k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.8k, False: 281k]
  |  |  ------------------
  ------------------
 9708|  10.8k|        return unexpected(result.error());
 9709|  10.8k|    }
 9710|   281k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   292k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5465|   726k|{
 5466|   726k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   726k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   726k|                  "\n"
 5470|   726k|                  "Unsupported range type given as input to a scanning "
 5471|   726k|                  "function.\n"
 5472|   726k|                  "A range needs to have a character type (value type) "
 5473|   726k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   726k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   726k|                  "to be included.\n"
 5476|   726k|                  "See the scnlib documentation for more details.");
 5477|   726k|    static_assert(
 5478|   726k|        !std::is_same_v<T, custom_char_traits>,
 5479|   726k|        "\n"
 5480|   726k|        "Unsupported range type given as input to a scanning "
 5481|   726k|        "function.\n"
 5482|   726k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   726k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   726k|        "not supported.");
 5485|   726k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   726k|                  "\n"
 5487|   726k|                  "Unsupported range type given as input to a scanning "
 5488|   726k|                  "function.\n"
 5489|   726k|                  "file_marker_found cannot be used as an "
 5490|   726k|                  "source range type to scn::scan.\n"
 5491|   726k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   726k|                  "and do not provide an explicit source range, "
 5493|   726k|                  "or use scn::scan with a FILE* directly.");
 5494|   726k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   726k|                  "\n"
 5496|   726k|                  "Unsupported range type given as input to a scanning "
 5497|   726k|                  "function.\n"
 5498|   726k|                  "In order to be scannable, a range needs to satisfy "
 5499|   726k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   726k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   726k|                  "\n"
 5502|   726k|                  "Unsupported range type given as input to a scanning "
 5503|   726k|                  "function.\n"
 5504|   726k|                  "A range needs to model forward_range and have a valid "
 5505|   726k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   726k|                  "Examples of scannable ranges are std::string, "
 5507|   726k|                  "std::string_view, "
 5508|   726k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   726k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   726k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   726k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   726k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   726k|    else {
 5451|   726k|        return make_forward_scan_buffer(r);
 5452|   726k|    }
 5453|   726k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5268|   726k|{
 5269|   726k|    return basic_scan_forward_buffer_impl(range);
 5270|   726k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   726k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   726k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   726k|          m_cursor(ranges::begin(*m_range))
 4830|   726k|    {
 4831|   726k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4800|   726k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   726k|    {
 4802|   726k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4491|   726k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   726k|    {
 4493|   726k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4396|   726k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  1.42M|    {
 2901|  1.42M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  1.42M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  1.42M|    {
 2882|  1.42M|        return decay_copy(t.begin());
 2883|  1.42M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3512|  2.13M|    {
 3513|  2.13M|        return m_iterator;
 3514|  2.13M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4834|  23.0M|    {
 4835|  23.0M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 21.2k, False: 23.0M]
  ------------------
 4836|  21.2k|            return false;
 4837|  21.2k|        }
 4838|  23.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  23.0M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  23.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  23.0M|        }
 4841|  23.0M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 22.3M, False: 713k]
  ------------------
 4842|  22.3M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  22.3M|                                          this->m_current_view.begin(),
 4844|  22.3M|                                          this->m_current_view.end());
 4845|  22.3M|        }
 4846|  23.0M|        m_latest = *m_cursor;
 4847|  23.0M|        ++m_cursor;
 4848|  23.0M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  23.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  23.0M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  23.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  23.0M|        }
 4852|  23.0M|        return true;
 4853|  23.0M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  69.2M|    {
 2958|  69.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  69.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  69.2M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  69.2M|    {
 2940|  69.2M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  69.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  69.2M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3517|  69.9M|    {
 3518|  69.9M|        return m_sentinel;
 3519|  69.9M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4401|   726k|    {
 4402|   726k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   726k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   726k|        return true;
 4404|   726k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  23.4k|        : base(unexpect, std::move(e.error())),
 1648|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.4k|    {
 1650|  23.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|  23.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  23.4k|          m_has_value(false)
  484|  23.4k|    {
  485|  23.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   726k|    {
 1348|   726k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|   703k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   703k|                      ranges::iterator_t<SourceRange>>) {
 6882|   703k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   703k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   703k|    {
 2901|   703k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   703k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   703k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   703k|    {
 2882|   703k|        return decay_copy(t.begin());
 2883|   703k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6866|   703k|{
 6867|   703k|    return ranges::end(source);
 6868|   703k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   703k|    {
 2958|   703k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   703k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   703k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   703k|    {
 2940|   703k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   703k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   703k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|   703k|        : base(std::in_place, std::forward<U>(val)),
 1602|   703k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   703k|    {
 1604|   703k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|   703k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   703k|    {
  475|   703k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8962|   584k|    {
 8963|   584k|        return m_str;
 8964|   584k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|  1.42M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.42M|    static_cast<    \
  |  | 1084|  1.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.42M|    static_cast<    \
  |  | 1084|  1.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  1.42M|    {
 3498|  1.42M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   584k|        : m_str(r.str)
 8958|   584k|    {
 8959|   584k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   726k|    {
 1772|   726k|        return has_value();
 1773|   726k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1846|  2.13M|    {
 1847|  2.13M|        return &value();
 1848|  2.13M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1800|  2.13M|    {
 1801|  2.13M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.13M|        return this->get_value();
 1803|  2.13M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6638|   703k|    {
 6639|   703k|        return ranges::begin(m_range);
 6640|   703k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|   750k|    {
  676|   750k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 703k, False: 46.9k]
  ------------------
  677|   703k|            destroy_value();
  678|   703k|        }
  679|  46.9k|        else {
  680|  46.9k|            destroy_unexpected();
  681|  46.9k|        }
  682|   750k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|   292k|{
 9720|   292k|#if !SCN_DISABLE_LOCALE
 9721|   292k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   292k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   292k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   292k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   292k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.8k, False: 281k]
  |  |  ------------------
  ------------------
 9728|  10.8k|        return unexpected(result.error());
 9729|  10.8k|    }
 9730|   281k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   292k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|   142k|{
 9744|   142k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|   142k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|   142k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.80k, False: 140k]
  |  |  ------------------
  ------------------
 9748|  1.80k|        return unexpected(result.error());
 9749|  1.80k|    }
 9750|   140k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|   142k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3785|   138k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3786|   138k|    {
 3787|   138k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|   138k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   138k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   120k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   120k|    else {
 4037|   120k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   120k|    }
 4039|   120k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  5.02M|    {
 3513|  5.02M|        return m_iterator;
 3514|  5.02M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  75.4M|    {
 3513|  75.4M|        return m_iterator;
 3514|  75.4M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  604|  7.93M|    {
  605|  7.93M|        return m_has_value;
  606|  7.93M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  587|  97.5k|    {
  588|  97.5k|        return m_unexpected;
  589|  97.5k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1777|  97.5k|    {
 1778|  97.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  97.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  97.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  97.5k|        return this->get_unexpected().error();
 1780|  97.5k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7185|  1.04M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7208|  32.5k|    {
 7209|  32.5k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7209:13): [True: 0, False: 32.5k]
  |  Branch (7209:39): [True: 0, False: 0]
  ------------------
 7210|       |            // clang-format off
 7211|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7212|       |            // clang-format on
 7213|      0|        }
 7214|       |
 7215|  32.5k|        m_specs.width = width;
 7216|  32.5k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7229|  1.01M|    {
 7230|  1.01M|        m_specs.type = type;
 7231|  1.01M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7246|  37.1k|    {
 7247|  37.1k|        const auto begin_value = static_cast<unsigned>(begin);
 7248|  37.1k|        const auto end_value = static_cast<unsigned>(end);
 7249|  37.1k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  | 1079|  37.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  37.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7250|       |
 7251|  37.1k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  | 1013|  37.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 37.1k, False: 0]
  |  |  ------------------
  ------------------
 7252|       |            // No need to bit-twiddle with a mask, because with the
 7253|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7254|  37.1k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  | 1033|  37.1k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7255|  1.00M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7255:40): [True: 965k, False: 37.1k]
  ------------------
 7256|   965k|                m_specs.charset_literals[v / 8] |=
 7257|   965k|                    static_cast<unsigned char>(1ul << (v % 8));
 7258|   965k|            }
 7259|  37.1k|        }
 7260|      0|        else {
 7261|      0|            m_specs.charset_has_nonascii = true;
 7262|      0|        }
 7263|  37.1k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7293|  32.5k|    {
 7294|  32.5k|        SCN_UNLIKELY_ATTR
 7295|  32.5k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7296|  32.5k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7304|  1.10M|    {
 7305|  1.10M|        return m_error;
 7306|  1.10M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3971|   125k|{
 3972|   125k|    return unexpected(scan_error{c, m});
 3973|   125k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4363|  70.9M|{
 4364|       |    // Pattern_White_Space property
 4365|  70.9M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4365:13): [True: 13.1M, False: 57.8M]
  |  Branch (4365:27): [True: 2.43M, False: 10.6M]
  ------------------
 4366|  70.9M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4366:12): [True: 2.28M, False: 66.1M]
  ------------------
 4367|  70.9M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4367:12): [True: 429k, False: 65.7M]
  ------------------
 4368|  70.9M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4368:12): [True: 126k, False: 65.6M]
  ------------------
 4369|  70.9M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4369:12): [True: 236k, False: 65.3M]
  ------------------
 4370|  70.9M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4370:12): [True: 170k, False: 65.2M]
  ------------------
 4371|  70.9M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4371:12): [True: 0, False: 65.2M]
  ------------------
 4372|  70.9M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7989|  16.2k|{
 7990|  16.2k|    switch (type) {
 7991|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7991:9): [True: 0, False: 16.2k]
  ------------------
 7992|      0|            return arg_type_category::none;
 7993|       |
 7994|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7994:9): [True: 0, False: 16.2k]
  ------------------
 7995|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7995:9): [True: 0, False: 16.2k]
  ------------------
 7996|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7996:9): [True: 0, False: 16.2k]
  ------------------
 7997|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7997:9): [True: 0, False: 16.2k]
  ------------------
 7998|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7998:9): [True: 0, False: 16.2k]
  ------------------
 7999|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7999:9): [True: 0, False: 16.2k]
  ------------------
 8000|      0|            return arg_type_category::integer;
 8001|       |
 8002|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (8002:9): [True: 0, False: 16.2k]
  ------------------
 8003|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (8003:9): [True: 0, False: 16.2k]
  ------------------
 8004|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (8004:9): [True: 0, False: 16.2k]
  ------------------
 8005|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (8005:9): [True: 0, False: 16.2k]
  ------------------
 8006|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (8006:9): [True: 0, False: 16.2k]
  ------------------
 8007|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (8007:9): [True: 0, False: 16.2k]
  ------------------
 8008|      0|            return arg_type_category::unsigned_integer;
 8009|       |
 8010|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (8010:9): [True: 0, False: 16.2k]
  ------------------
 8011|      0|            return arg_type_category::pointer;
 8012|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (8012:9): [True: 0, False: 16.2k]
  ------------------
 8013|      0|            return arg_type_category::boolean;
 8014|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (8014:9): [True: 0, False: 16.2k]
  ------------------
 8015|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (8015:9): [True: 0, False: 16.2k]
  ------------------
 8016|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (8016:9): [True: 0, False: 16.2k]
  ------------------
 8017|      0|            return arg_type_category::character;
 8018|       |
 8019|      0|        case arg_type::float_type:
  ------------------
  |  Branch (8019:9): [True: 0, False: 16.2k]
  ------------------
 8020|      0|        case arg_type::double_type:
  ------------------
  |  Branch (8020:9): [True: 0, False: 16.2k]
  ------------------
 8021|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (8021:9): [True: 0, False: 16.2k]
  ------------------
 8022|      0|        case arg_type::float16_type:
  ------------------
  |  Branch (8022:9): [True: 0, False: 16.2k]
  ------------------
 8023|      0|        case arg_type::float32_type:
  ------------------
  |  Branch (8023:9): [True: 0, False: 16.2k]
  ------------------
 8024|      0|        case arg_type::float64_type:
  ------------------
  |  Branch (8024:9): [True: 0, False: 16.2k]
  ------------------
 8025|      0|        case arg_type::float128_type:
  ------------------
  |  Branch (8025:9): [True: 0, False: 16.2k]
  ------------------
 8026|      0|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (8026:9): [True: 0, False: 16.2k]
  ------------------
 8027|      0|            return arg_type_category::floating;
 8028|       |
 8029|  3.61k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (8029:9): [True: 3.61k, False: 12.6k]
  ------------------
 8030|  10.8k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (8030:9): [True: 7.22k, False: 9.03k]
  ------------------
 8031|  16.2k|        case arg_type::string_view_type:
  ------------------
  |  Branch (8031:9): [True: 5.41k, False: 10.8k]
  ------------------
 8032|  16.2k|            return arg_type_category::string;
 8033|       |
 8034|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (8034:9): [True: 0, False: 16.2k]
  ------------------
 8035|      0|            return arg_type_category::custom;
 8036|       |
 8037|      0|            SCN_CLANG_PUSH
 8038|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8039|      0|        default:
  ------------------
  |  Branch (8039:9): [True: 0, False: 16.2k]
  ------------------
 8040|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8041|  16.2k|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8042|  16.2k|            SCN_CLANG_POP
 8043|  16.2k|    }
 8044|       |
 8045|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8046|  16.2k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1771|  7.84M|    {
 1772|  7.84M|        return has_value();
 1773|  7.84M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8137|  1.01M|{
 8138|  1.01M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (8138:9): [True: 0, False: 1.01M]
  ------------------
 8139|  1.01M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (8139:9): [True: 981k, False: 34.8k]
  ------------------
 8140|  1.01M|        specs.type == presentation_type::string_set
  ------------------
  |  Branch (8140:9): [True: 18.5k, False: 16.2k]
  ------------------
 8141|  1.01M|#if !SCN_DISABLE_REGEX
 8142|  1.01M|        || specs.type == presentation_type::regex ||
  ------------------
  |  Branch (8142:12): [True: 0, False: 16.2k]
  ------------------
 8143|  1.01M|        specs.type == presentation_type::regex_escaped
  ------------------
  |  Branch (8143:9): [True: 0, False: 16.2k]
  ------------------
 8144|  1.01M|#endif
 8145|  1.01M|    ) {
 8146|  1.00M|        return;
 8147|  1.00M|    }
 8148|  16.2k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (8148:9): [True: 16.2k, False: 0]
  ------------------
 8149|  16.2k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  | 1014|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.2k, False: 0]
  |  |  ------------------
  ------------------
 8150|       |            // clang-format off
 8151|  16.2k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 8152|       |            // clang-format on
 8153|  16.2k|        }
 8154|      0|        return;
 8155|  16.2k|    }
 8156|      0|    SCN_UNLIKELY_ATTR
 8157|      0|    handler.on_error("Invalid type specifier for string");
 8158|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4536|  27.0M|    {
 4537|  27.0M|        assert(m_begin);
 4538|  27.0M|        return m_end == nullptr;
 4539|  27.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4553|   623k|    {
 4554|   623k|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 623k]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|   623k|        return parent()->get_segment_starting_at(position());
 4560|   623k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4547|  15.8M|    {
 4548|  15.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  15.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  15.8M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  15.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4436|   623k|    {
 4437|   623k|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|   623k|        const auto upos = static_cast<std::size_t>(pos);
 4439|   623k|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 352k, False: 270k]
  |  |  ------------------
  ------------------
 4440|   352k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|   352k|        }
 4442|   270k|        const auto start = upos - m_putback_buffer.size();
 4443|   270k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|   270k|        return m_current_view.substr(start);
 4445|   270k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4531|   701k|    {
 4532|   701k|        return m_position;
 4533|   701k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4462|   399k|    {
 4463|   399k|        return m_is_contiguous;
 4464|   399k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4536|   418M|    {
 4537|   418M|        assert(m_begin);
 4538|   418M|        return m_end == nullptr;
 4539|   418M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   706k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   706k|    else {
 4037|   706k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   706k|    }
 4039|   706k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4553|  2.13M|    {
 4554|  2.13M|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 2.13M]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|  2.13M|        return parent()->get_segment_starting_at(position());
 4560|  2.13M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4547|   243M|    {
 4548|   243M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|   243M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   243M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|   243M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|   243M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4436|  2.13M|    {
 4437|  2.13M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|  2.13M|        const auto upos = static_cast<std::size_t>(pos);
 4439|  2.13M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.41M, False: 723k]
  |  |  ------------------
  ------------------
 4440|  1.41M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|  1.41M|        }
 4442|   723k|        const auto start = upos - m_putback_buffer.size();
 4443|   723k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|   723k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   723k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|   723k|        return m_current_view.substr(start);
 4445|   723k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4531|  2.56M|    {
 4532|  2.56M|        return m_position;
 4533|  2.56M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4462|  2.17M|    {
 4463|  2.17M|        return m_is_contiguous;
 4464|  2.17M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3365|   751k|    {
 3366|   751k|        return static_cast<D&>(*this);
 3367|   751k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3406|   751k|    {
 3407|   751k|        return detail::to_address(ranges::begin(derived()));
 3408|   751k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3365|  2.61M|    {
 3366|  2.61M|        return static_cast<D&>(*this);
 3367|  2.61M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3406|  2.61M|    {
 3407|  2.61M|        return detail::to_address(ranges::begin(derived()));
 3408|  2.61M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9159|  54.9k|    {
 9160|  54.9k|        return ranges::subrange{begin(), end()};
 9161|  54.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9151|  54.9k|    {
 9152|  54.9k|        return ranges::default_sentinel;
 9153|  54.9k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|  1.85M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.85M|    static_cast<    \
  |  | 1084|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.85M|    static_cast<    \
  |  | 1084|  1.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  1.85M|    {
 3498|  1.85M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8978|  2.50M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   125k|    {
 2011|   125k|        return detail::transform_error_impl(std::move(*this),
 2012|   125k|                                            std::forward<F>(f));
 2013|   125k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   125k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   125k|    else {
 1504|   125k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   125k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   125k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 123k, False: 2.29k]
  |  |  ------------------
  ------------------
 1506|   125k|                   ? result(*std::forward<Exp>(exp))
 1507|   125k|                   : result(unexpect,
 1508|  2.29k|                            trivial_invoke(std::forward<F>(f),
 1509|  2.29k|                                           std::forward<Exp>(exp).error()));
 1510|   125k|    }
 1511|   125k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   250k|    {
  523|   250k|        return m_has_value;
  524|   250k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   123k|    {
 1837|   123k|        return std::move(value());
 1838|   123k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   123k|    {
 1801|   123k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   123k|        return this->get_value();
 1803|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   123k|    {
  489|   123k|        return m_value;
  490|   123k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|   294k|        : base(std::in_place, std::forward<U>(val)),
 1602|   294k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   294k|    {
 1604|   294k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   294k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   294k|    {
  475|   294k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   309k|    {
 1348|   309k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|  12.6k|{
 1382|  12.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  12.6k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  2.29k|    {
 1788|  2.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  2.29k|        return std::move(this->get_unexpected().error());
 1790|  2.29k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  2.29k|    {
  506|  2.29k|        return m_unexpected;
  507|  2.29k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  397|  25.3k|    {
  398|  25.3k|        return m_unexpected;
  399|  25.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|  2.29k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  2.29k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  2.29k|    {
 1660|  2.29k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.8k|          m_has_value(false)
  484|  14.8k|    {
  485|  14.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9159|   292k|    {
 9160|   292k|        return ranges::subrange{begin(), end()};
 9161|   292k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9151|   292k|    {
 9152|   292k|        return ranges::default_sentinel;
 9153|   292k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|  26.5M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  26.5M|    static_cast<    \
  |  | 1084|  26.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  26.5M|    static_cast<    \
  |  | 1084|  26.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  26.5M|    {
 3498|  26.5M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   712k|    {
 2011|   712k|        return detail::transform_error_impl(std::move(*this),
 2012|   712k|                                            std::forward<F>(f));
 2013|   712k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   712k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   712k|    else {
 1504|   712k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   712k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   712k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 709k, False: 2.31k]
  |  |  ------------------
  ------------------
 1506|   712k|                   ? result(*std::forward<Exp>(exp))
 1507|   712k|                   : result(unexpect,
 1508|  2.31k|                            trivial_invoke(std::forward<F>(f),
 1509|  2.31k|                                           std::forward<Exp>(exp).error()));
 1510|   712k|    }
 1511|   712k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  1.42M|    {
  523|  1.42M|        return m_has_value;
  524|  1.42M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   709k|    {
 1837|   709k|        return std::move(value());
 1838|   709k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   709k|    {
 1801|   709k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   709k|        return this->get_value();
 1803|   709k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   709k|    {
  489|   709k|        return m_value;
  490|   709k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|  1.69M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.69M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.69M|    {
 1604|  1.69M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  1.69M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.69M|    {
  475|  1.69M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.72M|    {
 1348|  1.72M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  2.31k|    {
 1788|  2.31k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  2.31k|        return std::move(this->get_unexpected().error());
 1790|  2.31k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  2.31k|    {
  506|  2.31k|        return m_unexpected;
  507|  2.31k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|  2.31k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  2.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  2.31k|    {
 1660|  2.31k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  28.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.4k|          m_has_value(false)
  484|  28.4k|    {
  485|  28.4k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  380|   125k|        : m_unexpected(std::forward<Err>(e))
  381|   125k|    {
  382|   125k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   125k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|   125k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   105k|        : base(unexpect, std::move(e.error())),
 1648|   105k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   105k|    {
 1650|   105k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  482|   105k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   105k|          m_has_value(false)
  484|   105k|    {
  485|   105k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.52M|    {
 1348|  2.52M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|  25.7k|        : base(unexpect, std::move(e.error())),
 1648|  25.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  25.7k|    {
 1650|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|  29.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  29.1k|          m_has_value(false)
  484|  29.1k|    {
  485|  29.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   475k|    {
 1348|   475k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|   445k|        : base(std::in_place, std::forward<U>(val)),
 1602|   445k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   445k|    {
 1604|   445k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   445k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   445k|    {
  475|   445k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1771|   475k|    {
 1772|   475k|        return has_value();
 1773|   475k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  522|   951k|    {
  523|   951k|        return m_has_value;
  524|   951k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1777|  29.1k|    {
 1778|  29.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  29.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  29.1k|        return this->get_unexpected().error();
 1780|  29.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  29.1k|    {
  506|  29.1k|        return m_unexpected;
  507|  29.1k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|   371k|    {
 1837|   371k|        return std::move(value());
 1838|   371k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|   446k|    {
 1801|   446k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   446k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   446k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   446k|        return this->get_value();
 1803|   446k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  488|   446k|    {
  489|   446k|        return m_value;
  490|   446k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|  52.3k|        : base(unexpect, std::move(e.error())),
 1648|  52.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  52.3k|    {
 1650|  52.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|  56.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  56.9k|          m_has_value(false)
  484|  56.9k|    {
  485|  56.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.44M|    {
 1348|  3.44M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|  3.38M|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.38M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.38M|    {
 1604|  3.38M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  3.38M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.38M|    {
  475|  3.38M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1771|  3.44M|    {
 1772|  3.44M|        return has_value();
 1773|  3.44M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  522|  6.89M|    {
  523|  6.89M|        return m_has_value;
  524|  6.89M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1777|  56.9k|    {
 1778|  56.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  56.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  56.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  56.9k|        return this->get_unexpected().error();
 1780|  56.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  56.9k|    {
  506|  56.9k|        return m_unexpected;
  507|  56.9k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|  2.82M|    {
 1837|  2.82M|        return std::move(value());
 1838|  2.82M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|  3.38M|    {
 1801|  3.38M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.38M|        return this->get_value();
 1803|  3.38M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  488|  3.38M|    {
  489|  3.38M|        return m_value;
  490|  3.38M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|   191k|    {
 2011|   191k|        return detail::transform_error_impl(std::move(*this),
 2012|   191k|                                            std::forward<F>(f));
 2013|   191k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|   191k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   191k|    else {
 1504|   191k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   191k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   191k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 187k, False: 3.44k]
  |  |  ------------------
  ------------------
 1506|   191k|                   ? result(*std::forward<Exp>(exp))
 1507|   191k|                   : result(unexpect,
 1508|  3.44k|                            trivial_invoke(std::forward<F>(f),
 1509|  3.44k|                                           std::forward<Exp>(exp).error()));
 1510|   191k|    }
 1511|   191k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   382k|    {
  523|   382k|        return m_has_value;
  524|   382k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|   187k|    {
 1837|   187k|        return std::move(value());
 1838|   187k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|   187k|    {
 1801|   187k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   187k|        return this->get_value();
 1803|   187k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   187k|    {
  489|   187k|        return m_value;
  490|   187k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1787|  3.44k|    {
 1788|  3.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  3.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  3.44k|        return std::move(this->get_unexpected().error());
 1790|  3.44k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  3.44k|    {
  506|  3.44k|        return m_unexpected;
  507|  3.44k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|  3.44k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  3.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  3.44k|    {
 1660|  3.44k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9143|   162k|    {
 9144|   162k|        return m_current;
 9145|   162k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 9036|   139k|    {
 9037|   139k|        return m_locale;
 9038|   139k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 9042|   150k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   150k|    static_cast<    \
  |  | 1084|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   150k|    static_cast<    \
  |  | 1084|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   150k|    {
 9044|   150k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  12.5k|        : base(unexpect, std::move(e.error())),
 1648|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  12.5k|    {
 1650|  12.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9143|   872k|    {
 9144|   872k|        return m_current;
 9145|   872k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 9036|   876k|    {
 9037|   876k|        return m_locale;
 9038|   876k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 9042|   898k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   898k|    static_cast<    \
  |  | 1084|   898k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   898k|    static_cast<    \
  |  | 1084|   898k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   898k|    {
 9044|   898k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  26.1k|        : base(unexpect, std::move(e.error())),
 1648|  26.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  26.1k|    {
 1650|  26.1k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   130k|        : base(unexpect, std::move(e.error())),
 1648|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   130k|    {
 1650|   130k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  581|   130k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  582|   130k|          m_has_value(false)
  583|   130k|    {
  584|   130k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   130k|    {
 1348|   130k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1583|  6.77M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  561|  6.77M|        : m_deferred_init(), m_has_value(true)
  562|  6.77M|    {
  563|  6.77M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|  1.42M|    {
 4623|  1.42M|        return x.is_at_end();
 4624|  1.42M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4666|  2.92M|    {
 4667|  2.92M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 2.92M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  2.92M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 2.92M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  2.92M|        return !read_at_position();
 4674|  2.92M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4646|  8.02M|    {
 4647|  8.02M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  8.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  8.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  8.02M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 8.02M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  8.02M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  8.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 6.51M, False: 1.50M]
  |  |  ------------------
  ------------------
 4654|  6.51M|            return true;
 4655|  6.51M|        }
 4656|       |
 4657|  3.00M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 1.50M, False: 1.49M]
  ------------------
 4658|  1.50M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 18.0k, False: 1.49M]
  ------------------
 4659|  18.0k|                return false;
 4660|  18.0k|            }
 4661|  1.50M|        }
 4662|  1.49M|        return true;
 4663|  1.50M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4581|  2.64M|    {
 4582|  2.64M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  2.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  2.64M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 2.64M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  2.64M|        auto res = read_at_position();
 4591|  2.64M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  2.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  2.64M|        return parent()->get_character_at(m_position);
 4593|  2.64M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4448|  2.64M|    {
 4449|  2.64M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  2.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  2.64M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  2.64M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.44M, False: 1.20M]
  |  |  ------------------
  ------------------
 4452|  1.44M|            return m_putback_buffer[upos];
 4453|  1.44M|        }
 4454|  1.20M|        const auto start = upos - m_putback_buffer.size();
 4455|  1.20M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.20M|        return m_current_view[start];
 4457|  1.20M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|   123k|        : base(std::in_place, std::forward<U>(val)),
 1602|   123k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   123k|    {
 1604|   123k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   123k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   123k|    {
  475|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   125k|    {
 1348|   125k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  2.29k|        : base(unexpect, std::move(e.error())),
 1648|  2.29k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.29k|    {
 1650|  2.29k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  2.29k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.29k|          m_has_value(false)
  484|  2.29k|    {
  485|  2.29k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|  12.6k|        : m_unexpected(std::forward<Args>(args)...)
  392|  12.6k|    {
  393|  12.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  12.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4567|  2.45M|    {
 4568|  2.45M|        ++m_position;
 4569|  2.45M|        (void)read_at_position();
 4570|  2.45M|        return *this;
 4571|  2.45M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4616|  1.07M|    {
 4617|  1.07M|        return !(lhs == rhs);
 4618|  1.07M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4611|  1.08M|    {
 4612|  1.08M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 1.08M, False: 0]
  |  Branch (4612:46): [True: 188k, False: 893k]
  ------------------
 4613|  1.08M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  380|  12.6k|        : m_unexpected(std::forward<Err>(e))
  381|  12.6k|    {
  382|  12.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  12.6k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|    990|        : base(unexpect, std::move(e.error())),
 1648|    990|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    990|    {
 1650|    990|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|    990|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    990|          m_has_value(false)
  484|    990|    {
  485|    990|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   102k|    {
 1348|   102k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   101k|        : base(std::in_place, std::forward<U>(val)),
 1602|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   101k|    {
 1604|   101k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|   101k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   101k|    {
  475|   101k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|   102k|    {
 1772|   102k|        return has_value();
 1773|   102k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|   204k|    {
  523|   204k|        return m_has_value;
  524|   204k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|    990|    {
 1778|    990|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    990|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    990|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    990|        return this->get_unexpected().error();
 1780|    990|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|    990|    {
  506|    990|        return m_unexpected;
  507|    990|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   101k|    {
 1837|   101k|        return std::move(value());
 1838|   101k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   101k|    {
 1801|   101k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   101k|        return this->get_value();
 1803|   101k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|   101k|    {
  489|   101k|        return m_value;
  490|   101k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  4.47M|    {
 3518|  4.47M|        return m_sentinel;
 3519|  4.47M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|   309k|    {
 1772|   309k|        return has_value();
 1773|   309k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|   619k|    {
  523|   619k|        return m_has_value;
  524|   619k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|  14.8k|    {
 1778|  14.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  14.8k|        return this->get_unexpected().error();
 1780|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.8k|    {
  506|  14.8k|        return m_unexpected;
  507|  14.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   244k|    {
 1837|   244k|        return std::move(value());
 1838|   244k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   294k|    {
 1801|   294k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   294k|        return this->get_value();
 1803|   294k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|   294k|    {
  489|   294k|        return m_value;
  490|   294k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3512|   129k|    {
 3513|   129k|        return m_iterator;
 3514|   129k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3517|   129k|    {
 3518|   129k|        return m_sentinel;
 3519|   129k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|   123k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   123k|    static_cast<    \
  |  | 1084|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   123k|    static_cast<    \
  |  | 1084|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   123k|    {
 3498|   123k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  1.49M|    {
 4634|  1.49M|        return !x.is_at_end();
 4635|  1.49M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  3.44k|        : base(unexpect, std::move(e.error())),
 1648|  3.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.44k|    {
 1650|  3.44k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  3.44k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  3.44k|          m_has_value(false)
  484|  3.44k|    {
  485|  3.44k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   191k|    {
 1348|   191k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|   187k|        : base(std::in_place, std::forward<U>(val)),
 1602|   187k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   187k|    {
 1604|   187k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   187k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   187k|    {
  475|   187k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  1.37k|        : base(unexpect, std::move(e.error())),
 1648|  1.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.37k|    {
 1650|  1.37k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  1.37k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.37k|          m_has_value(false)
  484|  1.37k|    {
  485|  1.37k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   154k|    {
 1348|   154k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   153k|        : base(std::in_place, std::forward<U>(val)),
 1602|   153k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   153k|    {
 1604|   153k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|   153k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   153k|    {
  475|   153k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1771|   154k|    {
 1772|   154k|        return has_value();
 1773|   154k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  522|   309k|    {
  523|   309k|        return m_has_value;
  524|   309k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1777|  1.37k|    {
 1778|  1.37k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.37k|        return this->get_unexpected().error();
 1780|  1.37k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  1.37k|    {
  506|  1.37k|        return m_unexpected;
  507|  1.37k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   153k|    {
 1837|   153k|        return std::move(value());
 1838|   153k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   153k|    {
 1801|   153k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   153k|        return this->get_value();
 1803|   153k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  488|   153k|    {
  489|   153k|        return m_value;
  490|   153k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   751k|    {
 3032|   751k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   751k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   751k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   751k|    {
 3013|   751k|        return t.data();
 3014|   751k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1601|  2.41M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.41M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.41M|    {
 1604|  2.41M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  473|  2.41M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.41M|    {
  475|  2.41M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|  50.1k|    {
 1827|  50.1k|        return value();
 1828|  50.1k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|  75.5k|    {
 1827|  75.5k|        return value();
 1828|  75.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1601|    664|        : base(std::in_place, std::forward<U>(val)),
 1602|    664|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    664|    {
 1604|    664|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  473|    664|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    664|    {
  475|    664|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1601|  1.32k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.32k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.32k|    {
 1604|  1.32k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.32k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.32k|    {
  475|  1.32k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|  24.2M|    {
 4623|  24.2M|        return x.is_at_end();
 4624|  24.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4666|  47.5M|    {
 4667|  47.5M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 47.5M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  47.5M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 47.5M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  47.5M|        return !read_at_position();
 4674|  47.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4646|   126M|    {
 4647|   126M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|   126M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   126M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|   126M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 126M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|   126M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|   126M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 102M, False: 23.0M]
  |  |  ------------------
  ------------------
 4654|   102M|            return true;
 4655|   102M|        }
 4656|       |
 4657|  46.1M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 23.0M, False: 23.0M]
  ------------------
 4658|  23.0M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 21.2k, False: 23.0M]
  ------------------
 4659|  21.2k|                return false;
 4660|  21.2k|            }
 4661|  23.0M|        }
 4662|  23.0M|        return true;
 4663|  23.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4412|   172M|    {
 4413|   172M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|   172M|                                           m_current_view.size());
 4415|   172M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4581|  46.4M|    {
 4582|  46.4M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  46.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  46.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 46.4M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  46.4M|        auto res = read_at_position();
 4591|  46.4M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  46.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  46.4M|        return parent()->get_character_at(m_position);
 4593|  46.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4448|  46.4M|    {
 4449|  46.4M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  46.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  46.4M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  46.4M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  46.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.0M, False: 22.3M]
  |  |  ------------------
  ------------------
 4452|  24.0M|            return m_putback_buffer[upos];
 4453|  24.0M|        }
 4454|  22.3M|        const auto start = upos - m_putback_buffer.size();
 4455|  22.3M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  22.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  22.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  22.3M|        return m_current_view[start];
 4457|  22.3M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|   709k|        : base(std::in_place, std::forward<U>(val)),
 1602|   709k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   709k|    {
 1604|   709k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   709k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   709k|    {
  475|   709k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   712k|    {
 1348|   712k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  2.31k|        : base(unexpect, std::move(e.error())),
 1648|  2.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.31k|    {
 1650|  2.31k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  2.31k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.31k|          m_has_value(false)
  484|  2.31k|    {
  485|  2.31k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4567|  31.9M|    {
 4568|  31.9M|        ++m_position;
 4569|  31.9M|        (void)read_at_position();
 4570|  31.9M|        return *this;
 4571|  31.9M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4616|  9.16M|    {
 4617|  9.16M|        return !(lhs == rhs);
 4618|  9.16M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4611|  9.17M|    {
 4612|  9.17M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 9.17M, False: 0]
  |  Branch (4612:46): [True: 288k, False: 8.88M]
  ------------------
 4613|  9.17M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4123|   130M|{
 4124|       |    if constexpr (sizeof(U) == 1) {
 4125|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|   130M|    else {
 4131|       |        // utf-32
 4132|   130M|        static_assert(sizeof(U) == 4);
 4133|   130M|        SCN_UNUSED(ch);
  ------------------
  |  | 1064|   130M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4134|   130M|        return 1;
 4135|   130M|    }
 4136|   130M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|   130M|{
 4330|       |    if constexpr (sizeof(CharT) == 1) {
 4331|       |        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|   130M|    else {
 4337|   130M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1079|   130M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   130M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4338|   130M|        auto cp = static_cast<char32_t>(input.front());
 4339|   130M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|   130M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 691k, False: 129M]
  |  |  ------------------
  ------------------
 4340|   691k|            return invalid_code_point;
 4341|   691k|        }
 4342|   129M|        return cp;
 4343|   130M|    }
 4344|   130M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|    924|        : base(unexpect, std::move(e.error())),
 1648|    924|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    924|    {
 1650|    924|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|    924|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    924|          m_has_value(false)
  484|    924|    {
  485|    924|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   569k|    {
 1348|   569k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   568k|        : base(std::in_place, std::forward<U>(val)),
 1602|   568k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   568k|    {
 1604|   568k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|   568k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   568k|    {
  475|   568k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|   569k|    {
 1772|   569k|        return has_value();
 1773|   569k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.13M|    {
  523|  1.13M|        return m_has_value;
  524|  1.13M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|    924|    {
 1778|    924|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    924|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    924|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    924|        return this->get_unexpected().error();
 1780|    924|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|    924|    {
  506|    924|        return m_unexpected;
  507|    924|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   568k|    {
 1837|   568k|        return std::move(value());
 1838|   568k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   568k|    {
 1801|   568k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   568k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   568k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   568k|        return this->get_value();
 1803|   568k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|   568k|    {
  489|   568k|        return m_value;
  490|   568k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  73.0M|    {
 3518|  73.0M|        return m_sentinel;
 3519|  73.0M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|  1.72M|    {
 1772|  1.72M|        return has_value();
 1773|  1.72M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|  3.44M|    {
  523|  3.44M|        return m_has_value;
  524|  3.44M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|  28.4k|    {
 1778|  28.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  28.4k|        return this->get_unexpected().error();
 1780|  28.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.4k|    {
  506|  28.4k|        return m_unexpected;
  507|  28.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  1.41M|    {
 1837|  1.41M|        return std::move(value());
 1838|  1.41M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  1.69M|    {
 1801|  1.69M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.69M|        return this->get_value();
 1803|  1.69M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.69M|    {
  489|  1.69M|        return m_value;
  490|  1.69M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|  61.3M|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|  61.3M|    else {
 4022|  61.3M|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|  61.3M|                                       to_address(first), to_address(last)))};
 4024|  61.3M|    }
 4025|  61.3M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   184M|{
  341|   184M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   184M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   184M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3512|   716k|    {
 3513|   716k|        return m_iterator;
 3514|   716k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3517|   716k|    {
 3518|   716k|        return m_sentinel;
 3519|   716k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|   709k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   709k|    static_cast<    \
  |  | 1084|   709k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   709k|    static_cast<    \
  |  | 1084|   709k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   709k|    {
 3498|   709k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  23.3M|    {
 4634|  23.3M|        return !x.is_at_end();
 4635|  23.3M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  4.62k|        : base(unexpect, std::move(e.error())),
 1648|  4.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  4.62k|    {
 1650|  4.62k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  4.62k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  4.62k|          m_has_value(false)
  484|  4.62k|    {
  485|  4.62k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.42M|    {
 1348|  1.42M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  1.41M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.41M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.41M|    {
 1604|  1.41M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.41M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.41M|    {
  475|  1.41M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  2.84M|    {
  523|  2.84M|        return m_has_value;
  524|  2.84M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  1.41M|    {
 1801|  1.41M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.41M|        return this->get_value();
 1803|  1.41M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  1.41M|    {
  489|  1.41M|        return m_value;
  490|  1.41M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  1.84k|        : base(unexpect, std::move(e.error())),
 1648|  1.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.84k|    {
 1650|  1.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  1.84k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.84k|          m_has_value(false)
  484|  1.84k|    {
  485|  1.84k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.13M|    {
 1348|  1.13M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|  1.13M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.13M|    {
 1604|  1.13M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|  1.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.13M|    {
  475|  1.13M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  1.42M|    {
 2011|  1.42M|        return detail::transform_error_impl(std::move(*this),
 2012|  1.42M|                                            std::forward<F>(f));
 2013|  1.42M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  1.42M|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.42M|    else {
 1504|  1.42M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.42M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.42M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.41M, False: 4.62k]
  |  |  ------------------
  ------------------
 1506|  1.42M|                   ? result(*std::forward<Exp>(exp))
 1507|  1.42M|                   : result(unexpect,
 1508|  4.62k|                            trivial_invoke(std::forward<F>(f),
 1509|  4.62k|                                           std::forward<Exp>(exp).error()));
 1510|  1.42M|    }
 1511|  1.42M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  1.41M|    {
 1837|  1.41M|        return std::move(value());
 1838|  1.41M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1787|  4.62k|    {
 1788|  4.62k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  4.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  4.62k|        return std::move(this->get_unexpected().error());
 1790|  4.62k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  4.62k|    {
  506|  4.62k|        return m_unexpected;
  507|  4.62k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|  4.62k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  4.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  4.62k|    {
 1660|  4.62k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1771|  1.13M|    {
 1772|  1.13M|        return has_value();
 1773|  1.13M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  522|  2.27M|    {
  523|  2.27M|        return m_has_value;
  524|  2.27M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1777|  1.84k|    {
 1778|  1.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.84k|        return this->get_unexpected().error();
 1780|  1.84k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  1.84k|    {
  506|  1.84k|        return m_unexpected;
  507|  1.84k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  1.13M|    {
 1837|  1.13M|        return std::move(value());
 1838|  1.13M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  1.13M|    {
 1801|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.13M|        return this->get_value();
 1803|  1.13M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.13M|    {
  489|  1.13M|        return m_value;
  490|  1.13M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  2.61M|    {
 3032|  2.61M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  2.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  2.61M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  2.61M|    {
 3013|  2.61M|        return t.data();
 3014|  2.61M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|   281k|    {
 1827|   281k|        return value();
 1828|   281k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|   562k|    {
 1827|   562k|        return value();
 1828|   562k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1601|    108|        : base(std::in_place, std::forward<U>(val)),
 1602|    108|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    108|    {
 1604|    108|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  473|    108|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    108|    {
  475|    108|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1601|    216|        : base(std::in_place, std::forward<U>(val)),
 1602|    216|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    216|    {
 1604|    216|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  473|    216|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    216|    {
  475|    216|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4412|  11.0M|    {
 4413|  11.0M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  11.0M|                                           m_current_view.size());
 4415|  11.0M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6341|   277k|    {
 6342|   277k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   277k|        return static_cast<std::size_t>(m_desc &
 6347|   277k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   277k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6367|   554k|    {
 6368|   554k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|   554k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6309|   277k|    {
 6310|   277k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   277k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   277k|        const auto t = type(id);
 6322|   277k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   277k|        basic_scan_arg<Context> arg;
 6327|   277k|        arg.m_type = t;
 6328|   277k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 277k, False: 0]
  ------------------
 6329|   277k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|   277k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|   277k|        return arg;
 6335|   277k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6376|   277k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   277k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   277k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   277k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   277k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6371|   277k|    {
 6372|   277k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   277k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6124|   480k|    {
 6125|   480k|        return m_type != detail::arg_type::none_type;
 6126|   480k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|   114k|{
 9606|   114k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   114k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   114k|{
 9463|   114k|#define SCN_VISIT(Type)                                                    \
 9464|   114k|    do {                                                                   \
 9465|   114k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   114k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   114k|        }                                                                  \
 9468|   114k|        else {                                                             \
 9469|   114k|            return vis(monostate_val);                                     \
 9470|   114k|        }                                                                  \
 9471|   114k|    } while (false)
 9472|       |
 9473|   114k|    monostate monostate_val{};
 9474|       |
 9475|   114k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 114k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 114k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 114k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 114k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 114k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 114k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 114k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 114k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 114k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 114k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 114k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 114k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 114k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 114k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 114k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 114k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 114k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 114k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 114k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 114k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 114k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 114k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 114k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 114k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 114k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  57.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 57.3k, False: 57.3k]
  ------------------
 9555|  57.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  57.3k|    do {                                                                   \
  |  | 9465|  57.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  57.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  57.3k|        }                                                                  \
  |  | 9468|  57.3k|        else {                                                             \
  |  | 9469|  57.3k|            return vis(monostate_val);                                     \
  |  | 9470|  57.3k|        }                                                                  \
  |  | 9471|  57.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  57.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 114k]
  ------------------
 9557|  57.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  57.3k|    do {                                                                   \
  |  | 9465|  57.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  57.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  57.3k|        }                                                                  \
  |  | 9468|  57.3k|        else {                                                             \
  |  | 9469|  57.3k|            return vis(monostate_val);                                     \
  |  | 9470|  57.3k|        }                                                                  \
  |  | 9471|  57.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   114k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 57.3k, False: 57.3k]
  ------------------
 9559|   114k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|   114k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|   114k|    do {                                                                   \
  |  | 9465|   114k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   114k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   114k|        }                                                                  \
  |  | 9468|   114k|        else {                                                             \
  |  | 9469|   114k|            return vis(monostate_val);                                     \
  |  | 9470|   114k|        }                                                                  \
  |  | 9471|   114k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|   114k|        }
 9566|       |
 9567|   114k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 114k]
  ------------------
 9568|   114k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   114k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   114k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 114k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 114k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   114k|            SCN_CLANG_POP
 9585|   114k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|   631k|{
 6171|   631k|    return arg.m_type;
 6172|   631k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|   329k|{
 6183|   329k|    return arg.m_value;
 6184|   329k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|  58.5k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|  58.5k|    static_cast<    \
  |  | 1084|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|  58.5k|    {
 9129|  58.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4754|   133k|{
 4755|   133k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 133k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   133k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   133k|                            ranges::default_sentinel};
 4761|   133k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4517|   133k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   133k|    {
 4519|   133k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   133k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   133k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|  74.7k|{
 9606|  74.7k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  74.7k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  74.7k|{
 9463|  74.7k|#define SCN_VISIT(Type)                                                    \
 9464|  74.7k|    do {                                                                   \
 9465|  74.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  74.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  74.7k|        }                                                                  \
 9468|  74.7k|        else {                                                             \
 9469|  74.7k|            return vis(monostate_val);                                     \
 9470|  74.7k|        }                                                                  \
 9471|  74.7k|    } while (false)
 9472|       |
 9473|  74.7k|    monostate monostate_val{};
 9474|       |
 9475|  74.7k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 74.7k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 74.7k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 74.7k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 74.7k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 74.7k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 74.7k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 74.7k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 74.7k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 74.7k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 74.7k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 74.7k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 74.7k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 74.7k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 74.7k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 74.7k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 74.7k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 74.7k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 74.7k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 74.7k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 74.7k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 74.7k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 74.7k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 74.7k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 74.7k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 74.7k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  74.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 74.7k, False: 0]
  ------------------
 9555|  74.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  74.7k|    do {                                                                   \
  |  | 9465|  74.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  74.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  74.7k|        }                                                                  \
  |  | 9468|  74.7k|        else {                                                             \
  |  | 9469|  74.7k|            return vis(monostate_val);                                     \
  |  | 9470|  74.7k|        }                                                                  \
  |  | 9471|  74.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  74.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 74.7k]
  ------------------
 9557|  74.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  74.7k|    do {                                                                   \
  |  | 9465|  74.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  74.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  74.7k|        }                                                                  \
  |  | 9468|  74.7k|        else {                                                             \
  |  | 9469|  74.7k|            return vis(monostate_val);                                     \
  |  | 9470|  74.7k|        }                                                                  \
  |  | 9471|  74.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  74.7k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 74.7k]
  ------------------
 9559|  74.7k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|  74.7k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|  74.7k|    do {                                                                   \
  |  | 9465|  74.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  74.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  74.7k|        }                                                                  \
  |  | 9468|  74.7k|        else {                                                             \
  |  | 9469|  74.7k|            return vis(monostate_val);                                     \
  |  | 9470|  74.7k|        }                                                                  \
  |  | 9471|  74.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|  74.7k|        }
 9566|       |
 9567|  74.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 74.7k]
  ------------------
 9568|  74.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  74.7k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  74.7k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 74.7k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 74.7k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  74.7k|            SCN_CLANG_POP
 9585|  74.7k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6444|  92.2k|        : m_format{format},
 6445|  92.2k|          m_next_arg_id{next_arg_id},
 6446|  92.2k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  92.2k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  92.2k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  92.2k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  92.2k|    {
 6452|  92.2k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|  92.2k|    {
 3107|  92.2k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  92.2k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|  92.2k|    {
 3073|  92.2k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  92.2k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|  92.2k|{
 7971|  92.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|  92.2k|    handler.check_args_exhausted();
 7973|  92.2k|    return handler.get_error();
 7974|  92.2k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|  92.2k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|  92.2k|    auto begin = format.data();
 7939|  92.2k|    auto it = begin;
 7940|  92.2k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   166k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 92.2k, False: 74.1k]
  ------------------
 7943|  92.2k|        const auto ch = *it++;
 7944|  92.2k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 92.2k, False: 0]
  ------------------
 7945|  92.2k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  92.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  92.2k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 18.0k, False: 74.1k]
  ------------------
 7949|  18.0k|                return;
 7950|  18.0k|            }
 7951|  92.2k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|  92.2k|    }
 7962|       |
 7963|  74.1k|    handler.on_literal_text(begin, end);
 7964|  74.1k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7867|  92.2k|{
 7868|  92.2k|    struct id_adapter {
 7869|  92.2k|        constexpr void operator()()
 7870|  92.2k|        {
 7871|  92.2k|            arg_id = handler.on_arg_id();
 7872|  92.2k|        }
 7873|  92.2k|        constexpr void operator()(std::size_t id)
 7874|  92.2k|        {
 7875|  92.2k|            arg_id = handler.on_arg_id(id);
 7876|  92.2k|        }
 7877|       |
 7878|  92.2k|        constexpr void on_error(const char* msg)
 7879|  92.2k|        {
 7880|  92.2k|            SCN_UNLIKELY_ATTR
 7881|  92.2k|            handler.on_error(msg);
 7882|  92.2k|        }
 7883|       |
 7884|  92.2k|        Handler& handler;
 7885|  92.2k|        std::size_t arg_id;
 7886|  92.2k|    };
 7887|       |
 7888|  92.2k|    ++begin;
 7889|  92.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.2k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|  92.2k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 92.2k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|  92.2k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 92.2k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|  92.2k|    else {
 7901|  92.2k|        auto adapter = id_adapter{handler, 0};
 7902|  92.2k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  92.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.2k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|  92.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 92.2k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|  92.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 92.2k, False: 0]
  ------------------
 7913|  92.2k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.2k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|  92.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  92.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.22k, False: 85.0k]
  |  |  |  Branch (1014:45): [True: 0, False: 92.2k]
  |  |  |  Branch (1014:45): [True: 7.22k, False: 85.0k]
  |  |  ------------------
  ------------------
 7919|  7.22k|                handler.on_error("Unknown format specifier");
 7920|  7.22k|                return begin;
 7921|  7.22k|            }
 7922|  92.2k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|  92.2k|    }
 7929|  85.0k|    return begin + 1;
 7930|  92.2k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 9026|   150k|    {
 9027|   150k|        return m_args.get(id);
 9028|   150k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6479|   150k|    {
 6480|   150k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   150k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   150k|        do_check_arg_id(id);
 6488|   150k|        return id;
 6489|   150k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6973|   150k|{
 6974|   150k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   150k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   150k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  92.2k|{
 7367|  92.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  92.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  92.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  92.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 92.2k, False: 0]
  |  Branch (7368:26): [True: 0, False: 92.2k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|  92.2k|    handler();
 7373|  92.2k|    return begin;
 7374|  92.2k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7315|  10.8k|{
 7316|  10.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7317|  10.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1079|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7318|       |
 7319|  10.8k|    unsigned long long value = 0;
 7320|  21.6k|    do {
 7321|  21.6k|        value *= 10;
 7322|  21.6k|        value += static_cast<unsigned long long>(*begin - '0');
 7323|  21.6k|        if (value >
  ------------------
  |  Branch (7323:13): [True: 0, False: 21.6k]
  ------------------
 7324|  21.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7325|      0|            return -1;
 7326|      0|        }
 7327|  21.6k|        ++begin;
 7328|  21.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7328:14): [True: 21.6k, False: 0]
  |  Branch (7328:30): [True: 21.6k, False: 0]
  |  Branch (7328:47): [True: 10.8k, False: 10.8k]
  ------------------
 7329|  10.8k|    return static_cast<int>(value);
 7330|  10.8k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  92.2k|        {
 7871|  92.2k|            arg_id = handler.on_arg_id();
 7872|  92.2k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6474|   139k|    {
 6475|   139k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   139k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6463|   290k|    {
 6464|   290k|        return m_format.data();
 6465|   290k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|  92.2k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|  92.2k|    {
 8055|  92.2k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|  92.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  92.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|  92.2k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7783|  92.2k|{
 7784|  92.2k|    auto do_presentation = [&]() -> const CharT* {
 7785|  92.2k|        if (*begin == CharT{'['}) {
 7786|  92.2k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  92.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|  92.2k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|  92.2k|                return begin;
 7792|  92.2k|            }
 7793|  92.2k|            handler.on_character_set_string(set);
 7794|  92.2k|            return begin;
 7795|  92.2k|        }
 7796|  92.2k|        if (*begin == CharT{'/'}) {
 7797|  92.2k|            return parse_presentation_regex(begin, end, handler);
 7798|  92.2k|        }
 7799|  92.2k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  92.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|  92.2k|            handler.on_error("Invalid type specifier in format string");
 7802|  92.2k|            return begin;
 7803|  92.2k|        }
 7804|  92.2k|        handler.on_type(type);
 7805|  92.2k|        return begin;
 7806|  92.2k|    };
 7807|       |
 7808|  92.2k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 92.2k, False: 0]
  |  Branch (7808:28): [True: 80.0k, False: 12.1k]
  ------------------
 7809|  92.2k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 80.0k, False: 0]
  |  Branch (7809:36): [True: 76.4k, False: 3.61k]
  ------------------
 7810|  76.4k|        return do_presentation();
 7811|  76.4k|    }
 7812|       |
 7813|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  15.7k|    begin = parse_align(begin, end, handler);
 7819|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  15.7k|    begin = parse_width(begin, end, handler);
 7825|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  15.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 15.7k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  15.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 3.61k, False: 12.1k]
  ------------------
 7844|  3.61k|        handler.on_localized();
 7845|  3.61k|        ++begin;
 7846|  3.61k|    }
 7847|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  15.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 15.7k, False: 0]
  |  Branch (7852:25): [True: 12.1k, False: 3.61k]
  ------------------
 7853|  12.1k|        do_presentation();
 7854|  12.1k|    }
 7855|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  15.7k|    return begin;
 7861|  15.7k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7430|   132k|{
 7431|   132k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 127k, False: 5.41k]
  |  Branch (7431:33): [True: 127k, False: 0]
  ------------------
 7432|   132k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 5.41k, False: 0]
  |  Branch (7432:33): [True: 5.41k, False: 0]
  ------------------
 7433|   132k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|  88.6k|    auto do_presentation = [&]() -> const CharT* {
 7785|  88.6k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 4.94k, False: 83.7k]
  ------------------
 7786|  4.94k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  4.94k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.94k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|  4.94k|            handler.on_character_set_string(set);
 7794|  4.94k|            return begin;
 7795|  4.94k|        }
 7796|  83.7k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 83.7k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|  83.7k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  83.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|  83.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.61k, False: 80.0k]
  |  |  ------------------
  ------------------
 7801|  3.61k|            handler.on_error("Invalid type specifier in format string");
 7802|  3.61k|            return begin;
 7803|  3.61k|        }
 7804|  80.0k|        handler.on_type(type);
 7805|  80.0k|        return begin;
 7806|  83.7k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7620|  4.94k|{
 7621|  4.94k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  4.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  4.94k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  4.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  4.94k|    auto start = begin;
 7625|  4.94k|    ++begin;
 7626|       |
 7627|  4.94k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.94k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|  4.94k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 0, False: 4.94k]
  ------------------
 7634|      0|        handler.on_charset_inverted();
 7635|      0|        ++begin;
 7636|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 0, False: 0]
  ------------------
 7643|      0|            handler.on_charset_single(char32_t{']'});
 7644|      0|            ++begin;
 7645|      0|        }
 7646|      0|    }
 7647|  4.94k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 4.94k]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|  14.8k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 14.8k, False: 0]
  ------------------
 7652|  14.8k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|  14.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 4.94k, False: 9.88k]
  ------------------
 7657|  4.94k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  4.94k|        }
 7659|       |
 7660|  9.88k|        parse_presentation_set_literal(begin, end, handler);
 7661|  9.88k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|  4.94k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7584|  9.88k|{
 7585|  9.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  9.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  9.88k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  9.88k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  9.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.88k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|  9.88k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 9.88k, False: 0]
  |  Branch (7592:25): [True: 9.88k, False: 0]
  |  Branch (7592:49): [True: 9.88k, False: 0]
  ------------------
 7593|  9.88k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 9.88k, False: 0]
  ------------------
 7594|  9.88k|        ++begin;
 7595|       |
 7596|  9.88k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  9.88k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  9.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.88k]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|  9.88k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  9.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.88k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|  9.88k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  9.88k|        return;
 7610|  9.88k|    }
 7611|       |
 7612|      0|    handler.on_charset_single(cp_first);
 7613|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7560|  19.7k|{
 7561|  19.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  19.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  19.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 19.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 19.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 19.7k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  19.7k|    const auto cp =
 7570|  19.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  19.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 19.7k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|  19.7k|    begin += len;
 7577|  19.7k|    return cp;
 7578|  19.7k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7272|  7.41k|    {
 7273|  7.41k|        m_specs.charset_string_data = fmt.data();
 7274|  7.41k|        m_specs.charset_string_size = fmt.size();
 7275|  7.41k|        on_type(presentation_type::string_set);
 7276|  7.41k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7378|   137k|{
 7379|   137k|    switch (type) {
 7380|      0|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 0, False: 137k]
  ------------------
 7381|      0|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 0, False: 137k]
  ------------------
 7382|      0|            return presentation_type::int_binary;
 7383|      0|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 0, False: 137k]
  ------------------
 7384|      0|            return presentation_type::int_decimal;
 7385|      0|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 0, False: 137k]
  ------------------
 7386|      0|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 137k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|      0|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 0, False: 137k]
  ------------------
 7390|      0|            return presentation_type::int_octal;
 7391|      0|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 0, False: 137k]
  ------------------
 7392|      0|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 137k]
  ------------------
 7393|      0|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 137k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 137k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|      0|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 0, False: 137k]
  ------------------
 7398|      0|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 137k]
  ------------------
 7399|      0|            return presentation_type::float_hex;
 7400|      0|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 0, False: 137k]
  ------------------
 7401|      0|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 137k]
  ------------------
 7402|      0|            return presentation_type::float_scientific;
 7403|      0|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 0, False: 137k]
  ------------------
 7404|      0|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 137k]
  ------------------
 7405|      0|            return presentation_type::float_fixed;
 7406|      0|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 0, False: 137k]
  ------------------
 7407|      0|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 137k]
  ------------------
 7408|      0|            return presentation_type::float_general;
 7409|   127k|        case 's':
  ------------------
  |  Branch (7409:9): [True: 127k, False: 10.8k]
  ------------------
 7410|   127k|            return presentation_type::string;
 7411|  5.41k|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 5.41k, False: 132k]
  ------------------
 7412|  5.41k|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 137k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 137k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 137k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 137k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|  5.41k|        default:
  ------------------
  |  Branch (7423:9): [True: 5.41k, False: 132k]
  ------------------
 7424|  5.41k|            return presentation_type::none;
 7425|   137k|    }
 7426|   137k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7455|  15.7k|{
 7456|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  15.7k|    auto check_align = [](wchar_t ch) {
 7459|  15.7k|        switch (ch) {
 7460|  15.7k|            case L'<':
 7461|  15.7k|                return align_type::left;
 7462|  15.7k|            case L'>':
 7463|  15.7k|                return align_type::right;
 7464|  15.7k|            case L'^':
 7465|  15.7k|                return align_type::center;
 7466|  15.7k|            default:
 7467|  15.7k|                return align_type::none;
 7468|  15.7k|        }
 7469|  15.7k|    };
 7470|       |
 7471|  15.7k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  15.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 15.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7473|  15.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  15.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  15.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  15.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  15.7k|    const auto begin_before_fill = begin;
 7483|  15.7k|    begin += potential_fill_len;
 7484|       |
 7485|  15.7k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 15.7k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  15.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  15.7k|    const auto begin_after_fill = begin;
 7491|  15.7k|    ++begin;
 7492|       |
 7493|  15.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 15.7k, False: 0]
  ------------------
 7494|  15.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  15.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 4.94k, False: 10.8k]
  ------------------
 7499|  4.94k|            return begin_before_fill;
 7500|  4.94k|        }
 7501|  15.7k|    }
 7502|       |
 7503|  10.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 10.8k, False: 0]
  ------------------
 7504|  10.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 10.8k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  10.8k|        return begin_before_fill;
 7509|  10.8k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  10.8k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7437|  23.6k|{
 7438|  23.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|       |    if constexpr (sizeof(CharT) != 1) {
 7440|       |        return 1;
 7441|       |    }
 7442|  23.6k|    else {
 7443|  23.6k|        const auto lengths =
 7444|  23.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|  23.6k|            "\3\4";
 7446|  23.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|  23.6k|        return len;
 7448|  23.6k|    }
 7449|  23.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|  31.5k|    auto check_align = [](wchar_t ch) {
 7459|  31.5k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 31.5k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 31.5k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 31.5k]
  ------------------
 7465|      0|                return align_type::center;
 7466|  31.5k|            default:
  ------------------
  |  Branch (7466:13): [True: 31.5k, False: 0]
  ------------------
 7467|  31.5k|                return align_type::none;
 7468|  31.5k|        }
 7469|  31.5k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7520|  15.7k|{
 7521|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  15.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 15.7k, False: 0]
  |  Branch (7523:33): [True: 7.22k, False: 8.55k]
  ------------------
 7524|  7.22k|        int width = parse_simple_int(begin, end);
 7525|  7.22k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  7.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 7.22k, False: 0]
  |  |  ------------------
  ------------------
 7526|  7.22k|            handler.on_width(width);
 7527|  7.22k|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|  7.22k|    }
 7533|  15.7k|    return begin;
 7534|  15.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 8059|  3.61k|    {
 8060|  3.61k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  3.61k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 3.61k, False: 0]
  ------------------
 8062|  3.61k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 3.61k, False: 0]
  ------------------
 8063|  3.61k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 3.61k, False: 0]
  ------------------
 8064|  3.61k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 3.61k, False: 0]
  ------------------
 8065|  3.61k|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|  3.61k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|  3.61k|        }
 8070|       |
 8071|      0|        Handler::on_localized();
 8072|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|  85.0k|{
 9606|  85.0k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  85.0k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  85.0k|{
 9463|  85.0k|#define SCN_VISIT(Type)                                                    \
 9464|  85.0k|    do {                                                                   \
 9465|  85.0k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  85.0k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  85.0k|        }                                                                  \
 9468|  85.0k|        else {                                                             \
 9469|  85.0k|            return vis(monostate_val);                                     \
 9470|  85.0k|        }                                                                  \
 9471|  85.0k|    } while (false)
 9472|       |
 9473|  85.0k|    monostate monostate_val{};
 9474|       |
 9475|  85.0k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 85.0k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 85.0k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 85.0k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 85.0k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 85.0k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 85.0k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 85.0k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 85.0k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 85.0k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 85.0k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 85.0k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 85.0k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 85.0k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 85.0k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 85.0k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 85.0k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 85.0k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 85.0k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 85.0k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 85.0k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 85.0k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 85.0k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 85.0k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 85.0k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 85.0k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  42.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 42.5k, False: 42.5k]
  ------------------
 9555|  42.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  42.5k|    do {                                                                   \
  |  | 9465|  42.5k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  42.5k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  42.5k|        }                                                                  \
  |  | 9468|  42.5k|        else {                                                             \
  |  | 9469|  42.5k|            return vis(monostate_val);                                     \
  |  | 9470|  42.5k|        }                                                                  \
  |  | 9471|  42.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  42.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 85.0k]
  ------------------
 9557|  42.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  42.5k|    do {                                                                   \
  |  | 9465|  42.5k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  42.5k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  42.5k|        }                                                                  \
  |  | 9468|  42.5k|        else {                                                             \
  |  | 9469|  42.5k|            return vis(monostate_val);                                     \
  |  | 9470|  42.5k|        }                                                                  \
  |  | 9471|  42.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  85.0k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 42.5k, False: 42.5k]
  ------------------
 9559|  85.0k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|  85.0k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|  85.0k|    do {                                                                   \
  |  | 9465|  85.0k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  85.0k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  85.0k|        }                                                                  \
  |  | 9468|  85.0k|        else {                                                             \
  |  | 9469|  85.0k|            return vis(monostate_val);                                     \
  |  | 9470|  85.0k|        }                                                                  \
  |  | 9471|  85.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|  85.0k|        }
 9566|       |
 9567|  85.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 85.0k]
  ------------------
 9568|  85.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  85.0k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  85.0k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 85.0k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 85.0k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  85.0k|            SCN_CLANG_POP
 9585|  85.0k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6444|  58.5k|        : m_format{format},
 6445|  58.5k|          m_next_arg_id{next_arg_id},
 6446|  58.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  58.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  58.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  58.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  58.5k|    {
 6452|  58.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|  58.5k|{
 7971|  58.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|  58.5k|    handler.check_args_exhausted();
 7973|  58.5k|    return handler.get_error();
 7974|  58.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|  58.5k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|  58.5k|    auto begin = format.data();
 7939|  58.5k|    auto it = begin;
 7940|  58.5k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   108k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 58.5k, False: 49.5k]
  ------------------
 7943|  58.5k|        const auto ch = *it++;
 7944|  58.5k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 58.5k, False: 0]
  ------------------
 7945|  58.5k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  58.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  58.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 9.03k, False: 49.5k]
  ------------------
 7949|  9.03k|                return;
 7950|  9.03k|            }
 7951|  58.5k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|  58.5k|    }
 7962|       |
 7963|  49.5k|    handler.on_literal_text(begin, end);
 7964|  49.5k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9165|  49.5k|    {
 9166|  49.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|  49.5k|    static_cast<    \
  |  | 1084|  49.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|  49.5k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7867|  58.5k|{
 7868|  58.5k|    struct id_adapter {
 7869|  58.5k|        constexpr void operator()()
 7870|  58.5k|        {
 7871|  58.5k|            arg_id = handler.on_arg_id();
 7872|  58.5k|        }
 7873|  58.5k|        constexpr void operator()(std::size_t id)
 7874|  58.5k|        {
 7875|  58.5k|            arg_id = handler.on_arg_id(id);
 7876|  58.5k|        }
 7877|       |
 7878|  58.5k|        constexpr void on_error(const char* msg)
 7879|  58.5k|        {
 7880|  58.5k|            SCN_UNLIKELY_ATTR
 7881|  58.5k|            handler.on_error(msg);
 7882|  58.5k|        }
 7883|       |
 7884|  58.5k|        Handler& handler;
 7885|  58.5k|        std::size_t arg_id;
 7886|  58.5k|    };
 7887|       |
 7888|  58.5k|    ++begin;
 7889|  58.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 58.5k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|  58.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 58.5k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|  58.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 58.5k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|  58.5k|    else {
 7901|  58.5k|        auto adapter = id_adapter{handler, 0};
 7902|  58.5k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  58.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 58.5k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|  58.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 58.5k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|  58.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 58.5k, False: 0]
  ------------------
 7913|  58.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 58.5k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|  58.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  58.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.61k, False: 54.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 58.5k]
  |  |  |  Branch (1014:45): [True: 3.61k, False: 54.9k]
  |  |  ------------------
  ------------------
 7919|  3.61k|                handler.on_error("Unknown format specifier");
 7920|  3.61k|                return begin;
 7921|  3.61k|            }
 7922|  58.5k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|  58.5k|    }
 7929|  54.9k|    return begin + 1;
 7930|  58.5k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  58.5k|{
 7367|  58.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  58.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  58.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  58.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 58.5k, False: 0]
  |  Branch (7368:26): [True: 0, False: 58.5k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|  58.5k|    handler();
 7373|  58.5k|    return begin;
 7374|  58.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  58.5k|        {
 7871|  58.5k|            arg_id = handler.on_arg_id();
 7872|  58.5k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|  58.5k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|  58.5k|    {
 8055|  58.5k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|  58.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  58.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|  58.5k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7783|  58.5k|{
 7784|  58.5k|    auto do_presentation = [&]() -> const CharT* {
 7785|  58.5k|        if (*begin == CharT{'['}) {
 7786|  58.5k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  58.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|  58.5k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|  58.5k|                return begin;
 7792|  58.5k|            }
 7793|  58.5k|            handler.on_character_set_string(set);
 7794|  58.5k|            return begin;
 7795|  58.5k|        }
 7796|  58.5k|        if (*begin == CharT{'/'}) {
 7797|  58.5k|            return parse_presentation_regex(begin, end, handler);
 7798|  58.5k|        }
 7799|  58.5k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  58.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|  58.5k|            handler.on_error("Invalid type specifier in format string");
 7802|  58.5k|            return begin;
 7803|  58.5k|        }
 7804|  58.5k|        handler.on_type(type);
 7805|  58.5k|        return begin;
 7806|  58.5k|    };
 7807|       |
 7808|  58.5k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 58.5k, False: 0]
  |  Branch (7808:28): [True: 52.4k, False: 6.08k]
  ------------------
 7809|  58.5k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 52.4k, False: 0]
  |  Branch (7809:36): [True: 50.6k, False: 1.80k]
  ------------------
 7810|  50.6k|        return do_presentation();
 7811|  50.6k|    }
 7812|       |
 7813|  7.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.88k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  7.88k|    begin = parse_align(begin, end, handler);
 7819|  7.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.88k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  7.88k|    begin = parse_width(begin, end, handler);
 7825|  7.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.88k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  7.88k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 7.88k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  7.88k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 1.80k, False: 6.08k]
  ------------------
 7844|  1.80k|        handler.on_localized();
 7845|  1.80k|        ++begin;
 7846|  1.80k|    }
 7847|  7.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.88k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  7.88k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 7.88k, False: 0]
  |  Branch (7852:25): [True: 6.08k, False: 1.80k]
  ------------------
 7853|  6.08k|        do_presentation();
 7854|  6.08k|    }
 7855|  7.88k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.88k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  7.88k|    return begin;
 7861|  7.88k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|  56.7k|    auto do_presentation = [&]() -> const CharT* {
 7785|  56.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 2.47k, False: 54.2k]
  ------------------
 7786|  2.47k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  2.47k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.47k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|  2.47k|            handler.on_character_set_string(set);
 7794|  2.47k|            return begin;
 7795|  2.47k|        }
 7796|  54.2k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 54.2k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|  54.2k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  54.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.80k, False: 52.4k]
  |  |  ------------------
  ------------------
 7801|  1.80k|            handler.on_error("Invalid type specifier in format string");
 7802|  1.80k|            return begin;
 7803|  1.80k|        }
 7804|  52.4k|        handler.on_type(type);
 7805|  52.4k|        return begin;
 7806|  54.2k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7620|  2.47k|{
 7621|  2.47k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  2.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  2.47k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  2.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  2.47k|    auto start = begin;
 7625|  2.47k|    ++begin;
 7626|       |
 7627|  2.47k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.47k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|  2.47k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 0, False: 2.47k]
  ------------------
 7634|      0|        handler.on_charset_inverted();
 7635|      0|        ++begin;
 7636|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 0, False: 0]
  ------------------
 7643|      0|            handler.on_charset_single(char32_t{']'});
 7644|      0|            ++begin;
 7645|      0|        }
 7646|      0|    }
 7647|  2.47k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 2.47k]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|  7.41k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 7.41k, False: 0]
  ------------------
 7652|  7.41k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  7.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.41k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|  7.41k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 2.47k, False: 4.94k]
  ------------------
 7657|  2.47k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  2.47k|        }
 7659|       |
 7660|  4.94k|        parse_presentation_set_literal(begin, end, handler);
 7661|  4.94k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|  2.47k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7584|  4.94k|{
 7585|  4.94k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  4.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  4.94k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  4.94k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.94k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|  4.94k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 4.94k, False: 0]
  |  Branch (7592:25): [True: 4.94k, False: 0]
  |  Branch (7592:49): [True: 4.94k, False: 0]
  ------------------
 7593|  4.94k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 4.94k, False: 0]
  ------------------
 7594|  4.94k|        ++begin;
 7595|       |
 7596|  4.94k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  4.94k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.94k]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|  4.94k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.94k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|  4.94k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  4.94k|        return;
 7610|  4.94k|    }
 7611|       |
 7612|      0|    handler.on_charset_single(cp_first);
 7613|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7560|  9.88k|{
 7561|  9.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  9.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  9.88k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  9.88k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.88k]
  |  |  |  Branch (1014:45): [True: 0, False: 9.88k]
  |  |  |  Branch (1014:45): [True: 0, False: 9.88k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  9.88k|    const auto cp =
 7570|  9.88k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  9.88k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  9.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.88k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|  9.88k|    begin += len;
 7577|  9.88k|    return cp;
 7578|  9.88k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7455|  7.88k|{
 7456|  7.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  7.88k|    auto check_align = [](wchar_t ch) {
 7459|  7.88k|        switch (ch) {
 7460|  7.88k|            case L'<':
 7461|  7.88k|                return align_type::left;
 7462|  7.88k|            case L'>':
 7463|  7.88k|                return align_type::right;
 7464|  7.88k|            case L'^':
 7465|  7.88k|                return align_type::center;
 7466|  7.88k|            default:
 7467|  7.88k|                return align_type::none;
 7468|  7.88k|        }
 7469|  7.88k|    };
 7470|       |
 7471|  7.88k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  7.88k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.88k]
  |  |  |  Branch (1014:45): [True: 0, False: 7.88k]
  |  |  |  Branch (1014:45): [True: 0, False: 7.88k]
  |  |  ------------------
  ------------------
 7473|  7.88k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  7.88k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  7.88k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  7.88k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  7.88k|    const auto begin_before_fill = begin;
 7483|  7.88k|    begin += potential_fill_len;
 7484|       |
 7485|  7.88k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 7.88k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  7.88k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  7.88k|    const auto begin_after_fill = begin;
 7491|  7.88k|    ++begin;
 7492|       |
 7493|  7.88k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 7.88k, False: 0]
  ------------------
 7494|  7.88k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  7.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.88k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  7.88k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 2.47k, False: 5.41k]
  ------------------
 7499|  2.47k|            return begin_before_fill;
 7500|  2.47k|        }
 7501|  7.88k|    }
 7502|       |
 7503|  5.41k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 5.41k, False: 0]
  ------------------
 7504|  5.41k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 5.41k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  5.41k|        return begin_before_fill;
 7509|  5.41k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  5.41k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|  15.7k|    auto check_align = [](wchar_t ch) {
 7459|  15.7k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 15.7k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 15.7k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 15.7k]
  ------------------
 7465|      0|                return align_type::center;
 7466|  15.7k|            default:
  ------------------
  |  Branch (7466:13): [True: 15.7k, False: 0]
  ------------------
 7467|  15.7k|                return align_type::none;
 7468|  15.7k|        }
 7469|  15.7k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7520|  7.88k|{
 7521|  7.88k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  7.88k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 7.88k, False: 0]
  |  Branch (7523:33): [True: 3.61k, False: 4.27k]
  ------------------
 7524|  3.61k|        int width = parse_simple_int(begin, end);
 7525|  3.61k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  3.61k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 3.61k, False: 0]
  |  |  ------------------
  ------------------
 7526|  3.61k|            handler.on_width(width);
 7527|  3.61k|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|  3.61k|    }
 7533|  7.88k|    return begin;
 7534|  7.88k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 8059|  1.80k|    {
 8060|  1.80k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  1.80k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 1.80k, False: 0]
  ------------------
 8062|  1.80k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 1.80k, False: 0]
  ------------------
 8063|  1.80k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 1.80k, False: 0]
  ------------------
 8064|  1.80k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 1.80k, False: 0]
  ------------------
 8065|  1.80k|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|  1.80k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|  1.80k|        }
 8070|       |
 8071|      0|        Handler::on_localized();
 8072|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|  54.9k|{
 9606|  54.9k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  54.9k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  54.9k|{
 9463|  54.9k|#define SCN_VISIT(Type)                                                    \
 9464|  54.9k|    do {                                                                   \
 9465|  54.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  54.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  54.9k|        }                                                                  \
 9468|  54.9k|        else {                                                             \
 9469|  54.9k|            return vis(monostate_val);                                     \
 9470|  54.9k|        }                                                                  \
 9471|  54.9k|    } while (false)
 9472|       |
 9473|  54.9k|    monostate monostate_val{};
 9474|       |
 9475|  54.9k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 54.9k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 54.9k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 54.9k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 54.9k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 54.9k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 54.9k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 54.9k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 54.9k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 54.9k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 54.9k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 54.9k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 54.9k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 54.9k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 54.9k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 54.9k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 54.9k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 54.9k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 54.9k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 54.9k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 54.9k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 54.9k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 54.9k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 54.9k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 54.9k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 54.9k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  54.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 54.9k, False: 0]
  ------------------
 9555|  54.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  54.9k|    do {                                                                   \
  |  | 9465|  54.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  54.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  54.9k|        }                                                                  \
  |  | 9468|  54.9k|        else {                                                             \
  |  | 9469|  54.9k|            return vis(monostate_val);                                     \
  |  | 9470|  54.9k|        }                                                                  \
  |  | 9471|  54.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  54.9k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 54.9k]
  ------------------
 9557|  54.9k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  54.9k|    do {                                                                   \
  |  | 9465|  54.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  54.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  54.9k|        }                                                                  \
  |  | 9468|  54.9k|        else {                                                             \
  |  | 9469|  54.9k|            return vis(monostate_val);                                     \
  |  | 9470|  54.9k|        }                                                                  \
  |  | 9471|  54.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  54.9k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 54.9k]
  ------------------
 9559|  54.9k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|  54.9k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|  54.9k|    do {                                                                   \
  |  | 9465|  54.9k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  54.9k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  54.9k|        }                                                                  \
  |  | 9468|  54.9k|        else {                                                             \
  |  | 9469|  54.9k|            return vis(monostate_val);                                     \
  |  | 9470|  54.9k|        }                                                                  \
  |  | 9471|  54.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|  54.9k|        }
 9566|       |
 9567|  54.9k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 54.9k]
  ------------------
 9568|  54.9k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  54.9k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  54.9k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 54.9k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 54.9k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  54.9k|            SCN_CLANG_POP
 9585|  54.9k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4407|  11.7k|    {
 4408|  11.7k|        return sync(0);
 4409|  11.7k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6341|  1.75M|    {
 6342|  1.75M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|  1.75M|        return static_cast<std::size_t>(m_desc &
 6347|  1.75M|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|  1.75M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6367|  3.50M|    {
 6368|  3.50M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|  3.50M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6309|  1.75M|    {
 6310|  1.75M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|  1.75M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|  1.75M|        const auto t = type(id);
 6322|  1.75M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|  1.75M|        basic_scan_arg<Context> arg;
 6327|  1.75M|        arg.m_type = t;
 6328|  1.75M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 1.75M, False: 0]
  ------------------
 6329|  1.75M|            arg.m_value.ref_value = m_builtin_values[id];
 6330|  1.75M|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|  1.75M|        return arg;
 6335|  1.75M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6376|  1.75M|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|  1.75M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|  1.75M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|  1.75M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|  1.75M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6371|  1.75M|    {
 6372|  1.75M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|  1.75M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6124|  3.05M|    {
 6125|  3.05M|        return m_type != detail::arg_type::none_type;
 6126|  3.05M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|   854k|{
 9606|   854k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   854k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   854k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   854k|{
 9463|   854k|#define SCN_VISIT(Type)                                                    \
 9464|   854k|    do {                                                                   \
 9465|   854k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   854k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   854k|        }                                                                  \
 9468|   854k|        else {                                                             \
 9469|   854k|            return vis(monostate_val);                                     \
 9470|   854k|        }                                                                  \
 9471|   854k|    } while (false)
 9472|       |
 9473|   854k|    monostate monostate_val{};
 9474|       |
 9475|   854k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 854k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 854k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 854k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 854k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 854k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 854k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 854k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 854k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 854k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 854k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 854k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 854k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 854k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 854k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 854k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 854k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 854k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 854k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 854k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 854k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 854k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 854k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 854k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 854k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 854k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 854k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|   427k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 427k, False: 427k]
  ------------------
 9557|   427k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|   427k|    do {                                                                   \
  |  | 9465|   427k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   427k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   427k|        }                                                                  \
  |  | 9468|   427k|        else {                                                             \
  |  | 9469|   427k|            return vis(monostate_val);                                     \
  |  | 9470|   427k|        }                                                                  \
  |  | 9471|   427k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   854k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 427k, False: 427k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|   854k|            else {
 9563|   854k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|   854k|    do {                                                                   \
  |  | 9465|   854k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   854k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   854k|        }                                                                  \
  |  | 9468|   854k|        else {                                                             \
  |  | 9469|   854k|            return vis(monostate_val);                                     \
  |  | 9470|   854k|        }                                                                  \
  |  | 9471|   854k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|   854k|            }
 9565|   854k|        }
 9566|       |
 9567|   854k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 854k]
  ------------------
 9568|   854k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   854k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   854k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 854k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 854k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   854k|            SCN_CLANG_POP
 9585|   854k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|  3.95M|{
 6171|  3.95M|    return arg.m_type;
 6172|  3.95M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|  2.15M|{
 6183|  2.15M|    return arg.m_value;
 6184|  2.15M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   299k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   299k|    static_cast<    \
  |  | 1084|   299k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   299k|    {
 9129|   299k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6444|   598k|        : m_format{format},
 6445|   598k|          m_next_arg_id{next_arg_id},
 6446|   598k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   598k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   598k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   598k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   598k|    {
 6452|   598k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|   598k|    {
 3107|   598k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   598k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|   598k|    {
 3073|   598k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   598k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   598k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   598k|{
 7971|   598k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   598k|    handler.check_args_exhausted();
 7973|   598k|    return handler.get_error();
 7974|   598k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   598k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   598k|    auto begin = format.data();
 7939|   598k|    auto it = begin;
 7940|   598k|    const auto end = format.data() + format.size();
 7941|       |
 7942|  1.16M|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 598k, False: 562k]
  ------------------
 7943|   598k|        const auto ch = *it++;
 7944|   598k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 598k, False: 0]
  ------------------
 7945|   598k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   598k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   598k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 36.1k, False: 562k]
  ------------------
 7949|  36.1k|                return;
 7950|  36.1k|            }
 7951|   598k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   598k|    }
 7962|       |
 7963|   562k|    handler.on_literal_text(begin, end);
 7964|   562k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7867|   598k|{
 7868|   598k|    struct id_adapter {
 7869|   598k|        constexpr void operator()()
 7870|   598k|        {
 7871|   598k|            arg_id = handler.on_arg_id();
 7872|   598k|        }
 7873|   598k|        constexpr void operator()(std::size_t id)
 7874|   598k|        {
 7875|   598k|            arg_id = handler.on_arg_id(id);
 7876|   598k|        }
 7877|       |
 7878|   598k|        constexpr void on_error(const char* msg)
 7879|   598k|        {
 7880|   598k|            SCN_UNLIKELY_ATTR
 7881|   598k|            handler.on_error(msg);
 7882|   598k|        }
 7883|       |
 7884|   598k|        Handler& handler;
 7885|   598k|        std::size_t arg_id;
 7886|   598k|    };
 7887|       |
 7888|   598k|    ++begin;
 7889|   598k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 598k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   598k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 598k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   598k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 598k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   598k|    else {
 7901|   598k|        auto adapter = id_adapter{handler, 0};
 7902|   598k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   598k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 598k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   598k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 598k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   598k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 598k, False: 0]
  ------------------
 7913|   598k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 598k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   598k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   598k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 584k]
  |  |  |  Branch (1014:45): [True: 0, False: 598k]
  |  |  |  Branch (1014:45): [True: 14.4k, False: 584k]
  |  |  ------------------
  ------------------
 7919|  14.4k|                handler.on_error("Unknown format specifier");
 7920|  14.4k|                return begin;
 7921|  14.4k|            }
 7922|   598k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   598k|    }
 7929|   584k|    return begin + 1;
 7930|   598k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 9026|   898k|    {
 9027|   898k|        return m_args.get(id);
 9028|   898k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6479|   898k|    {
 6480|   898k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   898k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 898k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   898k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   898k|        do_check_arg_id(id);
 6488|   898k|        return id;
 6489|   898k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6973|   898k|{
 6974|   898k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   898k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   898k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   598k|{
 7367|   598k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   598k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   598k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   598k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 598k, False: 0]
  |  Branch (7368:26): [True: 0, False: 598k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   598k|    handler();
 7373|   598k|    return begin;
 7374|   598k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7315|  21.6k|{
 7316|  21.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7317|  21.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1079|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7318|       |
 7319|  21.6k|    unsigned long long value = 0;
 7320|  43.3k|    do {
 7321|  43.3k|        value *= 10;
 7322|  43.3k|        value += static_cast<unsigned long long>(*begin - '0');
 7323|  43.3k|        if (value >
  ------------------
  |  Branch (7323:13): [True: 0, False: 43.3k]
  ------------------
 7324|  43.3k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7325|      0|            return -1;
 7326|      0|        }
 7327|  43.3k|        ++begin;
 7328|  43.3k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7328:14): [True: 43.3k, False: 0]
  |  Branch (7328:30): [True: 43.3k, False: 0]
  |  Branch (7328:47): [True: 21.6k, False: 21.6k]
  ------------------
 7329|  21.6k|    return static_cast<int>(value);
 7330|  21.6k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   598k|        {
 7871|   598k|            arg_id = handler.on_arg_id();
 7872|   598k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6474|   876k|    {
 6475|   876k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   876k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4754|   726k|{
 4755|   726k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 726k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   726k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   726k|                            ranges::default_sentinel};
 4761|   726k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4517|   726k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   726k|    {
 4519|   726k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   726k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   726k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6463|  1.77M|    {
 6464|  1.77M|        return m_format.data();
 6465|  1.77M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|   598k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   598k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   598k|    {
 8055|   598k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   598k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   598k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   598k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7783|   598k|{
 7784|   598k|    auto do_presentation = [&]() -> const CharT* {
 7785|   598k|        if (*begin == CharT{'['}) {
 7786|   598k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   598k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   598k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   598k|                return begin;
 7792|   598k|            }
 7793|   598k|            handler.on_character_set_string(set);
 7794|   598k|            return begin;
 7795|   598k|        }
 7796|   598k|        if (*begin == CharT{'/'}) {
 7797|   598k|            return parse_presentation_regex(begin, end, handler);
 7798|   598k|        }
 7799|   598k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   598k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   598k|            handler.on_error("Invalid type specifier in format string");
 7802|   598k|            return begin;
 7803|   598k|        }
 7804|   598k|        handler.on_type(type);
 7805|   598k|        return begin;
 7806|   598k|    };
 7807|       |
 7808|   598k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 598k, False: 0]
  |  Branch (7808:28): [True: 576k, False: 21.8k]
  ------------------
 7809|   598k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 576k, False: 0]
  |  Branch (7809:36): [True: 569k, False: 7.22k]
  ------------------
 7810|   569k|        return do_presentation();
 7811|   569k|    }
 7812|       |
 7813|  29.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  29.1k|    begin = parse_align(begin, end, handler);
 7819|  29.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  29.1k|    begin = parse_width(begin, end, handler);
 7825|  29.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  29.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 29.1k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  29.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 7.22k, False: 21.8k]
  ------------------
 7844|  7.22k|        handler.on_localized();
 7845|  7.22k|        ++begin;
 7846|  7.22k|    }
 7847|  29.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  29.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 29.1k, False: 0]
  |  Branch (7852:25): [True: 21.8k, False: 7.22k]
  ------------------
 7853|  21.8k|        do_presentation();
 7854|  21.8k|    }
 7855|  29.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  29.1k|    return begin;
 7861|  29.1k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7430|   865k|{
 7431|   865k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 854k, False: 10.8k]
  |  Branch (7431:33): [True: 854k, False: 0]
  ------------------
 7432|   865k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 10.8k, False: 0]
  |  Branch (7432:33): [True: 10.8k, False: 0]
  ------------------
 7433|   865k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|   591k|    auto do_presentation = [&]() -> const CharT* {
 7785|   591k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 7.44k, False: 584k]
  ------------------
 7786|  7.44k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  7.44k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|  7.44k|            handler.on_character_set_string(set);
 7794|  7.44k|            return begin;
 7795|  7.44k|        }
 7796|   584k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 584k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   584k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   584k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.22k, False: 576k]
  |  |  ------------------
  ------------------
 7801|  7.22k|            handler.on_error("Invalid type specifier in format string");
 7802|  7.22k|            return begin;
 7803|  7.22k|        }
 7804|   576k|        handler.on_type(type);
 7805|   576k|        return begin;
 7806|   584k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7620|  7.44k|{
 7621|  7.44k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  7.44k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  7.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  7.44k|    auto start = begin;
 7625|  7.44k|    ++begin;
 7626|       |
 7627|  7.44k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|  7.44k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 0, False: 7.44k]
  ------------------
 7634|      0|        handler.on_charset_inverted();
 7635|      0|        ++begin;
 7636|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 0, False: 0]
  ------------------
 7643|      0|            handler.on_charset_single(char32_t{']'});
 7644|      0|            ++begin;
 7645|      0|        }
 7646|      0|    }
 7647|  7.44k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 7.44k]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|  22.3k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 22.3k, False: 0]
  ------------------
 7652|  22.3k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  22.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 22.3k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|  22.3k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 7.44k, False: 14.8k]
  ------------------
 7657|  7.44k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  7.44k|        }
 7659|       |
 7660|  14.8k|        parse_presentation_set_literal(begin, end, handler);
 7661|  14.8k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|  7.44k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7584|  14.8k|{
 7585|  14.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  14.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  14.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|  14.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 14.8k, False: 0]
  |  Branch (7592:25): [True: 14.8k, False: 0]
  |  Branch (7592:49): [True: 14.8k, False: 0]
  ------------------
 7593|  14.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 14.8k, False: 0]
  ------------------
 7594|  14.8k|        ++begin;
 7595|       |
 7596|  14.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  14.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|  14.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|  14.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  14.8k|        return;
 7610|  14.8k|    }
 7611|       |
 7612|      0|    handler.on_charset_single(cp_first);
 7613|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7560|  29.7k|{
 7561|  29.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  29.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  29.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  29.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  59.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 29.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 29.7k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  29.7k|    const auto cp =
 7570|  29.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  29.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.7k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|  29.7k|    begin += len;
 7577|  29.7k|    return cp;
 7578|  29.7k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7272|  11.1k|    {
 7273|  11.1k|        m_specs.charset_string_data = fmt.data();
 7274|  11.1k|        m_specs.charset_string_size = fmt.size();
 7275|  11.1k|        on_type(presentation_type::string_set);
 7276|  11.1k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7378|   876k|{
 7379|   876k|    switch (type) {
 7380|      0|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 0, False: 876k]
  ------------------
 7381|      0|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 0, False: 876k]
  ------------------
 7382|      0|            return presentation_type::int_binary;
 7383|      0|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 0, False: 876k]
  ------------------
 7384|      0|            return presentation_type::int_decimal;
 7385|      0|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 0, False: 876k]
  ------------------
 7386|      0|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 876k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|      0|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 0, False: 876k]
  ------------------
 7390|      0|            return presentation_type::int_octal;
 7391|      0|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 0, False: 876k]
  ------------------
 7392|      0|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 876k]
  ------------------
 7393|      0|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 876k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 876k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|      0|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 0, False: 876k]
  ------------------
 7398|      0|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 876k]
  ------------------
 7399|      0|            return presentation_type::float_hex;
 7400|      0|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 0, False: 876k]
  ------------------
 7401|      0|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 876k]
  ------------------
 7402|      0|            return presentation_type::float_scientific;
 7403|      0|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 0, False: 876k]
  ------------------
 7404|      0|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 876k]
  ------------------
 7405|      0|            return presentation_type::float_fixed;
 7406|      0|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 0, False: 876k]
  ------------------
 7407|      0|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 876k]
  ------------------
 7408|      0|            return presentation_type::float_general;
 7409|   854k|        case 's':
  ------------------
  |  Branch (7409:9): [True: 854k, False: 21.6k]
  ------------------
 7410|   854k|            return presentation_type::string;
 7411|  10.8k|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 10.8k, False: 865k]
  ------------------
 7412|  10.8k|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 876k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 876k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 876k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 876k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|  10.8k|        default:
  ------------------
  |  Branch (7423:9): [True: 10.8k, False: 865k]
  ------------------
 7424|  10.8k|            return presentation_type::none;
 7425|   876k|    }
 7426|   876k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7455|  29.1k|{
 7456|  29.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  29.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  29.1k|    auto check_align = [](wchar_t ch) {
 7459|  29.1k|        switch (ch) {
 7460|  29.1k|            case L'<':
 7461|  29.1k|                return align_type::left;
 7462|  29.1k|            case L'>':
 7463|  29.1k|                return align_type::right;
 7464|  29.1k|            case L'^':
 7465|  29.1k|                return align_type::center;
 7466|  29.1k|            default:
 7467|  29.1k|                return align_type::none;
 7468|  29.1k|        }
 7469|  29.1k|    };
 7470|       |
 7471|  29.1k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  29.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.1k]
  |  |  |  Branch (1014:45): [True: 0, False: 29.1k]
  |  |  |  Branch (1014:45): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 7473|  29.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  29.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  29.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  29.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  29.1k|    const auto begin_before_fill = begin;
 7483|  29.1k|    begin += potential_fill_len;
 7484|       |
 7485|  29.1k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 29.1k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  29.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  29.1k|    const auto begin_after_fill = begin;
 7491|  29.1k|    ++begin;
 7492|       |
 7493|  29.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 29.1k, False: 0]
  ------------------
 7494|  29.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  29.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 7.44k, False: 21.6k]
  ------------------
 7499|  7.44k|            return begin_before_fill;
 7500|  7.44k|        }
 7501|  29.1k|    }
 7502|       |
 7503|  21.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 21.6k, False: 0]
  ------------------
 7504|  21.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 21.6k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  21.6k|        return begin_before_fill;
 7509|  21.6k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  21.6k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7437|  43.6k|{
 7438|  43.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  43.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  43.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|  43.6k|    if constexpr (sizeof(CharT) != 1) {
 7440|  43.6k|        return 1;
 7441|       |    }
 7442|       |    else {
 7443|       |        const auto lengths =
 7444|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|       |            "\3\4";
 7446|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|       |        return len;
 7448|       |    }
 7449|  43.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|  58.2k|    auto check_align = [](wchar_t ch) {
 7459|  58.2k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 58.2k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 58.2k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 58.2k]
  ------------------
 7465|      0|                return align_type::center;
 7466|  58.2k|            default:
  ------------------
  |  Branch (7466:13): [True: 58.2k, False: 0]
  ------------------
 7467|  58.2k|                return align_type::none;
 7468|  58.2k|        }
 7469|  58.2k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7520|  29.1k|{
 7521|  29.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  29.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  29.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 29.1k, False: 0]
  |  Branch (7523:33): [True: 14.4k, False: 14.6k]
  ------------------
 7524|  14.4k|        int width = parse_simple_int(begin, end);
 7525|  14.4k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  14.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 14.4k, False: 0]
  |  |  ------------------
  ------------------
 7526|  14.4k|            handler.on_width(width);
 7527|  14.4k|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|  14.4k|    }
 7533|  29.1k|    return begin;
 7534|  29.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 8059|  7.22k|    {
 8060|  7.22k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  7.22k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 7.22k, False: 0]
  ------------------
 8062|  7.22k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 7.22k, False: 0]
  ------------------
 8063|  7.22k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 7.22k, False: 0]
  ------------------
 8064|  7.22k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 7.22k, False: 0]
  ------------------
 8065|  7.22k|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|  7.22k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|  7.22k|        }
 8070|       |
 8071|      0|        Handler::on_localized();
 8072|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|   584k|{
 9606|   584k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   584k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   584k|{
 9463|   584k|#define SCN_VISIT(Type)                                                    \
 9464|   584k|    do {                                                                   \
 9465|   584k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   584k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   584k|        }                                                                  \
 9468|   584k|        else {                                                             \
 9469|   584k|            return vis(monostate_val);                                     \
 9470|   584k|        }                                                                  \
 9471|   584k|    } while (false)
 9472|       |
 9473|   584k|    monostate monostate_val{};
 9474|       |
 9475|   584k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 584k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 584k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 584k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 584k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 584k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 584k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 584k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 584k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 584k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 584k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 584k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 584k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 584k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 584k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 584k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 584k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 584k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 584k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 584k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 584k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 584k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 584k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 584k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 584k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 584k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 584k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|   292k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 292k, False: 292k]
  ------------------
 9557|   292k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|   292k|    do {                                                                   \
  |  | 9465|   292k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   292k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   292k|        }                                                                  \
  |  | 9468|   292k|        else {                                                             \
  |  | 9469|   292k|            return vis(monostate_val);                                     \
  |  | 9470|   292k|        }                                                                  \
  |  | 9471|   292k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   584k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 292k, False: 292k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|   584k|            else {
 9563|   584k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|   584k|    do {                                                                   \
  |  | 9465|   584k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   584k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   584k|        }                                                                  \
  |  | 9468|   584k|        else {                                                             \
  |  | 9469|   584k|            return vis(monostate_val);                                     \
  |  | 9470|   584k|        }                                                                  \
  |  | 9471|   584k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|   584k|            }
 9565|   584k|        }
 9566|       |
 9567|   584k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 584k]
  ------------------
 9568|   584k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   584k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   584k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 584k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 584k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   584k|            SCN_CLANG_POP
 9585|   584k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|   427k|{
 9606|   427k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   427k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   427k|{
 9463|   427k|#define SCN_VISIT(Type)                                                    \
 9464|   427k|    do {                                                                   \
 9465|   427k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   427k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   427k|        }                                                                  \
 9468|   427k|        else {                                                             \
 9469|   427k|            return vis(monostate_val);                                     \
 9470|   427k|        }                                                                  \
 9471|   427k|    } while (false)
 9472|       |
 9473|   427k|    monostate monostate_val{};
 9474|       |
 9475|   427k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 427k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 427k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 427k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 427k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 427k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 427k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 427k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 427k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 427k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 427k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 427k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 427k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 427k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 427k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 427k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 427k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 427k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 427k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 427k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 427k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 427k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 427k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 427k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 427k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 427k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 427k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|   427k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 427k, False: 0]
  ------------------
 9557|   427k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|   427k|    do {                                                                   \
  |  | 9465|   427k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   427k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   427k|        }                                                                  \
  |  | 9468|   427k|        else {                                                             \
  |  | 9469|   427k|            return vis(monostate_val);                                     \
  |  | 9470|   427k|        }                                                                  \
  |  | 9471|   427k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   427k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 427k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|   427k|            else {
 9563|   427k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|   427k|    do {                                                                   \
  |  | 9465|   427k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   427k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   427k|        }                                                                  \
  |  | 9468|   427k|        else {                                                             \
  |  | 9469|   427k|            return vis(monostate_val);                                     \
  |  | 9470|   427k|        }                                                                  \
  |  | 9471|   427k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|   427k|            }
 9565|   427k|        }
 9566|       |
 9567|   427k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 427k]
  ------------------
 9568|   427k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   427k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   427k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 427k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 427k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   427k|            SCN_CLANG_POP
 9585|   427k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6444|   299k|        : m_format{format},
 6445|   299k|          m_next_arg_id{next_arg_id},
 6446|   299k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   299k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   299k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   299k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   299k|    {
 6452|   299k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   299k|{
 7971|   299k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   299k|    handler.check_args_exhausted();
 7973|   299k|    return handler.get_error();
 7974|   299k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   299k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   299k|    auto begin = format.data();
 7939|   299k|    auto it = begin;
 7940|   299k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   580k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 299k, False: 281k]
  ------------------
 7943|   299k|        const auto ch = *it++;
 7944|   299k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 299k, False: 0]
  ------------------
 7945|   299k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   299k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   299k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 18.0k, False: 281k]
  ------------------
 7949|  18.0k|                return;
 7950|  18.0k|            }
 7951|   299k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   299k|    }
 7962|       |
 7963|   281k|    handler.on_literal_text(begin, end);
 7964|   281k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9165|   281k|    {
 9166|   281k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   281k|    static_cast<    \
  |  | 1084|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|   281k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7867|   299k|{
 7868|   299k|    struct id_adapter {
 7869|   299k|        constexpr void operator()()
 7870|   299k|        {
 7871|   299k|            arg_id = handler.on_arg_id();
 7872|   299k|        }
 7873|   299k|        constexpr void operator()(std::size_t id)
 7874|   299k|        {
 7875|   299k|            arg_id = handler.on_arg_id(id);
 7876|   299k|        }
 7877|       |
 7878|   299k|        constexpr void on_error(const char* msg)
 7879|   299k|        {
 7880|   299k|            SCN_UNLIKELY_ATTR
 7881|   299k|            handler.on_error(msg);
 7882|   299k|        }
 7883|       |
 7884|   299k|        Handler& handler;
 7885|   299k|        std::size_t arg_id;
 7886|   299k|    };
 7887|       |
 7888|   299k|    ++begin;
 7889|   299k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 299k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   299k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 299k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   299k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 299k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   299k|    else {
 7901|   299k|        auto adapter = id_adapter{handler, 0};
 7902|   299k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   299k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 299k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   299k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 299k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   299k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 299k, False: 0]
  ------------------
 7913|   299k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 299k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   299k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   299k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.22k, False: 292k]
  |  |  |  Branch (1014:45): [True: 0, False: 299k]
  |  |  |  Branch (1014:45): [True: 7.22k, False: 292k]
  |  |  ------------------
  ------------------
 7919|  7.22k|                handler.on_error("Unknown format specifier");
 7920|  7.22k|                return begin;
 7921|  7.22k|            }
 7922|   299k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   299k|    }
 7929|   292k|    return begin + 1;
 7930|   299k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   299k|{
 7367|   299k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   299k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   299k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   299k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 299k, False: 0]
  |  Branch (7368:26): [True: 0, False: 299k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   299k|    handler();
 7373|   299k|    return begin;
 7374|   299k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   299k|        {
 7871|   299k|            arg_id = handler.on_arg_id();
 7872|   299k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|   299k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   299k|    {
 8055|   299k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   299k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   299k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   299k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7783|   299k|{
 7784|   299k|    auto do_presentation = [&]() -> const CharT* {
 7785|   299k|        if (*begin == CharT{'['}) {
 7786|   299k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   299k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   299k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   299k|                return begin;
 7792|   299k|            }
 7793|   299k|            handler.on_character_set_string(set);
 7794|   299k|            return begin;
 7795|   299k|        }
 7796|   299k|        if (*begin == CharT{'/'}) {
 7797|   299k|            return parse_presentation_regex(begin, end, handler);
 7798|   299k|        }
 7799|   299k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   299k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   299k|            handler.on_error("Invalid type specifier in format string");
 7802|   299k|            return begin;
 7803|   299k|        }
 7804|   299k|        handler.on_type(type);
 7805|   299k|        return begin;
 7806|   299k|    };
 7807|       |
 7808|   299k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 299k, False: 0]
  |  Branch (7808:28): [True: 288k, False: 10.9k]
  ------------------
 7809|   299k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 288k, False: 0]
  |  Branch (7809:36): [True: 284k, False: 3.61k]
  ------------------
 7810|   284k|        return do_presentation();
 7811|   284k|    }
 7812|       |
 7813|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  14.5k|    begin = parse_align(begin, end, handler);
 7819|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  14.5k|    begin = parse_width(begin, end, handler);
 7825|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  14.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 14.5k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  14.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 3.61k, False: 10.9k]
  ------------------
 7844|  3.61k|        handler.on_localized();
 7845|  3.61k|        ++begin;
 7846|  3.61k|    }
 7847|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  14.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 14.5k, False: 0]
  |  Branch (7852:25): [True: 10.9k, False: 3.61k]
  ------------------
 7853|  10.9k|        do_presentation();
 7854|  10.9k|    }
 7855|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  14.5k|    return begin;
 7861|  14.5k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|   295k|    auto do_presentation = [&]() -> const CharT* {
 7785|   295k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 3.72k, False: 292k]
  ------------------
 7786|  3.72k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  3.72k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.72k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|  3.72k|            handler.on_character_set_string(set);
 7794|  3.72k|            return begin;
 7795|  3.72k|        }
 7796|   292k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 292k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   292k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   292k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.61k, False: 288k]
  |  |  ------------------
  ------------------
 7801|  3.61k|            handler.on_error("Invalid type specifier in format string");
 7802|  3.61k|            return begin;
 7803|  3.61k|        }
 7804|   288k|        handler.on_type(type);
 7805|   288k|        return begin;
 7806|   292k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7620|  3.72k|{
 7621|  3.72k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  3.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  3.72k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  3.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  3.72k|    auto start = begin;
 7625|  3.72k|    ++begin;
 7626|       |
 7627|  3.72k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.72k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|  3.72k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 0, False: 3.72k]
  ------------------
 7634|      0|        handler.on_charset_inverted();
 7635|      0|        ++begin;
 7636|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 0, False: 0]
  ------------------
 7643|      0|            handler.on_charset_single(char32_t{']'});
 7644|      0|            ++begin;
 7645|      0|        }
 7646|      0|    }
 7647|  3.72k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 3.72k]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|  11.1k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 11.1k, False: 0]
  ------------------
 7652|  11.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|  11.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 3.72k, False: 7.44k]
  ------------------
 7657|  3.72k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  3.72k|        }
 7659|       |
 7660|  7.44k|        parse_presentation_set_literal(begin, end, handler);
 7661|  7.44k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|  3.72k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7584|  7.44k|{
 7585|  7.44k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  7.44k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  7.44k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|  7.44k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 7.44k, False: 0]
  |  Branch (7592:25): [True: 7.44k, False: 0]
  |  Branch (7592:49): [True: 7.44k, False: 0]
  ------------------
 7593|  7.44k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 7.44k, False: 0]
  ------------------
 7594|  7.44k|        ++begin;
 7595|       |
 7596|  7.44k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  7.44k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|  7.44k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|  7.44k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  7.44k|        return;
 7610|  7.44k|    }
 7611|       |
 7612|      0|    handler.on_charset_single(cp_first);
 7613|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7560|  14.8k|{
 7561|  14.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  14.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  14.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  |  Branch (1014:45): [True: 0, False: 14.8k]
  |  |  |  Branch (1014:45): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  14.8k|    const auto cp =
 7570|  14.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  14.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|  14.8k|    begin += len;
 7577|  14.8k|    return cp;
 7578|  14.8k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7455|  14.5k|{
 7456|  14.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  14.5k|    auto check_align = [](wchar_t ch) {
 7459|  14.5k|        switch (ch) {
 7460|  14.5k|            case L'<':
 7461|  14.5k|                return align_type::left;
 7462|  14.5k|            case L'>':
 7463|  14.5k|                return align_type::right;
 7464|  14.5k|            case L'^':
 7465|  14.5k|                return align_type::center;
 7466|  14.5k|            default:
 7467|  14.5k|                return align_type::none;
 7468|  14.5k|        }
 7469|  14.5k|    };
 7470|       |
 7471|  14.5k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  14.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.5k]
  |  |  |  Branch (1014:45): [True: 0, False: 14.5k]
  |  |  |  Branch (1014:45): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7473|  14.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  14.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  14.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  14.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  14.5k|    const auto begin_before_fill = begin;
 7483|  14.5k|    begin += potential_fill_len;
 7484|       |
 7485|  14.5k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 14.5k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  14.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  14.5k|    const auto begin_after_fill = begin;
 7491|  14.5k|    ++begin;
 7492|       |
 7493|  14.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 14.5k, False: 0]
  ------------------
 7494|  14.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  14.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 3.72k, False: 10.8k]
  ------------------
 7499|  3.72k|            return begin_before_fill;
 7500|  3.72k|        }
 7501|  14.5k|    }
 7502|       |
 7503|  10.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 10.8k, False: 0]
  ------------------
 7504|  10.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 10.8k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  10.8k|        return begin_before_fill;
 7509|  10.8k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  10.8k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|  29.1k|    auto check_align = [](wchar_t ch) {
 7459|  29.1k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 29.1k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 29.1k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 29.1k]
  ------------------
 7465|      0|                return align_type::center;
 7466|  29.1k|            default:
  ------------------
  |  Branch (7466:13): [True: 29.1k, False: 0]
  ------------------
 7467|  29.1k|                return align_type::none;
 7468|  29.1k|        }
 7469|  29.1k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7520|  14.5k|{
 7521|  14.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  14.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 14.5k, False: 0]
  |  Branch (7523:33): [True: 7.22k, False: 7.33k]
  ------------------
 7524|  7.22k|        int width = parse_simple_int(begin, end);
 7525|  7.22k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  7.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 7.22k, False: 0]
  |  |  ------------------
  ------------------
 7526|  7.22k|            handler.on_width(width);
 7527|  7.22k|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|  7.22k|    }
 7533|  14.5k|    return begin;
 7534|  14.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 8059|  3.61k|    {
 8060|  3.61k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  3.61k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 3.61k, False: 0]
  ------------------
 8062|  3.61k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 3.61k, False: 0]
  ------------------
 8063|  3.61k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 3.61k, False: 0]
  ------------------
 8064|  3.61k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 3.61k, False: 0]
  ------------------
 8065|  3.61k|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|  3.61k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|  3.61k|        }
 8070|       |
 8071|      0|        Handler::on_localized();
 8072|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|   292k|{
 9606|   292k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   292k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   292k|{
 9463|   292k|#define SCN_VISIT(Type)                                                    \
 9464|   292k|    do {                                                                   \
 9465|   292k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   292k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   292k|        }                                                                  \
 9468|   292k|        else {                                                             \
 9469|   292k|            return vis(monostate_val);                                     \
 9470|   292k|        }                                                                  \
 9471|   292k|    } while (false)
 9472|       |
 9473|   292k|    monostate monostate_val{};
 9474|       |
 9475|   292k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 292k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 292k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 292k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 292k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 292k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 292k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 292k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 292k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 292k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 292k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 292k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 292k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 292k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 292k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 292k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 292k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 292k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 292k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 292k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 292k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 292k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 292k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 292k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 292k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 292k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 292k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|   292k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 292k, False: 0]
  ------------------
 9557|   292k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|   292k|    do {                                                                   \
  |  | 9465|   292k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   292k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   292k|        }                                                                  \
  |  | 9468|   292k|        else {                                                             \
  |  | 9469|   292k|            return vis(monostate_val);                                     \
  |  | 9470|   292k|        }                                                                  \
  |  | 9471|   292k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   292k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 292k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|   292k|            else {
 9563|   292k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|   292k|    do {                                                                   \
  |  | 9465|   292k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   292k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   292k|        }                                                                  \
  |  | 9468|   292k|        else {                                                             \
  |  | 9469|   292k|            return vis(monostate_val);                                     \
  |  | 9470|   292k|        }                                                                  \
  |  | 9471|   292k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|   292k|            }
 9565|   292k|        }
 9566|       |
 9567|   292k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 292k]
  ------------------
 9568|   292k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   292k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   292k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 292k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 292k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   292k|            SCN_CLANG_POP
 9585|   292k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4407|  23.4k|    {
 4408|  23.4k|        return sync(0);
 4409|  23.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6295|  63.1k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6295|   427k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   292k|{
   89|   292k|    auto result = make_scan_result<Source, Args...>();
   90|   292k|    fill_scan_result(result,
   91|   292k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   292k|                           make_scan_args<wscan_context>(result->values())));
   93|   292k|    return result;
   94|   292k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   584k|{
   44|   584k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   584k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   292k|{
  131|   292k|    auto result = make_scan_result<Source, Args...>();
  132|   292k|    fill_scan_result(result,
  133|   292k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   292k|                           make_scan_args<wscan_context>(result->values())));
  135|   292k|    return result;
  136|   292k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   584k|{
   60|   584k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   584k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   142k|{
  171|   142k|    auto result = make_scan_result<Source, T>();
  172|   142k|    fill_scan_result(
  173|   142k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   142k|                            detail::make_arg<wscan_context>(result->value())));
  175|   142k|    return result;
  176|   142k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   284k|{
   72|   284k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   284k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   292k|{
   89|   292k|    auto result = make_scan_result<Source, Args...>();
   90|   292k|    fill_scan_result(result,
   91|   292k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   292k|                           make_scan_args<wscan_context>(result->values())));
   93|   292k|    return result;
   94|   292k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   292k|{
  131|   292k|    auto result = make_scan_result<Source, Args...>();
  132|   292k|    fill_scan_result(result,
  133|   292k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   292k|                           make_scan_args<wscan_context>(result->values())));
  135|   292k|    return result;
  136|   292k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   142k|{
  171|   142k|    auto result = make_scan_result<Source, T>();
  172|   142k|    fill_scan_result(
  173|   142k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   142k|                            detail::make_arg<wscan_context>(result->value())));
  175|   142k|    return result;
  176|   142k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   292k|{
   89|   292k|    auto result = make_scan_result<Source, Args...>();
   90|   292k|    fill_scan_result(result,
   91|   292k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   292k|                           make_scan_args<wscan_context>(result->values())));
   93|   292k|    return result;
   94|   292k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   292k|{
   44|   292k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   292k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   292k|{
  131|   292k|    auto result = make_scan_result<Source, Args...>();
  132|   292k|    fill_scan_result(result,
  133|   292k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   292k|                           make_scan_args<wscan_context>(result->values())));
  135|   292k|    return result;
  136|   292k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   292k|{
   60|   292k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   292k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   142k|{
  171|   142k|    auto result = make_scan_result<Source, T>();
  172|   142k|    fill_scan_result(
  173|   142k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   142k|                            detail::make_arg<wscan_context>(result->value())));
  175|   142k|    return result;
  176|   142k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   142k|{
   72|   142k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   142k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.01M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.01M|{
  309|  1.01M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.01M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2983|  84.3k|{
 2984|  84.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2985|  84.3k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2991|  54.1k|{
 2992|  54.1k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2993|  54.1k|    return sync_after_vscan(source, n);
 2994|  54.1k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3001|   584k|{
 3002|   584k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 3003|   584k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|   292k|{
 3010|   292k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 3011|   292k|    return sync_after_vscan(source, n);
 3012|   292k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   310k|{
  207|   310k|    return find_classic_impl(
  208|   310k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   310k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   310k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   314k|{
  215|   314k|    return find_classic_impl(
  216|   314k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   314k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   314k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2952|  84.3k|{
 2953|  84.3k|    return vscan_internal(source, format, args);
 2954|  84.3k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2958|  54.1k|{
 2959|  54.1k|    auto n = vscan_internal(source, format, args);
 2960|  54.1k|    return sync_after_vscan(source, n);
 2961|  54.1k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2966|   584k|{
 2967|   584k|    return vscan_internal(source, format, args);
 2968|   584k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2972|   292k|{
 2973|   292k|    auto n = vscan_internal(source, format, args);
 2974|   292k|    return sync_after_vscan(source, n);
 2975|   292k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3038|  38.2k|{
 3039|  38.2k|    return vscan_value_internal(source, arg);
 3040|  38.2k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3043|  24.9k|{
 3044|  24.9k|    auto n = vscan_value_internal(source, arg);
 3045|  24.9k|    return sync_after_vscan(source, n);
 3046|  24.9k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3051|   284k|{
 3052|   284k|    return vscan_value_internal(source, arg);
 3053|   284k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3057|   142k|{
 3058|   142k|    auto n = vscan_value_internal(source, arg);
 3059|   142k|    return sync_after_vscan(source, n);
 3060|   142k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   310k|{
  130|   310k|    auto it = source.begin();
  131|       |
  132|   549k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 422k, False: 127k]
  ------------------
  133|   422k|        auto sv =
  134|   422k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|   422k|                .substr(0, 8);
  136|       |
  137|   422k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 282k, False: 139k]
  ------------------
  138|   282k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|   282k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|   282k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 117k, False: 164k]
  ------------------
  141|   117k|                break;
  142|   117k|            }
  143|   164k|            continue;
  144|   282k|        }
  145|       |
  146|   412k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 337k, False: 74.6k]
  ------------------
  147|   337k|            auto tmp =
  148|   337k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   337k|            auto res = get_next_code_point(tmp);
  150|   337k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 65.0k, False: 272k]
  ------------------
  151|  65.0k|                return it;
  152|  65.0k|            }
  153|   272k|            i += static_cast<std::size_t>(
  154|   272k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|   272k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   272k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|   272k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|   272k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   272k|        }
  158|   139k|    }
  159|       |
  160|   245k|    return detail::make_string_view_iterator(source, it);
  161|   310k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|   709k|{
  117|   709k|    static_assert(sizeof(*source.data()) == 1);
  118|   709k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1079|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|   709k|    uint64_t word{};
  120|   709k|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|   709k|    return has_byte_greater(word, 127) != 0;
  123|   709k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|   970k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   337k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   314k|{
  130|   314k|    auto it = source.begin();
  131|       |
  132|   401k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 287k, False: 114k]
  ------------------
  133|   287k|        auto sv =
  134|   287k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|   287k|                .substr(0, 8);
  136|       |
  137|   287k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 204k, False: 82.3k]
  ------------------
  138|   204k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|   204k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|   204k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 121k, False: 82.9k]
  ------------------
  141|   121k|                break;
  142|   121k|            }
  143|  82.9k|            continue;
  144|   204k|        }
  145|       |
  146|   161k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 157k, False: 3.86k]
  ------------------
  147|   157k|            auto tmp =
  148|   157k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   157k|            auto res = get_next_code_point(tmp);
  150|   157k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 78.5k, False: 79.1k]
  ------------------
  151|  78.5k|                return it;
  152|  78.5k|            }
  153|  79.1k|            i += static_cast<std::size_t>(
  154|  79.1k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  79.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  79.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  79.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  79.1k|        }
  158|  82.3k|    }
  159|       |
  160|   236k|    return detail::make_string_view_iterator(source, it);
  161|   314k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   502k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   157k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   108k|{
 2850|   108k|    const auto argcount = args.size();
 2851|   108k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 49.8k, False: 58.5k]
  |  Branch (2851:60): [True: 49.8k, False: 0]
  ------------------
 2852|  49.8k|        auto arg = args.get(0);
 2853|  49.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  49.8k|    static_cast<    \
  |  | 1084|  49.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|  49.8k|    }
 2855|       |
 2856|  58.5k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 58.5k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|  58.5k|    SCN_UNLIKELY_ATTR
 2864|  58.5k|    {
 2865|  58.5k|        auto handler = format_handler<false, CharT>{
 2866|  58.5k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  58.5k|    static_cast<    \
  |  | 1084|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  58.5k|    static_cast<    \
  |  | 1084|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|  58.5k|        return vscan_parse_format_string(format, handler);
 2868|  58.5k|    }
 2869|  58.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   277k|{
 2398|   277k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 150k, False: 126k]
  ------------------
 2399|   150k|        return false;
 2400|   150k|    }
 2401|   126k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 126k, False: 0]
  |  Branch (2401:39): [True: 126k, False: 0]
  ------------------
 2402|   277k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|  74.7k|{
 2431|  74.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|  74.7k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|  74.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|  74.7k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|  74.7k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  74.7k|    static_cast<    \
  |  | 1084|  74.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|  74.7k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  74.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  74.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  74.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.70k, False: 72.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.70k|    }                                                  \
  |  |  |  | 3995|  74.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|  72.0k|    return it.position();
 2448|  74.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2673|  92.2k|        : format_handler_base{argcount},
 2674|  92.2k|          parse_ctx{source_tag<Source&&>, format},
 2675|  92.2k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  92.2k|    static_cast<    \
  |  | 1084|  92.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  92.2k|    static_cast<    \
  |  | 1084|  92.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|  92.2k|    {
 2677|  92.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2491|  1.04M|    format_handler_base(size_t argcount) : args_count(argcount)
 2492|  1.04M|    {
 2493|  1.04M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1014|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 2494|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2495|      0|        }
 2496|  1.04M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2624|  92.2k|        : contiguous_ctx(source, args, loc)
 2625|  92.2k|    {
 2626|  92.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|  92.2k|{
 2815|  92.2k|    const auto beg = handler.get_ctx().begin();
 2816|  92.2k|    detail::parse_format_string<false>(format, handler);
 2817|  92.2k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.0k, False: 74.1k]
  |  |  ------------------
  ------------------
 2818|  18.0k|        return unexpected(err.error());
 2819|  18.0k|    }
 2820|  74.1k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|  92.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2798|   595k|    {
 2799|   595k|        return ctx.get();
 2800|   595k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2629|   595k|    {
 2630|   595k|        return contiguous_ctx;
 2631|   595k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2680|   166k|    {
 2681|   166k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 166k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   166k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2540|  48.7k|    {
 2541|  48.7k|        error = unexpected(err);
 2542|  48.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2452|  92.2k|{
 2453|  92.2k|    auto arg = ctx.arg(id);
 2454|  92.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.2k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|  92.2k|    return arg;
 2458|  92.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2566|  1.04M|    {
 2567|  1.04M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 2568|      0|            on_error({scan_error::invalid_format_string,
 2569|      0|                      "Argument ID out-of-range"});
 2570|      0|            return;
 2571|      0|        }
 2572|       |
 2573|  1.04M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1014|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 2574|      0|            on_error({scan_error::invalid_format_string,
 2575|      0|                      "Argument with this ID has already been scanned"});
 2576|      0|        }
 2577|       |
 2578|  1.04M|        if (SCN_LIKELY(id < 64u)) {
  ------------------
  |  | 1013|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.04M, False: 0]
  |  |  ------------------
  ------------------
 2579|  1.04M|            visited_args_lower64 |= (1ull << id);
 2580|  1.04M|            return;
 2581|  1.04M|        }
 2582|       |
 2583|      0|        id -= 64u;
 2584|      0|        visited_args_upper[id / 8u] |= static_cast<uint8_t>(1u << (id % 8u));
 2585|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2550|  1.04M|    {
 2551|  1.04M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 2552|      0|            on_error({scan_error::invalid_format_string,
 2553|      0|                      "Argument ID out-of-range"});
 2554|      0|            return false;
 2555|      0|        }
 2556|       |
 2557|  1.04M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1013|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.04M, False: 0]
  |  |  ------------------
  ------------------
 2558|  1.04M|            return (visited_args_lower64 >> id) & 1ull;
 2559|  1.04M|        }
 2560|       |
 2561|      0|        id -= 64;
 2562|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2563|  1.04M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2720|  92.2k|    {
 2721|  92.2k|        return parse_ctx.next_arg_id();
 2722|  92.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2760|  92.2k|    {
 2761|  92.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  92.2k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  92.2k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 92.2k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|  92.2k|        auto specs = detail::format_specs{};
 2774|  92.2k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|  92.2k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|  92.2k|            detail::get_arg_type(arg)};
 2777|       |
 2778|  92.2k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|  92.2k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 92.2k]
  |  Branch (2779:29): [True: 0, False: 92.2k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|  92.2k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.22k, False: 85.0k]
  |  |  ------------------
  ------------------
 2786|  7.22k|            return parse_ctx.begin();
 2787|  7.22k|        }
 2788|  85.0k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|  85.0k|        on_visit_scan_arg(
 2791|  85.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|  85.0k|                                           get_ctx().locale()},
 2793|  85.0k|            arg);
 2794|  85.0k|        return parse_ctx.begin();
 2795|  92.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2470|  92.2k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|  92.2k|    {
 2472|  92.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2731|  85.0k|    {
 2732|  85.0k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 85.0k]
  |  Branch (2732:13): [True: 0, False: 85.0k]
  |  Branch (2732:29): [True: 0, False: 85.0k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|  85.0k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  85.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.8k, False: 74.1k]
  |  |  ------------------
  ------------------
 2739|  10.8k|            on_error(r.error());
 2740|  10.8k|        }
 2741|  74.1k|        else {
 2742|  74.1k|            get_ctx().advance_to(*r);
 2743|  74.1k|        }
 2744|  85.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 2534|  32.5k|    {
 2535|  32.5k|        SCN_UNLIKELY_ATTR
 2536|  32.5k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 2537|  32.5k|                                              msg);
 2538|  32.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2499|  1.04M|    {
 2500|  1.04M|        {
 2501|  1.04M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2501:45): [True: 0, False: 1.04M]
  ------------------
 2502|  1.04M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2502:35): [True: 0, False: 1.04M]
  ------------------
 2503|  1.04M|                                      ? std::numeric_limits<uint64_t>::max()
 2504|  1.04M|                                      : (1ull << args_count_lower64) - 1;
 2505|       |
 2506|  1.04M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2506:17): [True: 0, False: 1.04M]
  ------------------
 2507|      0|                return on_error({scan_error::invalid_format_string,
 2508|      0|                                 "Argument list not exhausted"});
 2509|      0|            }
 2510|  1.04M|        }
 2511|       |
 2512|  1.04M|        if (args_count < 64) {
  ------------------
  |  Branch (2512:13): [True: 1.04M, False: 0]
  ------------------
 2513|  1.04M|            return;
 2514|  1.04M|        }
 2515|       |
 2516|      0|        auto last_args_count = args_count - 64;
 2517|      0|        for (auto it = visited_args_upper.begin();
 2518|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2518:14): [True: 0, False: 0]
  ------------------
 2519|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2519:17): [True: 0, False: 0]
  ------------------
 2520|      0|                return on_error({scan_error::invalid_format_string,
 2521|      0|                                 "Argument list not exhausted"});
 2522|      0|            }
 2523|      0|            last_args_count -= 8;
 2524|      0|        }
 2525|       |
 2526|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2527|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2527:13): [True: 0, False: 0]
  ------------------
 2528|      0|            return on_error({scan_error::invalid_format_string,
 2529|      0|                             "Argument list not exhausted"});
 2530|      0|        }
 2531|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2545|  4.16M|    {
 2546|  4.16M|        return error;
 2547|  4.16M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2673|  58.5k|        : format_handler_base{argcount},
 2674|  58.5k|          parse_ctx{source_tag<Source&&>, format},
 2675|  58.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  58.5k|    static_cast<    \
  |  | 1084|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  58.5k|    static_cast<    \
  |  | 1084|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|  58.5k|    {
 2677|  58.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2600|  58.5k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|  58.5k|    static_cast<    \
  |  | 1084|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|  58.5k|    {
 2602|  58.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|  58.5k|{
 2815|  58.5k|    const auto beg = handler.get_ctx().begin();
 2816|  58.5k|    detail::parse_format_string<false>(format, handler);
 2817|  58.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 9.03k, False: 49.5k]
  |  |  ------------------
  ------------------
 2818|  9.03k|        return unexpected(err.error());
 2819|  9.03k|    }
 2820|  49.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|  58.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2798|   384k|    {
 2799|   384k|        return ctx.get();
 2800|   384k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2605|   384k|    {
 2606|   384k|        return ctx;
 2607|   384k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2680|   108k|    {
 2681|   108k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 108k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   108k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2452|  58.5k|{
 2453|  58.5k|    auto arg = ctx.arg(id);
 2454|  58.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 58.5k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|  58.5k|    return arg;
 2458|  58.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2720|  58.5k|    {
 2721|  58.5k|        return parse_ctx.next_arg_id();
 2722|  58.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2760|  58.5k|    {
 2761|  58.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  58.5k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  58.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 58.5k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|  58.5k|        auto specs = detail::format_specs{};
 2774|  58.5k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|  58.5k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|  58.5k|            detail::get_arg_type(arg)};
 2777|       |
 2778|  58.5k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|  58.5k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 58.5k]
  |  Branch (2779:29): [True: 0, False: 58.5k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|  58.5k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.61k, False: 54.9k]
  |  |  ------------------
  ------------------
 2786|  3.61k|            return parse_ctx.begin();
 2787|  3.61k|        }
 2788|  54.9k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|  54.9k|        on_visit_scan_arg(
 2791|  54.9k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|  54.9k|                                           get_ctx().locale()},
 2793|  54.9k|            arg);
 2794|  54.9k|        return parse_ctx.begin();
 2795|  58.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2470|  58.5k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|  58.5k|    {
 2472|  58.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|  54.9k|    {
 2732|  54.9k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 54.9k]
  |  Branch (2732:13): [True: 0, False: 54.9k]
  |  Branch (2732:29): [True: 0, False: 54.9k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|  54.9k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  54.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.41k, False: 49.5k]
  |  |  ------------------
  ------------------
 2739|  5.41k|            on_error(r.error());
 2740|  5.41k|        }
 2741|  49.5k|        else {
 2742|  49.5k|            get_ctx().advance_to(*r);
 2743|  49.5k|        }
 2744|  54.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|   168k|{
 2830|   168k|    const auto argcount = args.size();
 2831|   168k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 76.4k, False: 92.2k]
  |  Branch (2831:60): [True: 76.4k, False: 0]
  ------------------
 2832|  76.4k|        auto arg = args.get(0);
 2833|  76.4k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  76.4k|    static_cast<    \
  |  | 1084|  76.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|  76.4k|    }
 2835|       |
 2836|  92.2k|    auto handler = format_handler<true, CharT>{
 2837|  92.2k|        ranges::subrange<const CharT*>{source.data(),
 2838|  92.2k|                                       source.data() + source.size()},
 2839|  92.2k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  92.2k|    static_cast<    \
  |  | 1084|  92.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  92.2k|    static_cast<    \
  |  | 1084|  92.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|  92.2k|    return vscan_parse_format_string(format, handler);
 2841|   168k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|   114k|{
 2411|   114k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|   114k|    auto reader =
 2417|   114k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|   114k|            ranges::subrange<const CharT*>{source.data(),
 2419|   114k|                                           source.data() + source.size()},
 2420|   114k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   114k|    static_cast<    \
  |  | 1084|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|   114k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.41k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.41k|    }                                                  \
  |  |  |  | 3995|   114k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|   109k|    return ranges::distance(source.data(), it);
 2423|   114k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   133k|{
 2930|   133k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 121k, False: 11.7k]
  |  |  ------------------
  ------------------
 2931|   121k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|   121k|    }
 2937|  11.7k|    else {
 2938|  11.7k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|  11.7k|    }
 2944|   133k|    return result;
 2945|   133k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|  1.16M|{
 2830|  1.16M|    const auto argcount = args.size();
 2831|  1.16M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 569k, False: 598k]
  |  Branch (2831:60): [True: 569k, False: 0]
  ------------------
 2832|   569k|        auto arg = args.get(0);
 2833|   569k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|   569k|    static_cast<    \
  |  | 1084|   569k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|   569k|    }
 2835|       |
 2836|   598k|    auto handler = format_handler<true, CharT>{
 2837|   598k|        ranges::subrange<const CharT*>{source.data(),
 2838|   598k|                                       source.data() + source.size()},
 2839|   598k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   598k|    static_cast<    \
  |  | 1084|   598k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   598k|    static_cast<    \
  |  | 1084|   598k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|   598k|    return vscan_parse_format_string(format, handler);
 2841|  1.16M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|  1.75M|{
 2398|  1.75M|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 898k, False: 854k]
  ------------------
 2399|   898k|        return false;
 2400|   898k|    }
 2401|   854k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 854k, False: 0]
  |  Branch (2401:39): [True: 854k, False: 0]
  ------------------
 2402|  1.75M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|   854k|{
 2411|   854k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 854k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|   854k|    auto reader =
 2417|   854k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|   854k|            ranges::subrange<const CharT*>{source.data(),
 2419|   854k|                                           source.data() + source.size()},
 2420|   854k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   854k|    static_cast<    \
  |  | 1084|   854k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|   854k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   854k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   854k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   854k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10.8k, False: 843k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  10.8k|    }                                                  \
  |  |  |  | 3995|   854k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   854k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|   843k|    return ranges::distance(source.data(), it);
 2423|   854k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2673|   598k|        : format_handler_base{argcount},
 2674|   598k|          parse_ctx{source_tag<Source&&>, format},
 2675|   598k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   598k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   598k|    static_cast<    \
  |  | 1084|   598k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   598k|    static_cast<    \
  |  | 1084|   598k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   598k|    {
 2677|   598k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2624|   598k|        : contiguous_ctx(source, args, loc)
 2625|   598k|    {
 2626|   598k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   598k|{
 2815|   598k|    const auto beg = handler.get_ctx().begin();
 2816|   598k|    detail::parse_format_string<false>(format, handler);
 2817|   598k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 36.1k, False: 562k]
  |  |  ------------------
  ------------------
 2818|  36.1k|        return unexpected(err.error());
 2819|  36.1k|    }
 2820|   562k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   598k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2798|  4.09M|    {
 2799|  4.09M|        return ctx.get();
 2800|  4.09M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2629|  4.09M|    {
 2630|  4.09M|        return contiguous_ctx;
 2631|  4.09M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2680|  1.16M|    {
 2681|  1.16M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 1.16M]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|  1.16M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2452|   598k|{
 2453|   598k|    auto arg = ctx.arg(id);
 2454|   598k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 598k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   598k|    return arg;
 2458|   598k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2720|   598k|    {
 2721|   598k|        return parse_ctx.next_arg_id();
 2722|   598k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2760|   598k|    {
 2761|   598k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   598k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   598k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 598k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   598k|        auto specs = detail::format_specs{};
 2774|   598k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   598k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   598k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   598k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   598k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 598k]
  |  Branch (2779:29): [True: 0, False: 598k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   598k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.4k, False: 584k]
  |  |  ------------------
  ------------------
 2786|  14.4k|            return parse_ctx.begin();
 2787|  14.4k|        }
 2788|   584k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   584k|        on_visit_scan_arg(
 2791|   584k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   584k|                                           get_ctx().locale()},
 2793|   584k|            arg);
 2794|   584k|        return parse_ctx.begin();
 2795|   598k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2470|   598k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   598k|    {
 2472|   598k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2731|   584k|    {
 2732|   584k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 584k]
  |  Branch (2732:13): [True: 0, False: 584k]
  |  Branch (2732:29): [True: 0, False: 584k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   584k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   584k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 21.6k, False: 562k]
  |  |  ------------------
  ------------------
 2739|  21.6k|            on_error(r.error());
 2740|  21.6k|        }
 2741|   562k|        else {
 2742|   562k|            get_ctx().advance_to(*r);
 2743|   562k|        }
 2744|   584k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   584k|{
 2850|   584k|    const auto argcount = args.size();
 2851|   584k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 284k, False: 299k]
  |  Branch (2851:60): [True: 284k, False: 0]
  ------------------
 2852|   284k|        auto arg = args.get(0);
 2853|   284k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|   284k|    static_cast<    \
  |  | 1084|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|   284k|    }
 2855|       |
 2856|   299k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 299k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|   299k|    SCN_UNLIKELY_ATTR
 2864|   299k|    {
 2865|   299k|        auto handler = format_handler<false, CharT>{
 2866|   299k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   299k|    static_cast<    \
  |  | 1084|   299k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   299k|    static_cast<    \
  |  | 1084|   299k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|   299k|        return vscan_parse_format_string(format, handler);
 2868|   299k|    }
 2869|   299k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|   427k|{
 2431|   427k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 427k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|   427k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|   427k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 427k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|   427k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|   427k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   427k|    static_cast<    \
  |  | 1084|   427k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|   427k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   427k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   427k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   427k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.41k, False: 421k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.41k|    }                                                  \
  |  |  |  | 3995|   427k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|   421k|    return it.position();
 2448|   427k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2673|   299k|        : format_handler_base{argcount},
 2674|   299k|          parse_ctx{source_tag<Source&&>, format},
 2675|   299k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   299k|    static_cast<    \
  |  | 1084|   299k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   299k|    static_cast<    \
  |  | 1084|   299k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   299k|    {
 2677|   299k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2600|   299k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|   299k|    static_cast<    \
  |  | 1084|   299k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|   299k|    {
 2602|   299k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   299k|{
 2815|   299k|    const auto beg = handler.get_ctx().begin();
 2816|   299k|    detail::parse_format_string<false>(format, handler);
 2817|   299k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.0k, False: 281k]
  |  |  ------------------
  ------------------
 2818|  18.0k|        return unexpected(err.error());
 2819|  18.0k|    }
 2820|   281k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   299k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2798|  2.04M|    {
 2799|  2.04M|        return ctx.get();
 2800|  2.04M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2605|  2.04M|    {
 2606|  2.04M|        return ctx;
 2607|  2.04M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2680|   580k|    {
 2681|   580k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 580k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   580k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2452|   299k|{
 2453|   299k|    auto arg = ctx.arg(id);
 2454|   299k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 299k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   299k|    return arg;
 2458|   299k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2720|   299k|    {
 2721|   299k|        return parse_ctx.next_arg_id();
 2722|   299k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2760|   299k|    {
 2761|   299k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   299k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   299k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 299k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   299k|        auto specs = detail::format_specs{};
 2774|   299k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   299k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   299k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   299k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   299k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 299k]
  |  Branch (2779:29): [True: 0, False: 299k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   299k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.22k, False: 292k]
  |  |  ------------------
  ------------------
 2786|  7.22k|            return parse_ctx.begin();
 2787|  7.22k|        }
 2788|   292k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   292k|        on_visit_scan_arg(
 2791|   292k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   292k|                                           get_ctx().locale()},
 2793|   292k|            arg);
 2794|   292k|        return parse_ctx.begin();
 2795|   299k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2470|   299k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   299k|    {
 2472|   299k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|   292k|    {
 2732|   292k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 292k]
  |  Branch (2732:13): [True: 0, False: 292k]
  |  Branch (2732:29): [True: 0, False: 292k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   292k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   292k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.8k, False: 281k]
  |  |  ------------------
  ------------------
 2739|  10.8k|            on_error(r.error());
 2740|  10.8k|        }
 2741|   281k|        else {
 2742|   281k|            get_ctx().advance_to(*r);
 2743|   281k|        }
 2744|   292k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   726k|{
 2930|   726k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   726k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 703k, False: 23.4k]
  |  |  ------------------
  ------------------
 2931|   703k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 703k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|   703k|    }
 2937|  23.4k|    else {
 2938|  23.4k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 23.4k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|  23.4k|    }
 2944|   726k|    return result;
 2945|   726k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  38.2k|{
 2876|  38.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  38.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  24.9k|{
 2876|  24.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  24.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|   284k|{
 2876|   284k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   284k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|   142k|{
 2876|   142k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   142k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1486|    903|{
 1487|    903|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1488|       |
 1489|    903|    if constexpr (sizeof(SourceCharT) == 1) {
 1490|       |        if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            std::u32string tmp;
 1492|       |            transcode_to_string_impl_to32(src, tmp);
 1493|       |            return transcode_to_string_impl_32to16<false>(
 1494|       |                std::u32string_view{tmp}, dest);
 1495|       |        }
 1496|    903|        else if constexpr (sizeof(DestCharT) == 4) {
 1497|    903|            return transcode_to_string_impl_to32(src, dest);
 1498|    903|        }
 1499|       |    }
 1500|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1501|       |        if constexpr (sizeof(DestCharT) == 1) {
 1502|       |            std::u32string tmp;
 1503|       |            transcode_to_string_impl_to32(src, tmp);
 1504|       |            return transcode_to_string_impl_32to8<false>(
 1505|       |                std::u32string_view{tmp}, dest);
 1506|       |        }
 1507|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1508|       |            return trasncode_to_string_impl_to32(src, dest);
 1509|       |        }
 1510|       |    }
 1511|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1512|       |        if constexpr (sizeof(DestCharT) == 1) {
 1513|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1514|       |        }
 1515|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1516|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1517|       |        }
 1518|       |    }
 1519|       |
 1520|    903|    SCN_EXPECT(false);
  ------------------
  |  | 1079|    903|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    903|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1521|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1522|    903|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1378|    903|{
 1379|    903|    static_assert(sizeof(DestCharT) == 4);
 1380|       |
 1381|    903|    auto it = src.begin();
 1382|   272k|    while (it != src.end()) {
  ------------------
  |  Branch (1382:12): [True: 271k, False: 903]
  ------------------
 1383|   271k|        auto res = get_next_code_point(
 1384|   271k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1385|   271k|                                                                 src.end()));
 1386|   271k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1014|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.40k, False: 268k]
  |  |  ------------------
  ------------------
 1387|  3.40k|            dest.push_back(DestCharT{0xfffd});
 1388|  3.40k|        }
 1389|   268k|        else {
 1390|   268k|            dest.push_back(static_cast<DestCharT>(res.value));
 1391|   268k|        }
 1392|   271k|        it = detail::make_string_view_iterator(src, res.iterator);
 1393|   271k|    }
 1394|    903|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1302|   767k|{
 1303|   767k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|   767k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   767k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1304|       |
 1305|   767k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1306|   767k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.9k, False: 752k]
  |  |  ------------------
  ------------------
 1307|  14.9k|        return {get_start_for_next_code_point(input),
 1308|  14.9k|                detail::invalid_code_point};
 1309|  14.9k|    }
 1310|   752k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1014|   752k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 729k]
  |  |  ------------------
  ------------------
 1311|  22.8k|        return {input.end(), detail::invalid_code_point};
 1312|  22.8k|    }
 1313|       |
 1314|   729k|    return {input.begin() + len,
 1315|   729k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1316|   752k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1288|  14.9k|{
 1289|  14.9k|    auto it = input.begin();
 1290|  57.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 55.2k, False: 2.07k]
  ------------------
 1291|  55.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 12.8k, False: 42.3k]
  ------------------
 1292|  12.8k|            break;
 1293|  12.8k|        }
 1294|  55.2k|    }
 1295|  14.9k|    return it;
 1296|  14.9k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3108|  16.2k|    {
 3109|  16.2k|        SCN_UNLIKELY_ATTR
 3110|  16.2k|        m_msg = msg;
 3111|  16.2k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3113|  1.01M|    {
 3114|  1.01M|        return m_msg == nullptr;
 3115|  1.01M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.47M|{
  458|  1.47M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.47M|        static_cast<unsigned char>(ch))];
  460|  1.47M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  38.9k|{
  469|  38.9k|    return static_cast<unsigned char>(ch) <= 127;
  470|  38.9k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  14.5k|{
  474|  14.5k|#if WCHAR_MIN < 0
  475|  14.5k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 13.1k, False: 1.33k]
  |  Branch (475:23): [True: 9.37k, False: 3.80k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  14.5k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  537|   709k|{
  538|   709k|    SCN_GCC_PUSH
  539|   709k|    SCN_GCC_IGNORE("-Wsign-conversion")
  540|   709k|    return ((word + ~0ull / 255 * (127 - n)) | word) & ~0ull / 255 * 128;
  541|   709k|    SCN_GCC_POP
  542|   709k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  793|  3.91M|{
  794|  3.91M|    return e != eof_error::good;
  795|  3.91M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  807|  12.6k|{
  808|  12.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  809|  12.6k|    return scan_error{scan_error::end_of_input, "EOF"};
  810|  12.6k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6145|   967k|{
 6146|   967k|    if (specs.width != 0) {
  ------------------
  |  Branch (6146:9): [True: 0, False: 967k]
  ------------------
 6147|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6147:13): [True: 0, False: 0]
  ------------------
 6148|      0|            return detail::unexpected_scan_error(
 6149|      0|                scan_error::length_too_short,
 6150|      0|                "Scanned value too narrow, width did not exceed what "
 6151|      0|                "was specified in the format string");
 6152|      0|        }
 6153|      0|    }
 6154|   967k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6154:9): [True: 0, False: 967k]
  ------------------
 6155|       |        // Ensured by take_width_view
 6156|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6157|      0|                   specs.precision);
 6158|      0|    }
 6159|   967k|    return {};
 6160|   967k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   377k|    {
  304|   377k|        ranges::advance(x, n);
  305|   377k|        return x;
  306|   377k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   377k|    {
  268|   377k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   377k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   377k|    {
  151|   377k|        i += n;
  152|   377k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   925k|    {
  108|   925k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   925k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   925k|    {
   87|   925k|        return s - i;
   88|   925k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.40M|    {
  108|  1.40M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.40M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.40M|    {
   87|  1.40M|        return s - i;
   88|  1.40M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3054|   251k|    {
 3055|   251k|        return m_current;
 3056|   251k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3054|  1.74M|    {
 3055|  1.74M|        return m_current;
 3056|  1.74M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   127k|{
  993|   127k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   127k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   127k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   127k|        auto beg = r.begin();
 1004|   127k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 127k, False: 0]
  ------------------
 1005|   127k|            return false;
 1006|   127k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   127k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  772|  31.2k|    {
  773|  31.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  31.2k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  7.41k|        : m_fptr([](storage fn,
  753|  7.41k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  7.41k|              cvref<T> obj = *get<T>(fn);
  755|  7.41k|              if constexpr (std::is_void_v<R>) {
  756|  7.41k|                  obj(static_cast<decltype(args)>(args)...);
  757|  7.41k|              }
  758|  7.41k|              else {
  759|  7.41k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  7.41k|              }
  761|  7.41k|          }),
  762|  7.41k|          m_storage(std::addressof(f))
  763|  7.41k|    {
  764|  7.41k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  753|  15.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  15.6k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  15.6k|              else {
  759|  15.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  15.6k|              }
  761|  15.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  689|  15.6k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  15.6k|        else if constexpr (std::is_object_v<T>) {
  694|  15.6k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  15.6k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  7.41k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  7.41k|        {
  668|  7.41k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  772|  75.9M|    {
  773|  75.9M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  75.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  75.9M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  2.24M|        : m_fptr([](storage fn,
  753|  2.24M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.24M|              cvref<T> obj = *get<T>(fn);
  755|  2.24M|              if constexpr (std::is_void_v<R>) {
  756|  2.24M|                  obj(static_cast<decltype(args)>(args)...);
  757|  2.24M|              }
  758|  2.24M|              else {
  759|  2.24M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.24M|              }
  761|  2.24M|          }),
  762|  2.24M|          m_storage(std::addressof(f))
  763|  2.24M|    {
  764|  2.24M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  753|  5.55M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  5.55M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  5.55M|              else {
  759|  5.55M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  5.55M|              }
  761|  5.55M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  689|  5.55M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  5.55M|        else if constexpr (std::is_object_v<T>) {
  694|  5.55M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  5.55M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  2.24M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  2.24M|        {
  668|  2.24M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|  53.1k|    {
 6174|  53.1k|        const bool need_skipped_width =
 6175|  53.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 53.1k]
  |  Branch (6175:33): [True: 0, False: 53.1k]
  ------------------
 6176|  53.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|  53.1k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 53.1k]
  ------------------
 6180|  53.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 53.1k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|  53.1k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 53.1k, False: 0]
  |  Branch (6184:56): [True: 50.6k, False: 2.47k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|  50.6k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 50.6k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   100k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 990, False: 49.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    990|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    990|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    990|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    990|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    990|    }                                                  \
  |  |  |  | 3995|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   100k|                            make_eof_scan_error));
 6195|       |
 6196|   100k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 49.6k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|  49.6k|            return result_type{it, 0};
 6204|   100k|        }
 6205|       |
 6206|  2.47k|        return result_type{rng.begin(), 0};
 6207|  53.1k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|  2.47k|{
 2134|  2.47k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  2.47k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|  2.47k|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|  2.47k|    else {
 2105|  2.47k|        auto first = range.begin();
 2106|  5.30k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 5.21k, False: 96]
  ------------------
 2107|  5.21k|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 2.37k, False: 2.83k]
  ------------------
 2108|  2.37k|                return first;
 2109|  2.37k|            }
 2110|  5.21k|        }
 2111|     96|        return first;
 2112|  2.47k|    }
 2113|  2.47k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  49.5k|    {
  108|  49.5k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  49.5k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  49.5k|    {
   94|  49.5k|        iter_difference_t<I> counter{0};
   95|   519k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 469k, False: 49.5k]
  ------------------
   96|   469k|            ++i;
   97|   469k|            ++counter;
   98|   469k|        }
   99|  49.5k|        return counter;
  100|  49.5k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|   199k|{
  961|   199k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.29k, False: 197k]
  |  |  ------------------
  ------------------
  962|  2.29k|        return eof_error::eof;
  963|  2.29k|    }
  964|   197k|    return eof_error::good;
  965|   199k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|  1.42M|{
  955|  1.42M|    return is_range_eof(r.begin(), r.end());
  956|  1.42M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|  1.42M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  1.42M|    {
  948|  1.42M|        return begin == end;
  949|  1.42M|    }
  950|  1.42M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1807|   123k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|       |                  ranges::sized_range<Range>) {
 1811|       |        return string_view_wrapper{SCN_FWD(range)};
 1812|       |    }
 1813|   123k|    else {
 1814|   123k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1085|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1815|   123k|    }
 1816|   123k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1660|   123k|    {
 1661|   123k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1662|   123k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1744|   123k|    {
 1745|   123k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|   123k|                           ranges::common_range<Range>) {
 1762|   123k|            auto beg_seg = range.begin().contiguous_segment();
 1763|   123k|            auto end_seg = range.end().contiguous_segment();
 1764|   123k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.05k, False: 120k]
  |  |  ------------------
  ------------------
 1765|   123k|                             detail::to_address(end_seg.end()))) {
 1766|  3.05k|                auto& str = m_storage.emplace();
 1767|  3.05k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|  3.05k|                                                     range.begin().position()));
 1769|  3.05k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|  3.05k|                m_view = string_view_type{str.data(), str.size()};
 1771|  3.05k|                return;
 1772|  3.05k|            }
 1773|       |
 1774|   120k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|   120k|                                                            end_seg.data());
 1776|   120k|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   123k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1705|   243k|    {
 1706|   243k|        return m_view;
 1707|   243k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1695|   123k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|  48.9k|    {
 6216|  48.9k|        const bool need_skipped_width =
 6217|  48.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 48.9k]
  |  Branch (6217:33): [True: 0, False: 48.9k]
  ------------------
 6218|  48.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|  48.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 48.9k]
  ------------------
 6221|  48.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 48.9k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|  48.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 48.9k, False: 0]
  ------------------
 6230|  48.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 616, False: 48.3k]
  ------------------
 6231|  48.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 616]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|    616|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 616]
  ------------------
 6233|    616|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|  48.9k|        return result_type{rng.begin(), 0};
 6255|  48.9k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  960|   304k|{
  961|   304k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.44k, False: 301k]
  |  |  ------------------
  ------------------
  962|  3.44k|        return eof_error::eof;
  963|  3.44k|    }
  964|   301k|    return eof_error::good;
  965|   304k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  954|   304k|{
  955|   304k|    return is_range_eof(r.begin(), r.end());
  956|   304k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  938|   304k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|   304k|    {
  948|   304k|        return begin == end;
  949|   304k|    }
  950|   304k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|   189k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   189k|                  ranges::sized_range<Range>) {
 1811|   189k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   189k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|   189k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   189k|    {
 1614|   189k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1626|  1.03M|    {
 1627|  1.03M|        return sv;
 1628|  1.03M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|  4.94k|{
 2134|  4.94k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  4.94k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|  4.94k|{
 2101|  4.94k|    if constexpr (ranges::common_range<Range>) {
 2102|  4.94k|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|  4.94k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|   189k|{
 3129|   189k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 189k, False: 0]
  ------------------
 3130|   189k|        auto it = read_while_classic_space(range);
 3131|   189k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   189k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.21k, False: 187k]
  |  |  ------------------
  ------------------
 3133|  2.21k|            return unexpected(e);
 3134|  2.21k|        }
 3135|       |
 3136|   187k|        return it;
 3137|   189k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   189k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|   189k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|   189k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|   189k|        auto buf = make_contiguous_buffer(range);
 2281|   189k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|   189k|        return ranges::next(range.begin(),
 2283|   189k|                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|       |    else {
 2286|       |        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|       |        SCN_UNUSED(it);
 2298|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|       |            return detail::is_cp_space(cp);
 2300|       |        });
 2301|       |    }
 2302|   189k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|   377k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   377k|                  ranges::sized_range<Range>) {
 1811|   377k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   377k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1612|   377k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   377k|    {
 1614|   377k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  12.5k|    {
  304|  12.5k|        ranges::advance(x, n);
  305|  12.5k|        return x;
  306|  12.5k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   247k|    {
  268|   247k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   247k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   247k|    {
  181|   452k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 205k, False: 247k]
  ------------------
  182|   205k|            ++i;
  183|   205k|        }
  184|   247k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1710|   123k|    {
 1711|   123k|        return m_storage.has_value();
 1712|   123k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1715|  1.88k|    {
 1716|  1.88k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|  1.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|  1.88k|        return *m_storage;
 1718|  1.88k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|  54.9k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  54.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  54.9k|            auto rd = make_reader<T, char_type>();
 6336|  54.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  54.9k|    do {                                                            \
  |  | 3985|  54.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.80k, False: 53.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.80k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.80k|        }                                                           \
  |  | 3988|  54.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  53.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 53.1k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  53.1k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  53.1k|                return impl(rd, range, value);
 6341|  53.1k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  54.9k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5935|   229k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|       |                       std::is_same_v<T, std::wstring_view>) {
 5950|       |        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|   229k|                       std::is_same_v<T, std::wstring>) {
 5954|   229k|        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|   229k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5328|   329k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3218|   139k|    {
 3219|   139k|        reader_error_handler eh{};
 3220|   139k|        get_derived().check_specs_impl(specs, eh);
 3221|   139k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.41k, False: 134k]
  |  |  ------------------
  ------------------
 3222|  5.41k|            return detail::unexpected_scan_error(
 3223|  5.41k|                scan_error::invalid_format_string, eh.m_msg);
 3224|  5.41k|        }
 3225|   134k|        return {};
 3226|   139k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3230|   139k|    {
 3231|   139k|        return static_cast<Derived&>(*this);
 3232|   139k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5332|   139k|    {
 5333|   139k|        detail::check_string_type_specs(specs, eh);
 5334|       |
 5335|   139k|        SCN_GCC_COMPAT_PUSH
 5336|   139k|        SCN_GCC_COMPAT_IGNORE("-Wswitch")
 5337|   139k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-default")
 5338|       |
 5339|   139k|        switch (specs.type) {
  ------------------
  |  Branch (5339:17): [True: 0, False: 139k]
  ------------------
 5340|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5340:13): [True: 0, False: 139k]
  ------------------
 5341|      0|                m_type = reader_type::word;
 5342|      0|                break;
 5343|       |
 5344|   127k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5344:13): [True: 127k, False: 12.8k]
  ------------------
 5345|   127k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5345:21): [True: 0, False: 127k]
  ------------------
 5346|   127k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5346:21): [True: 0, False: 127k]
  ------------------
 5347|      0|                    m_type = reader_type::custom_word;
 5348|      0|                }
 5349|   127k|                else {
 5350|   127k|                    m_type = reader_type::word;
 5351|   127k|                }
 5352|   127k|                break;
 5353|      0|            }
 5354|       |
 5355|  5.41k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5355:13): [True: 5.41k, False: 134k]
  ------------------
 5356|  5.41k|                m_type = reader_type::character;
 5357|  5.41k|                break;
 5358|       |
 5359|  7.41k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5359:13): [True: 7.41k, False: 132k]
  ------------------
 5360|  7.41k|                m_type = reader_type::character_set;
 5361|  7.41k|                break;
 5362|       |
 5363|      0|#if !SCN_DISABLE_REGEX
 5364|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5364:13): [True: 0, False: 139k]
  ------------------
 5365|      0|                m_type = reader_type::regex;
 5366|      0|                break;
 5367|       |
 5368|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5368:13): [True: 0, False: 139k]
  ------------------
 5369|      0|                m_type = reader_type::regex_escaped;
 5370|      0|                break;
 5371|   139k|#endif
 5372|   139k|        }
 5373|       |
 5374|   139k|        SCN_GCC_COMPAT_POP
 5375|   139k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6260|  53.1k|    {
 6261|  53.1k|        const bool need_skipped_width =
 6262|  53.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 53.1k]
  |  Branch (6262:33): [True: 0, False: 53.1k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  53.1k|        auto it = rng.begin();
 6266|  53.1k|        std::ptrdiff_t prefix_width = 0;
 6267|  53.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 53.1k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  53.1k|        else {
 6275|  53.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  53.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  53.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  53.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  53.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 990, False: 52.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    990|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    990|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    990|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    990|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    990|    }                                                  \
  |  |  |  | 3995|  53.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  52.1k|            std::tie(it, prefix_width) = prefix_result;
 6277|  52.1k|        }
 6278|  52.1k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  52.1k|        std::ptrdiff_t value_width = 0;
 6282|  52.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 52.1k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  52.1k|        else {
 6298|  52.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.62k, False: 49.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  2.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  2.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  2.62k|    }                                                  \
  |  | 3995|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  49.5k|                                             specs, value, loc));
 6300|       |
 6301|  49.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 49.5k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  49.5k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  49.5k|        std::ptrdiff_t postfix_width = 0;
 6310|  49.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 48.9k, False: 564]
  ------------------
 6311|  48.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  48.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 48.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  48.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  48.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  48.9k|                                 value_width));
 6315|  48.9k|            std::tie(it, postfix_width) = postfix_result;
 6316|  48.9k|        }
 6317|       |
 6318|  49.5k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  49.5k|    do {                                                            \
  |  | 3985|  49.5k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 49.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  49.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  49.5k|            specs, prefix_width, value_width, postfix_width));
 6320|  49.5k|        return it;
 6321|  49.5k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5378|   446k|    {
 5379|   446k|        return m_type == reader_type::word;
 5380|   446k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1263|   312k|{
 1264|   312k|    auto it = src.begin();
 1265|  1.90M|    while (it != src.end()) {
  ------------------
  |  Branch (1265:12): [True: 1.60M, False: 305k]
  ------------------
 1266|  1.60M|        const auto len = static_cast<std::ptrdiff_t>(
 1267|  1.60M|            detail::code_point_length_by_starting_code_unit(*it));
 1268|  1.60M|        SCN_EXPECT(len >= 0);
  ------------------
  |  | 1079|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1269|  1.60M|        if (len == 0) {
  ------------------
  |  Branch (1269:13): [True: 4.70k, False: 1.59M]
  ------------------
 1270|  4.70k|            return false;
 1271|  4.70k|        }
 1272|  1.59M|        if (std::distance(it, src.end()) < len) {
  ------------------
  |  Branch (1272:13): [True: 913, False: 1.59M]
  ------------------
 1273|    913|            return false;
 1274|    913|        }
 1275|  1.59M|        const auto cp = detail::decode_code_point_exhaustive(
 1276|  1.59M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1277|  1.59M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1277:13): [True: 2.18k, False: 1.59M]
  ------------------
 1278|  2.18k|            return false;
 1279|  2.18k|        }
 1280|  1.59M|        it += len;
 1281|  1.59M|    }
 1282|   305k|    return true;
 1283|   312k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3170|   121k|{
 3171|   121k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3172|   121k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3172:13): [True: 1.88k, False: 119k]
  ------------------
 3173|  1.88k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1083|  1.88k|    static_cast<    \
  |  | 1084|  1.88k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3174|  1.88k|        }
 3175|   119k|        else {
 3176|   119k|            dest.assign(source.view());
 3177|   119k|        }
 3178|       |    }
 3179|       |    else {
 3180|       |        return transcode_impl(source.view(), dest);
 3181|       |    }
 3182|       |
 3183|   121k|    return {};
 3184|   121k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5229|  7.41k|        {
 5230|  7.41k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5230:17): [True: 7.41k, False: 0]
  ------------------
 5231|  7.41k|                return {};
 5232|  7.41k|            }
 5233|       |
 5234|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5235|      0|            auto it = detail::to_address(charset_string.begin());
 5236|      0|            auto set = detail::parse_presentation_set(
 5237|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5238|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3984|      0|    do {                                                            \
  |  | 3985|      0|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5239|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5240|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5241|       |
 5242|      0|            std::sort(nonascii.extra_ranges.begin(),
 5243|      0|                      nonascii.extra_ranges.end());
 5244|      0|            return {};
 5245|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5202|  13.9k|        {
 5203|  13.9k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1079|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|  13.9k|            const auto val =
 5205|  13.9k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5206|  13.9k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5207|  13.9k|                    (val % 8)) &
 5208|  13.9k|                   1u;
 5209|  13.9k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5253|  15.6k|        {
 5254|  15.6k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5254:17): [True: 1.72k, False: 13.9k]
  ------------------
 5255|  1.72k|                return false;
 5256|  1.72k|            }
 5257|       |
 5258|  13.9k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5259|  15.6k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5199|  7.41k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5396|  52.1k|    {
 5397|  52.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  52.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|  52.1k|        return read_impl(range, specs, value);
 5399|  52.1k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5416|  52.1k|    {
 5417|  52.1k|        SCN_CLANG_PUSH
 5418|  52.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|  52.1k|        switch (m_type) {
 5421|  49.6k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 49.6k, False: 2.47k]
  ------------------
 5422|  49.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 52.1k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 52.1k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  2.47k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 2.47k, False: 49.6k]
  ------------------
 5432|  2.47k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  2.47k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 52.1k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 52.1k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 52.1k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|  52.1k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|  52.1k|        }
 5453|       |
 5454|  52.1k|        SCN_CLANG_POP
 5455|  52.1k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4950|   123k|    {
 4951|   123k|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|   123k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4884|   123k|{
 4885|   123k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|   123k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|   123k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 2.21k, False: 120k]
  ------------------
 4889|  2.21k|        return detail::unexpected_scan_error(
 4890|  2.21k|            scan_error::invalid_scanned_value,
 4891|  2.21k|            "Invalid encoding in scanned string");
 4892|  2.21k|    }
 4893|       |
 4894|   120k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|   120k|    do {                                                            \
  |  | 3985|   120k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 120k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   120k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|   120k|    return SCN_MOVE(result);
  ------------------
  |  | 1083|   120k|    static_cast<    \
  |  | 1084|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|   120k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2247|   123k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|   123k|    else {
 2257|   123k|        auto it = range.begin();
 2258|       |
 2259|   123k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|   123k|            auto seg = get_contiguous_beginning(range);
 2261|   123k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|   123k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2262:17): [True: 0, False: 123k]
  ------------------
 2263|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|      0|            }
 2265|   123k|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|   123k|        }
 2267|       |
 2268|      0|        return read_until_code_point(
 2269|   123k|            ranges::subrange{it, range.end()},
 2270|   123k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|   123k|    }
 2272|   123k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1054|   247k|{
 1055|   247k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   247k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1056|       |
 1057|       |    if constexpr (ranges::contiguous_range<Range> &&
 1058|       |                  ranges::sized_range<Range>) {
 1059|       |        return r;
 1060|       |    }
 1061|       |    else if constexpr (std::is_same_v<
 1062|       |                           ranges::const_iterator_t<Range>,
 1063|       |                           typename detail::basic_scan_buffer<
 1064|   247k|                               detail::char_t<Range>>::forward_iterator>) {
 1065|       |        if constexpr (ranges::common_range<Range>) {
 1066|       |            auto seg = r.begin().contiguous_segment();
 1067|       |            auto dist =
 1068|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1069|       |            return seg.substr(0, std::min(seg.size(), dist));
 1070|       |        }
 1071|   247k|        else {
 1072|   247k|            return r.begin().contiguous_segment();
 1073|   247k|        }
 1074|       |    }
 1075|       |    else {
 1076|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1077|       |    }
 1078|   247k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|   235k|{
 2220|   235k|    auto it = range.begin();
 2221|  1.22M|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 1.22M, False: 4.06k]
  ------------------
 2222|  1.22M|        const auto val =
 2223|  1.22M|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  1.22M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.20M, False: 16.1k]
  |  |  ------------------
  ------------------
 2225|  1.20M|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  1.20M|                std::basic_string_view<detail::char_t<Range>>{
 2227|  1.20M|                    val.codepoint.data(), val.codepoint.size()});
 2228|  1.20M|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 231k, False: 977k]
  ------------------
 2229|   231k|                return it;
 2230|   231k|            }
 2231|  1.20M|        }
 2232|   994k|        it = val.iterator;
 2233|   994k|    }
 2234|       |
 2235|  4.06k|    return it;
 2236|   235k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|  1.22M|{
 2024|  1.22M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  1.22M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  1.22M|    auto it = range.begin();
 2028|  1.22M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  1.22M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.1k, False: 1.20M]
  |  |  ------------------
  ------------------
 2031|  16.1k|        ++it;
 2032|  16.1k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|  16.1k|        return {it, {}};
 2034|  16.1k|    }
 2035|       |
 2036|  1.20M|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 1.14M, False: 67.0k]
  ------------------
 2037|  1.14M|        ++it;
 2038|  1.14M|        return {it, string_type(1, *range.begin())};
 2039|  1.14M|    }
 2040|       |
 2041|  67.0k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|  67.0k|    return {it, string_type{range.begin(), it}};
 2043|  1.20M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1288|  16.1k|{
 1289|  16.1k|    auto it = input.begin();
 1290|  32.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 31.5k, False: 536]
  ------------------
 1291|  31.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 15.6k, False: 15.9k]
  ------------------
 1292|  15.6k|            break;
 1293|  15.6k|        }
 1294|  31.5k|    }
 1295|  16.1k|    return it;
 1296|  16.1k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  67.0k|    {
  283|  67.0k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  67.0k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  67.0k|    {
  252|  67.0k|        constexpr iter_difference_t<I> zero{0};
  253|  67.0k|        iter_difference_t<I> counter{0};
  254|       |
  255|   246k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 180k, False: 66.5k]
  |  Branch (255:30): [True: 179k, False: 535]
  ------------------
  256|   179k|            ++i;
  257|   179k|            ++counter;
  258|   179k|        }
  259|       |
  260|  67.0k|        return counter;
  261|  67.0k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 2014|  1.22M|    {
 2015|  1.22M|        return !codepoint.empty();
 2016|  1.22M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   123k|        : m_fptr([](storage fn,
  753|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   123k|              cvref<T> obj = *get<T>(fn);
  755|   123k|              if constexpr (std::is_void_v<R>) {
  756|   123k|                  obj(static_cast<decltype(args)>(args)...);
  757|   123k|              }
  758|   123k|              else {
  759|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   123k|              }
  761|   123k|          }),
  762|   123k|          m_storage(std::addressof(f))
  763|   123k|    {
  764|   123k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   667k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   667k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   667k|              else {
  759|   667k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   667k|              }
  761|   667k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   667k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   667k|        else if constexpr (std::is_object_v<T>) {
  694|   667k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   667k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2270|   667k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   123k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   123k|        {
  668|   123k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5174|  2.47k|    {
 5175|  2.47k|        auto it = read_source_impl(range, {specs});
 5176|  2.47k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.80k, False: 664]
  |  |  ------------------
  ------------------
 5177|  1.80k|            return unexpected(it.error());
 5178|  1.80k|        }
 5179|       |
 5180|    664|        return read_string_impl(range, *it, value);
 5181|  2.47k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5277|  2.47k|    {
 5278|  2.47k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|  2.47k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|  2.47k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|  2.47k|    do {                                                            \
  |  | 3985|  2.47k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 2.47k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  2.47k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|  2.47k|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|  2.47k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 0, False: 2.47k]
  ------------------
 5286|      0|            const auto cb = [&](char32_t cp) {
 5287|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|      0|            };
 5289|       |
 5290|      0|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 0, False: 0]
  ------------------
 5291|      0|                auto it = read_until_code_point(range, cb);
 5292|      0|                return check_nonempty(it, range);
 5293|      0|            }
 5294|      0|            auto it = read_while_code_point(range, cb);
 5295|      0|            return check_nonempty(it, range);
 5296|      0|        }
 5297|       |
 5298|  2.47k|        const auto cb = [&](SourceCharT ch) {
 5299|  2.47k|            return cb_wrapper.on_ascii_only(ch);
 5300|  2.47k|        };
 5301|       |
 5302|  2.47k|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 0, False: 2.47k]
  ------------------
 5303|      0|            auto it = read_until_code_unit(range, cb);
 5304|      0|            return check_nonempty(it, range);
 5305|      0|        }
 5306|  2.47k|        auto it = read_while_code_unit(range, cb);
 5307|  2.47k|        return check_nonempty(it, range);
 5308|  2.47k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5313|  2.47k|    {
 5314|  2.47k|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 1.80k, False: 664]
  ------------------
 5315|  1.80k|            return detail::unexpected_scan_error(
 5316|  1.80k|                scan_error::invalid_scanned_value,
 5317|  1.80k|                "No characters matched in [character set]");
 5318|  1.80k|        }
 5319|       |
 5320|    664|        return it;
 5321|  2.47k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   112k|{
 2242|   112k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   112k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  752|  2.47k|        : m_fptr([](storage fn,
  753|  2.47k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.47k|              cvref<T> obj = *get<T>(fn);
  755|  2.47k|              if constexpr (std::is_void_v<R>) {
  756|  2.47k|                  obj(static_cast<decltype(args)>(args)...);
  757|  2.47k|              }
  758|  2.47k|              else {
  759|  2.47k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.47k|              }
  761|  2.47k|          }),
  762|  2.47k|          m_storage(std::addressof(f))
  763|  2.47k|    {
  764|  2.47k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  753|  5.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  5.21k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  5.21k|              else {
  759|  5.21k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  5.21k|              }
  761|  5.21k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  689|  5.21k|    {
  690|  5.21k|        if constexpr (std::is_const_v<T>) {
  691|  5.21k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  5.21k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5298|  5.21k|        const auto cb = [&](SourceCharT ch) {
 5299|  5.21k|            return cb_wrapper.on_ascii_only(ch);
 5300|  5.21k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  671|  2.47k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  2.47k|        {
  673|  2.47k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4884|    664|{
 4885|    664|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    664|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    664|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 0, False: 664]
  ------------------
 4889|      0|        return detail::unexpected_scan_error(
 4890|      0|            scan_error::invalid_scanned_value,
 4891|      0|            "Invalid encoding in scanned string");
 4892|      0|    }
 4893|       |
 4894|    664|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    664|    do {                                                            \
  |  | 3985|    664|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 664]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    664|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    664|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    664|    static_cast<    \
  |  | 1084|    664|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    664|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|  40.0k|    {
 5397|  40.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  40.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|  40.0k|        return read_impl(range, specs, value);
 5399|  40.0k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|  40.0k|    {
 5417|  40.0k|        SCN_CLANG_PUSH
 5418|  40.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|  40.0k|        switch (m_type) {
 5421|  37.5k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 37.5k, False: 2.47k]
  ------------------
 5422|  37.5k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 40.0k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 40.0k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  2.47k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 2.47k, False: 37.5k]
  ------------------
 5432|  2.47k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  2.47k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 40.0k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 40.0k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 40.0k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|  40.0k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|  40.0k|        }
 5453|       |
 5454|  40.0k|        SCN_CLANG_POP
 5455|  40.0k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4950|  93.8k|    {
 4951|  93.8k|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|  93.8k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4884|  93.8k|{
 4885|  93.8k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|  93.8k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|  93.8k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 2.79k, False: 91.0k]
  ------------------
 4889|  2.79k|        return detail::unexpected_scan_error(
 4890|  2.79k|            scan_error::invalid_scanned_value,
 4891|  2.79k|            "Invalid encoding in scanned string");
 4892|  2.79k|    }
 4893|       |
 4894|  91.0k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|  91.0k|    do {                                                            \
  |  | 3985|  91.0k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  91.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 91.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  91.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|  91.0k|    return SCN_MOVE(result);
  ------------------
  |  | 1083|  91.0k|    static_cast<    \
  |  | 1084|  91.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|  91.0k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3190|  91.7k|{
 3191|  91.7k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3192|  91.7k|        dest.assign(source.view());
 3193|       |    }
 3194|       |    else {
 3195|       |        return transcode_impl(source.view(), dest);
 3196|       |    }
 3197|       |
 3198|  91.7k|    return {};
 3199|  91.7k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2247|   187k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|   187k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|   187k|        auto buf = make_contiguous_buffer(range);
 2252|   187k|        auto it = find_classic_space_narrow_fast(buf.view());
 2253|   187k|        return ranges::next(range.begin(),
 2254|   187k|                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|       |    else {
 2257|       |        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|       |        return read_until_code_point(
 2269|       |            ranges::subrange{it, range.end()},
 2270|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|       |    }
 2272|   187k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5174|  2.47k|    {
 5175|  2.47k|        auto it = read_source_impl(range, {specs});
 5176|  2.47k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.80k, False: 664]
  |  |  ------------------
  ------------------
 5177|  1.80k|            return unexpected(it.error());
 5178|  1.80k|        }
 5179|       |
 5180|    664|        return read_string_impl(range, *it, value);
 5181|  2.47k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5277|  4.94k|    {
 5278|  4.94k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|  4.94k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|  4.94k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|  4.94k|    do {                                                            \
  |  | 3985|  4.94k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.94k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  4.94k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|  4.94k|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|  4.94k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 0, False: 4.94k]
  ------------------
 5286|      0|            const auto cb = [&](char32_t cp) {
 5287|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|      0|            };
 5289|       |
 5290|      0|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 0, False: 0]
  ------------------
 5291|      0|                auto it = read_until_code_point(range, cb);
 5292|      0|                return check_nonempty(it, range);
 5293|      0|            }
 5294|      0|            auto it = read_while_code_point(range, cb);
 5295|      0|            return check_nonempty(it, range);
 5296|      0|        }
 5297|       |
 5298|  4.94k|        const auto cb = [&](SourceCharT ch) {
 5299|  4.94k|            return cb_wrapper.on_ascii_only(ch);
 5300|  4.94k|        };
 5301|       |
 5302|  4.94k|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 0, False: 4.94k]
  ------------------
 5303|      0|            auto it = read_until_code_unit(range, cb);
 5304|      0|            return check_nonempty(it, range);
 5305|      0|        }
 5306|  4.94k|        auto it = read_while_code_unit(range, cb);
 5307|  4.94k|        return check_nonempty(it, range);
 5308|  4.94k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5313|  4.94k|    {
 5314|  4.94k|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 3.61k, False: 1.32k]
  ------------------
 5315|  3.61k|            return detail::unexpected_scan_error(
 5316|  3.61k|                scan_error::invalid_scanned_value,
 5317|  3.61k|                "No characters matched in [character set]");
 5318|  3.61k|        }
 5319|       |
 5320|  1.32k|        return it;
 5321|  4.94k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  752|  4.94k|        : m_fptr([](storage fn,
  753|  4.94k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  4.94k|              cvref<T> obj = *get<T>(fn);
  755|  4.94k|              if constexpr (std::is_void_v<R>) {
  756|  4.94k|                  obj(static_cast<decltype(args)>(args)...);
  757|  4.94k|              }
  758|  4.94k|              else {
  759|  4.94k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  4.94k|              }
  761|  4.94k|          }),
  762|  4.94k|          m_storage(std::addressof(f))
  763|  4.94k|    {
  764|  4.94k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|  10.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  10.4k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  10.4k|              else {
  759|  10.4k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  10.4k|              }
  761|  10.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  689|  10.4k|    {
  690|  10.4k|        if constexpr (std::is_const_v<T>) {
  691|  10.4k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  10.4k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5298|  10.4k|        const auto cb = [&](SourceCharT ch) {
 5299|  10.4k|            return cb_wrapper.on_ascii_only(ch);
 5300|  10.4k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|  4.94k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  4.94k|        {
  673|  4.94k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4884|    664|{
 4885|    664|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    664|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    664|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 0, False: 664]
  ------------------
 4889|      0|        return detail::unexpected_scan_error(
 4890|      0|            scan_error::invalid_scanned_value,
 4891|      0|            "Invalid encoding in scanned string");
 4892|      0|    }
 4893|       |
 4894|    664|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    664|    do {                                                            \
  |  | 3985|    664|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 664]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    664|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    664|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    664|    static_cast<    \
  |  | 1084|    664|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    664|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5935|  99.8k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|  99.8k|                       std::is_same_v<T, std::wstring_view>) {
 5950|  99.8k|        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|       |                       std::is_same_v<T, std::wstring>) {
 5954|       |        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|  99.8k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5396|  40.0k|    {
 5397|  40.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  40.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|  40.0k|        return read_impl(range, specs, value);
 5399|  40.0k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5416|  40.0k|    {
 5417|  40.0k|        SCN_CLANG_PUSH
 5418|  40.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|  40.0k|        switch (m_type) {
 5421|  37.5k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 37.5k, False: 2.47k]
  ------------------
 5422|  37.5k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 40.0k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 40.0k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  2.47k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 2.47k, False: 37.5k]
  ------------------
 5432|  2.47k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  2.47k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 40.0k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 40.0k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 40.0k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|  40.0k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|  40.0k|        }
 5453|       |
 5454|  40.0k|        SCN_CLANG_POP
 5455|  40.0k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4957|  93.8k|    {
 4958|  93.8k|        return read_string_view_impl(range, read_until_classic_space(range),
 4959|  93.8k|                                     value);
 4960|  93.8k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4903|  93.8k|{
 4904|  93.8k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|  93.8k|    auto src = [&]() {
 4907|  93.8k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|  93.8k|            return make_contiguous_buffer(
 4909|  93.8k|                ranges::subrange{range.begin().base(), result.base()});
 4910|  93.8k|        }
 4911|  93.8k|        else {
 4912|  93.8k|            return make_contiguous_buffer(
 4913|  93.8k|                ranges::subrange{range.begin(), result});
 4914|  93.8k|        }
 4915|  93.8k|    }();
 4916|  93.8k|    using src_type = decltype(src);
 4917|       |
 4918|  93.8k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|  93.8k|    else {
 4931|  93.8k|        const auto view = src.view();
 4932|  93.8k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|  93.8k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 2.79k, False: 91.0k]
  ------------------
 4935|  2.79k|            return detail::unexpected_scan_error(
 4936|  2.79k|                scan_error::invalid_scanned_value,
 4937|  2.79k|                "Invalid encoding in scanned string_view");
 4938|  2.79k|        }
 4939|       |
 4940|  91.0k|        return SCN_MOVE(result);
  ------------------
  |  | 1083|  91.0k|    static_cast<    \
  |  | 1084|  91.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|  93.8k|    }
 4942|  93.8k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4906|  93.8k|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|  93.8k|        else {
 4912|  93.8k|            return make_contiguous_buffer(
 4913|  93.8k|                ranges::subrange{range.begin(), result});
 4914|  93.8k|        }
 4915|  93.8k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5188|  2.47k|    {
 5189|  2.47k|        auto it = read_source_impl(range, {specs});
 5190|  2.47k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.80k, False: 664]
  |  |  ------------------
  ------------------
 5191|  1.80k|            return unexpected(it.error());
 5192|  1.80k|        }
 5193|       |
 5194|    664|        return read_string_view_impl(range, *it, value);
 5195|  2.47k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4903|    664|{
 4904|    664|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    664|    auto src = [&]() {
 4907|    664|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    664|            return make_contiguous_buffer(
 4909|    664|                ranges::subrange{range.begin().base(), result.base()});
 4910|    664|        }
 4911|    664|        else {
 4912|    664|            return make_contiguous_buffer(
 4913|    664|                ranges::subrange{range.begin(), result});
 4914|    664|        }
 4915|    664|    }();
 4916|    664|    using src_type = decltype(src);
 4917|       |
 4918|    664|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    664|    else {
 4931|    664|        const auto view = src.view();
 4932|    664|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    664|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 0, False: 664]
  ------------------
 4935|      0|            return detail::unexpected_scan_error(
 4936|      0|                scan_error::invalid_scanned_value,
 4937|      0|                "Invalid encoding in scanned string_view");
 4938|      0|        }
 4939|       |
 4940|    664|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    664|    static_cast<    \
  |  | 1084|    664|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    664|    }
 4942|    664|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4906|    664|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|    664|        else {
 4912|    664|            return make_contiguous_buffer(
 4913|    664|                ranges::subrange{range.begin(), result});
 4914|    664|        }
 4915|    664|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   124k|{
 3129|   124k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 124k, False: 0]
  ------------------
 3130|   124k|        auto it = read_while_classic_space(range);
 3131|   124k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   124k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.49k, False: 123k]
  |  |  ------------------
  ------------------
 3133|  1.49k|            return unexpected(e);
 3134|  1.49k|        }
 3135|       |
 3136|   123k|        return it;
 3137|   124k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   124k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   124k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   124k|    else {
 2286|   124k|        auto it = range.begin();
 2287|       |
 2288|   124k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|   124k|            auto seg = get_contiguous_beginning(range);
 2290|   124k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|   124k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2291:17): [True: 12.5k, False: 112k]
  ------------------
 2292|  12.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|  12.5k|            }
 2294|   112k|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|   112k|        }
 2296|       |
 2297|   124k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   124k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   124k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   124k|            return detail::is_cp_space(cp);
 2300|   124k|        });
 2301|   124k|    }
 2302|   124k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   112k|        : m_fptr([](storage fn,
  753|   112k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   112k|              cvref<T> obj = *get<T>(fn);
  755|   112k|              if constexpr (std::is_void_v<R>) {
  756|   112k|                  obj(static_cast<decltype(args)>(args)...);
  757|   112k|              }
  758|   112k|              else {
  759|   112k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   112k|              }
  761|   112k|          }),
  762|   112k|          m_storage(std::addressof(f))
  763|   112k|    {
  764|   112k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   541k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   541k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   541k|              else {
  759|   541k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   541k|              }
  761|   541k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   541k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   541k|        else if constexpr (std::is_object_v<T>) {
  694|   541k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   541k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   541k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   541k|            return detail::is_cp_space(cp);
 2300|   541k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   112k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   112k|        {
  668|   112k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   715k|{
  993|   715k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   715k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   715k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   715k|        auto beg = r.begin();
 1004|   715k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 715k, False: 0]
  ------------------
 1005|   715k|            return false;
 1006|   715k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   715k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  772|  29.0k|    {
  773|  29.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  29.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  29.0k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  11.1k|        : m_fptr([](storage fn,
  753|  11.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  11.1k|              cvref<T> obj = *get<T>(fn);
  755|  11.1k|              if constexpr (std::is_void_v<R>) {
  756|  11.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  11.1k|              }
  758|  11.1k|              else {
  759|  11.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  11.1k|              }
  761|  11.1k|          }),
  762|  11.1k|          m_storage(std::addressof(f))
  763|  11.1k|    {
  764|  11.1k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  753|  14.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  14.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  14.5k|              else {
  759|  14.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  14.5k|              }
  761|  14.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  689|  14.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  14.5k|        else if constexpr (std::is_object_v<T>) {
  694|  14.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  14.5k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  11.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  11.1k|        {
  668|  11.1k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|   288k|    {
 6174|   288k|        const bool need_skipped_width =
 6175|   288k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 288k]
  |  Branch (6175:33): [True: 0, False: 288k]
  ------------------
 6176|   288k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   288k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 288k]
  ------------------
 6180|   288k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 288k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   288k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 288k, False: 0]
  |  Branch (6184:56): [True: 284k, False: 3.72k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   284k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 284k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   568k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   284k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   284k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   284k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 924, False: 283k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    924|    }                                                  \
  |  |  |  | 3995|   284k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   568k|                            make_eof_scan_error));
 6195|       |
 6196|   568k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 283k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   283k|            return result_type{it, 0};
 6204|   568k|        }
 6205|       |
 6206|  3.72k|        return result_type{rng.begin(), 0};
 6207|   288k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|  3.72k|{
 2134|  3.72k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  3.72k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|  3.72k|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|  3.72k|    else {
 2105|  3.72k|        auto first = range.begin();
 2106|  4.90k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 4.84k, False: 60]
  ------------------
 2107|  4.84k|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 3.66k, False: 1.18k]
  ------------------
 2108|  3.66k|                return first;
 2109|  3.66k|            }
 2110|  4.84k|        }
 2111|     60|        return first;
 2112|  3.72k|    }
 2113|  3.72k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   281k|    {
  108|   281k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   281k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   281k|    {
   94|   281k|        iter_difference_t<I> counter{0};
   95|  8.83M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 8.55M, False: 281k]
  ------------------
   96|  8.55M|            ++i;
   97|  8.55M|            ++counter;
   98|  8.55M|        }
   99|   281k|        return counter;
  100|   281k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|  1.13M|{
  961|  1.13M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.31k, False: 1.13M]
  |  |  ------------------
  ------------------
  962|  2.31k|        return eof_error::eof;
  963|  2.31k|    }
  964|  1.13M|    return eof_error::good;
  965|  1.13M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|  24.2M|{
  955|  24.2M|    return is_range_eof(r.begin(), r.end());
  956|  24.2M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|  24.2M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  24.2M|    {
  948|  24.2M|        return begin == end;
  949|  24.2M|    }
  950|  24.2M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1807|   709k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|       |                  ranges::sized_range<Range>) {
 1811|       |        return string_view_wrapper{SCN_FWD(range)};
 1812|       |    }
 1813|   709k|    else {
 1814|   709k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1085|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1815|   709k|    }
 1816|   709k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1660|   709k|    {
 1661|   709k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1662|   709k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1744|   709k|    {
 1745|   709k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|   709k|                           ranges::common_range<Range>) {
 1762|   709k|            auto beg_seg = range.begin().contiguous_segment();
 1763|   709k|            auto end_seg = range.end().contiguous_segment();
 1764|   709k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.53k, False: 706k]
  |  |  ------------------
  ------------------
 1765|   709k|                             detail::to_address(end_seg.end()))) {
 1766|  3.53k|                auto& str = m_storage.emplace();
 1767|  3.53k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|  3.53k|                                                     range.begin().position()));
 1769|  3.53k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|  3.53k|                m_view = string_view_type{str.data(), str.size()};
 1771|  3.53k|                return;
 1772|  3.53k|            }
 1773|       |
 1774|   706k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|   706k|                                                            end_seg.data());
 1776|   706k|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   709k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1705|  1.41M|    {
 1706|  1.41M|        return m_view;
 1707|  1.41M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1695|   709k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|   280k|    {
 6216|   280k|        const bool need_skipped_width =
 6217|   280k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 280k]
  |  Branch (6217:33): [True: 0, False: 280k]
  ------------------
 6218|   280k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   280k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 280k]
  ------------------
 6221|   280k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 280k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   280k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 280k, False: 0]
  ------------------
 6230|   280k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 78, False: 280k]
  ------------------
 6231|   280k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 78]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|     78|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 78]
  ------------------
 6233|     78|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   280k|        return result_type{rng.begin(), 0};
 6255|   280k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 2023|  46.1M|{
 2024|  46.1M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  46.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  46.1M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  46.1M|    auto it = range.begin();
 2028|  46.1M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  46.1M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  46.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 46.1M]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  46.1M|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 46.1M, False: 0]
  ------------------
 2037|  46.1M|        ++it;
 2038|  46.1M|        return {it, string_type(1, *range.begin())};
 2039|  46.1M|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|  46.1M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  954|  48.4M|{
  955|  48.4M|    return is_range_eof(r.begin(), r.end());
  956|  48.4M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  938|  48.4M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  48.4M|    {
  948|  48.4M|        return begin == end;
  949|  48.4M|    }
  950|  48.4M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 2014|  46.1M|    {
 2015|  46.1M|        return !codepoint.empty();
 2016|  46.1M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  960|  2.27M|{
  961|  2.27M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  2.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.62k, False: 2.27M]
  |  |  ------------------
  ------------------
  962|  4.62k|        return eof_error::eof;
  963|  4.62k|    }
  964|  2.27M|    return eof_error::good;
  965|  2.27M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1807|  1.41M|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|  1.41M|                  ranges::sized_range<Range>) {
 1811|  1.41M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|  1.41M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|  1.41M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|  1.41M|    {
 1614|  1.41M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1626|  2.12M|    {
 1627|  2.12M|        return sv;
 1628|  2.12M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|  7.44k|{
 2134|  7.44k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  7.44k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|  7.44k|{
 2101|  7.44k|    if constexpr (ranges::common_range<Range>) {
 2102|  7.44k|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|  7.44k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|  1.42M|{
 3129|  1.42M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 1.42M, False: 0]
  ------------------
 3130|  1.42M|        auto it = read_while_classic_space(range);
 3131|  1.42M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  1.42M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.39k, False: 1.41M]
  |  |  ------------------
  ------------------
 3133|  2.39k|            return unexpected(e);
 3134|  2.39k|        }
 3135|       |
 3136|  1.41M|        return it;
 3137|  1.42M|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|  1.42M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|  1.42M|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|  1.42M|    else {
 2286|  1.42M|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|  1.42M|        SCN_UNUSED(it);
  ------------------
  |  | 1064|  1.42M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|  1.42M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  1.42M|            return detail::is_cp_space(cp);
 2300|  1.42M|        });
 2301|  1.42M|    }
 2302|  1.42M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2241|  1.42M|{
 2242|  1.42M|    return read_until_code_point(range, std::not_fn(pred));
 2243|  1.42M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2219|  2.84M|{
 2220|  2.84M|    auto it = range.begin();
 2221|  46.1M|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 46.1M, False: 12.6k]
  ------------------
 2222|  46.1M|        const auto val =
 2223|  46.1M|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  46.1M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  46.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 46.1M, False: 0]
  |  |  ------------------
  ------------------
 2225|  46.1M|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  46.1M|                std::basic_string_view<detail::char_t<Range>>{
 2227|  46.1M|                    val.codepoint.data(), val.codepoint.size()});
 2228|  46.1M|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 2.82M, False: 43.3M]
  ------------------
 2229|  2.82M|                return it;
 2230|  2.82M|            }
 2231|  46.1M|        }
 2232|  43.3M|        it = val.iterator;
 2233|  43.3M|    }
 2234|       |
 2235|  12.6k|    return it;
 2236|  2.84M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|  1.42M|        : m_fptr([](storage fn,
  753|  1.42M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.42M|              cvref<T> obj = *get<T>(fn);
  755|  1.42M|              if constexpr (std::is_void_v<R>) {
  756|  1.42M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.42M|              }
  758|  1.42M|              else {
  759|  1.42M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.42M|              }
  761|  1.42M|          }),
  762|  1.42M|          m_storage(std::addressof(f))
  763|  1.42M|    {
  764|  1.42M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|  3.34M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  3.34M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  3.34M|              else {
  759|  3.34M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  3.34M|              }
  761|  3.34M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|  3.34M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  3.34M|        else if constexpr (std::is_object_v<T>) {
  694|  3.34M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  3.34M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2298|  3.34M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  3.34M|            return detail::is_cp_space(cp);
 2300|  3.34M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|  1.42M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.42M|        {
  668|  1.42M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1710|   704k|    {
 1711|   704k|        return m_storage.has_value();
 1712|   704k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1715|  1.10k|    {
 1716|  1.10k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|  1.10k|        return *m_storage;
 1718|  1.10k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5328|  2.15M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3218|   876k|    {
 3219|   876k|        reader_error_handler eh{};
 3220|   876k|        get_derived().check_specs_impl(specs, eh);
 3221|   876k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   876k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.8k, False: 865k]
  |  |  ------------------
  ------------------
 3222|  10.8k|            return detail::unexpected_scan_error(
 3223|  10.8k|                scan_error::invalid_format_string, eh.m_msg);
 3224|  10.8k|        }
 3225|   865k|        return {};
 3226|   876k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3230|   876k|    {
 3231|   876k|        return static_cast<Derived&>(*this);
 3232|   876k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5332|   876k|    {
 5333|   876k|        detail::check_string_type_specs(specs, eh);
 5334|       |
 5335|   876k|        SCN_GCC_COMPAT_PUSH
 5336|   876k|        SCN_GCC_COMPAT_IGNORE("-Wswitch")
 5337|   876k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-default")
 5338|       |
 5339|   876k|        switch (specs.type) {
  ------------------
  |  Branch (5339:17): [True: 0, False: 876k]
  ------------------
 5340|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5340:13): [True: 0, False: 876k]
  ------------------
 5341|      0|                m_type = reader_type::word;
 5342|      0|                break;
 5343|       |
 5344|   854k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5344:13): [True: 854k, False: 21.9k]
  ------------------
 5345|   854k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5345:21): [True: 0, False: 854k]
  ------------------
 5346|   854k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5346:21): [True: 0, False: 854k]
  ------------------
 5347|      0|                    m_type = reader_type::custom_word;
 5348|      0|                }
 5349|   854k|                else {
 5350|   854k|                    m_type = reader_type::word;
 5351|   854k|                }
 5352|   854k|                break;
 5353|      0|            }
 5354|       |
 5355|  10.8k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5355:13): [True: 10.8k, False: 865k]
  ------------------
 5356|  10.8k|                m_type = reader_type::character;
 5357|  10.8k|                break;
 5358|       |
 5359|  11.1k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5359:13): [True: 11.1k, False: 865k]
  ------------------
 5360|  11.1k|                m_type = reader_type::character_set;
 5361|  11.1k|                break;
 5362|       |
 5363|      0|#if !SCN_DISABLE_REGEX
 5364|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5364:13): [True: 0, False: 876k]
  ------------------
 5365|      0|                m_type = reader_type::regex;
 5366|      0|                break;
 5367|       |
 5368|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5368:13): [True: 0, False: 876k]
  ------------------
 5369|      0|                m_type = reader_type::regex_escaped;
 5370|      0|                break;
 5371|   876k|#endif
 5372|   876k|        }
 5373|       |
 5374|   876k|        SCN_GCC_COMPAT_POP
 5375|   876k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5378|  2.98M|    {
 5379|  2.98M|        return m_type == reader_type::word;
 5380|  2.98M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1263|  2.12M|{
 1264|  2.12M|    auto it = src.begin();
 1265|  63.4M|    while (it != src.end()) {
  ------------------
  |  Branch (1265:12): [True: 61.3M, False: 2.10M]
  ------------------
 1266|  61.3M|        const auto len = static_cast<std::ptrdiff_t>(
 1267|  61.3M|            detail::code_point_length_by_starting_code_unit(*it));
 1268|  61.3M|        SCN_EXPECT(len >= 0);
  ------------------
  |  | 1079|  61.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  61.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1269|  61.3M|        if (len == 0) {
  ------------------
  |  Branch (1269:13): [True: 0, False: 61.3M]
  ------------------
 1270|      0|            return false;
 1271|      0|        }
 1272|  61.3M|        if (std::distance(it, src.end()) < len) {
  ------------------
  |  Branch (1272:13): [True: 0, False: 61.3M]
  ------------------
 1273|      0|            return false;
 1274|      0|        }
 1275|  61.3M|        const auto cp = detail::decode_code_point_exhaustive(
 1276|  61.3M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1277|  61.3M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1277:13): [True: 20.1k, False: 61.3M]
  ------------------
 1278|  20.1k|            return false;
 1279|  20.1k|        }
 1280|  61.3M|        it += len;
 1281|  61.3M|    }
 1282|  2.10M|    return true;
 1283|  2.12M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5229|  11.1k|        {
 5230|  11.1k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5230:17): [True: 11.1k, False: 0]
  ------------------
 5231|  11.1k|                return {};
 5232|  11.1k|            }
 5233|       |
 5234|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5235|      0|            auto it = detail::to_address(charset_string.begin());
 5236|      0|            auto set = detail::parse_presentation_set(
 5237|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5238|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3984|      0|    do {                                                            \
  |  | 3985|      0|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5239|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5240|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5241|       |
 5242|      0|            std::sort(nonascii.extra_ranges.begin(),
 5243|      0|                      nonascii.extra_ranges.end());
 5244|      0|            return {};
 5245|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5202|  9.37k|        {
 5203|  9.37k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1079|  9.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|  9.37k|            const auto val =
 5205|  9.37k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5206|  9.37k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5207|  9.37k|                    (val % 8)) &
 5208|  9.37k|                   1u;
 5209|  9.37k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5253|  14.5k|        {
 5254|  14.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5254:17): [True: 5.14k, False: 9.37k]
  ------------------
 5255|  5.14k|                return false;
 5256|  5.14k|            }
 5257|       |
 5258|  9.37k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5259|  14.5k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5199|  11.1k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2247|   709k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|   709k|    else {
 2257|   709k|        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|   709k|        return read_until_code_point(
 2269|   709k|            ranges::subrange{it, range.end()},
 2270|   709k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|   709k|    }
 2272|   709k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|  1.42M|{
 2220|  1.42M|    auto it = range.begin();
 2221|  23.0M|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 23.0M, False: 6.33k]
  ------------------
 2222|  23.0M|        const auto val =
 2223|  23.0M|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  23.0M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  23.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 23.0M, False: 0]
  |  |  ------------------
  ------------------
 2225|  23.0M|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  23.0M|                std::basic_string_view<detail::char_t<Range>>{
 2227|  23.0M|                    val.codepoint.data(), val.codepoint.size()});
 2228|  23.0M|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 1.41M, False: 21.6M]
  ------------------
 2229|  1.41M|                return it;
 2230|  1.41M|            }
 2231|  23.0M|        }
 2232|  21.6M|        it = val.iterator;
 2233|  21.6M|    }
 2234|       |
 2235|  6.33k|    return it;
 2236|  1.42M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|  23.0M|{
 2024|  23.0M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  23.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  23.0M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  23.0M|    auto it = range.begin();
 2028|  23.0M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  23.0M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  23.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 23.0M]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  23.0M|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 23.0M, False: 0]
  ------------------
 2037|  23.0M|        ++it;
 2038|  23.0M|        return {it, string_type(1, *range.begin())};
 2039|  23.0M|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|  23.0M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 2014|  23.0M|    {
 2015|  23.0M|        return !codepoint.empty();
 2016|  23.0M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   709k|        : m_fptr([](storage fn,
  753|   709k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   709k|              cvref<T> obj = *get<T>(fn);
  755|   709k|              if constexpr (std::is_void_v<R>) {
  756|   709k|                  obj(static_cast<decltype(args)>(args)...);
  757|   709k|              }
  758|   709k|              else {
  759|   709k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   709k|              }
  761|   709k|          }),
  762|   709k|          m_storage(std::addressof(f))
  763|   709k|    {
  764|   709k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|  21.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  21.4M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  21.4M|              else {
  759|  21.4M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  21.4M|              }
  761|  21.4M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|  21.4M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  21.4M|        else if constexpr (std::is_object_v<T>) {
  694|  21.4M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  21.4M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2270|  21.4M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   709k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   709k|        {
  668|   709k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5277|  3.72k|    {
 5278|  3.72k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|  3.72k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|  3.72k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|  3.72k|    do {                                                            \
  |  | 3985|  3.72k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 3.72k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  3.72k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|  3.72k|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|  3.72k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 0, False: 3.72k]
  ------------------
 5286|      0|            const auto cb = [&](char32_t cp) {
 5287|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|      0|            };
 5289|       |
 5290|      0|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 0, False: 0]
  ------------------
 5291|      0|                auto it = read_until_code_point(range, cb);
 5292|      0|                return check_nonempty(it, range);
 5293|      0|            }
 5294|      0|            auto it = read_while_code_point(range, cb);
 5295|      0|            return check_nonempty(it, range);
 5296|      0|        }
 5297|       |
 5298|  3.72k|        const auto cb = [&](SourceCharT ch) {
 5299|  3.72k|            return cb_wrapper.on_ascii_only(ch);
 5300|  3.72k|        };
 5301|       |
 5302|  3.72k|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 0, False: 3.72k]
  ------------------
 5303|      0|            auto it = read_until_code_unit(range, cb);
 5304|      0|            return check_nonempty(it, range);
 5305|      0|        }
 5306|  3.72k|        auto it = read_while_code_unit(range, cb);
 5307|  3.72k|        return check_nonempty(it, range);
 5308|  3.72k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5313|  3.72k|    {
 5314|  3.72k|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 3.61k, False: 108]
  ------------------
 5315|  3.61k|            return detail::unexpected_scan_error(
 5316|  3.61k|                scan_error::invalid_scanned_value,
 5317|  3.61k|                "No characters matched in [character set]");
 5318|  3.61k|        }
 5319|       |
 5320|    108|        return it;
 5321|  3.72k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   710k|{
 2242|   710k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   710k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  752|  3.72k|        : m_fptr([](storage fn,
  753|  3.72k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  3.72k|              cvref<T> obj = *get<T>(fn);
  755|  3.72k|              if constexpr (std::is_void_v<R>) {
  756|  3.72k|                  obj(static_cast<decltype(args)>(args)...);
  757|  3.72k|              }
  758|  3.72k|              else {
  759|  3.72k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  3.72k|              }
  761|  3.72k|          }),
  762|  3.72k|          m_storage(std::addressof(f))
  763|  3.72k|    {
  764|  3.72k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  753|  4.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  4.84k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  4.84k|              else {
  759|  4.84k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  4.84k|              }
  761|  4.84k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  689|  4.84k|    {
  690|  4.84k|        if constexpr (std::is_const_v<T>) {
  691|  4.84k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  4.84k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5298|  4.84k|        const auto cb = [&](SourceCharT ch) {
 5299|  4.84k|            return cb_wrapper.on_ascii_only(ch);
 5300|  4.84k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  671|  3.72k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  3.72k|        {
  673|  3.72k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2247|  1.41M|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|  1.41M|    else {
 2257|  1.41M|        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|  1.41M|        return read_until_code_point(
 2269|  1.41M|            ranges::subrange{it, range.end()},
 2270|  1.41M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|  1.41M|    }
 2272|  1.41M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|  1.41M|        : m_fptr([](storage fn,
  753|  1.41M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.41M|              cvref<T> obj = *get<T>(fn);
  755|  1.41M|              if constexpr (std::is_void_v<R>) {
  756|  1.41M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.41M|              }
  758|  1.41M|              else {
  759|  1.41M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.41M|              }
  761|  1.41M|          }),
  762|  1.41M|          m_storage(std::addressof(f))
  763|  1.41M|    {
  764|  1.41M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|  42.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  42.8M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  42.8M|              else {
  759|  42.8M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  42.8M|              }
  761|  42.8M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|  42.8M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  42.8M|        else if constexpr (std::is_object_v<T>) {
  694|  42.8M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  42.8M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2270|  42.8M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|  1.41M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.41M|        {
  668|  1.41M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5277|  7.44k|    {
 5278|  7.44k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|  7.44k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|  7.44k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|  7.44k|    do {                                                            \
  |  | 3985|  7.44k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  7.44k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|  7.44k|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|  7.44k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 0, False: 7.44k]
  ------------------
 5286|      0|            const auto cb = [&](char32_t cp) {
 5287|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|      0|            };
 5289|       |
 5290|      0|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 0, False: 0]
  ------------------
 5291|      0|                auto it = read_until_code_point(range, cb);
 5292|      0|                return check_nonempty(it, range);
 5293|      0|            }
 5294|      0|            auto it = read_while_code_point(range, cb);
 5295|      0|            return check_nonempty(it, range);
 5296|      0|        }
 5297|       |
 5298|  7.44k|        const auto cb = [&](SourceCharT ch) {
 5299|  7.44k|            return cb_wrapper.on_ascii_only(ch);
 5300|  7.44k|        };
 5301|       |
 5302|  7.44k|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 0, False: 7.44k]
  ------------------
 5303|      0|            auto it = read_until_code_unit(range, cb);
 5304|      0|            return check_nonempty(it, range);
 5305|      0|        }
 5306|  7.44k|        auto it = read_while_code_unit(range, cb);
 5307|  7.44k|        return check_nonempty(it, range);
 5308|  7.44k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5313|  7.44k|    {
 5314|  7.44k|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 7.22k, False: 216]
  ------------------
 5315|  7.22k|            return detail::unexpected_scan_error(
 5316|  7.22k|                scan_error::invalid_scanned_value,
 5317|  7.22k|                "No characters matched in [character set]");
 5318|  7.22k|        }
 5319|       |
 5320|    216|        return it;
 5321|  7.44k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  752|  7.44k|        : m_fptr([](storage fn,
  753|  7.44k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  7.44k|              cvref<T> obj = *get<T>(fn);
  755|  7.44k|              if constexpr (std::is_void_v<R>) {
  756|  7.44k|                  obj(static_cast<decltype(args)>(args)...);
  757|  7.44k|              }
  758|  7.44k|              else {
  759|  7.44k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  7.44k|              }
  761|  7.44k|          }),
  762|  7.44k|          m_storage(std::addressof(f))
  763|  7.44k|    {
  764|  7.44k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  753|  9.68k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  9.68k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  9.68k|              else {
  759|  9.68k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  9.68k|              }
  761|  9.68k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  689|  9.68k|    {
  690|  9.68k|        if constexpr (std::is_const_v<T>) {
  691|  9.68k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  9.68k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5298|  9.68k|        const auto cb = [&](SourceCharT ch) {
 5299|  9.68k|            return cb_wrapper.on_ascii_only(ch);
 5300|  9.68k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|  7.44k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  7.44k|        {
  673|  7.44k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|   292k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   292k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   292k|            auto rd = make_reader<T, char_type>();
 6336|   292k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   292k|    do {                                                            \
  |  | 3985|   292k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.61k, False: 288k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.61k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.61k|        }                                                           \
  |  | 3988|   292k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   288k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 288k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   288k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   288k|                return impl(rd, range, value);
 6341|   288k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   292k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5935|  1.43M|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|       |                       std::is_same_v<T, std::wstring_view>) {
 5950|       |        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|  1.43M|                       std::is_same_v<T, std::wstring>) {
 5954|  1.43M|        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|  1.43M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6260|   288k|    {
 6261|   288k|        const bool need_skipped_width =
 6262|   288k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 288k]
  |  Branch (6262:33): [True: 0, False: 288k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   288k|        auto it = rng.begin();
 6266|   288k|        std::ptrdiff_t prefix_width = 0;
 6267|   288k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 288k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   288k|        else {
 6275|   288k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 924, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    924|    }                                                  \
  |  |  |  | 3995|   288k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   287k|            std::tie(it, prefix_width) = prefix_result;
 6277|   287k|        }
 6278|   287k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   287k|        std::ptrdiff_t value_width = 0;
 6282|   287k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 287k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   287k|        else {
 6298|   287k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.30k, False: 281k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.30k|    }                                                  \
  |  | 3995|   287k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   281k|                                             specs, value, loc));
 6300|       |
 6301|   281k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 281k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   281k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   281k|        std::ptrdiff_t postfix_width = 0;
 6310|   281k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 280k, False: 772]
  ------------------
 6311|   280k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   280k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   280k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   280k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   280k|                                 value_width));
 6315|   280k|            std::tie(it, postfix_width) = postfix_result;
 6316|   280k|        }
 6317|       |
 6318|   281k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   281k|    do {                                                            \
  |  | 3985|   281k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 281k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   281k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   281k|            specs, prefix_width, value_width, postfix_width));
 6320|   281k|        return it;
 6321|   281k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3170|   703k|{
 3171|   703k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3172|   703k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3172:13): [True: 1.10k, False: 702k]
  ------------------
 3173|  1.10k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1083|  1.10k|    static_cast<    \
  |  | 1084|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3174|  1.10k|        }
 3175|   702k|        else {
 3176|   702k|            dest.assign(source.view());
 3177|   702k|        }
 3178|       |    }
 3179|       |    else {
 3180|       |        return transcode_impl(source.view(), dest);
 3181|       |    }
 3182|       |
 3183|   703k|    return {};
 3184|   703k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5396|   287k|    {
 5397|   287k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   287k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|   287k|        return read_impl(range, specs, value);
 5399|   287k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5416|   287k|    {
 5417|   287k|        SCN_CLANG_PUSH
 5418|   287k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|   287k|        switch (m_type) {
 5421|   283k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 283k, False: 3.72k]
  ------------------
 5422|   283k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 287k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 287k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  3.72k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 3.72k, False: 283k]
  ------------------
 5432|  3.72k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  3.72k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 287k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 287k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 287k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|   287k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|   287k|        }
 5453|       |
 5454|   287k|        SCN_CLANG_POP
 5455|   287k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4950|   709k|    {
 4951|   709k|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|   709k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4884|   709k|{
 4885|   709k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|   709k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|   709k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 6.72k, False: 703k]
  ------------------
 4889|  6.72k|        return detail::unexpected_scan_error(
 4890|  6.72k|            scan_error::invalid_scanned_value,
 4891|  6.72k|            "Invalid encoding in scanned string");
 4892|  6.72k|    }
 4893|       |
 4894|   703k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|   703k|    do {                                                            \
  |  | 3985|   703k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 703k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   703k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|   703k|    return SCN_MOVE(result);
  ------------------
  |  | 1083|   703k|    static_cast<    \
  |  | 1084|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|   703k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5174|  3.72k|    {
 5175|  3.72k|        auto it = read_source_impl(range, {specs});
 5176|  3.72k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.61k, False: 108]
  |  |  ------------------
  ------------------
 5177|  3.61k|            return unexpected(it.error());
 5178|  3.61k|        }
 5179|       |
 5180|    108|        return read_string_impl(range, *it, value);
 5181|  3.72k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4884|    108|{
 4885|    108|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    108|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    108|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 0, False: 108]
  ------------------
 4889|      0|        return detail::unexpected_scan_error(
 4890|      0|            scan_error::invalid_scanned_value,
 4891|      0|            "Invalid encoding in scanned string");
 4892|      0|    }
 4893|       |
 4894|    108|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    108|    do {                                                            \
  |  | 3985|    108|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 108]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    108|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    108|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    108|    static_cast<    \
  |  | 1084|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    108|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|   287k|    {
 5397|   287k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   287k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|   287k|        return read_impl(range, specs, value);
 5399|   287k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|   287k|    {
 5417|   287k|        SCN_CLANG_PUSH
 5418|   287k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|   287k|        switch (m_type) {
 5421|   283k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 283k, False: 3.72k]
  ------------------
 5422|   283k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 287k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 287k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  3.72k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 3.72k, False: 283k]
  ------------------
 5432|  3.72k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  3.72k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 287k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 287k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 287k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|   287k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|   287k|        }
 5453|       |
 5454|   287k|        SCN_CLANG_POP
 5455|   287k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4950|   709k|    {
 4951|   709k|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|   709k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4884|   709k|{
 4885|   709k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|   709k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|   709k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 6.72k, False: 703k]
  ------------------
 4889|  6.72k|        return detail::unexpected_scan_error(
 4890|  6.72k|            scan_error::invalid_scanned_value,
 4891|  6.72k|            "Invalid encoding in scanned string");
 4892|  6.72k|    }
 4893|       |
 4894|   703k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|   703k|    do {                                                            \
  |  | 3985|   703k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 703k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   703k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|   703k|    return SCN_MOVE(result);
  ------------------
  |  | 1083|   703k|    static_cast<    \
  |  | 1084|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|   703k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3190|   703k|{
 3191|   703k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3192|   703k|        dest.assign(source.view());
 3193|       |    }
 3194|       |    else {
 3195|       |        return transcode_impl(source.view(), dest);
 3196|       |    }
 3197|       |
 3198|   703k|    return {};
 3199|   703k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5174|  3.72k|    {
 5175|  3.72k|        auto it = read_source_impl(range, {specs});
 5176|  3.72k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.61k, False: 108]
  |  |  ------------------
  ------------------
 5177|  3.61k|            return unexpected(it.error());
 5178|  3.61k|        }
 5179|       |
 5180|    108|        return read_string_impl(range, *it, value);
 5181|  3.72k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4884|    108|{
 4885|    108|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    108|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    108|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 0, False: 108]
  ------------------
 4889|      0|        return detail::unexpected_scan_error(
 4890|      0|            scan_error::invalid_scanned_value,
 4891|      0|            "Invalid encoding in scanned string");
 4892|      0|    }
 4893|       |
 4894|    108|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    108|    do {                                                            \
  |  | 3985|    108|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 108]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    108|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    108|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    108|    static_cast<    \
  |  | 1084|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    108|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5935|   719k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|   719k|                       std::is_same_v<T, std::wstring_view>) {
 5950|   719k|        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|       |                       std::is_same_v<T, std::wstring>) {
 5954|       |        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|   719k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5396|   287k|    {
 5397|   287k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   287k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|   287k|        return read_impl(range, specs, value);
 5399|   287k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5416|   287k|    {
 5417|   287k|        SCN_CLANG_PUSH
 5418|   287k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|   287k|        switch (m_type) {
 5421|   283k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 283k, False: 3.72k]
  ------------------
 5422|   283k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 287k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 287k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  3.72k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 3.72k, False: 283k]
  ------------------
 5432|  3.72k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  3.72k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 287k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 287k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 287k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|   287k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|   287k|        }
 5453|       |
 5454|   287k|        SCN_CLANG_POP
 5455|   287k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4957|   709k|    {
 4958|   709k|        return read_string_view_impl(range, read_until_classic_space(range),
 4959|   709k|                                     value);
 4960|   709k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4903|   709k|{
 4904|   709k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|   709k|    auto src = [&]() {
 4907|   709k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|   709k|            return make_contiguous_buffer(
 4909|   709k|                ranges::subrange{range.begin().base(), result.base()});
 4910|   709k|        }
 4911|   709k|        else {
 4912|   709k|            return make_contiguous_buffer(
 4913|   709k|                ranges::subrange{range.begin(), result});
 4914|   709k|        }
 4915|   709k|    }();
 4916|   709k|    using src_type = decltype(src);
 4917|       |
 4918|   709k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|   709k|    else {
 4931|   709k|        const auto view = src.view();
 4932|   709k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|   709k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 6.72k, False: 703k]
  ------------------
 4935|  6.72k|            return detail::unexpected_scan_error(
 4936|  6.72k|                scan_error::invalid_scanned_value,
 4937|  6.72k|                "Invalid encoding in scanned string_view");
 4938|  6.72k|        }
 4939|       |
 4940|   703k|        return SCN_MOVE(result);
  ------------------
  |  | 1083|   703k|    static_cast<    \
  |  | 1084|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|   709k|    }
 4942|   709k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4906|   709k|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|   709k|        else {
 4912|   709k|            return make_contiguous_buffer(
 4913|   709k|                ranges::subrange{range.begin(), result});
 4914|   709k|        }
 4915|   709k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5188|  3.72k|    {
 5189|  3.72k|        auto it = read_source_impl(range, {specs});
 5190|  3.72k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.61k, False: 108]
  |  |  ------------------
  ------------------
 5191|  3.61k|            return unexpected(it.error());
 5192|  3.61k|        }
 5193|       |
 5194|    108|        return read_string_view_impl(range, *it, value);
 5195|  3.72k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4903|    108|{
 4904|    108|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    108|    auto src = [&]() {
 4907|    108|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    108|            return make_contiguous_buffer(
 4909|    108|                ranges::subrange{range.begin().base(), result.base()});
 4910|    108|        }
 4911|    108|        else {
 4912|    108|            return make_contiguous_buffer(
 4913|    108|                ranges::subrange{range.begin(), result});
 4914|    108|        }
 4915|    108|    }();
 4916|    108|    using src_type = decltype(src);
 4917|       |
 4918|    108|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    108|    else {
 4931|    108|        const auto view = src.view();
 4932|    108|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    108|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 0, False: 108]
  ------------------
 4935|      0|            return detail::unexpected_scan_error(
 4936|      0|                scan_error::invalid_scanned_value,
 4937|      0|                "Invalid encoding in scanned string_view");
 4938|      0|        }
 4939|       |
 4940|    108|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    108|    static_cast<    \
  |  | 1084|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    108|    }
 4942|    108|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4906|    108|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|    108|        else {
 4912|    108|            return make_contiguous_buffer(
 4913|    108|                ranges::subrange{range.begin(), result});
 4914|    108|        }
 4915|    108|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   710k|{
 3129|   710k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 710k, False: 0]
  ------------------
 3130|   710k|        auto it = read_while_classic_space(range);
 3131|   710k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   710k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.19k, False: 709k]
  |  |  ------------------
  ------------------
 3133|  1.19k|            return unexpected(e);
 3134|  1.19k|        }
 3135|       |
 3136|   709k|        return it;
 3137|   710k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   710k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   710k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   710k|    else {
 2286|   710k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|   710k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   710k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   710k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   710k|            return detail::is_cp_space(cp);
 2300|   710k|        });
 2301|   710k|    }
 2302|   710k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   710k|        : m_fptr([](storage fn,
  753|   710k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   710k|              cvref<T> obj = *get<T>(fn);
  755|   710k|              if constexpr (std::is_void_v<R>) {
  756|   710k|                  obj(static_cast<decltype(args)>(args)...);
  757|   710k|              }
  758|   710k|              else {
  759|   710k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   710k|              }
  761|   710k|          }),
  762|   710k|          m_storage(std::addressof(f))
  763|   710k|    {
  764|   710k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|  1.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.67M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.67M|              else {
  759|  1.67M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.67M|              }
  761|  1.67M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|  1.67M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.67M|        else if constexpr (std::is_object_v<T>) {
  694|  1.67M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.67M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|  1.67M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  1.67M|            return detail::is_cp_space(cp);
 2300|  1.67M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   710k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   710k|        {
  668|   710k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|   114k|{
 5922|   114k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.23k, False: 113k]
  |  |  ------------------
  ------------------
 5923|  1.23k|        return unexpected(e);
 5924|  1.23k|    }
 5925|       |
 5926|   113k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 113k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   113k|    return skip_classic_whitespace(range);
 5931|   113k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|  57.3k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  57.3k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  57.3k|            auto rd = make_reader<T, char_type>();
 6015|  57.3k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  57.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6001|  57.3k|    {
 6002|  57.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  57.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  57.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  57.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.03k, False: 56.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.03k|    }                                                  \
  |  |  |  | 3995|  57.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  57.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  56.3k|                        .transform_error(make_eof_scan_error));
 6004|  56.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  57.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5385|  56.3k|    {
 5386|  56.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  56.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|  56.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|  56.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|  57.3k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  57.3k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  57.3k|            auto rd = make_reader<T, char_type>();
 6015|  57.3k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  57.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6001|  57.3k|    {
 6002|  57.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  57.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  57.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  57.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.03k, False: 56.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.03k|    }                                                  \
  |  |  |  | 3995|  57.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  57.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  56.3k|                        .transform_error(make_eof_scan_error));
 6004|  56.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  57.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5385|  56.3k|    {
 5386|  56.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  56.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|  56.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|  56.3k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|  74.7k|{
 5922|  74.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 801, False: 73.9k]
  |  |  ------------------
  ------------------
 5923|    801|        return unexpected(e);
 5924|    801|    }
 5925|       |
 5926|  73.9k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 73.9k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|  73.9k|    return skip_classic_whitespace(range);
 5931|  73.9k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  74.7k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  74.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  74.7k|            auto rd = make_reader<T, char_type>();
 6019|  74.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 74.7k, False: 0]
  ------------------
 6020|  74.7k|                return impl(rd, range, value);
 6021|  74.7k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  74.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6001|  74.7k|    {
 6002|  74.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  74.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  74.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  74.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.30k, False: 73.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.30k|    }                                                  \
  |  |  |  | 3995|  74.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  73.4k|                        .transform_error(make_eof_scan_error));
 6004|  73.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  74.7k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5385|  73.4k|    {
 5386|  73.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  73.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|  73.4k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|  73.4k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3047|  92.2k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|  92.2k|    static_cast<    \
  |  | 1084|  92.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|  92.2k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|  92.2k|          m_current(m_range.begin())
 3050|  92.2k|    {
 3051|  92.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3059|   159k|    {
 3060|   159k|        return m_range.end();
 3061|   159k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3074|  74.1k|    {
 3075|  74.1k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|  74.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  74.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|  74.1k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|  74.1k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 74.1k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|  74.1k|        }
 3081|  74.1k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|  74.1k|    static_cast<    \
  |  | 1084|  74.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|  74.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3064|  85.0k|    {
 3065|  85.0k|        return ranges::subrange{begin(), end()};
 3066|  85.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|  81.4k|    {
 6174|  81.4k|        const bool need_skipped_width =
 6175|  81.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 81.4k]
  |  Branch (6175:33): [True: 0, False: 81.4k]
  ------------------
 6176|  81.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|  81.4k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 81.4k]
  ------------------
 6180|  81.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 81.4k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|  81.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 81.4k, False: 0]
  |  Branch (6184:56): [True: 76.4k, False: 4.94k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|  76.4k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 76.4k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   151k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|  76.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  76.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  76.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.37k, False: 75.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.37k|    }                                                  \
  |  |  |  | 3995|  76.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  76.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   151k|                            make_eof_scan_error));
 6195|       |
 6196|   151k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 75.1k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|  75.1k|            return result_type{it, 0};
 6204|   151k|        }
 6205|       |
 6206|  4.94k|        return result_type{rng.begin(), 0};
 6207|  81.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|  73.2k|    {
 6216|  73.2k|        const bool need_skipped_width =
 6217|  73.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 73.2k]
  |  Branch (6217:33): [True: 0, False: 73.2k]
  ------------------
 6218|  73.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|  73.2k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 73.2k]
  ------------------
 6221|  73.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 73.2k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|  73.2k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 73.2k, False: 0]
  ------------------
 6230|  73.2k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 1.23k, False: 72.0k]
  ------------------
 6231|  73.2k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 1.23k]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|  1.23k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 1.23k]
  ------------------
 6233|  1.23k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|  73.2k|        return result_type{rng.begin(), 0};
 6255|  73.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  42.5k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  42.5k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  42.5k|            auto rd = make_reader<T, char_type>();
 6331|  42.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  42.5k|    do {                                                            \
  |  | 3985|  42.5k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.80k, False: 40.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.80k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.80k|        }                                                           \
  |  | 3988|  42.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  40.7k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  42.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6260|  40.7k|    {
 6261|  40.7k|        const bool need_skipped_width =
 6262|  40.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 40.7k]
  |  Branch (6262:33): [True: 0, False: 40.7k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  40.7k|        auto it = rng.begin();
 6266|  40.7k|        std::ptrdiff_t prefix_width = 0;
 6267|  40.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 40.7k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  40.7k|        else {
 6275|  40.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  40.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  40.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  40.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 688, False: 40.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    688|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    688|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    688|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    688|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    688|    }                                                  \
  |  |  |  | 3995|  40.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  40.0k|            std::tie(it, prefix_width) = prefix_result;
 6277|  40.0k|        }
 6278|  40.0k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  40.0k|        std::ptrdiff_t value_width = 0;
 6282|  40.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 40.0k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  40.0k|        else {
 6298|  40.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  40.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  40.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.92k, False: 37.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  2.92k|    }                                                  \
  |  | 3995|  40.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  37.0k|                                             specs, value, loc));
 6300|       |
 6301|  37.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 37.0k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  37.0k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  37.0k|        std::ptrdiff_t postfix_width = 0;
 6310|  37.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 36.6k, False: 458]
  ------------------
 6311|  36.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  36.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  36.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  36.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 36.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  36.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  36.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  36.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  36.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  36.6k|                                 value_width));
 6315|  36.6k|            std::tie(it, postfix_width) = postfix_result;
 6316|  36.6k|        }
 6317|       |
 6318|  37.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  37.0k|    do {                                                            \
  |  | 3985|  37.0k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 37.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  37.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  37.0k|            specs, prefix_width, value_width, postfix_width));
 6320|  37.0k|        return it;
 6321|  37.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  42.5k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  42.5k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  42.5k|            auto rd = make_reader<T, char_type>();
 6331|  42.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  42.5k|    do {                                                            \
  |  | 3985|  42.5k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.80k, False: 40.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.80k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.80k|        }                                                           \
  |  | 3988|  42.5k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  40.7k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  42.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6260|  40.7k|    {
 6261|  40.7k|        const bool need_skipped_width =
 6262|  40.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 40.7k]
  |  Branch (6262:33): [True: 0, False: 40.7k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  40.7k|        auto it = rng.begin();
 6266|  40.7k|        std::ptrdiff_t prefix_width = 0;
 6267|  40.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 40.7k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  40.7k|        else {
 6275|  40.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  40.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  40.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  40.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 688, False: 40.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    688|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    688|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    688|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    688|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    688|    }                                                  \
  |  |  |  | 3995|  40.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  40.0k|            std::tie(it, prefix_width) = prefix_result;
 6277|  40.0k|        }
 6278|  40.0k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  40.0k|        std::ptrdiff_t value_width = 0;
 6282|  40.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 40.0k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  40.0k|        else {
 6298|  40.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  40.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  40.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.92k, False: 37.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  2.92k|    }                                                  \
  |  | 3995|  40.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  37.0k|                                             specs, value, loc));
 6300|       |
 6301|  37.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 37.0k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  37.0k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  37.0k|        std::ptrdiff_t postfix_width = 0;
 6310|  37.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 36.6k, False: 458]
  ------------------
 6311|  36.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  36.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  36.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  36.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 36.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  36.6k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  36.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  36.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  36.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  36.6k|                                 value_width));
 6315|  36.6k|            std::tie(it, postfix_width) = postfix_result;
 6316|  36.6k|        }
 6317|       |
 6318|  37.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  37.0k|    do {                                                            \
  |  | 3985|  37.0k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 37.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  37.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  37.0k|            specs, prefix_width, value_width, postfix_width));
 6320|  37.0k|        return it;
 6321|  37.0k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|   854k|{
 5922|   854k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.22k, False: 852k]
  |  |  ------------------
  ------------------
 5923|  2.22k|        return unexpected(e);
 5924|  2.22k|    }
 5925|       |
 5926|   852k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 852k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   852k|    return skip_classic_whitespace(range);
 5931|   852k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|   427k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|   427k|                          basic_contiguous_scan_context<char_type>>) {
 6014|   427k|            auto rd = make_reader<T, char_type>();
 6015|   427k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|   427k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6001|   427k|    {
 6002|   427k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|   427k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   427k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   427k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.38k, False: 425k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.38k|    }                                                  \
  |  |  |  | 3995|   427k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|   425k|                        .transform_error(make_eof_scan_error));
 6004|   425k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|   427k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5385|   425k|    {
 5386|   425k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   425k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|   425k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|   425k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|   427k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|   427k|                          basic_contiguous_scan_context<char_type>>) {
 6014|   427k|            auto rd = make_reader<T, char_type>();
 6015|   427k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|   427k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6001|   427k|    {
 6002|   427k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|   427k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   427k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   427k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.38k, False: 425k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.38k|    }                                                  \
  |  |  |  | 3995|   427k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|   425k|                        .transform_error(make_eof_scan_error));
 6004|   425k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|   427k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5385|   425k|    {
 5386|   425k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   425k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|   425k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|   425k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3047|   598k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|   598k|    static_cast<    \
  |  | 1084|   598k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|   598k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|   598k|          m_current(m_range.begin())
 3050|   598k|    {
 3051|   598k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3059|  1.14M|    {
 3060|  1.14M|        return m_range.end();
 3061|  1.14M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3074|   562k|    {
 3075|   562k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|   562k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   562k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|   562k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|   562k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 562k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|   562k|        }
 3081|   562k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   562k|    static_cast<    \
  |  | 1084|   562k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|   562k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3064|   584k|    {
 3065|   584k|        return ranges::subrange{begin(), end()};
 3066|   584k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|   577k|    {
 6174|   577k|        const bool need_skipped_width =
 6175|   577k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 577k]
  |  Branch (6175:33): [True: 0, False: 577k]
  ------------------
 6176|   577k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   577k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 577k]
  ------------------
 6180|   577k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 577k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   577k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 577k, False: 0]
  |  Branch (6184:56): [True: 569k, False: 7.44k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   569k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 569k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|  1.13M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   569k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   569k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   569k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.84k, False: 567k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.84k|    }                                                  \
  |  |  |  | 3995|   569k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|  1.13M|                            make_eof_scan_error));
 6195|       |
 6196|  1.13M|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 567k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   567k|            return result_type{it, 0};
 6204|  1.13M|        }
 6205|       |
 6206|  7.44k|        return result_type{rng.begin(), 0};
 6207|   577k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|   561k|    {
 6216|   561k|        const bool need_skipped_width =
 6217|   561k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 561k]
  |  Branch (6217:33): [True: 0, False: 561k]
  ------------------
 6218|   561k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   561k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 561k]
  ------------------
 6221|   561k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 561k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   561k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 561k, False: 0]
  ------------------
 6230|   561k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 156, False: 560k]
  ------------------
 6231|   561k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 156]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|    156|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 156]
  ------------------
 6233|    156|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   561k|        return result_type{rng.begin(), 0};
 6255|   561k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|   292k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   292k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   292k|            auto rd = make_reader<T, char_type>();
 6331|   292k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   292k|    do {                                                            \
  |  | 3985|   292k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.61k, False: 288k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.61k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.61k|        }                                                           \
  |  | 3988|   292k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   288k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   292k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6260|   288k|    {
 6261|   288k|        const bool need_skipped_width =
 6262|   288k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 288k]
  |  Branch (6262:33): [True: 0, False: 288k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   288k|        auto it = rng.begin();
 6266|   288k|        std::ptrdiff_t prefix_width = 0;
 6267|   288k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 288k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   288k|        else {
 6275|   288k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 924, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    924|    }                                                  \
  |  |  |  | 3995|   288k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   287k|            std::tie(it, prefix_width) = prefix_result;
 6277|   287k|        }
 6278|   287k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   287k|        std::ptrdiff_t value_width = 0;
 6282|   287k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 287k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   287k|        else {
 6298|   287k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.30k, False: 281k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.30k|    }                                                  \
  |  | 3995|   287k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   281k|                                             specs, value, loc));
 6300|       |
 6301|   281k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 281k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   281k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   281k|        std::ptrdiff_t postfix_width = 0;
 6310|   281k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 280k, False: 772]
  ------------------
 6311|   280k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   280k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   280k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   280k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   280k|                                 value_width));
 6315|   280k|            std::tie(it, postfix_width) = postfix_result;
 6316|   280k|        }
 6317|       |
 6318|   281k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   281k|    do {                                                            \
  |  | 3985|   281k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 281k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   281k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   281k|            specs, prefix_width, value_width, postfix_width));
 6320|   281k|        return it;
 6321|   281k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|   292k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   292k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   292k|            auto rd = make_reader<T, char_type>();
 6331|   292k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   292k|    do {                                                            \
  |  | 3985|   292k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.61k, False: 288k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.61k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.61k|        }                                                           \
  |  | 3988|   292k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   288k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   292k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6260|   288k|    {
 6261|   288k|        const bool need_skipped_width =
 6262|   288k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 288k]
  |  Branch (6262:33): [True: 0, False: 288k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   288k|        auto it = rng.begin();
 6266|   288k|        std::ptrdiff_t prefix_width = 0;
 6267|   288k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 288k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   288k|        else {
 6275|   288k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 924, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    924|    }                                                  \
  |  |  |  | 3995|   288k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   287k|            std::tie(it, prefix_width) = prefix_result;
 6277|   287k|        }
 6278|   287k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   287k|        std::ptrdiff_t value_width = 0;
 6282|   287k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 287k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   287k|        else {
 6298|   287k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.30k, False: 281k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.30k|    }                                                  \
  |  | 3995|   287k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   281k|                                             specs, value, loc));
 6300|       |
 6301|   281k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 281k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   281k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   281k|        std::ptrdiff_t postfix_width = 0;
 6310|   281k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 280k, False: 772]
  ------------------
 6311|   280k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   280k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   280k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   280k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   280k|                                 value_width));
 6315|   280k|            std::tie(it, postfix_width) = postfix_result;
 6316|   280k|        }
 6317|       |
 6318|   281k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   281k|    do {                                                            \
  |  | 3985|   281k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 281k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   281k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   281k|            specs, prefix_width, value_width, postfix_width));
 6320|   281k|        return it;
 6321|   281k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|   427k|{
 5922|   427k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.11k, False: 426k]
  |  |  ------------------
  ------------------
 5923|  1.11k|        return unexpected(e);
 5924|  1.11k|    }
 5925|       |
 5926|   426k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 426k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   426k|    return skip_classic_whitespace(range);
 5931|   426k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|   427k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|   427k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|   427k|            auto rd = make_reader<T, char_type>();
 6019|   427k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 427k, False: 0]
  ------------------
 6020|   427k|                return impl(rd, range, value);
 6021|   427k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|   427k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6001|   427k|    {
 6002|   427k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|   427k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   427k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   427k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.38k, False: 425k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.38k|    }                                                  \
  |  |  |  | 3995|   427k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|   425k|                        .transform_error(make_eof_scan_error));
 6004|   425k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|   427k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5385|   425k|    {
 5386|   425k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   425k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|   425k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|   425k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    903|{
   53|    903|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1079|    903|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    903|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    903|    string_buffer.resize(size);
   57|    903|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    903|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    903|    const auto wsv_reinterpret_size =
   62|    903|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 160, False: 743]
  ------------------
   63|    903|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    903|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    903|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    903|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    903|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    903|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    903|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    903|{
  123|    903|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    903|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    903|    buf.resize(sizeof...(Args));
  126|    903|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    903|    return buf;
  128|    903|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    903|{
  109|    903|    if constexpr (std::is_same_v<CharT, char>) {
  110|    903|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    903|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    903|{
  186|    903|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    903|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    903|                                   format_strings);
  189|    903|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|    903|{
  134|       |    // Regular scan
  135|  5.41k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.41k, False: 903]
  ------------------
  136|  5.41k|        auto it = scn::ranges::begin(source);
  137|  42.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  42.1k|            auto result = scn::scan<T>(
  140|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  42.1k|                scn::runtime_format(f));
  142|  42.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.41k, False: 36.7k]
  ------------------
  143|  5.41k|                break;
  144|  5.41k|            }
  145|  36.7k|            it = result->begin();
  146|  36.7k|        }
  147|  5.41k|    }
  148|       |
  149|       |    // scan localized
  150|  5.41k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.41k, False: 903]
  ------------------
  151|  5.41k|        auto it = scn::ranges::begin(source);
  152|  42.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  42.1k|            auto result = scn::scan<T>(
  155|  42.1k|                global_locale,
  156|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  42.1k|                scn::runtime_format(f));
  158|  42.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.41k, False: 36.7k]
  ------------------
  159|  5.41k|                break;
  160|  5.41k|            }
  161|  36.7k|            it = result->begin();
  162|  36.7k|        }
  163|  5.41k|    }
  164|       |
  165|       |    // scan_value
  166|    903|    {
  167|    903|        auto it = scn::ranges::begin(source);
  168|  19.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.1k|            auto result = scn::scan_value<T>(
  171|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 903, False: 18.2k]
  ------------------
  173|    903|                break;
  174|    903|            }
  175|  18.2k|            it = result->begin();
  176|  18.2k|        }
  177|    903|    }
  178|    903|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    903|{
  134|       |    // Regular scan
  135|  5.41k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.41k, False: 903]
  ------------------
  136|  5.41k|        auto it = scn::ranges::begin(source);
  137|  42.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  42.1k|            auto result = scn::scan<T>(
  140|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  42.1k|                scn::runtime_format(f));
  142|  42.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.41k, False: 36.7k]
  ------------------
  143|  5.41k|                break;
  144|  5.41k|            }
  145|  36.7k|            it = result->begin();
  146|  36.7k|        }
  147|  5.41k|    }
  148|       |
  149|       |    // scan localized
  150|  5.41k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.41k, False: 903]
  ------------------
  151|  5.41k|        auto it = scn::ranges::begin(source);
  152|  42.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  42.1k|            auto result = scn::scan<T>(
  155|  42.1k|                global_locale,
  156|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  42.1k|                scn::runtime_format(f));
  158|  42.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.41k, False: 36.7k]
  ------------------
  159|  5.41k|                break;
  160|  5.41k|            }
  161|  36.7k|            it = result->begin();
  162|  36.7k|        }
  163|  5.41k|    }
  164|       |
  165|       |    // scan_value
  166|    903|    {
  167|    903|        auto it = scn::ranges::begin(source);
  168|  19.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.1k|            auto result = scn::scan_value<T>(
  171|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 903, False: 18.2k]
  ------------------
  173|    903|                break;
  174|    903|            }
  175|  18.2k|            it = result->begin();
  176|  18.2k|        }
  177|    903|    }
  178|    903|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|    903|{
  134|       |    // Regular scan
  135|  5.41k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.41k, False: 903]
  ------------------
  136|  5.41k|        auto it = scn::ranges::begin(source);
  137|  54.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  54.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  54.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  54.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  54.1k|            auto result = scn::scan<T>(
  140|  54.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  54.1k|                scn::runtime_format(f));
  142|  54.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.41k, False: 48.7k]
  ------------------
  143|  5.41k|                break;
  144|  5.41k|            }
  145|  48.7k|            it = result->begin();
  146|  48.7k|        }
  147|  5.41k|    }
  148|       |
  149|       |    // scan localized
  150|  5.41k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.41k, False: 903]
  ------------------
  151|  5.41k|        auto it = scn::ranges::begin(source);
  152|  54.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  54.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  54.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  54.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  54.1k|            auto result = scn::scan<T>(
  155|  54.1k|                global_locale,
  156|  54.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  54.1k|                scn::runtime_format(f));
  158|  54.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.41k, False: 48.7k]
  ------------------
  159|  5.41k|                break;
  160|  5.41k|            }
  161|  48.7k|            it = result->begin();
  162|  48.7k|        }
  163|  5.41k|    }
  164|       |
  165|       |    // scan_value
  166|    903|    {
  167|    903|        auto it = scn::ranges::begin(source);
  168|  24.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  24.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  24.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  24.9k|            auto result = scn::scan_value<T>(
  171|  24.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  24.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 903, False: 24.0k]
  ------------------
  173|    903|                break;
  174|    903|            }
  175|  24.0k|            it = result->begin();
  176|  24.0k|        }
  177|    903|    }
  178|    903|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    903|{
   91|    903|    using char_type = ranges::range_value_t<Source>;
   92|    903|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    903|    deque.clear();
   94|    903|    std::copy(ranges::begin(source), ranges::end(source),
   95|    903|              std::back_inserter(deque));
   96|    903|    return deque;
   97|    903|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    903|{
   80|    903|    if constexpr (std::is_same_v<CharT, char>) {
   81|    903|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    903|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    903|{
  123|    903|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    903|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    903|    buf.resize(sizeof...(Args));
  126|    903|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    903|    return buf;
  128|    903|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    903|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    903|    else {
  113|    903|        return wformat_string_view_buffer;
  114|    903|    }
  115|    903|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.80k|{
  186|  1.80k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.80k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.80k|                                   format_strings);
  189|  1.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.80k|{
  134|       |    // Regular scan
  135|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.8k, False: 1.80k]
  ------------------
  136|  10.8k|        auto it = scn::ranges::begin(source);
  137|   292k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   292k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   292k|            auto result = scn::scan<T>(
  140|   292k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   292k|                scn::runtime_format(f));
  142|   292k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.8k, False: 281k]
  ------------------
  143|  10.8k|                break;
  144|  10.8k|            }
  145|   281k|            it = result->begin();
  146|   281k|        }
  147|  10.8k|    }
  148|       |
  149|       |    // scan localized
  150|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.8k, False: 1.80k]
  ------------------
  151|  10.8k|        auto it = scn::ranges::begin(source);
  152|   292k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   292k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   292k|            auto result = scn::scan<T>(
  155|   292k|                global_locale,
  156|   292k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   292k|                scn::runtime_format(f));
  158|   292k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.8k, False: 281k]
  ------------------
  159|  10.8k|                break;
  160|  10.8k|            }
  161|   281k|            it = result->begin();
  162|   281k|        }
  163|  10.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.80k|    {
  167|  1.80k|        auto it = scn::ranges::begin(source);
  168|   142k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   142k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   142k|            auto result = scn::scan_value<T>(
  171|   142k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   142k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.80k, False: 140k]
  ------------------
  173|  1.80k|                break;
  174|  1.80k|            }
  175|   140k|            it = result->begin();
  176|   140k|        }
  177|  1.80k|    }
  178|  1.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.80k|{
  134|       |    // Regular scan
  135|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.8k, False: 1.80k]
  ------------------
  136|  10.8k|        auto it = scn::ranges::begin(source);
  137|   292k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   292k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   292k|            auto result = scn::scan<T>(
  140|   292k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   292k|                scn::runtime_format(f));
  142|   292k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.8k, False: 281k]
  ------------------
  143|  10.8k|                break;
  144|  10.8k|            }
  145|   281k|            it = result->begin();
  146|   281k|        }
  147|  10.8k|    }
  148|       |
  149|       |    // scan localized
  150|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.8k, False: 1.80k]
  ------------------
  151|  10.8k|        auto it = scn::ranges::begin(source);
  152|   292k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   292k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   292k|            auto result = scn::scan<T>(
  155|   292k|                global_locale,
  156|   292k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   292k|                scn::runtime_format(f));
  158|   292k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.8k, False: 281k]
  ------------------
  159|  10.8k|                break;
  160|  10.8k|            }
  161|   281k|            it = result->begin();
  162|   281k|        }
  163|  10.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.80k|    {
  167|  1.80k|        auto it = scn::ranges::begin(source);
  168|   142k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   142k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   142k|            auto result = scn::scan_value<T>(
  171|   142k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   142k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.80k, False: 140k]
  ------------------
  173|  1.80k|                break;
  174|  1.80k|            }
  175|   140k|            it = result->begin();
  176|   140k|        }
  177|  1.80k|    }
  178|  1.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.80k|{
  134|       |    // Regular scan
  135|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.8k, False: 1.80k]
  ------------------
  136|  10.8k|        auto it = scn::ranges::begin(source);
  137|   292k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   292k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   292k|            auto result = scn::scan<T>(
  140|   292k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   292k|                scn::runtime_format(f));
  142|   292k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.8k, False: 281k]
  ------------------
  143|  10.8k|                break;
  144|  10.8k|            }
  145|   281k|            it = result->begin();
  146|   281k|        }
  147|  10.8k|    }
  148|       |
  149|       |    // scan localized
  150|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.8k, False: 1.80k]
  ------------------
  151|  10.8k|        auto it = scn::ranges::begin(source);
  152|   292k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   292k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   292k|            auto result = scn::scan<T>(
  155|   292k|                global_locale,
  156|   292k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   292k|                scn::runtime_format(f));
  158|   292k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.8k, False: 281k]
  ------------------
  159|  10.8k|                break;
  160|  10.8k|            }
  161|   281k|            it = result->begin();
  162|   281k|        }
  163|  10.8k|    }
  164|       |
  165|       |    // scan_value
  166|  1.80k|    {
  167|  1.80k|        auto it = scn::ranges::begin(source);
  168|   142k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   142k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   142k|            auto result = scn::scan_value<T>(
  171|   142k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   142k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.80k, False: 140k]
  ------------------
  173|  1.80k|                break;
  174|  1.80k|            }
  175|   140k|            it = result->begin();
  176|   140k|        }
  177|  1.80k|    }
  178|  1.80k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.80k|{
   91|  1.80k|    using char_type = ranges::range_value_t<Source>;
   92|  1.80k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.80k|    deque.clear();
   94|  1.80k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.80k|              std::back_inserter(deque));
   96|  1.80k|    return deque;
   97|  1.80k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.80k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.80k|    else {
   84|  1.80k|        return wnoncontiguous_buffer;
   85|  1.80k|    }
   86|  1.80k|}

LLVMFuzzerTestOneInput:
   57|    904|{
   58|    904|    scn::fuzz::run(data, size);
   59|    904|    return 0;
   60|    904|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    904|{
   36|    904|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 903]
  |  Branch (36:35): [True: 0, False: 903]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    903|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    903|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    903|                                             "{:64U}", "{:[A-Za-z]}");
   44|    903|    do_basic_run(sv, f);
   45|       |
   46|    903|    const auto& wf = get_format_strings<wchar_t>(
   47|    903|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    903|    do_basic_run(wsv_reinterpret, wf);
   49|    903|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 903, False: 0]
  ------------------
   50|    903|        do_basic_run(wsv_transcode, wf);
   51|    903|    }
   52|    903|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    903|{
   25|    903|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    903|                                                           format_strings);
   27|    903|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    903|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    903|            source, format_strings);
   30|    903|    }
   31|    903|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    903|{
   25|    903|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    903|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    903|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.80k|{
   25|  1.80k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.80k|                                                           format_strings);
   27|  1.80k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.80k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.80k|            source, format_strings);
   30|  1.80k|    }
   31|  1.80k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.80k|{
   25|  1.80k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.80k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.80k|}

