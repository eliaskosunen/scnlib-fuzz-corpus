_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  4.88M|{
 3803|  4.88M|    if constexpr (sizeof(U) == 1) {
 3804|  4.88M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  4.88M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  4.88M|{
 3767|  4.88M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  4.88M|    SCN_GCC_COMPAT_PUSH
 3770|  4.88M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  4.88M|    constexpr char lengths[] =
 3772|  4.88M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  4.88M|        "\1\1\1\1\1\1\1\1"
 3774|  4.88M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  4.88M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  4.88M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  4.88M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  4.88M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  4.88M|    SCN_GCC_COMPAT_POP
 3781|  4.88M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.68M|{
 4009|  4.68M|    if constexpr (sizeof(CharT) == 1) {
 4010|  4.68M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  4.68M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  4.68M|{
 3822|  4.68M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  4.68M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  4.68M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  4.68M|    };
 3827|       |
 3828|  4.68M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 4.23M, False: 456k]
  ------------------
 3829|  4.23M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 274, False: 4.23M]
  ------------------
 3830|    274|            SCN_UNLIKELY_ATTR
 3831|    274|            return invalid_code_point;
 3832|    274|        }
 3833|  4.23M|        return static_cast<char32_t>(input[0]);
 3834|  4.23M|    }
 3835|       |
 3836|   456k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 104k, False: 352k]
  ------------------
 3837|   104k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 189, False: 103k]
  ------------------
 3838|    189|            SCN_UNLIKELY_ATTR
 3839|    189|            return invalid_code_point;
 3840|    189|        }
 3841|   103k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 12.3k, False: 91.6k]
  ------------------
 3842|  12.3k|            SCN_UNLIKELY_ATTR
 3843|  12.3k|            return invalid_code_point;
 3844|  12.3k|        }
 3845|       |
 3846|  91.6k|        char32_t cp{};
 3847|  91.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  91.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  91.6k|        return cp;
 3850|   103k|    }
 3851|       |
 3852|   352k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 337k, False: 15.3k]
  ------------------
 3853|   337k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 25, False: 337k]
  ------------------
 3854|     25|            SCN_UNLIKELY_ATTR
 3855|     25|            return invalid_code_point;
 3856|     25|        }
 3857|   337k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 4.15k, False: 332k]
  ------------------
 3858|   337k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 1.49k, False: 331k]
  ------------------
 3859|  5.64k|            SCN_UNLIKELY_ATTR
 3860|  5.64k|            return invalid_code_point;
 3861|  5.64k|        }
 3862|       |
 3863|   331k|        char32_t cp{};
 3864|   331k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|   331k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|   331k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|   331k|        return cp;
 3868|   337k|    }
 3869|       |
 3870|  15.3k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 15.3k, False: 0]
  ------------------
 3871|  15.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 15.3k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  15.3k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 8.89k, False: 6.44k]
  ------------------
 3876|  8.89k|            SCN_UNLIKELY_ATTR
 3877|  8.89k|            return invalid_code_point;
 3878|  8.89k|        }
 3879|  6.44k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 2.31k, False: 4.12k]
  ------------------
 3880|  6.44k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 130, False: 3.99k]
  ------------------
 3881|  6.44k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 98, False: 3.89k]
  ------------------
 3882|  2.54k|            SCN_UNLIKELY_ATTR
 3883|  2.54k|            return invalid_code_point;
 3884|  2.54k|        }
 3885|       |
 3886|  3.89k|        char32_t cp{};
 3887|  3.89k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  3.89k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  3.89k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  3.89k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  3.89k|        return cp;
 3892|  6.44k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   788k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   788k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   788k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  4.09M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  4.09M|    else {
 3701|  4.09M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  4.09M|                                       to_address(first), to_address(last)))};
 3703|  4.09M|    }
 3704|  4.09M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  12.6M|{
  326|  12.6M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  12.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  12.6M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  13.9M|{
  304|  13.9M|    return p;
  305|  13.9M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  2.04M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  2.04M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  2.04M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.04M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  2.04M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  2.04M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  27.7k|    {
 2724|  27.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  27.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  27.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  27.7k|    {
 2705|  27.7k|        return decay_copy(t.begin());
 2706|  27.7k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  2.18M|{
 1949|  2.18M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.18M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   511k|    {
 2781|   511k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   511k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   511k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   511k|    {
 2763|   511k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   511k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   511k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8877|  51.9k|{
 8878|  51.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  51.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  51.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|   229k|{
 5406|   229k|    detail::check_scan_arg_types<Args...>();
 5407|   229k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   229k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|   282k|{
 5145|   282k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   282k|                  "Scan argument types must be default constructible");
 5147|   282k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   282k|                  "Scan argument types must be Destructible");
 5149|   282k|    static_assert(
 5150|   282k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   282k|        "Scan argument types must not be references");
 5152|   282k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|   229k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   229k|    {
 5359|   229k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   229k|    {
 5370|   229k|        return {detail::make_arg<
 5371|   229k|            kind, Context,
 5372|   229k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   229k|                                 typename Context::char_type>::value>(args)...};
 5374|   229k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|   229k|{
 5180|   229k|    return make_value<Context>(value).ref_value;
 5181|   229k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|   282k|{
 5130|   282k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   282k|                                  needs_context_tag>) {
 5134|   282k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   282k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|   282k|    {                                                                        \
 4969|   282k|        return val;                                                          \
 4970|   282k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|   282k|{
 5099|   282k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   282k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   282k|    constexpr bool scannable_char =
 5103|   282k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   282k|    static_assert(scannable_char,
 5105|   282k|                  "Cannot scan an argument of an unsupported character "
 5106|   282k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   282k|    constexpr bool scannable_const =
 5109|   282k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   282k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   282k|    constexpr bool scannable_disabled =
 5113|   282k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   282k|    static_assert(scannable_disabled,
 5115|   282k|                  "Cannot scan an argument that has been disabled by "
 5116|   282k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   282k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   282k|    static_assert(
 5120|   282k|        scannable,
 5121|   282k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   282k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   282k|    return arg_value{arg};
 5125|   282k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|   282k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   282k|    {
 4911|   282k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   103k|{
 8665|   103k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   103k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   103k|{
 8602|   103k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   103k|    auto result = vscan_impl(buffer, format, args);
 8605|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 91.4k]
  |  |  ------------------
  ------------------
 8606|  12.3k|        return unexpected(result.error());
 8607|  12.3k|    }
 8608|  91.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   103k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   254k|{
 4729|   254k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   254k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   254k|                  "\n"
 4733|   254k|                  "Unsupported range type given as input to a scanning "
 4734|   254k|                  "function.\n"
 4735|   254k|                  "A range needs to have a character type (value type) "
 4736|   254k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   254k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   254k|                  "to be included.\n"
 4739|   254k|                  "See the scnlib documentation for more details.");
 4740|   254k|    static_assert(
 4741|   254k|        !std::is_same_v<T, custom_char_traits>,
 4742|   254k|        "\n"
 4743|   254k|        "Unsupported range type given as input to a scanning "
 4744|   254k|        "function.\n"
 4745|   254k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   254k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   254k|        "not supported.");
 4748|   254k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   254k|                  "\n"
 4750|   254k|                  "Unsupported range type given as input to a scanning "
 4751|   254k|                  "function.\n"
 4752|   254k|                  "file_marker_found cannot be used as an "
 4753|   254k|                  "source range type to scn::scan.\n"
 4754|   254k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   254k|                  "and do not provide an explicit source range, "
 4756|   254k|                  "or use scn::scan with a FILE* directly.");
 4757|   254k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   254k|                  "\n"
 4759|   254k|                  "Unsupported range type given as input to a scanning "
 4760|   254k|                  "function.\n"
 4761|   254k|                  "In order to be scannable, a range needs to satisfy "
 4762|   254k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   254k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   254k|                  "\n"
 4765|   254k|                  "Unsupported range type given as input to a scanning "
 4766|   254k|                  "function.\n"
 4767|   254k|                  "A range needs to model forward_range and have a valid "
 4768|   254k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   254k|                  "Examples of scannable ranges are std::string, "
 4770|   254k|                  "std::string_view, "
 4771|   254k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   254k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   254k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   254k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   254k|{
 4668|   254k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   254k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   254k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   254k|    {
 2855|   254k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   254k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   254k|    {
 2836|   254k|        return t.data();
 2837|   254k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   254k|    {
 3229|   254k|        return detail::to_address(ranges::begin(derived()));
 3230|   254k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.24M|{
  326|  1.24M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.24M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   483k|    {
 2724|   483k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   483k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   483k|    {
 2705|   483k|        return decay_copy(t.begin());
 2706|   483k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  2.81M|    {
 3326|  2.81M|        return m_iterator;
 3327|  2.81M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   254k|    {
 3185|   254k|        return static_cast<const D&>(*this);
 3186|   254k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   254k|    {
 2930|   254k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   254k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   254k|    {
 2896|   254k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   254k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  1.98M|{
 1949|  1.98M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.98M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|   958k|    {
 3342|   958k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   958k|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  4.02M|    {
 1598|  4.02M|        return has_value();
 1599|  4.02M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  8.01M|    {
  485|  8.01M|        return m_has_value;
  486|  8.01M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   120k|    {
 1604|   120k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   120k|        return this->get_unexpected().error();
 1606|   120k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   120k|    {
  468|   120k|        return m_unexpected;
  469|   120k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|   894k|    {
  361|   894k|        return m_unexpected;
  362|   894k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|   449k|        : m_unexpected(std::forward<Err>(e))
  346|   449k|    {
  347|   449k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   449k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   449k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  26.7k|        : base(unexpect, std::move(e.error())),
 1474|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  26.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  26.7k|          m_has_value(false)
  446|  26.7k|    {
  447|  26.7k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|   514k|        : m_unexpected(std::forward<Args>(args)...)
  355|   514k|    {
  356|   514k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   514k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   514k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   254k|    {
 1177|   254k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   228k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   228k|                      ranges::iterator_t<SourceRange>>) {
 5935|   228k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   228k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   931k|    {
 2724|   931k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   931k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   931k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   931k|    {
 2705|   931k|        return decay_copy(t.begin());
 2706|   931k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   228k|{
 5920|   228k|    return ranges::end(source);
 5921|   228k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   228k|    {
 2781|   228k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   228k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   228k|    {
 2763|   228k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   228k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  1.46M|    {
 3330|  1.46M|        return m_sentinel;
 3331|  1.46M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  3.86M|    {
 1653|  3.86M|        return value();
 1654|  3.86M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  3.86M|    {
 1627|  3.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.86M|        return this->get_value();
 1629|  3.86M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.86M|    {
  451|  3.86M|        return m_value;
  452|  3.86M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   228k|        : base(std::in_place, std::forward<U>(val)),
 1428|   228k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   228k|    {
 1430|   228k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   228k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   228k|    {
  437|   228k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7985|   103k|    {
 7986|   103k|        return m_str;
 7987|   103k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   229k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   229k|    {
 5436|   229k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|   229k|    {
 5389|   229k|        return m_argptrs;
 5390|   229k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   333k|        : m_desc(desc), m_builtin_values(data)
 5487|   333k|    {
 5488|   333k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|   103k|{
 8831|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 91.4k]
  |  |  ------------------
  ------------------
 8832|  12.3k|        return unexpected(result.error());
 8833|  12.3k|    }
 8834|  91.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  91.4k|    static_cast<    \
  |  |  929|  91.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  91.4k|    static_cast<    \
  |  |  929|  91.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   103k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   254k|    {
 1598|   254k|        return has_value();
 1599|   254k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   509k|    {
  485|   509k|        return m_has_value;
  486|   509k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  26.7k|    {
 1604|  26.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  26.7k|        return this->get_unexpected().error();
 1606|  26.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  26.7k|    {
  468|  26.7k|        return m_unexpected;
  469|  26.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  13.3k|        : base(unexpect, std::move(e.error())),
 1474|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  13.3k|        : m_has_value(false)
  625|  13.3k|    {
  626|  13.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  13.3k|    {
  689|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.3k|                                  std::forward<Args>(args)...);
  691|  13.3k|        m_has_value = false;
  692|  13.3k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  80.2k|{
  392|  80.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  80.2k|        T(std::forward<Args>(args)...);
  394|  80.2k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  26.7k|    {
  718|  26.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  26.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  26.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   127k|    {
 1177|   127k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   182k|    {
 1653|   182k|        return value();
 1654|   182k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   228k|    {
 1627|   228k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   228k|        return this->get_value();
 1629|   228k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   228k|    {
  451|   228k|        return m_value;
  452|   228k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|   114k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   114k|    {
 5840|   114k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   228k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   228k|    static_cast<    \
  |  |  929|   228k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   228k|    {
 5691|   228k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|   255k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   255k|    static_cast<    \
  |  |  929|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   255k|    {
 5626|   255k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   114k|        : base(std::in_place, std::forward<U>(val)),
 1428|   114k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   114k|    {
 1430|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   114k|        : m_has_value(true)
  615|   114k|    {
  616|   114k|        construct(std::forward<Args>(args)...);
  617|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   114k|    {
  682|   114k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   114k|        m_has_value = true;
  684|   114k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   114k|{
  392|   114k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   114k|        T(std::forward<Args>(args)...);
  394|   114k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|   114k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   342k|    {
  706|   342k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   342k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   342k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|   228k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|   229k|    {
 5384|   229k|        return m_args;
 5385|   229k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|   229k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.64M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.64M|    static_cast<    \
  |  |  929|  1.64M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.64M|    static_cast<    \
  |  |  929|  1.64M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.64M|    {
 3312|  1.64M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|   333k|{
 7702|   333k|    return s;
 7703|   333k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|   333k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   103k|        : m_str(r.str)
 7981|   103k|    {
 7982|   103k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   127k|    {
 1598|   127k|        return has_value();
 1599|   127k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   369k|    {
  675|   369k|        return m_has_value;
  676|   369k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   114k|    {
 1673|   114k|        return &value();
 1674|   114k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   114k|    {
 1627|   114k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   114k|        return this->get_value();
 1629|   114k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   114k|    {
  641|   114k|        return *value_ptr();
  642|   114k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   228k|    {
 5708|   228k|        return ranges::begin(m_range);
 5709|   228k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   127k|    {
  631|   127k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 114k, False: 13.3k]
  ------------------
  632|   114k|            destroy_value();
  633|   114k|        }
  634|  13.3k|        else {
  635|  13.3k|            destroy_unexpected();
  636|  13.3k|        }
  637|   127k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   114k|    {
  696|   114k|        scn::detail::destroy_at(value_ptr());
  697|   114k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   114k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   114k|    else {
  404|   114k|        p->~T();
  405|   114k|    }
  406|   114k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.3k|    {
  700|  13.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.3k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  80.2k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  80.2k|    else {
  404|  80.2k|        p->~T();
  405|  80.2k|    }
  406|  80.2k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8944|  51.9k|{
 8945|  51.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  51.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  51.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   103k|{
 8683|   103k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   103k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   103k|{
 8618|   103k|#if !SCN_DISABLE_LOCALE
 8619|   103k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   103k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   103k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   103k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 91.4k]
  |  |  ------------------
  ------------------
 8626|  12.3k|        return unexpected(result.error());
 8627|  12.3k|    }
 8628|  91.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   103k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8983|  23.6k|{
 8984|  23.6k|    T value;
 8985|  23.6k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  23.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 22.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.02k|    }                                                  \
  |  |  |  | 3667|  23.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  22.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.6k|    static_cast<    \
  |  |  929|  22.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.6k|    static_cast<    \
  |  |  929|  22.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  23.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  52.7k|{
 5165|  52.7k|    check_scan_arg_types<T>();
 5166|       |
 5167|  52.7k|    basic_scan_arg<Context> arg;
 5168|  52.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  52.7k|    arg.m_value = make_value<Context>(value);
 5170|  52.7k|    return arg;
 5171|  52.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   410k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  3.00M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  47.3k|{
 8696|  47.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  47.3k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  47.3k|{
 8642|  47.3k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  47.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  47.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 45.3k]
  |  |  ------------------
  ------------------
 8646|  2.05k|        return unexpected(result.error());
 8647|  2.05k|    }
 8648|  45.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  47.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  45.3k|    {
 1663|  45.3k|        return std::move(value());
 1664|  45.3k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8877|  51.9k|{
 8878|  51.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  51.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  51.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|   103k|{
 5406|   103k|    detail::check_scan_arg_types<Args...>();
 5407|   103k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   103k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|   127k|{
 5145|   127k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   127k|                  "Scan argument types must be default constructible");
 5147|   127k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   127k|                  "Scan argument types must be Destructible");
 5149|   127k|    static_assert(
 5150|   127k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   127k|        "Scan argument types must not be references");
 5152|   127k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|   103k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   103k|    {
 5359|   103k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   103k|    {
 5370|   103k|        return {detail::make_arg<
 5371|   103k|            kind, Context,
 5372|   103k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   103k|                                 typename Context::char_type>::value>(args)...};
 5374|   103k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|   103k|{
 5180|   103k|    return make_value<Context>(value).ref_value;
 5181|   103k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|   127k|{
 5130|   127k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   127k|                                  needs_context_tag>) {
 5134|   127k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   127k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|   127k|    {                                                                        \
 4969|   127k|        return val;                                                          \
 4970|   127k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|   127k|{
 5099|   127k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   127k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   127k|    constexpr bool scannable_char =
 5103|   127k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   127k|    static_assert(scannable_char,
 5105|   127k|                  "Cannot scan an argument of an unsupported character "
 5106|   127k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   127k|    constexpr bool scannable_const =
 5109|   127k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   127k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   127k|    constexpr bool scannable_disabled =
 5113|   127k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   127k|    static_assert(scannable_disabled,
 5115|   127k|                  "Cannot scan an argument that has been disabled by "
 5116|   127k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   127k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   127k|    static_assert(
 5120|   127k|        scannable,
 5121|   127k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   127k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   127k|    return arg_value{arg};
 5125|   127k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|   127k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   127k|    {
 4911|   127k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7985|   103k|    {
 7986|   103k|        return m_str;
 7987|   103k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   103k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   103k|    {
 5436|   103k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|   103k|    {
 5389|   103k|        return m_argptrs;
 5390|   103k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|   103k|{
 8831|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 91.4k]
  |  |  ------------------
  ------------------
 8832|  12.3k|        return unexpected(result.error());
 8833|  12.3k|    }
 8834|  91.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  91.4k|    static_cast<    \
  |  |  929|  91.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  91.4k|    static_cast<    \
  |  |  929|  91.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   103k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  13.3k|        : base(unexpect, std::move(e.error())),
 1474|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  13.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  13.3k|          m_has_value(false)
  446|  13.3k|    {
  447|  13.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   127k|    {
 1177|   127k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|   114k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   114k|    {
 5840|   114k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|   114k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   114k|    {
 5626|   114k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   114k|        : base(std::in_place, std::forward<U>(val)),
 1428|   114k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   114k|    {
 1430|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   114k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   114k|    {
  437|   114k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|   103k|    {
 5384|   103k|        return m_args;
 5385|   103k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   103k|        : m_str(r.str)
 7981|   103k|    {
 7982|   103k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   127k|    {
 1598|   127k|        return has_value();
 1599|   127k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   241k|    {
  485|   241k|        return m_has_value;
  486|   241k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   114k|    {
 1673|   114k|        return &value();
 1674|   114k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   114k|    {
 1627|   114k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   114k|        return this->get_value();
 1629|   114k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   114k|    {
  451|   114k|        return m_value;
  452|   114k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8944|  51.9k|{
 8945|  51.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  51.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  51.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  51.9k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8983|  23.6k|{
 8984|  23.6k|    T value;
 8985|  23.6k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  23.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 22.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.02k|    }                                                  \
  |  |  |  | 3667|  23.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  22.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.6k|    static_cast<    \
  |  |  929|  22.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.6k|    static_cast<    \
  |  |  929|  22.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  23.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  23.6k|{
 5165|  23.6k|    check_scan_arg_types<T>();
 5166|       |
 5167|  23.6k|    basic_scan_arg<Context> arg;
 5168|  23.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  23.6k|    arg.m_value = make_value<Context>(value);
 5170|  23.6k|    return arg;
 5171|  23.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  13.3k|    {
 2724|  13.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  13.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  13.3k|    {
 2705|  13.3k|        return decay_copy(t.begin());
 2706|  13.3k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  6.47M|{
 1949|  6.47M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.47M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   310k|    {
 2781|   310k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   310k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   310k|    {
 2763|   310k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   310k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8877|  62.9k|{
 8878|  62.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  62.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  62.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.9k|    static_cast<    \
  |  |  929|  62.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.9k|    static_cast<    \
  |  |  929|  62.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  62.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|  62.9k|{
 8665|  62.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|  62.9k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|  62.9k|{
 8602|  62.9k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  62.9k|    auto result = vscan_impl(buffer, format, args);
 8605|  62.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.17k, False: 56.7k]
  |  |  ------------------
  ------------------
 8606|  6.17k|        return unexpected(result.error());
 8607|  6.17k|    }
 8608|  56.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  62.9k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|   155k|{
 4729|   155k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   155k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   155k|                  "\n"
 4733|   155k|                  "Unsupported range type given as input to a scanning "
 4734|   155k|                  "function.\n"
 4735|   155k|                  "A range needs to have a character type (value type) "
 4736|   155k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   155k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   155k|                  "to be included.\n"
 4739|   155k|                  "See the scnlib documentation for more details.");
 4740|   155k|    static_assert(
 4741|   155k|        !std::is_same_v<T, custom_char_traits>,
 4742|   155k|        "\n"
 4743|   155k|        "Unsupported range type given as input to a scanning "
 4744|   155k|        "function.\n"
 4745|   155k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   155k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   155k|        "not supported.");
 4748|   155k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   155k|                  "\n"
 4750|   155k|                  "Unsupported range type given as input to a scanning "
 4751|   155k|                  "function.\n"
 4752|   155k|                  "file_marker_found cannot be used as an "
 4753|   155k|                  "source range type to scn::scan.\n"
 4754|   155k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   155k|                  "and do not provide an explicit source range, "
 4756|   155k|                  "or use scn::scan with a FILE* directly.");
 4757|   155k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   155k|                  "\n"
 4759|   155k|                  "Unsupported range type given as input to a scanning "
 4760|   155k|                  "function.\n"
 4761|   155k|                  "In order to be scannable, a range needs to satisfy "
 4762|   155k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   155k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   155k|                  "\n"
 4765|   155k|                  "Unsupported range type given as input to a scanning "
 4766|   155k|                  "function.\n"
 4767|   155k|                  "A range needs to model forward_range and have a valid "
 4768|   155k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   155k|                  "Examples of scannable ranges are std::string, "
 4770|   155k|                  "std::string_view, "
 4771|   155k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   155k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   155k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   155k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   155k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   155k|    else {
 4714|   155k|        return make_forward_scan_buffer(r);
 4715|   155k|    }
 4716|   155k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|   155k|{
 4533|   155k|    return basic_scan_forward_buffer_impl(range);
 4534|   155k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   155k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   155k|          m_cursor(ranges::begin(*m_range))
 4419|   155k|    {
 4420|   155k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|   155k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   155k|    {
 4391|   155k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|   155k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   155k|    {
 4159|   155k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|   155k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   296k|    {
 2724|   296k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   296k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   296k|    {
 2705|   296k|        return decay_copy(t.begin());
 2706|   296k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|   438k|    {
 3326|   438k|        return m_iterator;
 3327|   438k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  1.86M|    {
 4424|  1.86M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 18.7k, False: 1.85M]
  ------------------
 4425|  18.7k|            return false;
 4426|  18.7k|        }
 4427|  1.85M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  1.85M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  1.85M|        }
 4430|  1.85M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 1.70M, False: 147k]
  ------------------
 4431|  1.70M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  1.70M|                                          this->m_current_view.begin(),
 4433|  1.70M|                                          this->m_current_view.end());
 4434|  1.70M|        }
 4435|  1.85M|        m_latest = *m_cursor;
 4436|  1.85M|        ++m_cursor;
 4437|  1.85M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  1.85M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  1.85M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  1.85M|        }
 4441|  1.85M|        return true;
 4442|  1.86M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.57M|    {
 2781|  5.57M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.57M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.57M|    {
 2763|  5.57M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.57M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  5.71M|    {
 3330|  5.71M|        return m_sentinel;
 3331|  5.71M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|   155k|    {
 4079|   155k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   155k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   155k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  13.3k|        : base(unexpect, std::move(e.error())),
 1474|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  13.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  13.3k|          m_has_value(false)
  446|  13.3k|    {
  447|  13.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   155k|    {
 1177|   155k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   141k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   141k|                      ranges::iterator_t<SourceRange>>) {
 5935|   141k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   141k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   141k|    {
 2724|   141k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   141k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   141k|    {
 2705|   141k|        return decay_copy(t.begin());
 2706|   141k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|   141k|{
 5920|   141k|    return ranges::end(source);
 5921|   141k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   141k|    {
 2781|   141k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   141k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   141k|    {
 2763|   141k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   141k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   141k|        : base(std::in_place, std::forward<U>(val)),
 1428|   141k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   141k|    {
 1430|   141k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   141k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   141k|    {
  437|   141k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7985|   125k|    {
 7986|   125k|        return m_str;
 7987|   125k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8830|   125k|{
 8831|   125k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 113k]
  |  |  ------------------
  ------------------
 8832|  12.3k|        return unexpected(result.error());
 8833|  12.3k|    }
 8834|   113k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   113k|    static_cast<    \
  |  |  929|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   113k|    static_cast<    \
  |  |  929|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   125k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   155k|    {
 1598|   155k|        return has_value();
 1599|   155k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   310k|    {
  485|   310k|        return m_has_value;
  486|   310k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  13.3k|    {
 1604|  13.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.3k|        return this->get_unexpected().error();
 1606|  13.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.3k|    {
  468|  13.3k|        return m_unexpected;
  469|  13.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  13.3k|        : base(unexpect, std::move(e.error())),
 1474|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  13.3k|        : m_has_value(false)
  625|  13.3k|    {
  626|  13.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  13.3k|    {
  689|  13.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.3k|                                  std::forward<Args>(args)...);
  691|  13.3k|        m_has_value = false;
  692|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  26.7k|    {
  718|  26.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  26.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  26.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   155k|    {
 1177|   155k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   113k|    {
 1653|   113k|        return value();
 1654|   113k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   141k|    {
 1627|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   141k|        return this->get_value();
 1629|   141k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   141k|    {
  451|   141k|        return m_value;
  452|   141k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|   141k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   141k|    {
 5840|   141k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|   141k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   141k|    {
 5691|   141k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   141k|        : base(std::in_place, std::forward<U>(val)),
 1428|   141k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   141k|    {
 1430|   141k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   141k|        : m_has_value(true)
  615|   141k|    {
  616|   141k|        construct(std::forward<Args>(args)...);
  617|   141k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   141k|    {
  682|   141k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   141k|        m_has_value = true;
  684|   141k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   141k|{
  392|   141k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   141k|        T(std::forward<Args>(args)...);
  394|   141k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5831|   141k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   424k|    {
  706|   424k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   424k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   424k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5835|   283k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   296k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   296k|    static_cast<    \
  |  |  929|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   296k|    static_cast<    \
  |  |  929|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   296k|    {
 3312|   296k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   125k|        : m_str(r.str)
 7981|   125k|    {
 7982|   125k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   155k|    {
 1598|   155k|        return has_value();
 1599|   155k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   451k|    {
  675|   451k|        return m_has_value;
  676|   451k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   141k|    {
 1673|   141k|        return &value();
 1674|   141k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   141k|    {
 1627|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   141k|        return this->get_value();
 1629|   141k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   141k|    {
  641|   141k|        return *value_ptr();
  642|   141k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|   141k|    {
 5708|   141k|        return ranges::begin(m_range);
 5709|   141k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   155k|    {
  631|   155k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 141k, False: 13.3k]
  ------------------
  632|   141k|            destroy_value();
  633|   141k|        }
  634|  13.3k|        else {
  635|  13.3k|            destroy_unexpected();
  636|  13.3k|        }
  637|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   141k|    {
  696|   141k|        scn::detail::destroy_at(value_ptr());
  697|   141k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   141k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   141k|    else {
  404|   141k|        p->~T();
  405|   141k|    }
  406|   141k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.3k|    {
  700|  13.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.3k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8944|  62.9k|{
 8945|  62.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  62.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  62.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.9k|    static_cast<    \
  |  |  929|  62.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.9k|    static_cast<    \
  |  |  929|  62.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  62.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|  62.9k|{
 8683|  62.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|  62.9k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|  62.9k|{
 8618|  62.9k|#if !SCN_DISABLE_LOCALE
 8619|  62.9k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  62.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  62.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  62.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  62.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.17k, False: 56.7k]
  |  |  ------------------
  ------------------
 8626|  6.17k|        return unexpected(result.error());
 8627|  6.17k|    }
 8628|  56.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  62.9k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8983|  29.1k|{
 8984|  29.1k|    T value;
 8985|  29.1k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  29.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 28.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.02k|    }                                                  \
  |  |  |  | 3667|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  28.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.0k|    static_cast<    \
  |  |  929|  28.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.0k|    static_cast<    \
  |  |  929|  28.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  29.1k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  29.1k|{
 8696|  29.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  29.1k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  29.1k|{
 8642|  29.1k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  29.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  29.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.02k, False: 28.0k]
  |  |  ------------------
  ------------------
 8646|  1.02k|        return unexpected(result.error());
 8647|  1.02k|    }
 8648|  28.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  28.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  29.1k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  28.0k|    {
 1663|  28.0k|        return std::move(value());
 1664|  28.0k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  55.5k|    {
 2724|  55.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  55.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  55.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  55.5k|    {
 2705|  55.5k|        return decay_copy(t.begin());
 2706|  55.5k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  11.9M|{
 1949|  11.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  11.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  11.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.46M|    {
 2781|  3.46M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.46M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.46M|    {
 2763|  3.46M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.46M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  1.39M|{
 5406|  1.39M|    detail::check_scan_arg_types<Args...>();
 5407|  1.39M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  1.39M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  1.73M|{
 5145|  1.73M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.73M|                  "Scan argument types must be default constructible");
 5147|  1.73M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.73M|                  "Scan argument types must be Destructible");
 5149|  1.73M|    static_assert(
 5150|  1.73M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.73M|        "Scan argument types must not be references");
 5152|  1.73M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  1.39M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  1.39M|    {
 5359|  1.39M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  1.39M|    {
 5370|  1.39M|        return {detail::make_arg<
 5371|  1.39M|            kind, Context,
 5372|  1.39M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  1.39M|                                 typename Context::char_type>::value>(args)...};
 5374|  1.39M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  1.39M|{
 5180|  1.39M|    return make_value<Context>(value).ref_value;
 5181|  1.39M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  1.73M|{
 5130|  1.73M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.73M|                                  needs_context_tag>) {
 5134|  1.73M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.73M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  1.73M|    {                                                                        \
 4969|  1.73M|        return val;                                                          \
 4970|  1.73M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  1.73M|{
 5099|  1.73M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.73M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.73M|    constexpr bool scannable_char =
 5103|  1.73M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.73M|    static_assert(scannable_char,
 5105|  1.73M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.73M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.73M|    constexpr bool scannable_const =
 5109|  1.73M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.73M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.73M|    constexpr bool scannable_disabled =
 5113|  1.73M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.73M|    static_assert(scannable_disabled,
 5115|  1.73M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.73M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.73M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.73M|    static_assert(
 5120|  1.73M|        scannable,
 5121|  1.73M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.73M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.73M|    return arg_value{arg};
 5125|  1.73M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  1.73M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.73M|    {
 4911|  1.73M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   695k|{
 8602|   695k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   695k|    auto result = vscan_impl(buffer, format, args);
 8605|   695k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.6k, False: 670k]
  |  |  ------------------
  ------------------
 8606|  24.6k|        return unexpected(result.error());
 8607|  24.6k|    }
 8608|   670k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   670k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   695k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|  1.73M|{
 4729|  1.73M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.73M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.73M|                  "\n"
 4733|  1.73M|                  "Unsupported range type given as input to a scanning "
 4734|  1.73M|                  "function.\n"
 4735|  1.73M|                  "A range needs to have a character type (value type) "
 4736|  1.73M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.73M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.73M|                  "to be included.\n"
 4739|  1.73M|                  "See the scnlib documentation for more details.");
 4740|  1.73M|    static_assert(
 4741|  1.73M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.73M|        "\n"
 4743|  1.73M|        "Unsupported range type given as input to a scanning "
 4744|  1.73M|        "function.\n"
 4745|  1.73M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.73M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.73M|        "not supported.");
 4748|  1.73M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.73M|                  "\n"
 4750|  1.73M|                  "Unsupported range type given as input to a scanning "
 4751|  1.73M|                  "function.\n"
 4752|  1.73M|                  "file_marker_found cannot be used as an "
 4753|  1.73M|                  "source range type to scn::scan.\n"
 4754|  1.73M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.73M|                  "and do not provide an explicit source range, "
 4756|  1.73M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.73M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.73M|                  "\n"
 4759|  1.73M|                  "Unsupported range type given as input to a scanning "
 4760|  1.73M|                  "function.\n"
 4761|  1.73M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.73M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.73M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.73M|                  "\n"
 4765|  1.73M|                  "Unsupported range type given as input to a scanning "
 4766|  1.73M|                  "function.\n"
 4767|  1.73M|                  "A range needs to model forward_range and have a valid "
 4768|  1.73M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.73M|                  "Examples of scannable ranges are std::string, "
 4770|  1.73M|                  "std::string_view, "
 4771|  1.73M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.73M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.73M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.73M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  1.73M|{
 4668|  1.73M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  1.73M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  1.73M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.73M|    {
 2855|  1.73M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.73M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.73M|    {
 2836|  1.73M|        return t.data();
 2837|  1.73M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|  1.73M|    {
 3229|  1.73M|        return detail::to_address(ranges::begin(derived()));
 3230|  1.73M|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  5.11M|{
  326|  5.11M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  5.11M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   220M|{
  304|   220M|    return p;
  305|   220M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.40M|    {
 2724|  3.40M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.40M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.40M|    {
 2705|  3.40M|        return decay_copy(t.begin());
 2706|  3.40M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   182M|    {
 3326|   182M|        return m_iterator;
 3327|   182M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.73M|    {
 3185|  1.73M|        return static_cast<const D&>(*this);
 3186|  1.73M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.73M|    {
 2930|  1.73M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.73M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.73M|    {
 2896|  1.73M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.73M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  3.42M|    {
 3342|  3.42M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  3.42M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  53.5k|        : base(unexpect, std::move(e.error())),
 1474|  53.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  53.5k|    {
 1476|  53.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  53.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  53.5k|          m_has_value(false)
  446|  53.5k|    {
  447|  53.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.73M|    {
 1177|  1.73M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  1.67M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.67M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.67M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.67M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.36M|    {
 2724|  3.36M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.36M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.36M|    {
 2705|  3.36M|        return decay_copy(t.begin());
 2706|  3.36M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  1.67M|{
 5920|  1.67M|    return ranges::end(source);
 5921|  1.67M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.67M|    {
 2781|  1.67M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.67M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.67M|    {
 2763|  1.67M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.67M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   174M|    {
 3330|   174M|        return m_sentinel;
 3331|   174M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.67M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.67M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.67M|    {
 1430|  1.67M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.67M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.67M|    {
  437|  1.67M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7985|   695k|    {
 7986|   695k|        return m_str;
 7987|   695k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  1.39M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  1.39M|    {
 5436|  1.39M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  1.39M|    {
 5389|  1.39M|        return m_argptrs;
 5390|  1.39M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  2.08M|        : m_desc(desc), m_builtin_values(data)
 5487|  2.08M|    {
 5488|  2.08M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|   695k|{
 8831|   695k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.6k, False: 670k]
  |  |  ------------------
  ------------------
 8832|  24.6k|        return unexpected(result.error());
 8833|  24.6k|    }
 8834|   670k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   670k|    static_cast<    \
  |  |  929|   670k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   670k|    static_cast<    \
  |  |  929|   670k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   695k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.73M|    {
 1598|  1.73M|        return has_value();
 1599|  1.73M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.46M|    {
  485|  3.46M|        return m_has_value;
  486|  3.46M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  53.5k|    {
 1604|  53.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  53.5k|        return this->get_unexpected().error();
 1606|  53.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  53.5k|    {
  468|  53.5k|        return m_unexpected;
  469|  53.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  26.7k|        : base(unexpect, std::move(e.error())),
 1474|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  26.7k|        : m_has_value(false)
  625|  26.7k|    {
  626|  26.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  26.7k|    {
  689|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.7k|                                  std::forward<Args>(args)...);
  691|  26.7k|        m_has_value = false;
  692|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  53.5k|    {
  718|  53.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  53.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  53.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  53.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   865k|    {
 1177|   865k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.34M|    {
 1653|  1.34M|        return value();
 1654|  1.34M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.67M|    {
 1627|  1.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.67M|        return this->get_value();
 1629|  1.67M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.67M|    {
  451|  1.67M|        return m_value;
  452|  1.67M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|   838k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   838k|    {
 5840|   838k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  1.67M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.67M|    static_cast<    \
  |  |  929|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.67M|    {
 5691|  1.67M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.67M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.67M|    static_cast<    \
  |  |  929|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.67M|    {
 5626|  1.67M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   838k|        : base(std::in_place, std::forward<U>(val)),
 1428|   838k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   838k|    {
 1430|   838k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   838k|        : m_has_value(true)
  615|   838k|    {
  616|   838k|        construct(std::forward<Args>(args)...);
  617|   838k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   838k|    {
  682|   838k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   838k|        m_has_value = true;
  684|   838k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   838k|{
  392|   838k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   838k|        T(std::forward<Args>(args)...);
  394|   838k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|   838k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.51M|    {
  706|  2.51M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.51M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.51M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  1.67M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  1.39M|    {
 5384|  1.39M|        return m_args;
 5385|  1.39M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  1.39M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  67.4M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  67.4M|    static_cast<    \
  |  |  929|  67.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  67.4M|    static_cast<    \
  |  |  929|  67.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  67.4M|    {
 3312|  67.4M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|  2.08M|{
 7707|  2.08M|    return s;
 7708|  2.08M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|  2.08M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   695k|        : m_str(r.str)
 7981|   695k|    {
 7982|   695k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   865k|    {
 1598|   865k|        return has_value();
 1599|   865k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.56M|    {
  675|  2.56M|        return m_has_value;
  676|  2.56M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   838k|    {
 1673|   838k|        return &value();
 1674|   838k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   838k|    {
 1627|   838k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   838k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   838k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   838k|        return this->get_value();
 1629|   838k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   838k|    {
  641|   838k|        return *value_ptr();
  642|   838k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  1.67M|    {
 5708|  1.67M|        return ranges::begin(m_range);
 5709|  1.67M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   865k|    {
  631|   865k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 838k, False: 26.7k]
  ------------------
  632|   838k|            destroy_value();
  633|   838k|        }
  634|  26.7k|        else {
  635|  26.7k|            destroy_unexpected();
  636|  26.7k|        }
  637|   865k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   838k|    {
  696|   838k|        scn::detail::destroy_at(value_ptr());
  697|   838k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|   838k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   838k|    else {
  404|   838k|        p->~T();
  405|   838k|    }
  406|   838k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.7k|    {
  700|  26.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.7k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   695k|{
 8618|   695k|#if !SCN_DISABLE_LOCALE
 8619|   695k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   695k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   695k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   695k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   695k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.6k, False: 670k]
  |  |  ------------------
  ------------------
 8626|  24.6k|        return unexpected(result.error());
 8627|  24.6k|    }
 8628|   670k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   670k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   695k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   339k|{
 5165|   339k|    check_scan_arg_types<T>();
 5166|       |
 5167|   339k|    basic_scan_arg<Context> arg;
 5168|   339k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   339k|    arg.m_value = make_value<Context>(value);
 5170|   339k|    return arg;
 5171|   339k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  2.59M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   339k|{
 8642|   339k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   339k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   339k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 335k]
  |  |  ------------------
  ------------------
 8646|  4.11k|        return unexpected(result.error());
 8647|  4.11k|    }
 8648|   335k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   339k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   335k|    {
 1663|   335k|        return std::move(value());
 1664|   335k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|   695k|{
 5406|   695k|    detail::check_scan_arg_types<Args...>();
 5407|   695k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   695k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|   865k|{
 5145|   865k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   865k|                  "Scan argument types must be default constructible");
 5147|   865k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   865k|                  "Scan argument types must be Destructible");
 5149|   865k|    static_assert(
 5150|   865k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   865k|        "Scan argument types must not be references");
 5152|   865k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|   695k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   695k|    {
 5359|   695k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   695k|    {
 5370|   695k|        return {detail::make_arg<
 5371|   695k|            kind, Context,
 5372|   695k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   695k|                                 typename Context::char_type>::value>(args)...};
 5374|   695k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|   695k|{
 5180|   695k|    return make_value<Context>(value).ref_value;
 5181|   695k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|   865k|{
 5130|   865k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   865k|                                  needs_context_tag>) {
 5134|   865k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   865k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   865k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|   865k|    {                                                                        \
 4969|   865k|        return val;                                                          \
 4970|   865k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|   865k|{
 5099|   865k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   865k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   865k|    constexpr bool scannable_char =
 5103|   865k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   865k|    static_assert(scannable_char,
 5105|   865k|                  "Cannot scan an argument of an unsupported character "
 5106|   865k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   865k|    constexpr bool scannable_const =
 5109|   865k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   865k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   865k|    constexpr bool scannable_disabled =
 5113|   865k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   865k|    static_assert(scannable_disabled,
 5115|   865k|                  "Cannot scan an argument that has been disabled by "
 5116|   865k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   865k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   865k|    static_assert(
 5120|   865k|        scannable,
 5121|   865k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   865k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   865k|    return arg_value{arg};
 5125|   865k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|   865k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   865k|    {
 4911|   865k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7985|   695k|    {
 7986|   695k|        return m_str;
 7987|   695k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   695k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   695k|    {
 5436|   695k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|   695k|    {
 5389|   695k|        return m_argptrs;
 5390|   695k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|   695k|{
 8831|   695k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.6k, False: 670k]
  |  |  ------------------
  ------------------
 8832|  24.6k|        return unexpected(result.error());
 8833|  24.6k|    }
 8834|   670k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   670k|    static_cast<    \
  |  |  929|   670k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   670k|    static_cast<    \
  |  |  929|   670k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   695k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  26.7k|        : base(unexpect, std::move(e.error())),
 1474|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  26.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  26.7k|          m_has_value(false)
  446|  26.7k|    {
  447|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   865k|    {
 1177|   865k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|   838k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   838k|    {
 5840|   838k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|   838k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   838k|    {
 5626|   838k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   838k|        : base(std::in_place, std::forward<U>(val)),
 1428|   838k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   838k|    {
 1430|   838k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   838k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   838k|    {
  437|   838k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|   695k|    {
 5384|   695k|        return m_args;
 5385|   695k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   695k|        : m_str(r.str)
 7981|   695k|    {
 7982|   695k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   865k|    {
 1598|   865k|        return has_value();
 1599|   865k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.70M|    {
  485|  1.70M|        return m_has_value;
  486|  1.70M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   838k|    {
 1673|   838k|        return &value();
 1674|   838k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   838k|    {
 1627|   838k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   838k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   838k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   838k|        return this->get_value();
 1629|   838k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   838k|    {
  451|   838k|        return m_value;
  452|   838k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   169k|{
 5165|   169k|    check_scan_arg_types<T>();
 5166|       |
 5167|   169k|    basic_scan_arg<Context> arg;
 5168|   169k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   169k|    arg.m_value = make_value<Context>(value);
 5170|   169k|    return arg;
 5171|   169k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  26.7k|    {
 2724|  26.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  26.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  26.7k|    {
 2705|  26.7k|        return decay_copy(t.begin());
 2706|  26.7k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  86.4M|{
 1949|  86.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  86.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  86.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.73M|    {
 2781|  1.73M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.73M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.73M|    {
 2763|  1.73M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.73M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   347k|{
 8602|   347k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   347k|    auto result = vscan_impl(buffer, format, args);
 8605|   347k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 335k]
  |  |  ------------------
  ------------------
 8606|  12.3k|        return unexpected(result.error());
 8607|  12.3k|    }
 8608|   335k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   347k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   865k|{
 4729|   865k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   865k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   865k|                  "\n"
 4733|   865k|                  "Unsupported range type given as input to a scanning "
 4734|   865k|                  "function.\n"
 4735|   865k|                  "A range needs to have a character type (value type) "
 4736|   865k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   865k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   865k|                  "to be included.\n"
 4739|   865k|                  "See the scnlib documentation for more details.");
 4740|   865k|    static_assert(
 4741|   865k|        !std::is_same_v<T, custom_char_traits>,
 4742|   865k|        "\n"
 4743|   865k|        "Unsupported range type given as input to a scanning "
 4744|   865k|        "function.\n"
 4745|   865k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   865k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   865k|        "not supported.");
 4748|   865k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   865k|                  "\n"
 4750|   865k|                  "Unsupported range type given as input to a scanning "
 4751|   865k|                  "function.\n"
 4752|   865k|                  "file_marker_found cannot be used as an "
 4753|   865k|                  "source range type to scn::scan.\n"
 4754|   865k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   865k|                  "and do not provide an explicit source range, "
 4756|   865k|                  "or use scn::scan with a FILE* directly.");
 4757|   865k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   865k|                  "\n"
 4759|   865k|                  "Unsupported range type given as input to a scanning "
 4760|   865k|                  "function.\n"
 4761|   865k|                  "In order to be scannable, a range needs to satisfy "
 4762|   865k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   865k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   865k|                  "\n"
 4765|   865k|                  "Unsupported range type given as input to a scanning "
 4766|   865k|                  "function.\n"
 4767|   865k|                  "A range needs to model forward_range and have a valid "
 4768|   865k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   865k|                  "Examples of scannable ranges are std::string, "
 4770|   865k|                  "std::string_view, "
 4771|   865k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   865k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   865k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   865k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   865k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   865k|    else {
 4714|   865k|        return make_forward_scan_buffer(r);
 4715|   865k|    }
 4716|   865k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   865k|{
 4533|   865k|    return basic_scan_forward_buffer_impl(range);
 4534|   865k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   865k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   865k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   865k|          m_cursor(ranges::begin(*m_range))
 4419|   865k|    {
 4420|   865k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   865k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   865k|    {
 4391|   865k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   865k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   865k|    {
 4159|   865k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   865k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.70M|    {
 2724|  1.70M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.70M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.70M|    {
 2705|  1.70M|        return decay_copy(t.begin());
 2706|  1.70M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  2.54M|    {
 3326|  2.54M|        return m_iterator;
 3327|  2.54M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  27.1M|    {
 4424|  27.1M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 24.5k, False: 27.1M]
  ------------------
 4425|  24.5k|            return false;
 4426|  24.5k|        }
 4427|  27.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  27.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  27.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  27.1M|        }
 4430|  27.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 26.2M, False: 850k]
  ------------------
 4431|  26.2M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  26.2M|                                          this->m_current_view.begin(),
 4433|  26.2M|                                          this->m_current_view.end());
 4434|  26.2M|        }
 4435|  27.1M|        m_latest = *m_cursor;
 4436|  27.1M|        ++m_cursor;
 4437|  27.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  27.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  27.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  27.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  27.1M|        }
 4441|  27.1M|        return true;
 4442|  27.1M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  81.3M|    {
 2781|  81.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  81.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  81.3M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  81.3M|    {
 2763|  81.3M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  81.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  81.3M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  82.1M|    {
 3330|  82.1M|        return m_sentinel;
 3331|  82.1M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   865k|    {
 4079|   865k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   865k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   865k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  26.7k|        : base(unexpect, std::move(e.error())),
 1474|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  26.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  26.7k|          m_has_value(false)
  446|  26.7k|    {
  447|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   865k|    {
 1177|   865k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   838k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   838k|                      ranges::iterator_t<SourceRange>>) {
 5935|   838k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   838k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   838k|    {
 2724|   838k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   838k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   838k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   838k|    {
 2705|   838k|        return decay_copy(t.begin());
 2706|   838k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|   838k|{
 5920|   838k|    return ranges::end(source);
 5921|   838k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   838k|    {
 2781|   838k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   838k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   838k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   838k|    {
 2763|   838k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   838k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   838k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   838k|        : base(std::in_place, std::forward<U>(val)),
 1428|   838k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   838k|    {
 1430|   838k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   838k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   838k|    {
  437|   838k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7985|   695k|    {
 7986|   695k|        return m_str;
 7987|   695k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8830|   695k|{
 8831|   695k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.6k, False: 670k]
  |  |  ------------------
  ------------------
 8832|  24.6k|        return unexpected(result.error());
 8833|  24.6k|    }
 8834|   670k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   670k|    static_cast<    \
  |  |  929|   670k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   670k|    static_cast<    \
  |  |  929|   670k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   695k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   865k|    {
 1598|   865k|        return has_value();
 1599|   865k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.73M|    {
  485|  1.73M|        return m_has_value;
  486|  1.73M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  26.7k|    {
 1604|  26.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  26.7k|        return this->get_unexpected().error();
 1606|  26.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  26.7k|    {
  468|  26.7k|        return m_unexpected;
  469|  26.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  26.7k|        : base(unexpect, std::move(e.error())),
 1474|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  26.7k|        : m_has_value(false)
  625|  26.7k|    {
  626|  26.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  26.7k|    {
  689|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.7k|                                  std::forward<Args>(args)...);
  691|  26.7k|        m_has_value = false;
  692|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  53.5k|    {
  718|  53.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  53.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  53.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  53.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   865k|    {
 1177|   865k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   670k|    {
 1653|   670k|        return value();
 1654|   670k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   838k|    {
 1627|   838k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   838k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   838k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   838k|        return this->get_value();
 1629|   838k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   838k|    {
  451|   838k|        return m_value;
  452|   838k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|   838k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   838k|    {
 5840|   838k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|   838k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   838k|    {
 5691|   838k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   838k|        : base(std::in_place, std::forward<U>(val)),
 1428|   838k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   838k|    {
 1430|   838k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   838k|        : m_has_value(true)
  615|   838k|    {
  616|   838k|        construct(std::forward<Args>(args)...);
  617|   838k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   838k|    {
  682|   838k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   838k|        m_has_value = true;
  684|   838k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   838k|{
  392|   838k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   838k|        T(std::forward<Args>(args)...);
  394|   838k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5831|   838k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.51M|    {
  706|  2.51M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.51M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.51M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5835|  1.67M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  1.70M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.70M|    static_cast<    \
  |  |  929|  1.70M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.70M|    static_cast<    \
  |  |  929|  1.70M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.70M|    {
 3312|  1.70M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   695k|        : m_str(r.str)
 7981|   695k|    {
 7982|   695k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   865k|    {
 1598|   865k|        return has_value();
 1599|   865k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.56M|    {
  675|  2.56M|        return m_has_value;
  676|  2.56M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   838k|    {
 1673|   838k|        return &value();
 1674|   838k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   838k|    {
 1627|   838k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   838k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   838k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   838k|        return this->get_value();
 1629|   838k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   838k|    {
  641|   838k|        return *value_ptr();
  642|   838k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|   838k|    {
 5708|   838k|        return ranges::begin(m_range);
 5709|   838k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   865k|    {
  631|   865k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 838k, False: 26.7k]
  ------------------
  632|   838k|            destroy_value();
  633|   838k|        }
  634|  26.7k|        else {
  635|  26.7k|            destroy_unexpected();
  636|  26.7k|        }
  637|   865k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   838k|    {
  696|   838k|        scn::detail::destroy_at(value_ptr());
  697|   838k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|   838k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   838k|    else {
  404|   838k|        p->~T();
  405|   838k|    }
  406|   838k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.7k|    {
  700|  26.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.7k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   347k|{
 8618|   347k|#if !SCN_DISABLE_LOCALE
 8619|   347k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   347k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   347k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   347k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   347k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 335k]
  |  |  ------------------
  ------------------
 8626|  12.3k|        return unexpected(result.error());
 8627|  12.3k|    }
 8628|   335k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   347k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   169k|{
 8642|   169k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   169k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   169k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 167k]
  |  |  ------------------
  ------------------
 8646|  2.05k|        return unexpected(result.error());
 8647|  2.05k|    }
 8648|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   169k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   167k|    {
 1663|   167k|        return std::move(value());
 1664|   167k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   157k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   157k|    {
 3564|   157k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   157k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  9.34M|    {
 3570|  9.34M|        return m_code == good;
 3571|  9.34M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  55.5k|    {
 3581|  55.5k|        return m_code;
 3582|  55.5k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  6.14M|    {
 3326|  6.14M|        return m_iterator;
 3327|  6.14M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  88.8M|    {
 3326|  88.8M|        return m_iterator;
 3327|  88.8M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  1.24M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6292|  37.0k|    {
 6293|  37.0k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6293:13): [True: 0, False: 37.0k]
  |  Branch (6293:39): [True: 0, False: 0]
  ------------------
 6294|       |            // clang-format off
 6295|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6296|       |            // clang-format on
 6297|      0|        }
 6298|       |
 6299|  37.0k|        m_specs.width = width;
 6300|  37.0k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|  1.21M|    {
 6314|  1.21M|        m_specs.type = type;
 6315|  1.21M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6330|  42.7k|    {
 6331|  42.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6332|  42.7k|        const auto end_value = static_cast<unsigned>(end);
 6333|  42.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  42.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6334|       |
 6335|  42.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  42.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 42.7k, False: 0]
  |  |  ------------------
  ------------------
 6336|       |            // No need to bit-twiddle with a mask, because with the
 6337|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6338|  42.7k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  42.7k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6339|  1.15M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6339:40): [True: 1.11M, False: 42.7k]
  ------------------
 6340|  1.11M|                m_specs.charset_literals[v / 8] |=
 6341|  1.11M|                    static_cast<unsigned char>(1ul << (v % 8));
 6342|  1.11M|            }
 6343|  42.7k|        }
 6344|      0|        else {
 6345|      0|            m_specs.charset_has_nonascii = true;
 6346|      0|        }
 6347|  42.7k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|  37.0k|    {
 6376|  37.0k|        SCN_UNLIKELY_ATTR
 6377|  37.0k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|  37.0k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  1.31M|    {
 6387|  1.31M|        return static_cast<bool>(m_error);
 6388|  1.31M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  55.5k|{
 3605|  55.5k|    return a.code() == b;
 3606|  55.5k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  55.5k|{
 3609|  55.5k|    return !(a == b);
 3610|  55.5k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  83.3M|{
 4043|       |    // Pattern_White_Space property
 4044|  83.3M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 16.6M, False: 66.6M]
  |  Branch (4044:27): [True: 2.78M, False: 13.8M]
  ------------------
 4045|  83.3M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 2.57M, False: 77.9M]
  ------------------
 4046|  83.3M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 506k, False: 77.4M]
  ------------------
 4047|  83.3M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 239k, False: 77.2M]
  ------------------
 4048|  83.3M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 277k, False: 76.9M]
  ------------------
 4049|  83.3M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 120k, False: 76.8M]
  ------------------
 4050|  83.3M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 60, False: 76.8M]
  ------------------
 4051|  83.3M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|  18.5k|{
 7074|  18.5k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 18.5k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 18.5k]
  ------------------
 7079|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 18.5k]
  ------------------
 7080|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 18.5k]
  ------------------
 7081|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 18.5k]
  ------------------
 7082|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 18.5k]
  ------------------
 7083|      0|            return arg_type_category::integer;
 7084|       |
 7085|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 18.5k]
  ------------------
 7086|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 18.5k]
  ------------------
 7087|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 18.5k]
  ------------------
 7088|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 18.5k]
  ------------------
 7089|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 0, False: 18.5k]
  ------------------
 7090|      0|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 18.5k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 18.5k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 18.5k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 18.5k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 18.5k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 18.5k]
  ------------------
 7102|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 18.5k]
  ------------------
 7103|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 18.5k]
  ------------------
 7104|      0|            return arg_type_category::floating;
 7105|       |
 7106|  2.05k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 2.05k, False: 16.4k]
  ------------------
 7107|  6.17k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 4.11k, False: 14.4k]
  ------------------
 7108|  10.2k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 4.11k, False: 14.4k]
  ------------------
 7109|  18.5k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 8.23k, False: 10.2k]
  ------------------
 7110|  18.5k|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 18.5k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 18.5k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  18.5k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|  18.5k|            SCN_CLANG_POP
 7121|  18.5k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|  18.5k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  18.5k|{
 3650|  18.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  18.5k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  21.1k|{
 3650|  21.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  21.1k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  10.8k|{
 3650|  10.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  10.8k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7215|  1.21M|{
 7216|  1.21M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.21M]
  ------------------
 7217|  1.21M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7217:9): [True: 1.17M, False: 39.8k]
  ------------------
 7218|  1.21M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7218:9): [True: 21.3k, False: 18.5k]
  ------------------
 7219|  1.21M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7219:9): [True: 0, False: 18.5k]
  ------------------
 7220|  1.21M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7220:9): [True: 0, False: 18.5k]
  ------------------
 7221|  1.19M|        return;
 7222|  1.19M|    }
 7223|  18.5k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7223:9): [True: 18.5k, False: 0]
  ------------------
 7224|  18.5k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.5k, False: 0]
  |  |  ------------------
  ------------------
 7225|       |            // clang-format off
 7226|  18.5k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7227|       |            // clang-format on
 7228|  18.5k|        }
 7229|      0|        return;
 7230|  18.5k|    }
 7231|      0|    SCN_UNLIKELY_ATTR
 7232|      0|    handler.on_error("Invalid type specifier for string");
 7233|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  33.5M|    {
 4203|  33.5M|        assert(m_begin);
 4204|  33.5M|        return m_end == nullptr;
 4205|  33.5M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   140k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   140k|    else {
 3716|   140k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   140k|    }
 3718|   140k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|   726k|    {
 4220|   726k|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 726k]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|   726k|        return parent()->get_segment_starting_at(position());
 4226|   726k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  19.5M|    {
 4214|  19.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  19.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  19.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  19.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|   726k|    {
 4109|   726k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 415k, False: 311k]
  |  |  ------------------
  ------------------
 4110|   726k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   415k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   415k|        }
 4113|   311k|        const auto start = pos - m_putback_buffer.size();
 4114|   311k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   311k|        return m_current_view.substr(start);
 4116|   311k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|   817k|    {
 4198|   817k|        return m_position;
 4199|   817k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|   465k|    {
 4131|   465k|        return m_is_contiguous;
 4132|   465k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   493M|    {
 4203|   493M|        assert(m_begin);
 4204|   493M|        return m_end == nullptr;
 4205|   493M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   842k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   842k|    else {
 3716|   842k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   842k|    }
 3718|   842k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  2.54M|    {
 4220|  2.54M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 2.54M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  2.54M|        return parent()->get_segment_starting_at(position());
 4226|  2.54M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|   287M|    {
 4214|   287M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   287M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   287M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   287M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   287M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  2.54M|    {
 4109|  2.54M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.68M, False: 861k]
  |  |  ------------------
  ------------------
 4110|  2.54M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  1.68M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  1.68M|        }
 4113|   861k|        const auto start = pos - m_putback_buffer.size();
 4114|   861k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   861k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   861k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   861k|        return m_current_view.substr(start);
 4116|   861k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  3.05M|    {
 4198|  3.05M|        return m_position;
 4199|  3.05M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  2.59M|    {
 4131|  2.59M|        return m_is_contiguous;
 4132|  2.59M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   703k|    {
 3180|   703k|        return static_cast<D&>(*this);
 3181|   703k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|   703k|    {
 3221|   703k|        return detail::to_address(ranges::begin(derived()));
 3222|   703k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  1.69M|    {
 3180|  1.69M|        return static_cast<D&>(*this);
 3181|  1.69M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  1.69M|    {
 3221|  1.69M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.69M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|  63.6k|    {
 8180|  63.6k|        return ranges::subrange{begin(), end()};
 8181|  63.6k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|   188k|    {
 8164|   188k|        return m_current;
 8165|   188k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|  63.6k|    {
 8172|  63.6k|        return ranges::default_sentinel;
 8173|  63.6k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  2.25M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.25M|    static_cast<    \
  |  |  929|  2.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.25M|    static_cast<    \
  |  |  929|  2.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.25M|    {
 3312|  2.25M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|  2.98M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   145k|    {
 1837|   145k|        return detail::transform_error_impl(std::move(*this),
 1838|   145k|                                            std::forward<F>(f));
 1839|   145k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   145k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   145k|    else {
 1333|   145k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   145k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 143k, False: 2.40k]
  |  |  ------------------
  ------------------
 1335|   145k|                   ? result(*std::forward<Exp>(exp))
 1336|   145k|                   : result(unexpect,
 1337|  2.40k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.40k|                                           std::forward<Exp>(exp).error()));
 1339|   145k|    }
 1340|   145k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   291k|    {
  485|   291k|        return m_has_value;
  486|   291k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   143k|    {
 1663|   143k|        return std::move(value());
 1664|   143k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   342k|        : base(std::in_place, std::forward<U>(val)),
 1428|   342k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   342k|    {
 1430|   342k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   342k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   342k|    {
  437|   342k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   360k|    {
 1177|   360k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  14.2k|{
 1211|  14.2k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  14.2k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.40k|    {
 1614|  2.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.40k|        return std::move(this->get_unexpected().error());
 1616|  2.40k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.40k|    {
  468|  2.40k|        return m_unexpected;
  469|  2.40k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  28.5k|    {
  361|  28.5k|        return m_unexpected;
  362|  28.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.40k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.40k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.40k|    {
 1486|  2.40k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  16.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.7k|          m_has_value(false)
  446|  16.7k|    {
  447|  16.7k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   347k|    {
 8180|   347k|        return ranges::subrange{begin(), end()};
 8181|   347k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|  1.03M|    {
 8164|  1.03M|        return m_current;
 8165|  1.03M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   347k|    {
 8172|   347k|        return ranges::default_sentinel;
 8173|   347k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  31.1M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  31.1M|    static_cast<    \
  |  |  929|  31.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  31.1M|    static_cast<    \
  |  |  929|  31.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  31.1M|    {
 3312|  31.1M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   848k|    {
 1837|   848k|        return detail::transform_error_impl(std::move(*this),
 1838|   848k|                                            std::forward<F>(f));
 1839|   848k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   848k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   848k|    else {
 1333|   848k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   848k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   848k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 846k, False: 2.72k]
  |  |  ------------------
  ------------------
 1335|   848k|                   ? result(*std::forward<Exp>(exp))
 1336|   848k|                   : result(unexpect,
 1337|  2.72k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.72k|                                           std::forward<Exp>(exp).error()));
 1339|   848k|    }
 1340|   848k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.69M|    {
  485|  1.69M|        return m_has_value;
  486|  1.69M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   846k|    {
 1663|   846k|        return std::move(value());
 1664|   846k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   846k|    {
 1627|   846k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   846k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   846k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   846k|        return this->get_value();
 1629|   846k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   846k|    {
  451|   846k|        return m_value;
  452|   846k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  2.02M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.02M|    {
 1430|  2.02M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.02M|    {
  437|  2.02M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.05M|    {
 1177|  2.05M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.72k|    {
 1614|  2.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.72k|        return std::move(this->get_unexpected().error());
 1616|  2.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.72k|    {
  468|  2.72k|        return m_unexpected;
  469|  2.72k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.72k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.72k|    {
 1486|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  32.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  32.5k|          m_has_value(false)
  446|  32.5k|    {
  447|  32.5k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  50.5k|        : m_unexpected(std::forward<Err>(e))
  346|  50.5k|    {
  347|  50.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  50.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  50.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  29.3k|        : base(unexpect, std::move(e.error())),
 1474|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.3k|    {
 1476|  29.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  33.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.0k|          m_has_value(false)
  446|  33.0k|    {
  447|  33.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   588k|    {
 1177|   588k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   553k|        : base(std::in_place, std::forward<U>(val)),
 1428|   553k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   553k|    {
 1430|   553k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   553k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   553k|    {
  437|   553k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   588k|    {
 1598|   588k|        return has_value();
 1599|   588k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.17M|    {
  485|  1.17M|        return m_has_value;
  486|  1.17M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  33.0k|    {
 1604|  33.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  33.0k|        return this->get_unexpected().error();
 1606|  33.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  33.0k|    {
  468|  33.0k|        return m_unexpected;
  469|  33.0k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   461k|    {
 1663|   461k|        return std::move(value());
 1664|   461k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   555k|    {
 1627|   555k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   555k|        return this->get_value();
 1629|   555k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   555k|    {
  451|   555k|        return m_value;
  452|   555k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  59.5k|        : base(unexpect, std::move(e.error())),
 1474|  59.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  59.5k|    {
 1476|  59.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  65.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  65.0k|          m_has_value(false)
  446|  65.0k|    {
  447|  65.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.10M|    {
 1177|  4.10M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  4.04M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.04M|    {
 1430|  4.04M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.04M|    {
  437|  4.04M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  4.10M|    {
 1598|  4.10M|        return has_value();
 1599|  4.10M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  8.21M|    {
  485|  8.21M|        return m_has_value;
  486|  8.21M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  65.0k|    {
 1604|  65.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  65.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  65.0k|        return this->get_unexpected().error();
 1606|  65.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  65.0k|    {
  468|  65.0k|        return m_unexpected;
  469|  65.0k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  3.36M|    {
 1663|  3.36M|        return std::move(value());
 1664|  3.36M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  4.04M|    {
 1627|  4.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.04M|        return this->get_value();
 1629|  4.04M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.04M|    {
  451|  4.04M|        return m_value;
  452|  4.04M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   236k|    {
 1837|   236k|        return detail::transform_error_impl(std::move(*this),
 1838|   236k|                                            std::forward<F>(f));
 1839|   236k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   236k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   236k|    else {
 1333|   236k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   236k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   236k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 233k, False: 3.71k]
  |  |  ------------------
  ------------------
 1335|   236k|                   ? result(*std::forward<Exp>(exp))
 1336|   236k|                   : result(unexpect,
 1337|  3.71k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.71k|                                           std::forward<Exp>(exp).error()));
 1339|   236k|    }
 1340|   236k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   473k|    {
  485|   473k|        return m_has_value;
  486|   473k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   233k|    {
 1663|   233k|        return std::move(value());
 1664|   233k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   233k|    {
 1627|   233k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   233k|        return this->get_value();
 1629|   233k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   233k|    {
  451|   233k|        return m_value;
  452|   233k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  3.71k|    {
 1614|  3.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  3.71k|        return std::move(this->get_unexpected().error());
 1616|  3.71k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  3.71k|    {
  468|  3.71k|        return m_unexpected;
  469|  3.71k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  3.71k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  3.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  3.71k|    {
 1486|  3.71k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  6.82M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  14.3k|        : base(unexpect, std::move(e.error())),
 1474|  14.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.3k|    {
 1476|  14.3k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  1.75M|    {
 4289|  1.75M|        return x.is_at_end();
 4290|  1.75M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  3.61M|    {
 4333|  3.61M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 3.61M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  3.61M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 3.61M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  3.61M|        return !read_at_position();
 4340|  3.61M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  9.97M|    {
 4313|  9.97M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  9.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  9.97M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 9.97M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  9.97M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  9.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.10M, False: 1.86M]
  |  |  ------------------
  ------------------
 4320|  8.10M|            return true;
 4321|  8.10M|        }
 4322|       |
 4323|  3.71M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 1.86M, False: 1.85M]
  ------------------
 4324|  1.86M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 18.7k, False: 1.85M]
  ------------------
 4325|  18.7k|                return false;
 4326|  18.7k|            }
 4327|  1.86M|        }
 4328|  1.85M|        return true;
 4329|  1.86M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  13.6M|    {
 4089|  13.6M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  13.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  3.29M|    {
 4248|  3.29M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  3.29M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 3.29M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  3.29M|        auto res = read_at_position();
 4257|  3.29M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  3.29M|        return parent()->get_character_at(m_position);
 4259|  3.29M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  3.29M|    {
 4120|  3.29M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.79M, False: 1.50M]
  |  |  ------------------
  ------------------
 4121|  3.29M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  1.79M|            return m_putback_buffer[pos];
 4123|  1.79M|        }
 4124|  1.50M|        const auto start = pos - m_putback_buffer.size();
 4125|  1.50M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  1.50M|        return m_current_view[start];
 4127|  1.50M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   143k|        : base(std::in_place, std::forward<U>(val)),
 1428|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   143k|    {
  437|   143k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   145k|    {
 1177|   145k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  2.40k|        : base(unexpect, std::move(e.error())),
 1474|  2.40k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.40k|    {
 1476|  2.40k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  2.40k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.40k|          m_has_value(false)
  446|  2.40k|    {
  447|  2.40k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  14.2k|        : m_unexpected(std::forward<Args>(args)...)
  355|  14.2k|    {
  356|  14.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  14.2k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  1.34M|    {
 4283|  1.34M|        return !(lhs == rhs);
 4284|  1.34M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  1.34M|    {
 4278|  1.34M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 1.34M, False: 0]
  |  Branch (4278:46): [True: 227k, False: 1.12M]
  ------------------
 4279|  1.34M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  3.05M|    {
 4234|  3.05M|        ++m_position;
 4235|  3.05M|        (void)read_at_position();
 4236|  3.05M|        return *this;
 4237|  3.05M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  14.2k|        : m_unexpected(std::forward<Err>(e))
  346|  14.2k|    {
  347|  14.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  14.2k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.04k|        : base(unexpect, std::move(e.error())),
 1474|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.04k|    {
 1476|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.04k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.04k|          m_has_value(false)
  446|  1.04k|    {
  447|  1.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   118k|    {
 1177|   118k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   117k|        : base(std::in_place, std::forward<U>(val)),
 1428|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   117k|    {
 1430|   117k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   117k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   117k|    {
  437|   117k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   118k|    {
 1598|   118k|        return has_value();
 1599|   118k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   236k|    {
  485|   236k|        return m_has_value;
  486|   236k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.04k|    {
 1604|  1.04k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.04k|        return this->get_unexpected().error();
 1606|  1.04k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.04k|    {
  468|  1.04k|        return m_unexpected;
  469|  1.04k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   117k|    {
 1663|   117k|        return std::move(value());
 1664|   117k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   117k|    {
 1627|   117k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   117k|        return this->get_value();
 1629|   117k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   117k|    {
  451|   117k|        return m_value;
  452|   117k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  5.49M|    {
 3330|  5.49M|        return m_sentinel;
 3331|  5.49M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   151k|    {
 3326|   151k|        return m_iterator;
 3327|   151k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   151k|    {
 3330|   151k|        return m_sentinel;
 3331|   151k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   360k|    {
 1598|   360k|        return has_value();
 1599|   360k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   720k|    {
  485|   720k|        return m_has_value;
  486|   720k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  16.7k|    {
 1604|  16.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  16.7k|        return this->get_unexpected().error();
 1606|  16.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  16.7k|    {
  468|  16.7k|        return m_unexpected;
  469|  16.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   285k|    {
 1663|   285k|        return std::move(value());
 1664|   285k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   343k|    {
 1627|   343k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   343k|        return this->get_value();
 1629|   343k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   343k|    {
  451|   343k|        return m_value;
  452|   343k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   144k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   144k|    {
 3312|   144k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  1.86M|    {
 4300|  1.86M|        return !x.is_at_end();
 4301|  1.86M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  3.71k|        : base(unexpect, std::move(e.error())),
 1474|  3.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.71k|    {
 1476|  3.71k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  3.71k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.71k|          m_has_value(false)
  446|  3.71k|    {
  447|  3.71k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   236k|    {
 1177|   236k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   233k|        : base(std::in_place, std::forward<U>(val)),
 1428|   233k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   233k|    {
 1430|   233k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   233k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   233k|    {
  437|   233k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.48k|        : base(unexpect, std::move(e.error())),
 1474|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.48k|    {
 1476|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.48k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.48k|          m_has_value(false)
  446|  1.48k|    {
  447|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   191k|    {
 1177|   191k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   190k|        : base(std::in_place, std::forward<U>(val)),
 1428|   190k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   190k|    {
 1430|   190k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   190k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   190k|    {
  437|   190k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   191k|    {
 1598|   191k|        return has_value();
 1599|   191k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   383k|    {
  485|   383k|        return m_has_value;
  486|   383k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  1.48k|    {
 1604|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.48k|        return this->get_unexpected().error();
 1606|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.48k|    {
  468|  1.48k|        return m_unexpected;
  469|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   190k|    {
 1663|   190k|        return std::move(value());
 1664|   190k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   190k|    {
 1627|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   190k|        return this->get_value();
 1629|   190k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   190k|    {
  451|   190k|        return m_value;
  452|   190k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   703k|    {
 2855|   703k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   703k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   703k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   703k|    {
 2836|   703k|        return t.data();
 2837|   703k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   120k|        : base(unexpect, std::move(e.error())),
 1474|   120k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   120k|    {
 1476|   120k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   120k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   120k|          m_has_value(false)
  446|   120k|    {
  447|   120k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.00M|    {
 1177|  3.00M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  2.88M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.88M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.88M|    {
 1430|  2.88M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  2.88M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.88M|    {
  437|  2.88M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  58.2k|    {
 1653|  58.2k|        return value();
 1654|  58.2k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  93.9k|    {
 1653|  93.9k|        return value();
 1654|  93.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|    842|        : base(std::in_place, std::forward<U>(val)),
 1428|    842|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    842|    {
 1430|    842|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|    842|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    842|    {
  437|    842|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  1.68k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.68k|    {
 1430|  1.68k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.68k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.68k|    {
  437|  1.68k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  29.7k|        : base(unexpect, std::move(e.error())),
 1474|  29.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  29.7k|    {
 1476|  29.7k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  28.4M|    {
 4289|  28.4M|        return x.is_at_end();
 4290|  28.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  55.9M|    {
 4333|  55.9M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 55.9M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  55.9M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 55.9M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  55.9M|        return !read_at_position();
 4340|  55.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|   148M|    {
 4313|   148M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   148M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   148M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 148M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   148M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   148M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 121M, False: 27.1M]
  |  |  ------------------
  ------------------
 4320|   121M|            return true;
 4321|   121M|        }
 4322|       |
 4323|  54.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 27.1M, False: 27.1M]
  ------------------
 4324|  27.1M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 24.5k, False: 27.1M]
  ------------------
 4325|  24.5k|                return false;
 4326|  24.5k|            }
 4327|  27.1M|        }
 4328|  27.1M|        return true;
 4329|  27.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|   202M|    {
 4089|   202M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   202M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  54.9M|    {
 4248|  54.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  54.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  54.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 54.9M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  54.9M|        auto res = read_at_position();
 4257|  54.9M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  54.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  54.9M|        return parent()->get_character_at(m_position);
 4259|  54.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  54.9M|    {
 4120|  54.9M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  54.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.7M, False: 26.2M]
  |  |  ------------------
  ------------------
 4121|  54.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  28.7M|            return m_putback_buffer[pos];
 4123|  28.7M|        }
 4124|  26.2M|        const auto start = pos - m_putback_buffer.size();
 4125|  26.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  26.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  26.2M|        return m_current_view[start];
 4127|  26.2M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   153M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   153M|    else {
 3810|       |        // utf-32
 3811|   153M|        static_assert(sizeof(U) == 4);
 3812|   153M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   153M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   153M|        return 1;
 3814|   153M|    }
 3815|   153M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   846k|        : base(std::in_place, std::forward<U>(val)),
 1428|   846k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   846k|    {
 1430|   846k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   846k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   846k|    {
  437|   846k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   848k|    {
 1177|   848k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  2.72k|        : base(unexpect, std::move(e.error())),
 1474|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.72k|    {
 1476|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  2.72k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.72k|          m_has_value(false)
  446|  2.72k|    {
  447|  2.72k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  11.0M|    {
 4283|  11.0M|        return !(lhs == rhs);
 4284|  11.0M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  11.0M|    {
 4278|  11.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 11.0M, False: 0]
  |  Branch (4278:46): [True: 343k, False: 10.7M]
  ------------------
 4279|  11.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  37.8M|    {
 4234|  37.8M|        ++m_position;
 4235|  37.8M|        (void)read_at_position();
 4236|  37.8M|        return *this;
 4237|  37.8M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   153M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   153M|    else {
 4016|   153M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   153M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   153M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   153M|        auto cp = static_cast<char32_t>(input.front());
 4018|   153M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   153M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.06M, False: 151M]
  |  |  ------------------
  ------------------
 4019|  1.06M|            return invalid_code_point;
 4020|  1.06M|        }
 4021|   151M|        return cp;
 4022|   153M|    }
 4023|   153M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.08k|        : base(unexpect, std::move(e.error())),
 1474|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.08k|    {
 1476|  1.08k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.08k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.08k|          m_has_value(false)
  446|  1.08k|    {
  447|  1.08k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   678k|    {
 1177|   678k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   677k|        : base(std::in_place, std::forward<U>(val)),
 1428|   677k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   677k|    {
 1430|   677k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   677k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   677k|    {
  437|   677k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   678k|    {
 1598|   678k|        return has_value();
 1599|   678k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.35M|    {
  485|  1.35M|        return m_has_value;
  486|  1.35M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.08k|    {
 1604|  1.08k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.08k|        return this->get_unexpected().error();
 1606|  1.08k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.08k|    {
  468|  1.08k|        return m_unexpected;
  469|  1.08k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   677k|    {
 1663|   677k|        return std::move(value());
 1664|   677k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   677k|    {
 1627|   677k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   677k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   677k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   677k|        return this->get_value();
 1629|   677k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   677k|    {
  451|   677k|        return m_value;
  452|   677k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  85.8M|    {
 3330|  85.8M|        return m_sentinel;
 3331|  85.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|   854k|    {
 3326|   854k|        return m_iterator;
 3327|   854k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|   854k|    {
 3330|   854k|        return m_sentinel;
 3331|   854k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.05M|    {
 1598|  2.05M|        return has_value();
 1599|  2.05M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.10M|    {
  485|  4.10M|        return m_has_value;
  486|  4.10M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  32.5k|    {
 1604|  32.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  32.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  32.5k|        return this->get_unexpected().error();
 1606|  32.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  32.5k|    {
  468|  32.5k|        return m_unexpected;
  469|  32.5k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.68M|    {
 1663|  1.68M|        return std::move(value());
 1664|  1.68M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.02M|    {
 1627|  2.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.02M|        return this->get_value();
 1629|  2.02M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.02M|    {
  451|  2.02M|        return m_value;
  452|  2.02M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  71.6M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  71.6M|    else {
 3701|  71.6M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  71.6M|                                       to_address(first), to_address(last)))};
 3703|  71.6M|    }
 3704|  71.6M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   215M|{
  326|   215M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   215M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   215M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   846k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   846k|    static_cast<    \
  |  |  929|   846k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   846k|    static_cast<    \
  |  |  929|   846k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   846k|    {
 3312|   846k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  27.4M|    {
 4300|  27.4M|        return !x.is_at_end();
 4301|  27.4M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  5.44k|        : base(unexpect, std::move(e.error())),
 1474|  5.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.44k|    {
 1476|  5.44k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  5.44k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.44k|          m_has_value(false)
  446|  5.44k|    {
  447|  5.44k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.69M|    {
 1177|  1.69M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  1.69M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.69M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.69M|    {
 1430|  1.69M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.69M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.69M|    {
  437|  1.69M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.39M|    {
  485|  3.39M|        return m_has_value;
  486|  3.39M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.69M|    {
 1627|  1.69M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.69M|        return this->get_value();
 1629|  1.69M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.69M|    {
  451|  1.69M|        return m_value;
  452|  1.69M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.17k|        : base(unexpect, std::move(e.error())),
 1474|  2.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.17k|    {
 1476|  2.17k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.17k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.17k|          m_has_value(false)
  446|  2.17k|    {
  447|  2.17k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.35M|    {
 1177|  1.35M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.35M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.35M|    {
 1430|  1.35M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.35M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.35M|    {
  437|  1.35M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.69M|    {
 1837|  1.69M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.69M|                                            std::forward<F>(f));
 1839|  1.69M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.69M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.69M|    else {
 1333|  1.69M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.69M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.69M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.69M, False: 5.44k]
  |  |  ------------------
  ------------------
 1335|  1.69M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.69M|                   : result(unexpect,
 1337|  5.44k|                            trivial_invoke(std::forward<F>(f),
 1338|  5.44k|                                           std::forward<Exp>(exp).error()));
 1339|  1.69M|    }
 1340|  1.69M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.69M|    {
 1663|  1.69M|        return std::move(value());
 1664|  1.69M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  5.44k|    {
 1614|  5.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  5.44k|        return std::move(this->get_unexpected().error());
 1616|  5.44k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  5.44k|    {
  468|  5.44k|        return m_unexpected;
  469|  5.44k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  5.44k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  5.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  5.44k|    {
 1486|  5.44k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.35M|    {
 1598|  1.35M|        return has_value();
 1599|  1.35M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.71M|    {
  485|  2.71M|        return m_has_value;
  486|  2.71M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.17k|    {
 1604|  2.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.17k|        return this->get_unexpected().error();
 1606|  2.17k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.17k|    {
  468|  2.17k|        return m_unexpected;
  469|  2.17k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.35M|    {
 1663|  1.35M|        return std::move(value());
 1664|  1.35M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.35M|    {
 1627|  1.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.35M|        return this->get_value();
 1629|  1.35M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.35M|    {
  451|  1.35M|        return m_value;
  452|  1.35M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.69M|    {
 2855|  1.69M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.69M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.69M|    {
 2836|  1.69M|        return t.data();
 2837|  1.69M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   335k|    {
 1653|   335k|        return value();
 1654|   335k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   671k|    {
 1653|   671k|        return value();
 1654|   671k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|    108|        : base(std::in_place, std::forward<U>(val)),
 1428|    108|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    108|    {
 1430|    108|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|    108|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    108|    {
  437|    108|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    216|        : base(std::in_place, std::forward<U>(val)),
 1428|    216|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    216|    {
 1430|    216|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    216|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    216|    {
  437|    216|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   333k|    {
 5476|   333k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   333k|        return static_cast<std::size_t>(m_desc &
 5481|   333k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   333k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|   667k|    {
 5501|   667k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   667k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   333k|    {
 5444|   333k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   333k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   333k|        const auto t = type(id);
 5456|   333k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   333k|        basic_scan_arg<Context> arg;
 5461|   333k|        arg.m_type = t;
 5462|   333k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 333k, False: 0]
  ------------------
 5463|   333k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   333k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   333k|        return arg;
 5469|   333k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   333k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   333k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   333k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   333k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   333k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   333k|    {
 5505|   333k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   333k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|   578k|    {
 5257|   578k|        return m_type != detail::arg_type::none_type;
 5258|   578k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   142k|{
 8428|   142k|#define SCN_VISIT(Type)                                         \
 8429|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   142k|    }                                                           \
 8432|   142k|    else {                                                      \
 8433|   142k|        return vis(monostate_val);                              \
 8434|   142k|    }
 8435|       |
 8436|   142k|    monostate monostate_val{};
 8437|       |
 8438|   142k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 142k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 142k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 142k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 142k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 142k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 142k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 142k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 142k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 142k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 142k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 142k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 142k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 142k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 142k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 142k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 142k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 142k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 142k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|  71.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 71.0k, False: 71.0k]
  ------------------
 8476|  71.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  71.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  71.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  71.0k|    }                                                           \
  |  | 8432|  71.0k|    else {                                                      \
  |  | 8433|  71.0k|        return vis(monostate_val);                              \
  |  | 8434|  71.0k|    }
  ------------------
 8477|   142k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 71.0k, False: 71.0k]
  ------------------
 8478|   142k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   142k|    }                                                           \
  |  | 8432|   142k|    else {                                                      \
  |  | 8433|   142k|        return vis(monostate_val);                              \
  |  | 8434|   142k|    }
  ------------------
 8479|   142k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 142k]
  ------------------
 8480|   142k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   142k|    }                                                           \
  |  | 8432|   142k|    else {                                                      \
  |  | 8433|   142k|        return vis(monostate_val);                              \
  |  | 8434|   142k|    }
  ------------------
 8481|   142k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 142k]
  ------------------
 8482|   142k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   142k|    }                                                           \
  |  | 8432|   142k|    else {                                                      \
  |  | 8433|   142k|        return vis(monostate_val);                              \
  |  | 8434|   142k|    }
  ------------------
 8483|   142k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 142k]
  ------------------
 8484|   142k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   142k|    }                                                           \
  |  | 8432|   142k|    else {                                                      \
  |  | 8433|   142k|        return vis(monostate_val);                              \
  |  | 8434|   142k|    }
  ------------------
 8485|   142k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 142k]
  ------------------
 8486|   142k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   142k|    }                                                           \
  |  | 8432|   142k|    else {                                                      \
  |  | 8433|   142k|        return vis(monostate_val);                              \
  |  | 8434|   142k|    }
  ------------------
 8487|       |
 8488|   142k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 142k]
  ------------------
 8489|   142k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   142k|            return vis(
 8491|   142k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 142k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 142k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   142k|            SCN_CLANG_POP
 8506|   142k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   180k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   180k|    {
 5555|   180k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|  67.7k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|  67.7k|    {
 8149|  67.7k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|   180k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   180k|    static_cast<    \
  |  |  929|   180k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   180k|    static_cast<    \
  |  |  929|   180k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   180k|    {
 8067|   180k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|   155k|{
 4353|   155k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 155k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   155k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   155k|                            ranges::default_sentinel};
 4359|   155k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|   155k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   155k|    {
 4185|   155k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   155k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   155k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  87.3k|{
 8428|  87.3k|#define SCN_VISIT(Type)                                         \
 8429|  87.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  87.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  87.3k|    }                                                           \
 8432|  87.3k|    else {                                                      \
 8433|  87.3k|        return vis(monostate_val);                              \
 8434|  87.3k|    }
 8435|       |
 8436|  87.3k|    monostate monostate_val{};
 8437|       |
 8438|  87.3k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 87.3k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 87.3k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 87.3k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 87.3k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 87.3k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 87.3k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 87.3k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 87.3k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 87.3k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 87.3k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 87.3k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 87.3k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 87.3k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 87.3k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 87.3k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 87.3k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 87.3k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 87.3k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 87.3k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|  87.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 87.3k, False: 0]
  ------------------
 8478|  87.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  87.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.3k|    }                                                           \
  |  | 8432|  87.3k|    else {                                                      \
  |  | 8433|  87.3k|        return vis(monostate_val);                              \
  |  | 8434|  87.3k|    }
  ------------------
 8479|  87.3k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 87.3k]
  ------------------
 8480|  87.3k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  87.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.3k|    }                                                           \
  |  | 8432|  87.3k|    else {                                                      \
  |  | 8433|  87.3k|        return vis(monostate_val);                              \
  |  | 8434|  87.3k|    }
  ------------------
 8481|  87.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 87.3k]
  ------------------
 8482|  87.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  87.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.3k|    }                                                           \
  |  | 8432|  87.3k|    else {                                                      \
  |  | 8433|  87.3k|        return vis(monostate_val);                              \
  |  | 8434|  87.3k|    }
  ------------------
 8483|  87.3k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 87.3k]
  ------------------
 8484|  87.3k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  87.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.3k|    }                                                           \
  |  | 8432|  87.3k|    else {                                                      \
  |  | 8433|  87.3k|        return vis(monostate_val);                              \
  |  | 8434|  87.3k|    }
  ------------------
 8485|  87.3k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 87.3k]
  ------------------
 8486|  87.3k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  87.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.3k|    }                                                           \
  |  | 8432|  87.3k|    else {                                                      \
  |  | 8433|  87.3k|        return vis(monostate_val);                              \
  |  | 8434|  87.3k|    }
  ------------------
 8487|       |
 8488|  87.3k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 87.3k]
  ------------------
 8489|  87.3k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  87.3k|            return vis(
 8491|  87.3k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 87.3k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 87.3k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  87.3k|            SCN_CLANG_POP
 8506|  87.3k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   112k|{
 7055|   112k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   112k|    handler.check_args_exhausted();
 7057|   112k|    return handler.get_error();
 7058|   112k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   112k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   112k|    auto begin = format.data();
 7024|   112k|    auto it = begin;
 7025|   112k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   205k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 112k, False: 92.3k]
  ------------------
 7028|   112k|        const auto ch = *it++;
 7029|   112k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 112k, False: 0]
  ------------------
 7030|   112k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   112k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   112k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 20.5k, False: 92.3k]
  ------------------
 7034|  20.5k|                return;
 7035|  20.5k|            }
 7036|   112k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   112k|    }
 7047|       |
 7048|  92.3k|    handler.on_literal_text(begin, end);
 7049|  92.3k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   112k|{
 6953|   112k|    struct id_adapter {
 6954|   112k|        constexpr void operator()()
 6955|   112k|        {
 6956|   112k|            arg_id = handler.on_arg_id();
 6957|   112k|        }
 6958|   112k|        constexpr void operator()(std::size_t id)
 6959|   112k|        {
 6960|   112k|            arg_id = handler.on_arg_id(id);
 6961|   112k|        }
 6962|       |
 6963|   112k|        constexpr void on_error(const char* msg)
 6964|   112k|        {
 6965|   112k|            SCN_UNLIKELY_ATTR
 6966|   112k|            handler.on_error(msg);
 6967|   112k|        }
 6968|       |
 6969|   112k|        Handler& handler;
 6970|   112k|        std::size_t arg_id;
 6971|   112k|    };
 6972|       |
 6973|   112k|    ++begin;
 6974|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   112k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 112k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   112k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 112k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   112k|    else {
 6986|   112k|        auto adapter = id_adapter{handler, 0};
 6987|   112k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   112k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   112k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 112k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   112k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 112k, False: 0]
  ------------------
 6998|   112k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   112k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   112k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.23k, False: 104k]
  |  |  |  Branch (859:45): [True: 0, False: 112k]
  |  |  |  Branch (859:45): [True: 8.23k, False: 104k]
  |  |  ------------------
  ------------------
 7004|  8.23k|                handler.on_error("Unknown format specifier");
 7005|  8.23k|                return begin;
 7006|  8.23k|            }
 7007|   112k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   112k|    }
 7014|   104k|    return begin + 1;
 7015|   112k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|   180k|    {
 8050|   180k|        return m_args.get(id);
 8051|   180k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|   168k|    {
 8060|   168k|        return m_locale;
 8061|   168k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   180k|    {
 5576|   180k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 180k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   180k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   180k|        do_check_arg_id(id);
 5584|   180k|        return id;
 5585|   180k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   180k|{
 6064|   180k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   180k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   180k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   112k|{
 6454|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   112k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 112k, False: 0]
  |  Branch (6455:26): [True: 0, False: 112k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   112k|    handler();
 6460|   112k|    return begin;
 6461|   112k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6402|  12.3k|{
 6403|  12.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  12.3k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  12.3k|    unsigned long long value = 0;
 6407|  24.6k|    do {
 6408|  24.6k|        value *= 10;
 6409|  24.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  24.6k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 0, False: 24.6k]
  ------------------
 6411|  24.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|      0|            return -1;
 6413|      0|        }
 6414|  24.6k|        ++begin;
 6415|  24.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 24.6k, False: 0]
  |  Branch (6415:30): [True: 24.6k, False: 0]
  |  Branch (6415:47): [True: 12.3k, False: 12.3k]
  ------------------
 6416|  12.3k|    return static_cast<int>(value);
 6417|  12.3k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   112k|        {
 6956|   112k|            arg_id = handler.on_arg_id();
 6957|   112k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|   361k|    {
 5262|   361k|        return m_type;
 5263|   361k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   168k|    {
 5571|   168k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   168k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|   348k|    {
 5560|   348k|        return m_format.data();
 5561|   348k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   112k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   112k|    {
 7133|   112k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   112k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   112k|{
 6869|   112k|    auto do_presentation = [&]() -> const CharT* {
 6870|   112k|        if (*begin == CharT{'['}) {
 6871|   112k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   112k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   112k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   112k|                return begin;
 6877|   112k|            }
 6878|   112k|            handler.on_character_set_string(set);
 6879|   112k|            return begin;
 6880|   112k|        }
 6881|   112k|        if (*begin == CharT{'/'}) {
 6882|   112k|            return parse_presentation_regex(begin, end, handler);
 6883|   112k|        }
 6884|   112k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   112k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   112k|            handler.on_error("Invalid type specifier in format string");
 6887|   112k|            return begin;
 6888|   112k|        }
 6889|   112k|        handler.on_type(type);
 6890|   112k|        return begin;
 6891|   112k|    };
 6892|       |
 6893|   112k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 112k, False: 0]
  |  Branch (6893:28): [True: 98.8k, False: 14.0k]
  ------------------
 6894|   112k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 98.8k, False: 0]
  |  Branch (6894:36): [True: 94.7k, False: 4.11k]
  ------------------
 6895|  94.7k|        return do_presentation();
 6896|  94.7k|    }
 6897|       |
 6898|  18.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  18.1k|    begin = parse_align(begin, end, handler);
 6904|  18.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  18.1k|    begin = parse_width(begin, end, handler);
 6910|  18.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  18.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 18.1k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  18.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 4.11k, False: 14.0k]
  ------------------
 6929|  4.11k|        handler.on_localized();
 6930|  4.11k|        ++begin;
 6931|  4.11k|    }
 6932|  18.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  18.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 18.1k, False: 0]
  |  Branch (6937:25): [True: 14.0k, False: 4.11k]
  ------------------
 6938|  14.0k|        do_presentation();
 6939|  14.0k|    }
 6940|  18.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  18.1k|    return begin;
 6946|  18.1k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|   159k|{
 6518|   159k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 153k, False: 6.17k]
  |  Branch (6518:33): [True: 153k, False: 0]
  ------------------
 6519|   159k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 6.17k, False: 0]
  |  Branch (6519:33): [True: 6.17k, False: 0]
  ------------------
 6520|   159k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   108k|    auto do_presentation = [&]() -> const CharT* {
 6870|   108k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 5.80k, False: 102k]
  ------------------
 6871|  5.80k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  5.80k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.80k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  5.80k|            handler.on_character_set_string(set);
 6879|  5.80k|            return begin;
 6880|  5.80k|        }
 6881|   102k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 102k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   102k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   102k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 98.8k]
  |  |  ------------------
  ------------------
 6886|  4.11k|            handler.on_error("Invalid type specifier in format string");
 6887|  4.11k|            return begin;
 6888|  4.11k|        }
 6889|  98.8k|        handler.on_type(type);
 6890|  98.8k|        return begin;
 6891|   102k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  5.80k|{
 6708|  5.80k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  5.80k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  5.80k|    auto start = begin;
 6712|  5.80k|    ++begin;
 6713|       |
 6714|  5.80k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.80k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  5.80k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 5.80k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  5.80k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 5.80k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  17.4k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 17.4k, False: 0]
  ------------------
 6739|  17.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.4k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  17.4k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 5.80k, False: 11.6k]
  ------------------
 6744|  5.80k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  5.80k|        }
 6746|       |
 6747|  11.6k|        parse_presentation_set_literal(begin, end, handler);
 6748|  11.6k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  5.80k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6671|  11.6k|{
 6672|  11.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  11.6k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  11.6k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  11.6k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 11.6k, False: 0]
  |  Branch (6679:25): [True: 11.6k, False: 0]
  |  Branch (6679:49): [True: 11.6k, False: 0]
  ------------------
 6680|  11.6k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 11.6k, False: 0]
  ------------------
 6681|  11.6k|        ++begin;
 6682|       |
 6683|  11.6k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  11.6k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  11.6k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  11.6k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  11.6k|        return;
 6697|  11.6k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6647|  23.2k|{
 6648|  23.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  23.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  23.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.2k]
  |  |  |  Branch (859:45): [True: 0, False: 23.2k]
  |  |  |  Branch (859:45): [True: 0, False: 23.2k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  23.2k|    const auto cp =
 6657|  23.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  23.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.2k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  23.2k|    begin += len;
 6664|  23.2k|    return cp;
 6665|  23.2k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  8.70k|    {
 6357|  8.70k|        m_specs.charset_string_data = fmt.data();
 6358|  8.70k|        m_specs.charset_string_size = fmt.size();
 6359|  8.70k|        on_type(presentation_type::string_set);
 6360|  8.70k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|   165k|{
 6466|   165k|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 165k]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 165k]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 165k]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 165k]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 165k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 165k]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 165k]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 165k]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 165k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 165k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 165k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 165k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 165k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 165k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 165k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 165k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 165k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 165k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|   153k|        case 's':
  ------------------
  |  Branch (6496:9): [True: 153k, False: 12.3k]
  ------------------
 6497|   153k|            return presentation_type::string;
 6498|  6.17k|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 6.17k, False: 159k]
  ------------------
 6499|  6.17k|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 165k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 165k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 165k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 165k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  6.17k|        default:
  ------------------
  |  Branch (6510:9): [True: 6.17k, False: 159k]
  ------------------
 6511|  6.17k|            return presentation_type::none;
 6512|   165k|    }
 6513|   165k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  18.1k|{
 6543|  18.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  18.1k|    auto check_align = [](wchar_t ch) {
 6546|  18.1k|        switch (ch) {
 6547|  18.1k|            case L'<':
 6548|  18.1k|                return align_type::left;
 6549|  18.1k|            case L'>':
 6550|  18.1k|                return align_type::right;
 6551|  18.1k|            case L'^':
 6552|  18.1k|                return align_type::center;
 6553|  18.1k|            default:
 6554|  18.1k|                return align_type::none;
 6555|  18.1k|        }
 6556|  18.1k|    };
 6557|       |
 6558|  18.1k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  18.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  |  Branch (859:45): [True: 0, False: 18.1k]
  |  |  |  Branch (859:45): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 6560|  18.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  18.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  18.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  18.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  18.1k|    const auto begin_before_fill = begin;
 6570|  18.1k|    begin += potential_fill_len;
 6571|       |
 6572|  18.1k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 18.1k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  18.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  18.1k|    const auto begin_after_fill = begin;
 6578|  18.1k|    ++begin;
 6579|       |
 6580|  18.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 18.1k, False: 0]
  ------------------
 6581|  18.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  18.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 5.80k, False: 12.3k]
  ------------------
 6586|  5.80k|            return begin_before_fill;
 6587|  5.80k|        }
 6588|  18.1k|    }
 6589|       |
 6590|  12.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 12.3k, False: 0]
  ------------------
 6591|  12.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 12.3k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  12.3k|        return begin_before_fill;
 6596|  12.3k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  12.3k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|  27.2k|{
 6525|  27.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|  27.2k|    else {
 6530|  27.2k|        const auto lengths =
 6531|  27.2k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|  27.2k|            "\3\4";
 6533|  27.2k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|  27.2k|        return len;
 6535|  27.2k|    }
 6536|  27.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  36.2k|    auto check_align = [](wchar_t ch) {
 6546|  36.2k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 36.2k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 36.2k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 36.2k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  36.2k|            default:
  ------------------
  |  Branch (6553:13): [True: 36.2k, False: 0]
  ------------------
 6554|  36.2k|                return align_type::none;
 6555|  36.2k|        }
 6556|  36.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  18.1k|{
 6608|  18.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  18.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 18.1k, False: 0]
  |  Branch (6610:33): [True: 8.23k, False: 9.91k]
  ------------------
 6611|  8.23k|        int width = parse_simple_int(begin, end);
 6612|  8.23k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.23k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.23k, False: 0]
  |  |  ------------------
  ------------------
 6613|  8.23k|            handler.on_width(width);
 6614|  8.23k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  8.23k|    }
 6620|  18.1k|    return begin;
 6621|  18.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|  4.11k|    {
 7138|  4.11k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  4.11k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 4.11k, False: 0]
  ------------------
 7140|  4.11k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 4.11k, False: 0]
  ------------------
 7141|  4.11k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 4.11k, False: 0]
  ------------------
 7142|  4.11k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 4.11k, False: 0]
  ------------------
 7143|  4.11k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  4.11k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  4.11k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   104k|{
 8428|   104k|#define SCN_VISIT(Type)                                         \
 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   104k|    }                                                           \
 8432|   104k|    else {                                                      \
 8433|   104k|        return vis(monostate_val);                              \
 8434|   104k|    }
 8435|       |
 8436|   104k|    monostate monostate_val{};
 8437|       |
 8438|   104k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 104k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 104k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 104k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 104k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 104k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 104k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 104k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 104k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 104k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 104k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 104k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 104k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 104k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 104k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 104k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 104k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 104k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 104k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|  52.3k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 52.3k, False: 52.3k]
  ------------------
 8476|  52.3k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  52.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  52.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  52.3k|    }                                                           \
  |  | 8432|  52.3k|    else {                                                      \
  |  | 8433|  52.3k|        return vis(monostate_val);                              \
  |  | 8434|  52.3k|    }
  ------------------
 8477|   104k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 52.3k, False: 52.3k]
  ------------------
 8478|   104k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8479|   104k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 104k]
  ------------------
 8480|   104k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8481|   104k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 104k]
  ------------------
 8482|   104k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8483|   104k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 104k]
  ------------------
 8484|   104k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8485|   104k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 104k]
  ------------------
 8486|   104k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8487|       |
 8488|   104k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 104k]
  ------------------
 8489|   104k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   104k|            return vis(
 8491|   104k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 104k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 104k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   104k|            SCN_CLANG_POP
 8506|   104k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|  67.7k|{
 7055|  67.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|  67.7k|    handler.check_args_exhausted();
 7057|  67.7k|    return handler.get_error();
 7058|  67.7k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|  67.7k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|  67.7k|    auto begin = format.data();
 7024|  67.7k|    auto it = begin;
 7025|  67.7k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   125k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 67.7k, False: 57.4k]
  ------------------
 7028|  67.7k|        const auto ch = *it++;
 7029|  67.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 67.7k, False: 0]
  ------------------
 7030|  67.7k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|  67.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|  67.7k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 10.2k, False: 57.4k]
  ------------------
 7034|  10.2k|                return;
 7035|  10.2k|            }
 7036|  67.7k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|  67.7k|    }
 7047|       |
 7048|  57.4k|    handler.on_literal_text(begin, end);
 7049|  57.4k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|  57.4k|    {
 8186|  57.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  57.4k|    static_cast<    \
  |  |  929|  57.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|  57.4k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|  67.7k|{
 6953|  67.7k|    struct id_adapter {
 6954|  67.7k|        constexpr void operator()()
 6955|  67.7k|        {
 6956|  67.7k|            arg_id = handler.on_arg_id();
 6957|  67.7k|        }
 6958|  67.7k|        constexpr void operator()(std::size_t id)
 6959|  67.7k|        {
 6960|  67.7k|            arg_id = handler.on_arg_id(id);
 6961|  67.7k|        }
 6962|       |
 6963|  67.7k|        constexpr void on_error(const char* msg)
 6964|  67.7k|        {
 6965|  67.7k|            SCN_UNLIKELY_ATTR
 6966|  67.7k|            handler.on_error(msg);
 6967|  67.7k|        }
 6968|       |
 6969|  67.7k|        Handler& handler;
 6970|  67.7k|        std::size_t arg_id;
 6971|  67.7k|    };
 6972|       |
 6973|  67.7k|    ++begin;
 6974|  67.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.7k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|  67.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 67.7k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|  67.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 67.7k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|  67.7k|    else {
 6986|  67.7k|        auto adapter = id_adapter{handler, 0};
 6987|  67.7k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|  67.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.7k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|  67.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 67.7k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|  67.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 67.7k, False: 0]
  ------------------
 6998|  67.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.7k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|  67.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|  67.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 63.6k]
  |  |  |  Branch (859:45): [True: 0, False: 67.7k]
  |  |  |  Branch (859:45): [True: 4.11k, False: 63.6k]
  |  |  ------------------
  ------------------
 7004|  4.11k|                handler.on_error("Unknown format specifier");
 7005|  4.11k|                return begin;
 7006|  4.11k|            }
 7007|  67.7k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|  67.7k|    }
 7014|  63.6k|    return begin + 1;
 7015|  67.7k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|  67.7k|{
 6454|  67.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  67.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|  67.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 67.7k, False: 0]
  |  Branch (6455:26): [True: 0, False: 67.7k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|  67.7k|    handler();
 6460|  67.7k|    return begin;
 6461|  67.7k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|  67.7k|        {
 6956|  67.7k|            arg_id = handler.on_arg_id();
 6957|  67.7k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|  67.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|  67.7k|    {
 7133|  67.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  67.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|  67.7k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|  67.7k|{
 6869|  67.7k|    auto do_presentation = [&]() -> const CharT* {
 6870|  67.7k|        if (*begin == CharT{'['}) {
 6871|  67.7k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  67.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|  67.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|  67.7k|                return begin;
 6877|  67.7k|            }
 6878|  67.7k|            handler.on_character_set_string(set);
 6879|  67.7k|            return begin;
 6880|  67.7k|        }
 6881|  67.7k|        if (*begin == CharT{'/'}) {
 6882|  67.7k|            return parse_presentation_regex(begin, end, handler);
 6883|  67.7k|        }
 6884|  67.7k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  67.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|  67.7k|            handler.on_error("Invalid type specifier in format string");
 6887|  67.7k|            return begin;
 6888|  67.7k|        }
 6889|  67.7k|        handler.on_type(type);
 6890|  67.7k|        return begin;
 6891|  67.7k|    };
 6892|       |
 6893|  67.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 67.7k, False: 0]
  |  Branch (6893:28): [True: 60.7k, False: 7.01k]
  ------------------
 6894|  67.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 60.7k, False: 0]
  |  Branch (6894:36): [True: 58.6k, False: 2.05k]
  ------------------
 6895|  58.6k|        return do_presentation();
 6896|  58.6k|    }
 6897|       |
 6898|  9.07k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.07k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  9.07k|    begin = parse_align(begin, end, handler);
 6904|  9.07k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.07k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  9.07k|    begin = parse_width(begin, end, handler);
 6910|  9.07k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.07k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  9.07k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 9.07k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  9.07k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 2.05k, False: 7.01k]
  ------------------
 6929|  2.05k|        handler.on_localized();
 6930|  2.05k|        ++begin;
 6931|  2.05k|    }
 6932|  9.07k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.07k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  9.07k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 9.07k, False: 0]
  |  Branch (6937:25): [True: 7.01k, False: 2.05k]
  ------------------
 6938|  7.01k|        do_presentation();
 6939|  7.01k|    }
 6940|  9.07k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.07k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  9.07k|    return begin;
 6946|  9.07k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|  65.6k|    auto do_presentation = [&]() -> const CharT* {
 6870|  65.6k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 2.90k, False: 62.7k]
  ------------------
 6871|  2.90k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  2.90k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.90k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  2.90k|            handler.on_character_set_string(set);
 6879|  2.90k|            return begin;
 6880|  2.90k|        }
 6881|  62.7k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 62.7k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|  62.7k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  62.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  62.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 60.7k]
  |  |  ------------------
  ------------------
 6886|  2.05k|            handler.on_error("Invalid type specifier in format string");
 6887|  2.05k|            return begin;
 6888|  2.05k|        }
 6889|  60.7k|        handler.on_type(type);
 6890|  60.7k|        return begin;
 6891|  62.7k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6707|  2.90k|{
 6708|  2.90k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  2.90k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  2.90k|    auto start = begin;
 6712|  2.90k|    ++begin;
 6713|       |
 6714|  2.90k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.90k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  2.90k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 2.90k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  2.90k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 2.90k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  8.70k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 8.70k, False: 0]
  ------------------
 6739|  8.70k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.70k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  8.70k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 2.90k, False: 5.80k]
  ------------------
 6744|  2.90k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  2.90k|        }
 6746|       |
 6747|  5.80k|        parse_presentation_set_literal(begin, end, handler);
 6748|  5.80k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  2.90k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6671|  5.80k|{
 6672|  5.80k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  5.80k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  5.80k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.80k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  5.80k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 5.80k, False: 0]
  |  Branch (6679:25): [True: 5.80k, False: 0]
  |  Branch (6679:49): [True: 5.80k, False: 0]
  ------------------
 6680|  5.80k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 5.80k, False: 0]
  ------------------
 6681|  5.80k|        ++begin;
 6682|       |
 6683|  5.80k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  5.80k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.80k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  5.80k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.80k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  5.80k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  5.80k|        return;
 6697|  5.80k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6647|  11.6k|{
 6648|  11.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  11.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  11.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.6k]
  |  |  |  Branch (859:45): [True: 0, False: 11.6k]
  |  |  |  Branch (859:45): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  11.6k|    const auto cp =
 6657|  11.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  11.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  11.6k|    begin += len;
 6664|  11.6k|    return cp;
 6665|  11.6k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|  9.07k|{
 6543|  9.07k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  9.07k|    auto check_align = [](wchar_t ch) {
 6546|  9.07k|        switch (ch) {
 6547|  9.07k|            case L'<':
 6548|  9.07k|                return align_type::left;
 6549|  9.07k|            case L'>':
 6550|  9.07k|                return align_type::right;
 6551|  9.07k|            case L'^':
 6552|  9.07k|                return align_type::center;
 6553|  9.07k|            default:
 6554|  9.07k|                return align_type::none;
 6555|  9.07k|        }
 6556|  9.07k|    };
 6557|       |
 6558|  9.07k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  9.07k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.07k]
  |  |  |  Branch (859:45): [True: 0, False: 9.07k]
  |  |  |  Branch (859:45): [True: 0, False: 9.07k]
  |  |  ------------------
  ------------------
 6560|  9.07k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  9.07k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  9.07k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  9.07k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  9.07k|    const auto begin_before_fill = begin;
 6570|  9.07k|    begin += potential_fill_len;
 6571|       |
 6572|  9.07k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 9.07k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  9.07k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  9.07k|    const auto begin_after_fill = begin;
 6578|  9.07k|    ++begin;
 6579|       |
 6580|  9.07k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 9.07k, False: 0]
  ------------------
 6581|  9.07k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  9.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.07k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  9.07k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 2.90k, False: 6.17k]
  ------------------
 6586|  2.90k|            return begin_before_fill;
 6587|  2.90k|        }
 6588|  9.07k|    }
 6589|       |
 6590|  6.17k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 6.17k, False: 0]
  ------------------
 6591|  6.17k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 6.17k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  6.17k|        return begin_before_fill;
 6596|  6.17k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  6.17k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|  18.1k|    auto check_align = [](wchar_t ch) {
 6546|  18.1k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 18.1k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 18.1k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 18.1k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  18.1k|            default:
  ------------------
  |  Branch (6553:13): [True: 18.1k, False: 0]
  ------------------
 6554|  18.1k|                return align_type::none;
 6555|  18.1k|        }
 6556|  18.1k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|  9.07k|{
 6608|  9.07k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  9.07k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 9.07k, False: 0]
  |  Branch (6610:33): [True: 4.11k, False: 4.95k]
  ------------------
 6611|  4.11k|        int width = parse_simple_int(begin, end);
 6612|  4.11k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.11k, False: 0]
  |  |  ------------------
  ------------------
 6613|  4.11k|            handler.on_width(width);
 6614|  4.11k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  4.11k|    }
 6620|  9.07k|    return begin;
 6621|  9.07k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|  2.05k|    {
 7138|  2.05k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  2.05k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 2.05k, False: 0]
  ------------------
 7140|  2.05k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 2.05k, False: 0]
  ------------------
 7141|  2.05k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 2.05k, False: 0]
  ------------------
 7142|  2.05k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 2.05k, False: 0]
  ------------------
 7143|  2.05k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  2.05k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  2.05k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  63.6k|{
 8428|  63.6k|#define SCN_VISIT(Type)                                         \
 8429|  63.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  63.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  63.6k|    }                                                           \
 8432|  63.6k|    else {                                                      \
 8433|  63.6k|        return vis(monostate_val);                              \
 8434|  63.6k|    }
 8435|       |
 8436|  63.6k|    monostate monostate_val{};
 8437|       |
 8438|  63.6k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 63.6k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 63.6k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 63.6k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 63.6k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 63.6k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 63.6k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 63.6k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 63.6k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 63.6k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 63.6k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 63.6k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 63.6k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 63.6k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 63.6k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 63.6k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 63.6k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 63.6k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 63.6k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 63.6k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|  63.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 63.6k, False: 0]
  ------------------
 8478|  63.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  63.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  63.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  63.6k|    }                                                           \
  |  | 8432|  63.6k|    else {                                                      \
  |  | 8433|  63.6k|        return vis(monostate_val);                              \
  |  | 8434|  63.6k|    }
  ------------------
 8479|  63.6k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 63.6k]
  ------------------
 8480|  63.6k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  63.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  63.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  63.6k|    }                                                           \
  |  | 8432|  63.6k|    else {                                                      \
  |  | 8433|  63.6k|        return vis(monostate_val);                              \
  |  | 8434|  63.6k|    }
  ------------------
 8481|  63.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 63.6k]
  ------------------
 8482|  63.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  63.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  63.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  63.6k|    }                                                           \
  |  | 8432|  63.6k|    else {                                                      \
  |  | 8433|  63.6k|        return vis(monostate_val);                              \
  |  | 8434|  63.6k|    }
  ------------------
 8483|  63.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 63.6k]
  ------------------
 8484|  63.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  63.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  63.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  63.6k|    }                                                           \
  |  | 8432|  63.6k|    else {                                                      \
  |  | 8433|  63.6k|        return vis(monostate_val);                              \
  |  | 8434|  63.6k|    }
  ------------------
 8485|  63.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 63.6k]
  ------------------
 8486|  63.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  63.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  63.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  63.6k|    }                                                           \
  |  | 8432|  63.6k|    else {                                                      \
  |  | 8433|  63.6k|        return vis(monostate_val);                              \
  |  | 8434|  63.6k|    }
  ------------------
 8487|       |
 8488|  63.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 63.6k]
  ------------------
 8489|  63.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  63.6k|            return vis(
 8491|  63.6k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 63.6k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 63.6k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  63.6k|            SCN_CLANG_POP
 8506|  63.6k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  13.3k|    {
 4084|  13.3k|        sync(0);
 4085|  13.3k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  2.08M|    {
 5476|  2.08M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.08M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  2.08M|        return static_cast<std::size_t>(m_desc &
 5481|  2.08M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  2.08M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  4.17M|    {
 5501|  4.17M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  4.17M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  2.08M|    {
 5444|  2.08M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.08M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  2.08M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.08M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  2.08M|        const auto t = type(id);
 5456|  2.08M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.08M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  2.08M|        basic_scan_arg<Context> arg;
 5461|  2.08M|        arg.m_type = t;
 5462|  2.08M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 2.08M, False: 0]
  ------------------
 5463|  2.08M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  2.08M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  2.08M|        return arg;
 5469|  2.08M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  2.08M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  2.08M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  2.08M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  2.08M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  2.08M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  2.08M|    {
 5505|  2.08M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  2.08M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  3.64M|    {
 5257|  3.64M|        return m_type != detail::arg_type::none_type;
 5258|  3.64M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  1.01M|{
 8428|  1.01M|#define SCN_VISIT(Type)                                         \
 8429|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  1.01M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  1.01M|    }                                                           \
 8432|  1.01M|    else {                                                      \
 8433|  1.01M|        return vis(monostate_val);                              \
 8434|  1.01M|    }
 8435|       |
 8436|  1.01M|    monostate monostate_val{};
 8437|       |
 8438|  1.01M|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 1.01M]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 1.01M]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 1.01M]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 1.01M]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 1.01M]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 1.01M]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.01M]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 1.01M]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 1.01M]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 1.01M]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 1.01M]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 1.01M]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 1.01M]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 1.01M]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 1.01M]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 1.01M]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 1.01M]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.01M]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 1.01M]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.01M]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|   509k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 509k, False: 509k]
  ------------------
 8480|   509k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   509k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   509k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   509k|    }                                                           \
  |  | 8432|   509k|    else {                                                      \
  |  | 8433|   509k|        return vis(monostate_val);                              \
  |  | 8434|   509k|    }
  ------------------
 8481|  1.01M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 509k, False: 509k]
  ------------------
 8482|  1.01M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.01M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.01M|    }                                                           \
  |  | 8432|  1.01M|    else {                                                      \
  |  | 8433|  1.01M|        return vis(monostate_val);                              \
  |  | 8434|  1.01M|    }
  ------------------
 8483|  1.01M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 1.01M]
  ------------------
 8484|  1.01M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.01M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.01M|    }                                                           \
  |  | 8432|  1.01M|    else {                                                      \
  |  | 8433|  1.01M|        return vis(monostate_val);                              \
  |  | 8434|  1.01M|    }
  ------------------
 8485|  1.01M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.01M]
  ------------------
 8486|  1.01M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.01M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.01M|    }                                                           \
  |  | 8432|  1.01M|    else {                                                      \
  |  | 8433|  1.01M|        return vis(monostate_val);                              \
  |  | 8434|  1.01M|    }
  ------------------
 8487|       |
 8488|  1.01M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 1.01M]
  ------------------
 8489|  1.01M|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  1.01M|            return vis(
 8491|  1.01M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.01M]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 1.01M]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  1.01M|            SCN_CLANG_POP
 8506|  1.01M|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|  1.06M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  1.06M|    {
 5555|  1.06M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   356k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   356k|    static_cast<    \
  |  |  929|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   356k|    {
 8149|   356k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|  1.06M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.06M|    static_cast<    \
  |  |  929|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.06M|    static_cast<    \
  |  |  929|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|  1.06M|    {
 8067|  1.06M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   712k|{
 7055|   712k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   712k|    handler.check_args_exhausted();
 7057|   712k|    return handler.get_error();
 7058|   712k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   712k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   712k|    auto begin = format.data();
 7024|   712k|    auto it = begin;
 7025|   712k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.38M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 712k, False: 671k]
  ------------------
 7028|   712k|        const auto ch = *it++;
 7029|   712k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 712k, False: 0]
  ------------------
 7030|   712k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   712k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   712k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 41.1k, False: 671k]
  ------------------
 7034|  41.1k|                return;
 7035|  41.1k|            }
 7036|   712k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   712k|    }
 7047|       |
 7048|   671k|    handler.on_literal_text(begin, end);
 7049|   671k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   712k|{
 6953|   712k|    struct id_adapter {
 6954|   712k|        constexpr void operator()()
 6955|   712k|        {
 6956|   712k|            arg_id = handler.on_arg_id();
 6957|   712k|        }
 6958|   712k|        constexpr void operator()(std::size_t id)
 6959|   712k|        {
 6960|   712k|            arg_id = handler.on_arg_id(id);
 6961|   712k|        }
 6962|       |
 6963|   712k|        constexpr void on_error(const char* msg)
 6964|   712k|        {
 6965|   712k|            SCN_UNLIKELY_ATTR
 6966|   712k|            handler.on_error(msg);
 6967|   712k|        }
 6968|       |
 6969|   712k|        Handler& handler;
 6970|   712k|        std::size_t arg_id;
 6971|   712k|    };
 6972|       |
 6973|   712k|    ++begin;
 6974|   712k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 712k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   712k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 712k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   712k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 712k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   712k|    else {
 6986|   712k|        auto adapter = id_adapter{handler, 0};
 6987|   712k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   712k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 712k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   712k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 712k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   712k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 712k, False: 0]
  ------------------
 6998|   712k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 712k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   712k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   712k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.4k, False: 695k]
  |  |  |  Branch (859:45): [True: 0, False: 712k]
  |  |  |  Branch (859:45): [True: 16.4k, False: 695k]
  |  |  ------------------
  ------------------
 7004|  16.4k|                handler.on_error("Unknown format specifier");
 7005|  16.4k|                return begin;
 7006|  16.4k|            }
 7007|   712k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   712k|    }
 7014|   695k|    return begin + 1;
 7015|   712k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|  1.06M|    {
 8050|  1.06M|        return m_args.get(id);
 8051|  1.06M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|  1.04M|    {
 8060|  1.04M|        return m_locale;
 8061|  1.04M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  1.06M|    {
 5576|  1.06M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  1.06M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  1.06M|        do_check_arg_id(id);
 5584|  1.06M|        return id;
 5585|  1.06M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  1.06M|{
 6064|  1.06M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  1.06M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  1.06M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   712k|{
 6454|   712k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   712k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   712k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   712k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 712k, False: 0]
  |  Branch (6455:26): [True: 0, False: 712k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   712k|    handler();
 6460|   712k|    return begin;
 6461|   712k|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6402|  24.6k|{
 6403|  24.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  24.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  24.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  24.6k|    unsigned long long value = 0;
 6407|  49.3k|    do {
 6408|  49.3k|        value *= 10;
 6409|  49.3k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  49.3k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 0, False: 49.3k]
  ------------------
 6411|  49.3k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|      0|            return -1;
 6413|      0|        }
 6414|  49.3k|        ++begin;
 6415|  49.3k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 49.3k, False: 0]
  |  Branch (6415:30): [True: 49.3k, False: 0]
  |  Branch (6415:47): [True: 24.6k, False: 24.6k]
  ------------------
 6416|  24.6k|    return static_cast<int>(value);
 6417|  24.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   712k|        {
 6956|   712k|            arg_id = handler.on_arg_id();
 6957|   712k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  2.13M|    {
 5262|  2.13M|        return m_type;
 5263|  2.13M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  1.04M|    {
 5571|  1.04M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  1.04M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   865k|{
 4353|   865k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 865k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   865k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   865k|                            ranges::default_sentinel};
 4359|   865k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   865k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   865k|    {
 4185|   865k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   865k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   865k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   865k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   865k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   865k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   865k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  2.11M|    {
 5560|  2.11M|        return m_format.data();
 5561|  2.11M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   712k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   712k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   712k|    {
 7133|   712k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   712k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   712k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   712k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   712k|{
 6869|   712k|    auto do_presentation = [&]() -> const CharT* {
 6870|   712k|        if (*begin == CharT{'['}) {
 6871|   712k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   712k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   712k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   712k|                return begin;
 6877|   712k|            }
 6878|   712k|            handler.on_character_set_string(set);
 6879|   712k|            return begin;
 6880|   712k|        }
 6881|   712k|        if (*begin == CharT{'/'}) {
 6882|   712k|            return parse_presentation_regex(begin, end, handler);
 6883|   712k|        }
 6884|   712k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   712k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   712k|            handler.on_error("Invalid type specifier in format string");
 6887|   712k|            return begin;
 6888|   712k|        }
 6889|   712k|        handler.on_type(type);
 6890|   712k|        return begin;
 6891|   712k|    };
 6892|       |
 6893|   712k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 712k, False: 0]
  |  Branch (6893:28): [True: 687k, False: 24.9k]
  ------------------
 6894|   712k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 687k, False: 0]
  |  Branch (6894:36): [True: 679k, False: 8.23k]
  ------------------
 6895|   679k|        return do_presentation();
 6896|   679k|    }
 6897|       |
 6898|  33.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.1k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  33.1k|    begin = parse_align(begin, end, handler);
 6904|  33.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.1k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  33.1k|    begin = parse_width(begin, end, handler);
 6910|  33.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.1k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  33.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 33.1k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  33.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 8.23k, False: 24.9k]
  ------------------
 6929|  8.23k|        handler.on_localized();
 6930|  8.23k|        ++begin;
 6931|  8.23k|    }
 6932|  33.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.1k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  33.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 33.1k, False: 0]
  |  Branch (6937:25): [True: 24.9k, False: 8.23k]
  ------------------
 6938|  24.9k|        do_presentation();
 6939|  24.9k|    }
 6940|  33.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.1k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  33.1k|    return begin;
 6946|  33.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|  1.03M|{
 6518|  1.03M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 1.01M, False: 12.3k]
  |  Branch (6518:33): [True: 1.01M, False: 0]
  ------------------
 6519|  1.03M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 12.3k, False: 0]
  |  Branch (6519:33): [True: 12.3k, False: 0]
  ------------------
 6520|  1.03M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   704k|    auto do_presentation = [&]() -> const CharT* {
 6870|   704k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 8.44k, False: 695k]
  ------------------
 6871|  8.44k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  8.44k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  8.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.44k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  8.44k|            handler.on_character_set_string(set);
 6879|  8.44k|            return begin;
 6880|  8.44k|        }
 6881|   695k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 695k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   695k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   695k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.23k, False: 687k]
  |  |  ------------------
  ------------------
 6886|  8.23k|            handler.on_error("Invalid type specifier in format string");
 6887|  8.23k|            return begin;
 6888|  8.23k|        }
 6889|   687k|        handler.on_type(type);
 6890|   687k|        return begin;
 6891|   695k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  8.44k|{
 6708|  8.44k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  8.44k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  8.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  8.44k|    auto start = begin;
 6712|  8.44k|    ++begin;
 6713|       |
 6714|  8.44k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.44k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  8.44k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 8.44k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  8.44k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 8.44k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  25.3k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 25.3k, False: 0]
  ------------------
 6739|  25.3k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  25.3k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 8.44k, False: 16.8k]
  ------------------
 6744|  8.44k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  8.44k|        }
 6746|       |
 6747|  16.8k|        parse_presentation_set_literal(begin, end, handler);
 6748|  16.8k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  8.44k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6671|  16.8k|{
 6672|  16.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  16.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  16.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  16.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 16.8k, False: 0]
  |  Branch (6679:25): [True: 16.8k, False: 0]
  |  Branch (6679:49): [True: 16.8k, False: 0]
  ------------------
 6680|  16.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 16.8k, False: 0]
  ------------------
 6681|  16.8k|        ++begin;
 6682|       |
 6683|  16.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  16.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  16.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  16.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  16.8k|        return;
 6697|  16.8k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6647|  33.7k|{
 6648|  33.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  33.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  33.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.7k]
  |  |  |  Branch (859:45): [True: 0, False: 33.7k]
  |  |  |  Branch (859:45): [True: 0, False: 33.7k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  33.7k|    const auto cp =
 6657|  33.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  33.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.7k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  33.7k|    begin += len;
 6664|  33.7k|    return cp;
 6665|  33.7k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  12.6k|    {
 6357|  12.6k|        m_specs.charset_string_data = fmt.data();
 6358|  12.6k|        m_specs.charset_string_size = fmt.size();
 6359|  12.6k|        on_type(presentation_type::string_set);
 6360|  12.6k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|  1.04M|{
 6466|  1.04M|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.04M]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.04M]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.04M]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 1.04M]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.04M]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 1.04M]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 1.04M]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 1.04M]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 1.04M]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 1.04M]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 1.04M]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.04M]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.04M]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 1.04M]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 1.04M]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.04M]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.04M]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.04M]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|  1.01M|        case 's':
  ------------------
  |  Branch (6496:9): [True: 1.01M, False: 24.6k]
  ------------------
 6497|  1.01M|            return presentation_type::string;
 6498|  12.3k|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 12.3k, False: 1.03M]
  ------------------
 6499|  12.3k|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 1.04M]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 1.04M]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 1.04M]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 1.04M]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  12.3k|        default:
  ------------------
  |  Branch (6510:9): [True: 12.3k, False: 1.03M]
  ------------------
 6511|  12.3k|            return presentation_type::none;
 6512|  1.04M|    }
 6513|  1.04M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  33.1k|{
 6543|  33.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  33.1k|    auto check_align = [](wchar_t ch) {
 6546|  33.1k|        switch (ch) {
 6547|  33.1k|            case L'<':
 6548|  33.1k|                return align_type::left;
 6549|  33.1k|            case L'>':
 6550|  33.1k|                return align_type::right;
 6551|  33.1k|            case L'^':
 6552|  33.1k|                return align_type::center;
 6553|  33.1k|            default:
 6554|  33.1k|                return align_type::none;
 6555|  33.1k|        }
 6556|  33.1k|    };
 6557|       |
 6558|  33.1k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  33.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  66.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.1k]
  |  |  |  Branch (859:45): [True: 0, False: 33.1k]
  |  |  |  Branch (859:45): [True: 0, False: 33.1k]
  |  |  ------------------
  ------------------
 6560|  33.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  33.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  33.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  33.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  33.1k|    const auto begin_before_fill = begin;
 6570|  33.1k|    begin += potential_fill_len;
 6571|       |
 6572|  33.1k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 33.1k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  33.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  33.1k|    const auto begin_after_fill = begin;
 6578|  33.1k|    ++begin;
 6579|       |
 6580|  33.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 33.1k, False: 0]
  ------------------
 6581|  33.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.1k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  33.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 8.44k, False: 24.6k]
  ------------------
 6586|  8.44k|            return begin_before_fill;
 6587|  8.44k|        }
 6588|  33.1k|    }
 6589|       |
 6590|  24.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 24.6k, False: 0]
  ------------------
 6591|  24.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 24.6k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  24.6k|        return begin_before_fill;
 6596|  24.6k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  24.6k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|  49.7k|{
 6525|  49.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  49.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|  49.7k|    if constexpr (sizeof(CharT) != 1) {
 6527|  49.7k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|  49.7k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  66.2k|    auto check_align = [](wchar_t ch) {
 6546|  66.2k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 66.2k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 66.2k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 66.2k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  66.2k|            default:
  ------------------
  |  Branch (6553:13): [True: 66.2k, False: 0]
  ------------------
 6554|  66.2k|                return align_type::none;
 6555|  66.2k|        }
 6556|  66.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  33.1k|{
 6608|  33.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  33.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 33.1k, False: 0]
  |  Branch (6610:33): [True: 16.4k, False: 16.6k]
  ------------------
 6611|  16.4k|        int width = parse_simple_int(begin, end);
 6612|  16.4k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  16.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.4k, False: 0]
  |  |  ------------------
  ------------------
 6613|  16.4k|            handler.on_width(width);
 6614|  16.4k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  16.4k|    }
 6620|  33.1k|    return begin;
 6621|  33.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  8.23k|    {
 7138|  8.23k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  8.23k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 8.23k, False: 0]
  ------------------
 7140|  8.23k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 8.23k, False: 0]
  ------------------
 7141|  8.23k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 8.23k, False: 0]
  ------------------
 7142|  8.23k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 8.23k, False: 0]
  ------------------
 7143|  8.23k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  8.23k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  8.23k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   695k|{
 8428|   695k|#define SCN_VISIT(Type)                                         \
 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   695k|    }                                                           \
 8432|   695k|    else {                                                      \
 8433|   695k|        return vis(monostate_val);                              \
 8434|   695k|    }
 8435|       |
 8436|   695k|    monostate monostate_val{};
 8437|       |
 8438|   695k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 695k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 695k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 695k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 695k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 695k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 695k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 695k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 695k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 695k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 695k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 695k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 695k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 695k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 695k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 695k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 695k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 695k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 695k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 695k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 695k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|   347k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 347k, False: 347k]
  ------------------
 8480|   347k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   347k|    }                                                           \
  |  | 8432|   347k|    else {                                                      \
  |  | 8433|   347k|        return vis(monostate_val);                              \
  |  | 8434|   347k|    }
  ------------------
 8481|   695k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 347k, False: 347k]
  ------------------
 8482|   695k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8483|   695k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 695k]
  ------------------
 8484|   695k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8485|   695k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 695k]
  ------------------
 8486|   695k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8487|       |
 8488|   695k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 695k]
  ------------------
 8489|   695k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   695k|            return vis(
 8491|   695k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 695k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 695k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   695k|            SCN_CLANG_POP
 8506|   695k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   509k|{
 8428|   509k|#define SCN_VISIT(Type)                                         \
 8429|   509k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   509k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   509k|    }                                                           \
 8432|   509k|    else {                                                      \
 8433|   509k|        return vis(monostate_val);                              \
 8434|   509k|    }
 8435|       |
 8436|   509k|    monostate monostate_val{};
 8437|       |
 8438|   509k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 509k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 509k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 509k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 509k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 509k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 509k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 509k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 509k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 509k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 509k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 509k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 509k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 509k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 509k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 509k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 509k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 509k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 509k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 509k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 509k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 509k]
  ------------------
 8480|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8481|   509k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 509k, False: 0]
  ------------------
 8482|   509k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   509k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   509k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   509k|    }                                                           \
  |  | 8432|   509k|    else {                                                      \
  |  | 8433|   509k|        return vis(monostate_val);                              \
  |  | 8434|   509k|    }
  ------------------
 8483|   509k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 509k]
  ------------------
 8484|   509k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   509k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   509k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   509k|    }                                                           \
  |  | 8432|   509k|    else {                                                      \
  |  | 8433|   509k|        return vis(monostate_val);                              \
  |  | 8434|   509k|    }
  ------------------
 8485|   509k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 509k]
  ------------------
 8486|   509k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   509k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   509k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   509k|    }                                                           \
  |  | 8432|   509k|    else {                                                      \
  |  | 8433|   509k|        return vis(monostate_val);                              \
  |  | 8434|   509k|    }
  ------------------
 8487|       |
 8488|   509k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 509k]
  ------------------
 8489|   509k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   509k|            return vis(
 8491|   509k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 509k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 509k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   509k|            SCN_CLANG_POP
 8506|   509k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   356k|{
 7055|   356k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   356k|    handler.check_args_exhausted();
 7057|   356k|    return handler.get_error();
 7058|   356k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   356k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   356k|    auto begin = format.data();
 7024|   356k|    auto it = begin;
 7025|   356k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   691k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 356k, False: 335k]
  ------------------
 7028|   356k|        const auto ch = *it++;
 7029|   356k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 356k, False: 0]
  ------------------
 7030|   356k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   356k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   356k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 20.5k, False: 335k]
  ------------------
 7034|  20.5k|                return;
 7035|  20.5k|            }
 7036|   356k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   356k|    }
 7047|       |
 7048|   335k|    handler.on_literal_text(begin, end);
 7049|   335k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|   335k|    {
 8186|   335k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   335k|    static_cast<    \
  |  |  929|   335k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   335k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   356k|{
 6953|   356k|    struct id_adapter {
 6954|   356k|        constexpr void operator()()
 6955|   356k|        {
 6956|   356k|            arg_id = handler.on_arg_id();
 6957|   356k|        }
 6958|   356k|        constexpr void operator()(std::size_t id)
 6959|   356k|        {
 6960|   356k|            arg_id = handler.on_arg_id(id);
 6961|   356k|        }
 6962|       |
 6963|   356k|        constexpr void on_error(const char* msg)
 6964|   356k|        {
 6965|   356k|            SCN_UNLIKELY_ATTR
 6966|   356k|            handler.on_error(msg);
 6967|   356k|        }
 6968|       |
 6969|   356k|        Handler& handler;
 6970|   356k|        std::size_t arg_id;
 6971|   356k|    };
 6972|       |
 6973|   356k|    ++begin;
 6974|   356k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   356k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 356k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   356k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 356k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   356k|    else {
 6986|   356k|        auto adapter = id_adapter{handler, 0};
 6987|   356k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   356k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   356k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 356k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   356k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 356k, False: 0]
  ------------------
 6998|   356k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   356k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   356k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.23k, False: 347k]
  |  |  |  Branch (859:45): [True: 0, False: 356k]
  |  |  |  Branch (859:45): [True: 8.23k, False: 347k]
  |  |  ------------------
  ------------------
 7004|  8.23k|                handler.on_error("Unknown format specifier");
 7005|  8.23k|                return begin;
 7006|  8.23k|            }
 7007|   356k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   356k|    }
 7014|   347k|    return begin + 1;
 7015|   356k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   356k|{
 6454|   356k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   356k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   356k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   356k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 356k, False: 0]
  |  Branch (6455:26): [True: 0, False: 356k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   356k|    handler();
 6460|   356k|    return begin;
 6461|   356k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   356k|        {
 6956|   356k|            arg_id = handler.on_arg_id();
 6957|   356k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   356k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   356k|    {
 7133|   356k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   356k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   356k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   356k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   356k|{
 6869|   356k|    auto do_presentation = [&]() -> const CharT* {
 6870|   356k|        if (*begin == CharT{'['}) {
 6871|   356k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   356k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   356k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   356k|                return begin;
 6877|   356k|            }
 6878|   356k|            handler.on_character_set_string(set);
 6879|   356k|            return begin;
 6880|   356k|        }
 6881|   356k|        if (*begin == CharT{'/'}) {
 6882|   356k|            return parse_presentation_regex(begin, end, handler);
 6883|   356k|        }
 6884|   356k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   356k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   356k|            handler.on_error("Invalid type specifier in format string");
 6887|   356k|            return begin;
 6888|   356k|        }
 6889|   356k|        handler.on_type(type);
 6890|   356k|        return begin;
 6891|   356k|    };
 6892|       |
 6893|   356k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 356k, False: 0]
  |  Branch (6893:28): [True: 343k, False: 12.4k]
  ------------------
 6894|   356k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 343k, False: 0]
  |  Branch (6894:36): [True: 339k, False: 4.11k]
  ------------------
 6895|   339k|        return do_presentation();
 6896|   339k|    }
 6897|       |
 6898|  16.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.5k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  16.5k|    begin = parse_align(begin, end, handler);
 6904|  16.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.5k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  16.5k|    begin = parse_width(begin, end, handler);
 6910|  16.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.5k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  16.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 16.5k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  16.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 4.11k, False: 12.4k]
  ------------------
 6929|  4.11k|        handler.on_localized();
 6930|  4.11k|        ++begin;
 6931|  4.11k|    }
 6932|  16.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.5k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  16.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 16.5k, False: 0]
  |  Branch (6937:25): [True: 12.4k, False: 4.11k]
  ------------------
 6938|  12.4k|        do_presentation();
 6939|  12.4k|    }
 6940|  16.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.5k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  16.5k|    return begin;
 6946|  16.5k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   352k|    auto do_presentation = [&]() -> const CharT* {
 6870|   352k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 4.22k, False: 347k]
  ------------------
 6871|  4.22k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  4.22k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.22k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  4.22k|            handler.on_character_set_string(set);
 6879|  4.22k|            return begin;
 6880|  4.22k|        }
 6881|   347k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 347k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   347k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   347k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 343k]
  |  |  ------------------
  ------------------
 6886|  4.11k|            handler.on_error("Invalid type specifier in format string");
 6887|  4.11k|            return begin;
 6888|  4.11k|        }
 6889|   343k|        handler.on_type(type);
 6890|   343k|        return begin;
 6891|   347k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6707|  4.22k|{
 6708|  4.22k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  4.22k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  4.22k|    auto start = begin;
 6712|  4.22k|    ++begin;
 6713|       |
 6714|  4.22k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.22k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  4.22k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 4.22k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  4.22k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 4.22k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  12.6k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 12.6k, False: 0]
  ------------------
 6739|  12.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  12.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 4.22k, False: 8.44k]
  ------------------
 6744|  4.22k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  4.22k|        }
 6746|       |
 6747|  8.44k|        parse_presentation_set_literal(begin, end, handler);
 6748|  8.44k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  4.22k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6671|  8.44k|{
 6672|  8.44k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  8.44k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  8.44k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.44k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  8.44k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 8.44k, False: 0]
  |  Branch (6679:25): [True: 8.44k, False: 0]
  |  Branch (6679:49): [True: 8.44k, False: 0]
  ------------------
 6680|  8.44k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 8.44k, False: 0]
  ------------------
 6681|  8.44k|        ++begin;
 6682|       |
 6683|  8.44k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  8.44k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.44k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  8.44k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.44k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  8.44k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  8.44k|        return;
 6697|  8.44k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6647|  16.8k|{
 6648|  16.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  16.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  16.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  |  Branch (859:45): [True: 0, False: 16.8k]
  |  |  |  Branch (859:45): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  16.8k|    const auto cp =
 6657|  16.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  16.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  16.8k|    begin += len;
 6664|  16.8k|    return cp;
 6665|  16.8k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  16.5k|{
 6543|  16.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  16.5k|    auto check_align = [](wchar_t ch) {
 6546|  16.5k|        switch (ch) {
 6547|  16.5k|            case L'<':
 6548|  16.5k|                return align_type::left;
 6549|  16.5k|            case L'>':
 6550|  16.5k|                return align_type::right;
 6551|  16.5k|            case L'^':
 6552|  16.5k|                return align_type::center;
 6553|  16.5k|            default:
 6554|  16.5k|                return align_type::none;
 6555|  16.5k|        }
 6556|  16.5k|    };
 6557|       |
 6558|  16.5k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  16.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  33.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.5k]
  |  |  |  Branch (859:45): [True: 0, False: 16.5k]
  |  |  |  Branch (859:45): [True: 0, False: 16.5k]
  |  |  ------------------
  ------------------
 6560|  16.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  16.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  16.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  16.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  16.5k|    const auto begin_before_fill = begin;
 6570|  16.5k|    begin += potential_fill_len;
 6571|       |
 6572|  16.5k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 16.5k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  16.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  16.5k|    const auto begin_after_fill = begin;
 6578|  16.5k|    ++begin;
 6579|       |
 6580|  16.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 16.5k, False: 0]
  ------------------
 6581|  16.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.5k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  16.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 4.22k, False: 12.3k]
  ------------------
 6586|  4.22k|            return begin_before_fill;
 6587|  4.22k|        }
 6588|  16.5k|    }
 6589|       |
 6590|  12.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 12.3k, False: 0]
  ------------------
 6591|  12.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 12.3k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  12.3k|        return begin_before_fill;
 6596|  12.3k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  12.3k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|  33.1k|    auto check_align = [](wchar_t ch) {
 6546|  33.1k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 33.1k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 33.1k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 33.1k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  33.1k|            default:
  ------------------
  |  Branch (6553:13): [True: 33.1k, False: 0]
  ------------------
 6554|  33.1k|                return align_type::none;
 6555|  33.1k|        }
 6556|  33.1k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  16.5k|{
 6608|  16.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  16.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 16.5k, False: 0]
  |  Branch (6610:33): [True: 8.23k, False: 8.34k]
  ------------------
 6611|  8.23k|        int width = parse_simple_int(begin, end);
 6612|  8.23k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.23k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.23k, False: 0]
  |  |  ------------------
  ------------------
 6613|  8.23k|            handler.on_width(width);
 6614|  8.23k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  8.23k|    }
 6620|  16.5k|    return begin;
 6621|  16.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  4.11k|    {
 7138|  4.11k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  4.11k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 4.11k, False: 0]
  ------------------
 7140|  4.11k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 4.11k, False: 0]
  ------------------
 7141|  4.11k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 4.11k, False: 0]
  ------------------
 7142|  4.11k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 4.11k, False: 0]
  ------------------
 7143|  4.11k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  4.11k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  4.11k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   347k|{
 8428|   347k|#define SCN_VISIT(Type)                                         \
 8429|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   347k|    }                                                           \
 8432|   347k|    else {                                                      \
 8433|   347k|        return vis(monostate_val);                              \
 8434|   347k|    }
 8435|       |
 8436|   347k|    monostate monostate_val{};
 8437|       |
 8438|   347k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 347k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 347k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 347k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 347k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 347k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 347k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 347k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 347k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 347k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 347k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 347k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 347k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 347k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 347k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 347k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 347k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 347k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 347k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 347k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 347k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 347k]
  ------------------
 8480|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8481|   347k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 347k, False: 0]
  ------------------
 8482|   347k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   347k|    }                                                           \
  |  | 8432|   347k|    else {                                                      \
  |  | 8433|   347k|        return vis(monostate_val);                              \
  |  | 8434|   347k|    }
  ------------------
 8483|   347k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 347k]
  ------------------
 8484|   347k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   347k|    }                                                           \
  |  | 8432|   347k|    else {                                                      \
  |  | 8433|   347k|        return vis(monostate_val);                              \
  |  | 8434|   347k|    }
  ------------------
 8485|   347k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 347k]
  ------------------
 8486|   347k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   347k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   347k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   347k|    }                                                           \
  |  | 8432|   347k|    else {                                                      \
  |  | 8433|   347k|        return vis(monostate_val);                              \
  |  | 8434|   347k|    }
  ------------------
 8487|       |
 8488|   347k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 347k]
  ------------------
 8489|   347k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   347k|            return vis(
 8491|   347k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 347k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 347k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   347k|            SCN_CLANG_POP
 8506|   347k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|  26.7k|    {
 4084|  26.7k|        sync(0);
 4085|  26.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|  76.4k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|   509k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   347k|{
   89|   347k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   347k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   347k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   347k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   695k|{
   44|   695k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   695k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|   347k|{
  127|   347k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   347k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   347k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   347k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   695k|{
   60|   695k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   695k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  162|   169k|{
  163|   169k|    T value;
  164|   169k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   169k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.05k, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.05k|    }                                                  \
  |  |  |  | 3667|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   167k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   169k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   339k|{
   72|   339k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   339k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   347k|{
   89|   347k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   347k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   347k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   347k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  126|   347k|{
  127|   347k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   347k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   347k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   347k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  162|   169k|{
  163|   169k|    T value;
  164|   169k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   169k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.05k, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.05k|    }                                                  \
  |  |  |  | 3667|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   167k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   169k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   347k|{
   89|   347k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   347k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   347k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   347k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   347k|{
   44|   347k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   347k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  126|   347k|{
  127|   347k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   347k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   347k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   347k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   347k|{
   60|   347k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   347k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  162|   169k|{
  163|   169k|    T value;
  164|   169k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   169k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.05k, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.05k|    }                                                  \
  |  |  |  | 3667|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   167k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   169k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   169k|{
   72|   169k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   169k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.21M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  653|  1.21M|{
  654|  1.21M|    static_assert(std::is_same_v<Locale, std::locale>);
  655|  1.21M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2184|   103k|{
 2185|   103k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2186|   103k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2192|  62.9k|{
 2193|  62.9k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2194|  62.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  62.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 56.7k, False: 6.17k]
  |  |  ------------------
  ------------------
 2195|  56.7k|        source.sync(*n);
 2196|  56.7k|    }
 2197|  6.17k|    else {
 2198|  6.17k|        source.sync_all();
 2199|  6.17k|    }
 2200|  62.9k|    return n;
 2201|  62.9k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2208|   695k|{
 2209|   695k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2210|   695k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2216|   347k|{
 2217|   347k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2218|   347k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   347k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 335k, False: 12.3k]
  |  |  ------------------
  ------------------
 2219|   335k|        source.sync(*n);
 2220|   335k|    }
 2221|  12.3k|    else {
 2222|  12.3k|        source.sync_all();
 2223|  12.3k|    }
 2224|   347k|    return n;
 2225|   347k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  194|   376k|{
  195|   376k|    return find_classic_impl(
  196|   376k|        source, [](char ch) { return is_ascii_space(ch); },
  197|   376k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  198|   376k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  202|   380k|{
  203|   380k|    return find_classic_impl(
  204|   380k|        source, [](char ch) { return !is_ascii_space(ch); },
  205|   380k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  206|   380k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2141|   103k|{
 2142|   103k|    return vscan_internal(source, format, args);
 2143|   103k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2147|  62.9k|{
 2148|  62.9k|    auto n = vscan_internal(source, format, args);
 2149|  62.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  62.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 56.7k, False: 6.17k]
  |  |  ------------------
  ------------------
 2150|  56.7k|        source.sync(*n);
 2151|  56.7k|    }
 2152|  6.17k|    else {
 2153|  6.17k|        source.sync_all();
 2154|  6.17k|    }
 2155|  62.9k|    return n;
 2156|  62.9k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2161|   695k|{
 2162|   695k|    return vscan_internal(source, format, args);
 2163|   695k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2167|   347k|{
 2168|   347k|    auto n = vscan_internal(source, format, args);
 2169|   347k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   347k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 335k, False: 12.3k]
  |  |  ------------------
  ------------------
 2170|   335k|        source.sync(*n);
 2171|   335k|    }
 2172|  12.3k|    else {
 2173|  12.3k|        source.sync_all();
 2174|  12.3k|    }
 2175|   347k|    return n;
 2176|   347k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2251|  47.3k|{
 2252|  47.3k|    return vscan_value_internal(source, arg);
 2253|  47.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2256|  29.1k|{
 2257|  29.1k|    auto n = vscan_value_internal(source, arg);
 2258|  29.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  29.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 28.0k, False: 1.02k]
  |  |  ------------------
  ------------------
 2259|  28.0k|        source.sync(*n);
 2260|  28.0k|    }
 2261|  1.02k|    else {
 2262|  1.02k|        source.sync_all();
 2263|  1.02k|    }
 2264|  29.1k|    return n;
 2265|  29.1k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2270|   339k|{
 2271|   339k|    return vscan_value_internal(source, arg);
 2272|   339k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2276|   169k|{
 2277|   169k|    auto n = vscan_value_internal(source, arg);
 2278|   169k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   169k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 167k, False: 2.05k]
  |  |  ------------------
  ------------------
 2279|   167k|        source.sync(*n);
 2280|   167k|    }
 2281|  2.05k|    else {
 2282|  2.05k|        source.sync_all();
 2283|  2.05k|    }
 2284|   169k|    return n;
 2285|   169k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|   376k|{
  119|   376k|    auto it = source.begin();
  120|       |
  121|   688k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 539k, False: 148k]
  ------------------
  122|   539k|        auto sv =
  123|   539k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|   539k|                .substr(0, 8);
  125|       |
  126|   539k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 387k, False: 151k]
  ------------------
  127|   387k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|   387k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|   387k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 168k, False: 219k]
  ------------------
  130|   168k|                break;
  131|   168k|            }
  132|   219k|            continue;
  133|   387k|        }
  134|       |
  135|   452k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 359k, False: 92.4k]
  ------------------
  136|   359k|            auto tmp =
  137|   359k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|   359k|            auto res = get_next_code_point(tmp);
  139|   359k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 59.0k, False: 300k]
  ------------------
  140|  59.0k|                return it;
  141|  59.0k|            }
  142|   300k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|   300k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|   300k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   300k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|   300k|        }
  146|   151k|    }
  147|       |
  148|   317k|    return detail::make_string_view_iterator(source, it);
  149|   376k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  105|   904k|{
  106|   904k|    static_assert(sizeof(*source.data()) == 1);
  107|   904k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   904k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   904k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|   904k|    uint64_t word{};
  109|   904k|    std::memcpy(&word, source.data(), source.size());
  110|       |
  111|   904k|    return has_byte_greater(word, 127) != 0;
  112|   904k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  196|  1.54M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  197|   359k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|   380k|{
  119|   380k|    auto it = source.begin();
  120|       |
  121|   500k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 365k, False: 135k]
  ------------------
  122|   365k|        auto sv =
  123|   365k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|   365k|                .substr(0, 8);
  125|       |
  126|   365k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 291k, False: 73.5k]
  ------------------
  127|   291k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|   291k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|   291k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 173k, False: 117k]
  ------------------
  130|   173k|                break;
  131|   173k|            }
  132|   117k|            continue;
  133|   291k|        }
  134|       |
  135|   141k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 139k, False: 2.40k]
  ------------------
  136|   139k|            auto tmp =
  137|   139k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|   139k|            auto res = get_next_code_point(tmp);
  139|   139k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 71.1k, False: 67.9k]
  ------------------
  140|  71.1k|                return it;
  141|  71.1k|            }
  142|  67.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|  67.9k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|  67.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  67.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|  67.9k|        }
  146|  73.5k|    }
  147|       |
  148|   309k|    return detail::make_string_view_iterator(source, it);
  149|   380k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  204|   832k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  205|   139k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|   125k|{
 2074|   125k|    const auto argcount = args.size();
 2075|   125k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 58.2k, False: 67.7k]
  |  Branch (2075:60): [True: 58.2k, False: 0]
  ------------------
 2076|  58.2k|        auto arg = args.get(0);
 2077|  58.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  58.2k|    static_cast<    \
  |  |  929|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|  58.2k|    }
 2079|       |
 2080|  67.7k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 67.7k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|  67.7k|    SCN_UNLIKELY_ATTR
 2088|  67.7k|    {
 2089|  67.7k|        auto handler = format_handler<false, CharT>{
 2090|  67.7k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|  67.7k|        return vscan_parse_format_string(format, handler);
 2092|  67.7k|    }
 2093|  67.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|   333k|{
 1626|   333k|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 180k, False: 152k]
  ------------------
 1627|   180k|        return false;
 1628|   180k|    }
 1629|   152k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 152k, False: 0]
  |  Branch (1629:39): [True: 152k, False: 0]
  ------------------
 1630|   333k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|  87.3k|{
 1659|  87.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 87.3k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|  87.3k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  87.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 87.3k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|  87.3k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|  87.3k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|  87.3k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  87.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  87.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  87.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.08k, False: 84.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.08k|    }                                                  \
  |  |  |  | 3667|  87.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|  84.2k|    return it.position();
 1676|  87.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1900|   112k|        : format_handler_base{argcount},
 1901|   112k|          parse_ctx{format},
 1902|   112k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   112k|    {
 1904|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  1.24M|    format_handler_base(size_t argcount) : args_count(argcount)
 1722|  1.24M|    {
 1723|  1.24M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
 1724|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1725|      0|        }
 1726|  1.24M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   112k|        : contiguous_ctx(source, args, loc)
 1853|   112k|    {
 1854|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   112k|{
 2039|   112k|    const auto beg = handler.get_ctx().begin();
 2040|   112k|    detail::parse_format_string<false>(format, handler);
 2041|   112k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.5k, False: 92.3k]
  |  |  ------------------
  ------------------
 2042|  20.5k|        return unexpected(handler.error);
 2043|  20.5k|    }
 2044|  92.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   112k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2022|   732k|    {
 2023|   732k|        return ctx.get();
 2024|   732k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1857|   732k|    {
 1858|   732k|        return contiguous_ctx;
 1859|   732k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1907|   205k|    {
 1908|   205k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 205k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   205k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   112k|{
 1682|   112k|    auto arg = ctx.arg(id);
 1683|   112k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   112k|    return arg;
 1687|   112k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1797|  1.24M|    {
 1798|  1.24M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
 1799|      0|            on_error("Invalid out-of-range argument ID");
 1800|      0|            return;
 1801|      0|        }
 1802|       |
 1803|  1.24M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
 1804|      0|            return on_error("Argument with this ID has already been scanned");
 1805|      0|        }
 1806|       |
 1807|  1.24M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.24M, False: 0]
  |  |  ------------------
  ------------------
 1808|  1.24M|            visited_args_lower64 |= (1ull << id);
 1809|  1.24M|            return;
 1810|  1.24M|        }
 1811|       |
 1812|      0|        id -= 64;
 1813|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1814|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1782|  1.24M|    {
 1783|  1.24M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
 1784|      0|            on_error("Invalid out-of-range argument ID");
 1785|      0|            return false;
 1786|      0|        }
 1787|       |
 1788|  1.24M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.24M, False: 0]
  |  |  ------------------
  ------------------
 1789|  1.24M|            return (visited_args_lower64 >> id) & 1ull;
 1790|  1.24M|        }
 1791|       |
 1792|      0|        id -= 64;
 1793|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1794|  1.24M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1766|  55.5k|    {
 1767|  55.5k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  55.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.5k, False: 0]
  |  |  ------------------
  ------------------
 1768|  55.5k|            error = err;
 1769|  55.5k|        }
 1770|  55.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1944|   112k|    {
 1945|   112k|        return parse_ctx.next_arg_id();
 1946|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1985|   112k|    {
 1986|   112k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   112k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   112k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 112k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   112k|        auto specs = detail::format_specs{};
 1999|   112k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   112k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   112k|            arg.type()};
 2002|       |
 2003|   112k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   112k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 112k]
  |  Branch (2004:29): [True: 0, False: 112k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   112k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.23k, False: 104k]
  |  |  ------------------
  ------------------
 2010|  8.23k|            return parse_ctx.begin();
 2011|  8.23k|        }
 2012|   104k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   104k|        on_visit_scan_arg(
 2015|   104k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   104k|                                           get_ctx().locale()},
 2017|   104k|            arg);
 2018|   104k|        return parse_ctx.begin();
 2019|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   112k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   112k|    {
 1702|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1956|   104k|    {
 1957|   104k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 104k]
  |  Branch (1957:23): [True: 0, False: 104k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   104k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   104k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 92.3k]
  |  |  ------------------
  ------------------
 1964|  12.3k|            on_error(r.error());
 1965|  12.3k|        }
 1966|  92.3k|        else {
 1967|  92.3k|            get_ctx().advance_to(*r);
 1968|  92.3k|        }
 1969|   104k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1761|  37.0k|    {
 1762|  37.0k|        SCN_UNLIKELY_ATTR
 1763|  37.0k|        error = scan_error{scan_error::invalid_format_string, msg};
 1764|  37.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1729|  1.24M|    {
 1730|  1.24M|        {
 1731|  1.24M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1731:45): [True: 0, False: 1.24M]
  ------------------
 1732|  1.24M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1732:35): [True: 0, False: 1.24M]
  ------------------
 1733|  1.24M|                                      ? std::numeric_limits<uint64_t>::max()
 1734|  1.24M|                                      : (1ull << args_count_lower64) - 1;
 1735|       |
 1736|  1.24M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1736:17): [True: 0, False: 1.24M]
  ------------------
 1737|      0|                return on_error("Argument list not exhausted");
 1738|      0|            }
 1739|  1.24M|        }
 1740|       |
 1741|  1.24M|        if (args_count < 64) {
  ------------------
  |  Branch (1741:13): [True: 1.24M, False: 0]
  ------------------
 1742|  1.24M|            return;
 1743|  1.24M|        }
 1744|       |
 1745|      0|        auto last_args_count = args_count - 64;
 1746|      0|        for (auto it = visited_args_upper.begin();
 1747|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1747:14): [True: 0, False: 0]
  ------------------
 1748|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1748:17): [True: 0, False: 0]
  ------------------
 1749|      0|                return on_error("Argument list not exhausted");
 1750|      0|            }
 1751|      0|            last_args_count -= 8;
 1752|      0|        }
 1753|       |
 1754|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1755|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1755:13): [True: 0, False: 0]
  ------------------
 1756|      0|            return on_error("Argument list not exhausted");
 1757|      0|        }
 1758|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1777|  1.24M|    {
 1778|  1.24M|        return error;
 1779|  1.24M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1773|  3.70M|    {
 1774|  3.70M|        return static_cast<bool>(error);
 1775|  3.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1900|  67.7k|        : format_handler_base{argcount},
 1901|  67.7k|          parse_ctx{format},
 1902|  67.7k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|  67.7k|    {
 1904|  67.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  67.7k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|  67.7k|    {
 1831|  67.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|  67.7k|{
 2039|  67.7k|    const auto beg = handler.get_ctx().begin();
 2040|  67.7k|    detail::parse_format_string<false>(format, handler);
 2041|  67.7k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.2k, False: 57.4k]
  |  |  ------------------
  ------------------
 2042|  10.2k|        return unexpected(handler.error);
 2043|  10.2k|    }
 2044|  57.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|  67.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2022|   445k|    {
 2023|   445k|        return ctx.get();
 2024|   445k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1834|   445k|    {
 1835|   445k|        return ctx;
 1836|   445k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1907|   125k|    {
 1908|   125k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 125k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1681|  67.7k|{
 1682|  67.7k|    auto arg = ctx.arg(id);
 1683|  67.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.7k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|  67.7k|    return arg;
 1687|  67.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1944|  67.7k|    {
 1945|  67.7k|        return parse_ctx.next_arg_id();
 1946|  67.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1985|  67.7k|    {
 1986|  67.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|  67.7k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|  67.7k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 67.7k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|  67.7k|        auto specs = detail::format_specs{};
 1999|  67.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|  67.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|  67.7k|            arg.type()};
 2002|       |
 2003|  67.7k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|  67.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 67.7k]
  |  Branch (2004:29): [True: 0, False: 67.7k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|  67.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 63.6k]
  |  |  ------------------
  ------------------
 2010|  4.11k|            return parse_ctx.begin();
 2011|  4.11k|        }
 2012|  63.6k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|  63.6k|        on_visit_scan_arg(
 2015|  63.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|  63.6k|                                           get_ctx().locale()},
 2017|  63.6k|            arg);
 2018|  63.6k|        return parse_ctx.begin();
 2019|  67.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  67.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|  67.7k|    {
 1702|  67.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|  63.6k|    {
 1957|  63.6k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 63.6k]
  |  Branch (1957:23): [True: 0, False: 63.6k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|  63.6k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  63.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|  63.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.17k, False: 57.4k]
  |  |  ------------------
  ------------------
 1964|  6.17k|            on_error(r.error());
 1965|  6.17k|        }
 1966|  57.4k|        else {
 1967|  57.4k|            get_ctx().advance_to(*r);
 1968|  57.4k|        }
 1969|  63.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   207k|{
 2054|   207k|    const auto argcount = args.size();
 2055|   207k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 94.7k, False: 112k]
  |  Branch (2055:60): [True: 94.7k, False: 0]
  ------------------
 2056|  94.7k|        auto arg = args.get(0);
 2057|  94.7k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  94.7k|    static_cast<    \
  |  |  929|  94.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|  94.7k|    }
 2059|       |
 2060|   112k|    auto handler = format_handler<true, CharT>{
 2061|   112k|        ranges::subrange<const CharT*>{source.data(),
 2062|   112k|                                       source.data() + source.size()},
 2063|   112k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   112k|    return vscan_parse_format_string(format, handler);
 2065|   207k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|   142k|{
 1639|   142k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 142k]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|   142k|    auto reader =
 1645|   142k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|   142k|            ranges::subrange<const CharT*>{source.data(),
 1647|   142k|                                           source.data() + source.size()},
 1648|   142k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   142k|    static_cast<    \
  |  |  929|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|   142k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.17k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.17k|    }                                                  \
  |  |  |  | 3667|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|   135k|    return ranges::distance(source.data(), it);
 1651|   142k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|  1.39M|{
 2054|  1.39M|    const auto argcount = args.size();
 2055|  1.39M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 679k, False: 712k]
  |  Branch (2055:60): [True: 679k, False: 0]
  ------------------
 2056|   679k|        auto arg = args.get(0);
 2057|   679k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   679k|    static_cast<    \
  |  |  929|   679k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|   679k|    }
 2059|       |
 2060|   712k|    auto handler = format_handler<true, CharT>{
 2061|   712k|        ranges::subrange<const CharT*>{source.data(),
 2062|   712k|                                       source.data() + source.size()},
 2063|   712k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   712k|    static_cast<    \
  |  |  929|   712k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   712k|    static_cast<    \
  |  |  929|   712k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   712k|    return vscan_parse_format_string(format, handler);
 2065|  1.39M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|  2.08M|{
 1626|  2.08M|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 1.06M, False: 1.01M]
  ------------------
 1627|  1.06M|        return false;
 1628|  1.06M|    }
 1629|  1.01M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 1.01M, False: 0]
  |  Branch (1629:39): [True: 1.01M, False: 0]
  ------------------
 1630|  2.08M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|  1.01M|{
 1639|  1.01M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|  1.01M|    auto reader =
 1645|  1.01M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|  1.01M|            ranges::subrange<const CharT*>{source.data(),
 1647|  1.01M|                                           source.data() + source.size()},
 1648|  1.01M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  1.01M|    static_cast<    \
  |  |  929|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|  1.01M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  1.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.3k, False: 1.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.3k|    }                                                  \
  |  |  |  | 3667|  1.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|  1.00M|    return ranges::distance(source.data(), it);
 1651|  1.01M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1900|   712k|        : format_handler_base{argcount},
 1901|   712k|          parse_ctx{format},
 1902|   712k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   712k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   712k|    static_cast<    \
  |  |  929|   712k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   712k|    static_cast<    \
  |  |  929|   712k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   712k|    {
 1904|   712k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   712k|        : contiguous_ctx(source, args, loc)
 1853|   712k|    {
 1854|   712k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   712k|{
 2039|   712k|    const auto beg = handler.get_ctx().begin();
 2040|   712k|    detail::parse_format_string<false>(format, handler);
 2041|   712k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 41.1k, False: 671k]
  |  |  ------------------
  ------------------
 2042|  41.1k|        return unexpected(handler.error);
 2043|  41.1k|    }
 2044|   671k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   712k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2022|  4.87M|    {
 2023|  4.87M|        return ctx.get();
 2024|  4.87M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1857|  4.87M|    {
 1858|  4.87M|        return contiguous_ctx;
 1859|  4.87M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1907|  1.38M|    {
 1908|  1.38M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 1.38M]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|  1.38M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   712k|{
 1682|   712k|    auto arg = ctx.arg(id);
 1683|   712k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 712k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   712k|    return arg;
 1687|   712k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1944|   712k|    {
 1945|   712k|        return parse_ctx.next_arg_id();
 1946|   712k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1985|   712k|    {
 1986|   712k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   712k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   712k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 712k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   712k|        auto specs = detail::format_specs{};
 1999|   712k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   712k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   712k|            arg.type()};
 2002|       |
 2003|   712k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   712k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 712k]
  |  Branch (2004:29): [True: 0, False: 712k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   712k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.4k, False: 695k]
  |  |  ------------------
  ------------------
 2010|  16.4k|            return parse_ctx.begin();
 2011|  16.4k|        }
 2012|   695k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   695k|        on_visit_scan_arg(
 2015|   695k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   695k|                                           get_ctx().locale()},
 2017|   695k|            arg);
 2018|   695k|        return parse_ctx.begin();
 2019|   712k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   712k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   712k|    {
 1702|   712k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1956|   695k|    {
 1957|   695k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 695k]
  |  Branch (1957:23): [True: 0, False: 695k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   695k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   695k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.6k, False: 671k]
  |  |  ------------------
  ------------------
 1964|  24.6k|            on_error(r.error());
 1965|  24.6k|        }
 1966|   671k|        else {
 1967|   671k|            get_ctx().advance_to(*r);
 1968|   671k|        }
 1969|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|   695k|{
 2074|   695k|    const auto argcount = args.size();
 2075|   695k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 339k, False: 356k]
  |  Branch (2075:60): [True: 339k, False: 0]
  ------------------
 2076|   339k|        auto arg = args.get(0);
 2077|   339k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   339k|    static_cast<    \
  |  |  929|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|   339k|    }
 2079|       |
 2080|   356k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 356k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|   356k|    SCN_UNLIKELY_ATTR
 2088|   356k|    {
 2089|   356k|        auto handler = format_handler<false, CharT>{
 2090|   356k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   356k|    static_cast<    \
  |  |  929|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   356k|    static_cast<    \
  |  |  929|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|   356k|        return vscan_parse_format_string(format, handler);
 2092|   356k|    }
 2093|   356k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|   509k|{
 1659|   509k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 509k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|   509k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   509k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 509k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|   509k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|   509k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   509k|    static_cast<    \
  |  |  929|   509k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|   509k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   509k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   509k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   509k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.17k, False: 503k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.17k|    }                                                  \
  |  |  |  | 3667|   509k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   503k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|   503k|    return it.position();
 1676|   509k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1900|   356k|        : format_handler_base{argcount},
 1901|   356k|          parse_ctx{format},
 1902|   356k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   356k|    static_cast<    \
  |  |  929|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   356k|    static_cast<    \
  |  |  929|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   356k|    {
 1904|   356k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   356k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   356k|    static_cast<    \
  |  |  929|   356k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|   356k|    {
 1831|   356k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   356k|{
 2039|   356k|    const auto beg = handler.get_ctx().begin();
 2040|   356k|    detail::parse_format_string<false>(format, handler);
 2041|   356k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.5k, False: 335k]
  |  |  ------------------
  ------------------
 2042|  20.5k|        return unexpected(handler.error);
 2043|  20.5k|    }
 2044|   335k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   356k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2022|  2.43M|    {
 2023|  2.43M|        return ctx.get();
 2024|  2.43M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1834|  2.43M|    {
 1835|  2.43M|        return ctx;
 1836|  2.43M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1907|   691k|    {
 1908|   691k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 691k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   691k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1681|   356k|{
 1682|   356k|    auto arg = ctx.arg(id);
 1683|   356k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   356k|    return arg;
 1687|   356k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1944|   356k|    {
 1945|   356k|        return parse_ctx.next_arg_id();
 1946|   356k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1985|   356k|    {
 1986|   356k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   356k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   356k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 356k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   356k|        auto specs = detail::format_specs{};
 1999|   356k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   356k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   356k|            arg.type()};
 2002|       |
 2003|   356k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   356k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 356k]
  |  Branch (2004:29): [True: 0, False: 356k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   356k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.23k, False: 347k]
  |  |  ------------------
  ------------------
 2010|  8.23k|            return parse_ctx.begin();
 2011|  8.23k|        }
 2012|   347k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   347k|        on_visit_scan_arg(
 2015|   347k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   347k|                                           get_ctx().locale()},
 2017|   347k|            arg);
 2018|   347k|        return parse_ctx.begin();
 2019|   356k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   356k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   356k|    {
 1702|   356k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|   347k|    {
 1957|   347k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 347k]
  |  Branch (1957:23): [True: 0, False: 347k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   347k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   347k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 335k]
  |  |  ------------------
  ------------------
 1964|  12.3k|            on_error(r.error());
 1965|  12.3k|        }
 1966|   335k|        else {
 1967|   335k|            get_ctx().advance_to(*r);
 1968|   335k|        }
 1969|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  47.3k|{
 2100|  47.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  47.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  47.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  29.1k|{
 2100|  29.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  29.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|   339k|{
 2100|   339k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|   339k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|   169k|{
 2100|   169k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|   169k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  1.02k|{
 1351|  1.02k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  1.02k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  1.02k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  1.02k|            return transcode_to_string_impl_to32(src, dest);
 1362|  1.02k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  1.02k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  1.02k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  1.02k|{
 1244|  1.02k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  1.02k|    auto it = src.begin();
 1247|   368k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 367k, False: 1.02k]
  ------------------
 1248|   367k|        auto res = get_next_code_point(
 1249|   367k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   367k|                                                                 src.end()));
 1251|   367k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.87k, False: 362k]
  |  |  ------------------
  ------------------
 1252|  4.87k|            dest.push_back(DestCharT{0xfffd});
 1253|  4.87k|        }
 1254|   362k|        else {
 1255|   362k|            dest.push_back(res.value);
 1256|   362k|        }
 1257|   367k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   367k|    }
 1259|  1.02k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   865k|{
 1169|   865k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   865k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   865k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   865k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   865k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   865k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.2k, False: 843k]
  |  |  ------------------
  ------------------
 1173|  22.2k|        return {get_start_for_next_code_point(input),
 1174|  22.2k|                detail::invalid_code_point};
 1175|  22.2k|    }
 1176|   843k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   843k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 823k]
  |  |  ------------------
  ------------------
 1177|  20.2k|        return {input.end(), detail::invalid_code_point};
 1178|  20.2k|    }
 1179|       |
 1180|   823k|    return {input.begin() + len,
 1181|   823k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   843k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  22.2k|{
 1155|  22.2k|    auto it = input.begin();
 1156|  91.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 89.2k, False: 2.24k]
  ------------------
 1157|  89.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 19.9k, False: 69.2k]
  ------------------
 1158|  19.9k|            break;
 1159|  19.9k|        }
 1160|  89.2k|    }
 1161|  22.2k|    return it;
 1162|  22.2k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|  18.5k|    {
 2920|  18.5k|        SCN_UNLIKELY_ATTR
 2921|  18.5k|        m_msg = msg;
 2922|  18.5k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  1.21M|    {
 2925|  1.21M|        return m_msg == nullptr;
 2926|  1.21M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  2.37M|{
  458|  2.37M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  2.37M|        static_cast<unsigned char>(ch))];
  460|  2.37M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  47.0k|{
  469|  47.0k|    return static_cast<unsigned char>(ch) <= 127;
  470|  47.0k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  13.5k|{
  474|  13.5k|#if WCHAR_MIN < 0
  475|  13.5k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 12.1k, False: 1.36k]
  |  Branch (475:23): [True: 7.80k, False: 4.36k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  13.5k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   904k|{
  539|   904k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   904k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  4.68M|{
  784|  4.68M|    return e != eof_error::good;
  785|  4.68M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  14.2k|{
  798|  14.2k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  14.2k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  14.2k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  1.15M|{
 5997|  1.15M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 1.15M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  1.15M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 1.15M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  1.15M|    return {};
 6012|  1.15M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   468k|    {
  304|   468k|        ranges::advance(x, n);
  305|   468k|        return x;
  306|   468k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   468k|    {
  268|   468k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   468k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   468k|    {
  151|   468k|        i += n;
  152|   468k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.07M|    {
  108|  1.07M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.07M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.07M|    {
   87|  1.07M|        return s - i;
   88|  1.07M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.67M|    {
  108|  1.67M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.67M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.67M|    {
   87|  1.67M|        return s - i;
   88|  1.67M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   148k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   148k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   148k|        auto beg = r.begin();
  990|   148k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 148k, False: 0]
  ------------------
  991|   148k|            return false;
  992|   148k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   148k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  41.0k|    {
  763|  41.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  41.0k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  8.70k|        : m_fptr([](storage fn,
  743|  8.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.70k|              cvref<T> obj = *get<T>(fn);
  745|  8.70k|              if constexpr (std::is_void_v<R>) {
  746|  8.70k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.70k|              }
  748|  8.70k|              else {
  749|  8.70k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.70k|              }
  751|  8.70k|          }),
  752|  8.70k|          m_storage(std::addressof(f))
  753|  8.70k|    {
  754|  8.70k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  20.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  20.5k|              else {
  749|  20.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.5k|              }
  751|  20.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  20.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  20.5k|        else if constexpr (std::is_object_v<T>) {
  688|  20.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  20.5k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  8.70k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  8.70k|        {
  662|  8.70k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  89.2M|    {
  763|  89.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  89.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  89.2M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.67M|        : m_fptr([](storage fn,
  743|  2.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.67M|              cvref<T> obj = *get<T>(fn);
  745|  2.67M|              if constexpr (std::is_void_v<R>) {
  746|  2.67M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.67M|              }
  748|  2.67M|              else {
  749|  2.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.67M|              }
  751|  2.67M|          }),
  752|  2.67M|          m_storage(std::addressof(f))
  753|  2.67M|    {
  754|  2.67M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  6.38M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.38M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.38M|              else {
  749|  6.38M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.38M|              }
  751|  6.38M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.38M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.38M|        else if constexpr (std::is_object_v<T>) {
  688|  6.38M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.38M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.67M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.67M|        {
  662|  2.67M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|  61.5k|    {
 6026|  61.5k|        const bool need_skipped_width =
 6027|  61.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 61.5k]
  |  Branch (6027:33): [True: 0, False: 61.5k]
  ------------------
 6028|  61.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  61.5k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 61.5k]
  ------------------
 6032|  61.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 61.5k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  61.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 61.5k, False: 0]
  |  Branch (6036:56): [True: 58.6k, False: 2.90k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  58.6k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 58.6k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   116k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.04k, False: 57.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.04k|    }                                                  \
  |  |  |  | 3667|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   116k|                            make_eof_scan_error));
 6047|       |
 6048|   116k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 57.6k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  57.6k|            return result_type{it, 0};
 6056|   116k|        }
 6057|       |
 6058|  2.90k|        return result_type{rng.begin(), 0};
 6059|  61.5k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  2.90k|{
 1964|  2.90k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  2.90k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  2.90k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  2.90k|    else {
 1949|  2.90k|        auto first = range.begin();
 1950|  6.91k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 6.84k, False: 72]
  ------------------
 1951|  6.84k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 2.82k, False: 4.01k]
  ------------------
 1952|  2.82k|                return first;
 1953|  2.82k|            }
 1954|  6.84k|        }
 1955|     72|        return first;
 1956|  2.90k|    }
 1957|  2.90k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  57.4k|    {
  108|  57.4k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  57.4k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  57.4k|    {
   94|  57.4k|        iter_difference_t<I> counter{0};
   95|   641k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 583k, False: 57.4k]
  ------------------
   96|   583k|            ++i;
   97|   583k|            ++counter;
   98|   583k|        }
   99|  57.4k|        return counter;
  100|  57.4k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   232k|{
  950|   232k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.40k, False: 230k]
  |  |  ------------------
  ------------------
  951|  2.40k|        return eof_error::eof;
  952|  2.40k|    }
  953|   230k|    return eof_error::good;
  954|   232k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.75M|{
  944|  1.75M|    return is_range_eof(r.begin(), r.end());
  945|  1.75M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.75M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.75M|    {
  937|  1.75M|        return begin == end;
  938|  1.75M|    }
  939|  1.75M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|   144k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   144k|    else {
 1677|   144k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   144k|    }
 1679|   144k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   144k|    {
 1525|   144k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   144k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   144k|    {
 1609|   144k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   144k|                           ranges::common_range<Range>) {
 1626|   144k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   144k|            auto end_seg = range.end().contiguous_segment();
 1628|   144k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.50k, False: 140k]
  |  |  ------------------
  ------------------
 1629|   144k|                             detail::to_address(end_seg.end()))) {
 1630|  3.50k|                auto& str = m_storage.emplace();
 1631|  3.50k|                str.reserve(range.end().position() - range.begin().position());
 1632|  3.50k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  3.50k|                m_view = string_view_type{str};
 1634|  3.50k|                return;
 1635|  3.50k|            }
 1636|       |
 1637|   140k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   140k|                                                            end_seg.data());
 1639|   140k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   144k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   283k|    {
 1570|   283k|        return m_view;
 1571|   283k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|   144k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  56.8k|    {
 6068|  56.8k|        const bool need_skipped_width =
 6069|  56.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 56.8k]
  |  Branch (6069:33): [True: 0, False: 56.8k]
  ------------------
 6070|  56.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  56.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 56.8k]
  ------------------
 6073|  56.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 56.8k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  56.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 56.8k, False: 0]
  ------------------
 6082|  56.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 806, False: 56.0k]
  ------------------
 6083|  56.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 806]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    806|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 806]
  ------------------
 6085|    806|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  56.8k|        return result_type{rng.begin(), 0};
 6107|  56.8k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   377k|{
  950|   377k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.71k, False: 373k]
  |  |  ------------------
  ------------------
  951|  3.71k|        return eof_error::eof;
  952|  3.71k|    }
  953|   373k|    return eof_error::good;
  954|   377k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   377k|{
  944|   377k|    return is_range_eof(r.begin(), r.end());
  945|   377k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   377k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   377k|    {
  937|   377k|        return begin == end;
  938|   377k|    }
  939|   377k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   234k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   234k|                  ranges::sized_range<Range>) {
 1674|   234k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   234k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   234k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   234k|    {
 1478|   234k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  1.28M|    {
 1491|  1.28M|        return sv;
 1492|  1.28M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  5.80k|{
 1964|  5.80k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  5.80k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  5.80k|{
 1945|  5.80k|    if constexpr (ranges::common_range<Range>) {
 1946|  5.80k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  5.80k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   235k|{
 2940|   235k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 235k, False: 0]
  ------------------
 2941|   235k|        auto it = read_while_classic_space(range);
 2942|   235k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   235k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.23k, False: 233k]
  |  |  ------------------
  ------------------
 2944|  2.23k|            return unexpected(e);
 2945|  2.23k|        }
 2946|       |
 2947|   233k|        return it;
 2948|   235k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   235k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   235k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   235k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   235k|        auto buf = make_contiguous_buffer(range);
 2109|   235k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   235k|        return ranges::next(range.begin(),
 2111|   235k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   235k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   468k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   468k|                  ranges::sized_range<Range>) {
 1674|   468k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   468k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   468k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   468k|    {
 1478|   468k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  11.7k|    {
  304|  11.7k|        ranges::advance(x, n);
  305|  11.7k|        return x;
  306|  11.7k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   288k|    {
  268|   288k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   288k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   288k|    {
  181|   528k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 240k, False: 288k]
  ------------------
  182|   240k|            ++i;
  183|   240k|        }
  184|   288k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|   143k|    {
 1575|   143k|        return m_storage.has_value();
 1576|   143k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  2.19k|    {
 1580|  2.19k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  2.19k|        return *m_storage;
 1582|  2.19k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  63.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  63.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  63.6k|            auto rd = make_reader<T, char_type>();
 6195|  63.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 61.5k]
  |  |  ------------------
  ------------------
 6196|  2.05k|                return unexpected(e);
 6197|  2.05k|            }
 6198|       |
 6199|  61.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 61.5k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  61.5k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  61.5k|                return impl(rd, range, value);
 6202|  61.5k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  63.6k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|   274k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|   274k|                       std::is_same_v<T, std::wstring>) {
 5816|   274k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   274k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|   397k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   168k|    {
 3029|   168k|        reader_error_handler eh{};
 3030|   168k|        get_derived().check_specs_impl(specs, eh);
 3031|   168k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.17k, False: 162k]
  |  |  ------------------
  ------------------
 3032|  6.17k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  6.17k|        }
 3034|   162k|        return {};
 3035|   168k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|   168k|    {
 3040|   168k|        return static_cast<Derived&>(*this);
 3041|   168k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|   168k|    {
 5199|   168k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|   168k|        SCN_GCC_PUSH
 5202|   168k|        SCN_GCC_IGNORE("-Wswitch")
 5203|   168k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|   168k|        SCN_CLANG_PUSH
 5206|   168k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|   168k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|   168k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 168k]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 168k]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|   153k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 153k, False: 14.8k]
  ------------------
 5215|   153k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 153k]
  ------------------
 5216|   153k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 153k]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|   153k|                else {
 5220|   153k|                    m_type = reader_type::word;
 5221|   153k|                }
 5222|   153k|                break;
 5223|      0|            }
 5224|       |
 5225|  6.17k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 6.17k, False: 162k]
  ------------------
 5226|  6.17k|                m_type = reader_type::character;
 5227|  6.17k|                break;
 5228|       |
 5229|  8.70k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 8.70k, False: 159k]
  ------------------
 5230|  8.70k|                m_type = reader_type::character_set;
 5231|  8.70k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 168k]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 168k]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|   168k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|   168k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|  61.5k|    {
 6113|  61.5k|        const bool need_skipped_width =
 6114|  61.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 61.5k]
  |  Branch (6114:33): [True: 0, False: 61.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  61.5k|        auto it = rng.begin();
 6118|  61.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  61.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 61.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  61.5k|        else {
 6127|  61.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  61.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  61.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  61.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.04k, False: 60.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.04k|    }                                                  \
  |  |  |  | 3667|  61.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  60.5k|            std::tie(it, prefix_width) = prefix_result;
 6129|  60.5k|        }
 6130|  60.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  60.5k|        std::ptrdiff_t value_width = 0;
 6134|  60.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 60.5k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  60.5k|        else {
 6150|  60.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.07k, False: 57.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.07k|    }                                                  \
  |  | 3667|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  57.4k|                                             specs, value, loc));
 6152|       |
 6153|  57.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 57.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  57.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  57.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  57.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 56.8k, False: 598]
  ------------------
 6163|  56.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  56.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  56.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  56.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 56.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  56.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  56.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  56.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  56.8k|                                 value_width));
 6167|  56.8k|            std::tie(it, postfix_width) = postfix_result;
 6168|  56.8k|        }
 6169|       |
 6170|  57.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  57.4k|                                                 value_width, postfix_width);
 6172|  57.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 57.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  57.4k|        return it;
 6177|  57.4k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|   539k|    {
 5248|   539k|        return m_type == reader_type::word;
 5249|   539k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   379k|{
 1132|   379k|    auto it = src.begin();
 1133|  2.70M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.33M, False: 369k]
  ------------------
 1134|  2.33M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.33M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 5.61k, False: 2.32M]
  ------------------
 1136|  5.61k|            return false;
 1137|  5.61k|        }
 1138|  2.32M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 735, False: 2.32M]
  ------------------
 1139|    735|            return false;
 1140|    735|        }
 1141|  2.32M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.32M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.32M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.97k, False: 2.32M]
  ------------------
 1144|  2.97k|            return false;
 1145|  2.97k|        }
 1146|  2.32M|        it += len;
 1147|  2.32M|    }
 1148|   369k|    return true;
 1149|   379k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|   141k|{
 2982|   141k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|   141k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 2.19k, False: 139k]
  ------------------
 2984|  2.19k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.19k|    static_cast<    \
  |  |  929|  2.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  2.19k|        }
 2986|   139k|        else {
 2987|   139k|            dest.assign(source.view());
 2988|   139k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|   141k|    return {};
 2995|   141k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  8.70k|        {
 5092|  8.70k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 8.70k, False: 0]
  ------------------
 5093|  8.70k|                return {};
 5094|  8.70k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|  18.7k|        {
 5065|  18.7k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  18.7k|            const auto val =
 5067|  18.7k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  18.7k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  18.7k|                    (val % 8)) &
 5070|  18.7k|                   1u;
 5071|  18.7k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  20.5k|        {
 5118|  20.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 1.81k, False: 18.7k]
  ------------------
 5119|  1.81k|                return false;
 5120|  1.81k|            }
 5121|       |
 5122|  18.7k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  20.5k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  8.70k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|  60.5k|    {
 5266|  60.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  60.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  60.5k|        return read_impl(range, specs, value);
 5268|  60.5k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|  60.5k|    {
 5284|  60.5k|        SCN_CLANG_PUSH
 5285|  60.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  60.5k|        switch (m_type) {
 5288|  57.6k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 57.6k, False: 2.90k]
  ------------------
 5289|  57.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 60.5k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 60.5k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.90k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.90k, False: 57.6k]
  ------------------
 5299|  2.90k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.90k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 60.5k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 60.5k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 60.5k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  60.5k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  60.5k|        }
 5320|       |
 5321|  60.5k|        SCN_CLANG_POP
 5322|  60.5k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|   143k|    {
 4809|   143k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   143k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|   143k|{
 4741|   143k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   143k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   143k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 2.73k, False: 140k]
  ------------------
 4745|  2.73k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  2.73k|                                     "Invalid encoding in scanned string");
 4747|  2.73k|    }
 4748|   140k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   140k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   140k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   140k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|   143k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   143k|    else {
 2085|   143k|        auto it = range.begin();
 2086|       |
 2087|   143k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|   143k|            auto seg = get_contiguous_beginning(range);
 2089|   143k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|   143k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 143k]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|   143k|            ranges::advance(it, seg.size());
 2094|   143k|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|   143k|            ranges::subrange{it, range.end()},
 2098|   143k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   143k|    }
 2100|   143k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   288k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   288k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   288k|        else {
 1054|   288k|            return r.begin().contiguous_segment();
 1055|   288k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   288k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   276k|{
 2049|   276k|    auto it = range.begin();
 2050|  1.52M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.52M, False: 4.31k]
  ------------------
 2051|  1.52M|        const auto val =
 2052|  1.52M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.52M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.52M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.50M, False: 17.7k]
  |  |  ------------------
  ------------------
 2054|  1.50M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.50M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.50M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 272k, False: 1.23M]
  ------------------
 2057|   272k|                return it;
 2058|   272k|            }
 2059|  1.50M|        }
 2060|  1.24M|        it = val.iterator;
 2061|  1.24M|    }
 2062|       |
 2063|  4.31k|    return it;
 2064|   276k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  1.52M|{
 1887|  1.52M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.52M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.52M|    auto it = range.begin();
 1891|  1.52M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.52M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.7k, False: 1.50M]
  |  |  ------------------
  ------------------
 1894|  17.7k|        ++it;
 1895|  17.7k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  17.7k|        return {it, {}};
 1897|  17.7k|    }
 1898|       |
 1899|  1.50M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.42M, False: 82.2k]
  ------------------
 1900|  1.42M|        ++it;
 1901|  1.42M|        return {it, string_type(1, *range.begin())};
 1902|  1.42M|    }
 1903|       |
 1904|  82.2k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  82.2k|    return {it, string_type{range.begin(), it}};
 1906|  1.50M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  17.7k|{
 1155|  17.7k|    auto it = input.begin();
 1156|  40.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 39.5k, False: 595]
  ------------------
 1157|  39.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 17.1k, False: 22.4k]
  ------------------
 1158|  17.1k|            break;
 1159|  17.1k|        }
 1160|  39.5k|    }
 1161|  17.7k|    return it;
 1162|  17.7k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  82.2k|    {
  283|  82.2k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  82.2k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  82.2k|    {
  252|  82.2k|        constexpr iter_difference_t<I> zero{0};
  253|  82.2k|        iter_difference_t<I> counter{0};
  254|       |
  255|   311k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 230k, False: 81.7k]
  |  Branch (255:30): [True: 229k, False: 488]
  ------------------
  256|   229k|            ++i;
  257|   229k|            ++counter;
  258|   229k|        }
  259|       |
  260|  82.2k|        return counter;
  261|  82.2k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  1.52M|    {
 1878|  1.52M|        return !codepoint.empty();
 1879|  1.52M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   143k|        : m_fptr([](storage fn,
  743|   143k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   143k|              cvref<T> obj = *get<T>(fn);
  745|   143k|              if constexpr (std::is_void_v<R>) {
  746|   143k|                  obj(static_cast<decltype(args)>(args)...);
  747|   143k|              }
  748|   143k|              else {
  749|   143k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   143k|              }
  751|   143k|          }),
  752|   143k|          m_storage(std::addressof(f))
  753|   143k|    {
  754|   143k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   911k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   911k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   911k|              else {
  749|   911k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   911k|              }
  751|   911k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   911k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   911k|        else if constexpr (std::is_object_v<T>) {
  688|   911k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   911k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|   911k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   143k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   143k|        {
  662|   143k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  2.90k|    {
 5037|  2.90k|        auto it = read_source_impl(range, {specs});
 5038|  2.90k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 842]
  |  |  ------------------
  ------------------
 5039|  2.05k|            return unexpected(it.error());
 5040|  2.05k|        }
 5041|       |
 5042|    842|        return read_string_impl(range, *it, value);
 5043|  2.90k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  2.90k|    {
 5142|  2.90k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  2.90k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  2.90k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.90k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  2.90k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  2.90k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 2.90k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  2.90k|        const auto cb = [&](SourceCharT ch) {
 5165|  2.90k|            return cb_wrapper.on_ascii_only(ch);
 5166|  2.90k|        };
 5167|       |
 5168|  2.90k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 2.90k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  2.90k|        auto it = read_while_code_unit(range, cb);
 5173|  2.90k|        return check_nonempty(it, range);
 5174|  2.90k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  2.90k|    {
 5180|  2.90k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 2.05k, False: 842]
  ------------------
 5181|  2.05k|            return unexpected_scan_error(
 5182|  2.05k|                scan_error::invalid_scanned_value,
 5183|  2.05k|                "No characters matched in [character set]");
 5184|  2.05k|        }
 5185|       |
 5186|    842|        return it;
 5187|  2.90k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   133k|{
 2070|   133k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   133k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.90k|        : m_fptr([](storage fn,
  743|  2.90k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.90k|              cvref<T> obj = *get<T>(fn);
  745|  2.90k|              if constexpr (std::is_void_v<R>) {
  746|  2.90k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.90k|              }
  748|  2.90k|              else {
  749|  2.90k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.90k|              }
  751|  2.90k|          }),
  752|  2.90k|          m_storage(std::addressof(f))
  753|  2.90k|    {
  754|  2.90k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  6.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.84k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.84k|              else {
  749|  6.84k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.84k|              }
  751|  6.84k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  6.84k|    {
  684|  6.84k|        if constexpr (std::is_const_v<T>) {
  685|  6.84k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.84k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5164|  6.84k|        const auto cb = [&](SourceCharT ch) {
 5165|  6.84k|            return cb_wrapper.on_ascii_only(ch);
 5166|  6.84k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.90k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.90k|        {
  667|  2.90k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|    842|{
 4741|    842|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    842|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    842|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 842]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    842|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    842|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 842]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    842|    return SCN_MOVE(result);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    842|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  49.5k|    {
 5266|  49.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  49.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  49.5k|        return read_impl(range, specs, value);
 5268|  49.5k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  49.5k|    {
 5284|  49.5k|        SCN_CLANG_PUSH
 5285|  49.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  49.5k|        switch (m_type) {
 5288|  46.6k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 46.6k, False: 2.90k]
  ------------------
 5289|  46.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 49.5k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 49.5k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.90k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.90k, False: 46.6k]
  ------------------
 5299|  2.90k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.90k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 49.5k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 49.5k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 49.5k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  49.5k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  49.5k|        }
 5320|       |
 5321|  49.5k|        SCN_CLANG_POP
 5322|  49.5k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|   116k|    {
 4809|   116k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   116k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|   116k|{
 4741|   116k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   116k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   116k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 3.29k, False: 113k]
  ------------------
 4745|  3.29k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  3.29k|                                     "Invalid encoding in scanned string");
 4747|  3.29k|    }
 4748|   113k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   113k|    static_cast<    \
  |  |  929|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   113k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   113k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   113k|    static_cast<    \
  |  |  929|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   113k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|   114k|{
 3001|   114k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|   114k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|   114k|    return {};
 3009|   114k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|   233k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|   233k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|   233k|        auto buf = make_contiguous_buffer(range);
 2080|   233k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|   233k|        return ranges::next(range.begin(),
 2082|   233k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|   233k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  2.90k|    {
 5037|  2.90k|        auto it = read_source_impl(range, {specs});
 5038|  2.90k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 842]
  |  |  ------------------
  ------------------
 5039|  2.05k|            return unexpected(it.error());
 5040|  2.05k|        }
 5041|       |
 5042|    842|        return read_string_impl(range, *it, value);
 5043|  2.90k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  5.80k|    {
 5142|  5.80k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  5.80k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  5.80k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.80k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  5.80k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  5.80k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 5.80k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  5.80k|        const auto cb = [&](SourceCharT ch) {
 5165|  5.80k|            return cb_wrapper.on_ascii_only(ch);
 5166|  5.80k|        };
 5167|       |
 5168|  5.80k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 5.80k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  5.80k|        auto it = read_while_code_unit(range, cb);
 5173|  5.80k|        return check_nonempty(it, range);
 5174|  5.80k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  5.80k|    {
 5180|  5.80k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 4.11k, False: 1.68k]
  ------------------
 5181|  4.11k|            return unexpected_scan_error(
 5182|  4.11k|                scan_error::invalid_scanned_value,
 5183|  4.11k|                "No characters matched in [character set]");
 5184|  4.11k|        }
 5185|       |
 5186|  1.68k|        return it;
 5187|  5.80k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  5.80k|        : m_fptr([](storage fn,
  743|  5.80k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.80k|              cvref<T> obj = *get<T>(fn);
  745|  5.80k|              if constexpr (std::is_void_v<R>) {
  746|  5.80k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.80k|              }
  748|  5.80k|              else {
  749|  5.80k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.80k|              }
  751|  5.80k|          }),
  752|  5.80k|          m_storage(std::addressof(f))
  753|  5.80k|    {
  754|  5.80k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.6k|              else {
  749|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.6k|              }
  751|  13.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  13.6k|    {
  684|  13.6k|        if constexpr (std::is_const_v<T>) {
  685|  13.6k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.6k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  13.6k|        const auto cb = [&](SourceCharT ch) {
 5165|  13.6k|            return cb_wrapper.on_ascii_only(ch);
 5166|  13.6k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  5.80k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  5.80k|        {
  667|  5.80k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    842|{
 4741|    842|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    842|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    842|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 842]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    842|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    842|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    842|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 842]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    842|    return SCN_MOVE(result);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    842|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|   123k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|   123k|                       std::is_same_v<T, std::wstring_view>) {
 5812|   123k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   123k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  49.5k|    {
 5266|  49.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  49.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  49.5k|        return read_impl(range, specs, value);
 5268|  49.5k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  49.5k|    {
 5284|  49.5k|        SCN_CLANG_PUSH
 5285|  49.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  49.5k|        switch (m_type) {
 5288|  46.6k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 46.6k, False: 2.90k]
  ------------------
 5289|  46.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 49.5k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 49.5k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.90k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.90k, False: 46.6k]
  ------------------
 5299|  2.90k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.90k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 49.5k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 49.5k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 49.5k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  49.5k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  49.5k|        }
 5320|       |
 5321|  49.5k|        SCN_CLANG_POP
 5322|  49.5k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|   116k|    {
 4816|   116k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|   116k|                                     value);
 4818|   116k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|   116k|{
 4762|   116k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|   116k|    auto src = [&]() {
 4765|   116k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|   116k|            return make_contiguous_buffer(
 4767|   116k|                ranges::subrange{range.begin().base(), result.base()});
 4768|   116k|        }
 4769|   116k|        else {
 4770|   116k|            return make_contiguous_buffer(
 4771|   116k|                ranges::subrange{range.begin(), result});
 4772|   116k|        }
 4773|   116k|    }();
 4774|   116k|    using src_type = decltype(src);
 4775|       |
 4776|   116k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|   116k|    else {
 4789|   116k|        const auto view = src.view();
 4790|   116k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|   116k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 3.29k, False: 113k]
  ------------------
 4793|  3.29k|            return unexpected_scan_error(
 4794|  3.29k|                scan_error::invalid_scanned_value,
 4795|  3.29k|                "Invalid encoding in scanned string_view");
 4796|  3.29k|        }
 4797|       |
 4798|   113k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   113k|    static_cast<    \
  |  |  929|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|   116k|    }
 4800|   116k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|   116k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|   116k|        else {
 4770|   116k|            return make_contiguous_buffer(
 4771|   116k|                ranges::subrange{range.begin(), result});
 4772|   116k|        }
 4773|   116k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  2.90k|    {
 5051|  2.90k|        auto it = read_source_impl(range, {specs});
 5052|  2.90k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 842]
  |  |  ------------------
  ------------------
 5053|  2.05k|            return unexpected(it.error());
 5054|  2.05k|        }
 5055|       |
 5056|    842|        return read_string_view_impl(range, *it, value);
 5057|  2.90k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    842|{
 4762|    842|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    842|    auto src = [&]() {
 4765|    842|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    842|            return make_contiguous_buffer(
 4767|    842|                ranges::subrange{range.begin().base(), result.base()});
 4768|    842|        }
 4769|    842|        else {
 4770|    842|            return make_contiguous_buffer(
 4771|    842|                ranges::subrange{range.begin(), result});
 4772|    842|        }
 4773|    842|    }();
 4774|    842|    using src_type = decltype(src);
 4775|       |
 4776|    842|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    842|    else {
 4789|    842|        const auto view = src.view();
 4790|    842|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    842|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 842]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|    842|        return SCN_MOVE(result);
  ------------------
  |  |  928|    842|    static_cast<    \
  |  |  929|    842|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    842|    }
 4800|    842|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    842|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    842|        else {
 4770|    842|            return make_contiguous_buffer(
 4771|    842|                ranges::subrange{range.begin(), result});
 4772|    842|        }
 4773|    842|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   145k|{
 2940|   145k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 145k, False: 0]
  ------------------
 2941|   145k|        auto it = read_while_classic_space(range);
 2942|   145k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   145k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.54k, False: 143k]
  |  |  ------------------
  ------------------
 2944|  1.54k|            return unexpected(e);
 2945|  1.54k|        }
 2946|       |
 2947|   143k|        return it;
 2948|   145k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   145k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   145k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   145k|    else {
 2114|   145k|        auto it = range.begin();
 2115|       |
 2116|   145k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|   145k|            auto seg = get_contiguous_beginning(range);
 2118|   145k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|   145k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 11.7k, False: 133k]
  ------------------
 2120|  11.7k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  11.7k|            }
 2122|   133k|            ranges::advance(it, seg.size());
 2123|   133k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   145k|            return detail::is_cp_space(cp);
 2127|   145k|        });
 2128|   145k|    }
 2129|   145k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   133k|        : m_fptr([](storage fn,
  743|   133k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   133k|              cvref<T> obj = *get<T>(fn);
  745|   133k|              if constexpr (std::is_void_v<R>) {
  746|   133k|                  obj(static_cast<decltype(args)>(args)...);
  747|   133k|              }
  748|   133k|              else {
  749|   133k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   133k|              }
  751|   133k|          }),
  752|   133k|          m_storage(std::addressof(f))
  753|   133k|    {
  754|   133k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   593k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   593k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   593k|              else {
  749|   593k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   593k|              }
  751|   593k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   593k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   593k|        else if constexpr (std::is_object_v<T>) {
  688|   593k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   593k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   593k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   593k|            return detail::is_cp_space(cp);
 2127|   593k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   133k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   133k|        {
  662|   133k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   853k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   853k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   853k|        auto beg = r.begin();
  990|   853k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 853k, False: 0]
  ------------------
  991|   853k|            return false;
  992|   853k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   853k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  27.0k|    {
  763|  27.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  27.0k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  12.6k|        : m_fptr([](storage fn,
  743|  12.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.6k|              cvref<T> obj = *get<T>(fn);
  745|  12.6k|              if constexpr (std::is_void_v<R>) {
  746|  12.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.6k|              }
  748|  12.6k|              else {
  749|  12.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.6k|              }
  751|  12.6k|          }),
  752|  12.6k|          m_storage(std::addressof(f))
  753|  12.6k|    {
  754|  12.6k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  13.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.5k|              else {
  749|  13.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.5k|              }
  751|  13.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  13.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  13.5k|        else if constexpr (std::is_object_v<T>) {
  688|  13.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.5k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  12.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  12.6k|        {
  662|  12.6k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   343k|    {
 6026|   343k|        const bool need_skipped_width =
 6027|   343k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 343k]
  |  Branch (6027:33): [True: 0, False: 343k]
  ------------------
 6028|   343k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   343k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 343k]
  ------------------
 6032|   343k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 343k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   343k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 343k, False: 0]
  |  Branch (6036:56): [True: 339k, False: 4.22k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   339k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 339k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   678k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.08k, False: 338k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.08k|    }                                                  \
  |  |  |  | 3667|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   338k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   678k|                            make_eof_scan_error));
 6047|       |
 6048|   678k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 338k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   338k|            return result_type{it, 0};
 6056|   678k|        }
 6057|       |
 6058|  4.22k|        return result_type{rng.begin(), 0};
 6059|   343k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  4.22k|{
 1964|  4.22k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  4.22k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  4.22k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  4.22k|    else {
 1949|  4.22k|        auto first = range.begin();
 1950|  4.56k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 4.51k, False: 52]
  ------------------
 1951|  4.51k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 4.17k, False: 338]
  ------------------
 1952|  4.17k|                return first;
 1953|  4.17k|            }
 1954|  4.51k|        }
 1955|     52|        return first;
 1956|  4.22k|    }
 1957|  4.22k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   335k|    {
  108|   335k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   335k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   335k|    {
   94|   335k|        iter_difference_t<I> counter{0};
   95|  10.3M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 9.98M, False: 335k]
  ------------------
   96|  9.98M|            ++i;
   97|  9.98M|            ++counter;
   98|  9.98M|        }
   99|   335k|        return counter;
  100|   335k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.35M|{
  950|  1.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.72k, False: 1.35M]
  |  |  ------------------
  ------------------
  951|  2.72k|        return eof_error::eof;
  952|  2.72k|    }
  953|  1.35M|    return eof_error::good;
  954|  1.35M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  28.4M|{
  944|  28.4M|    return is_range_eof(r.begin(), r.end());
  945|  28.4M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  28.4M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  28.4M|    {
  937|  28.4M|        return begin == end;
  938|  28.4M|    }
  939|  28.4M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|   846k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   846k|    else {
 1677|   846k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   846k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   846k|    }
 1679|   846k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   846k|    {
 1525|   846k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   846k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   846k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|   846k|    {
 1609|   846k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   846k|                           ranges::common_range<Range>) {
 1626|   846k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   846k|            auto end_seg = range.end().contiguous_segment();
 1628|   846k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.13k, False: 842k]
  |  |  ------------------
  ------------------
 1629|   846k|                             detail::to_address(end_seg.end()))) {
 1630|  4.13k|                auto& str = m_storage.emplace();
 1631|  4.13k|                str.reserve(range.end().position() - range.begin().position());
 1632|  4.13k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  4.13k|                m_view = string_view_type{str};
 1634|  4.13k|                return;
 1635|  4.13k|            }
 1636|       |
 1637|   842k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   842k|                                                            end_seg.data());
 1639|   842k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   846k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  1.68M|    {
 1570|  1.68M|        return m_view;
 1571|  1.68M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|   846k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   334k|    {
 6068|   334k|        const bool need_skipped_width =
 6069|   334k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 334k]
  |  Branch (6069:33): [True: 0, False: 334k]
  ------------------
 6070|   334k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   334k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 334k]
  ------------------
 6073|   334k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 334k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   334k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 334k, False: 0]
  ------------------
 6082|   334k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 82, False: 334k]
  ------------------
 6083|   334k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 82]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|     82|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 82]
  ------------------
 6085|     82|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   334k|        return result_type{rng.begin(), 0};
 6107|   334k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  54.2M|{
 1887|  54.2M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  54.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  54.2M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  54.2M|    auto it = range.begin();
 1891|  54.2M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  54.2M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  54.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.2M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  54.2M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 54.2M, False: 0]
  ------------------
 1900|  54.2M|        ++it;
 1901|  54.2M|        return {it, string_type(1, *range.begin())};
 1902|  54.2M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  54.2M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  56.9M|{
  944|  56.9M|    return is_range_eof(r.begin(), r.end());
  945|  56.9M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  56.9M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  56.9M|    {
  937|  56.9M|        return begin == end;
  938|  56.9M|    }
  939|  56.9M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  54.2M|    {
 1878|  54.2M|        return !codepoint.empty();
 1879|  54.2M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.71M|{
  950|  2.71M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.44k, False: 2.70M]
  |  |  ------------------
  ------------------
  951|  5.44k|        return eof_error::eof;
  952|  5.44k|    }
  953|  2.70M|    return eof_error::good;
  954|  2.71M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  1.69M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.69M|                  ranges::sized_range<Range>) {
 1674|  1.69M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.69M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  1.69M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.69M|    {
 1478|  1.69M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  2.53M|    {
 1491|  2.53M|        return sv;
 1492|  2.53M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  8.44k|{
 1964|  8.44k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  8.44k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  8.44k|{
 1945|  8.44k|    if constexpr (ranges::common_range<Range>) {
 1946|  8.44k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  8.44k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  1.69M|{
 2940|  1.69M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.69M, False: 0]
  ------------------
 2941|  1.69M|        auto it = read_while_classic_space(range);
 2942|  1.69M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.69M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.72k, False: 1.69M]
  |  |  ------------------
  ------------------
 2944|  2.72k|            return unexpected(e);
 2945|  2.72k|        }
 2946|       |
 2947|  1.69M|        return it;
 2948|  1.69M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.69M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  1.69M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.69M|    else {
 2114|  1.69M|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  1.69M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.69M|            return detail::is_cp_space(cp);
 2127|  1.69M|        });
 2128|  1.69M|    }
 2129|  1.69M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  1.69M|{
 2070|  1.69M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.69M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  3.38M|{
 2049|  3.38M|    auto it = range.begin();
 2050|  54.2M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 54.2M, False: 14.5k]
  ------------------
 2051|  54.2M|        const auto val =
 2052|  54.2M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  54.2M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  54.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 54.2M, False: 0]
  |  |  ------------------
  ------------------
 2054|  54.2M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  54.2M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  54.2M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 3.37M, False: 50.8M]
  ------------------
 2057|  3.37M|                return it;
 2058|  3.37M|            }
 2059|  54.2M|        }
 2060|  50.8M|        it = val.iterator;
 2061|  50.8M|    }
 2062|       |
 2063|  14.5k|    return it;
 2064|  3.38M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.69M|        : m_fptr([](storage fn,
  743|  1.69M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.69M|              cvref<T> obj = *get<T>(fn);
  745|  1.69M|              if constexpr (std::is_void_v<R>) {
  746|  1.69M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.69M|              }
  748|  1.69M|              else {
  749|  1.69M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.69M|              }
  751|  1.69M|          }),
  752|  1.69M|          m_storage(std::addressof(f))
  753|  1.69M|    {
  754|  1.69M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.85M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.85M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.85M|              else {
  749|  3.85M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.85M|              }
  751|  3.85M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.85M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.85M|        else if constexpr (std::is_object_v<T>) {
  688|  3.85M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.85M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  3.85M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  3.85M|            return detail::is_cp_space(cp);
 2127|  3.85M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.69M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.69M|        {
  662|  1.69M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|   840k|    {
 1575|   840k|        return m_storage.has_value();
 1576|   840k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|  1.36k|    {
 1580|  1.36k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  1.36k|        return *m_storage;
 1582|  1.36k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  2.57M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  1.04M|    {
 3029|  1.04M|        reader_error_handler eh{};
 3030|  1.04M|        get_derived().check_specs_impl(specs, eh);
 3031|  1.04M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 1.03M]
  |  |  ------------------
  ------------------
 3032|  12.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  12.3k|        }
 3034|  1.03M|        return {};
 3035|  1.04M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|  1.04M|    {
 3040|  1.04M|        return static_cast<Derived&>(*this);
 3041|  1.04M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  1.04M|    {
 5199|  1.04M|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  1.04M|        SCN_GCC_PUSH
 5202|  1.04M|        SCN_GCC_IGNORE("-Wswitch")
 5203|  1.04M|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  1.04M|        SCN_CLANG_PUSH
 5206|  1.04M|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  1.04M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  1.04M|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 1.04M]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 1.04M]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|  1.01M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 1.01M, False: 25.0k]
  ------------------
 5215|  1.01M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 1.01M]
  ------------------
 5216|  1.01M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 1.01M]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|  1.01M|                else {
 5220|  1.01M|                    m_type = reader_type::word;
 5221|  1.01M|                }
 5222|  1.01M|                break;
 5223|      0|            }
 5224|       |
 5225|  12.3k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 12.3k, False: 1.03M]
  ------------------
 5226|  12.3k|                m_type = reader_type::character;
 5227|  12.3k|                break;
 5228|       |
 5229|  12.6k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 12.6k, False: 1.03M]
  ------------------
 5230|  12.6k|                m_type = reader_type::character_set;
 5231|  12.6k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 1.04M]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 1.04M]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|  1.04M|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  1.04M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  3.56M|    {
 5248|  3.56M|        return m_type == reader_type::word;
 5249|  3.56M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  2.53M|{
 1132|  2.53M|    auto it = src.begin();
 1133|  74.2M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 71.6M, False: 2.51M]
  ------------------
 1134|  71.6M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  71.6M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 71.6M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  71.6M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 71.6M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  71.6M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  71.6M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  71.6M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 22.7k, False: 71.6M]
  ------------------
 1144|  22.7k|            return false;
 1145|  22.7k|        }
 1146|  71.6M|        it += len;
 1147|  71.6M|    }
 1148|  2.51M|    return true;
 1149|  2.53M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|  12.6k|        {
 5092|  12.6k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 12.6k, False: 0]
  ------------------
 5093|  12.6k|                return {};
 5094|  12.6k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  7.80k|        {
 5065|  7.80k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  7.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  7.80k|            const auto val =
 5067|  7.80k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  7.80k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  7.80k|                    (val % 8)) &
 5070|  7.80k|                   1u;
 5071|  7.80k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  13.5k|        {
 5118|  13.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 5.73k, False: 7.80k]
  ------------------
 5119|  5.73k|                return false;
 5120|  5.73k|            }
 5121|       |
 5122|  7.80k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  13.5k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  12.6k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|   846k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   846k|    else {
 2085|   846k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|   846k|        return read_until_code_point(
 2097|   846k|            ranges::subrange{it, range.end()},
 2098|   846k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   846k|    }
 2100|   846k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.69M|{
 2049|  1.69M|    auto it = range.begin();
 2050|  27.1M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 27.1M, False: 7.27k]
  ------------------
 2051|  27.1M|        const auto val =
 2052|  27.1M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  27.1M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  27.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 27.1M, False: 0]
  |  |  ------------------
  ------------------
 2054|  27.1M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  27.1M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  27.1M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.68M, False: 25.4M]
  ------------------
 2057|  1.68M|                return it;
 2058|  1.68M|            }
 2059|  27.1M|        }
 2060|  25.4M|        it = val.iterator;
 2061|  25.4M|    }
 2062|       |
 2063|  7.27k|    return it;
 2064|  1.69M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  27.1M|{
 1887|  27.1M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  27.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  27.1M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  27.1M|    auto it = range.begin();
 1891|  27.1M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  27.1M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  27.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.1M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  27.1M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 27.1M, False: 0]
  ------------------
 1900|  27.1M|        ++it;
 1901|  27.1M|        return {it, string_type(1, *range.begin())};
 1902|  27.1M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  27.1M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|  27.1M|    {
 1878|  27.1M|        return !codepoint.empty();
 1879|  27.1M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   846k|        : m_fptr([](storage fn,
  743|   846k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   846k|              cvref<T> obj = *get<T>(fn);
  745|   846k|              if constexpr (std::is_void_v<R>) {
  746|   846k|                  obj(static_cast<decltype(args)>(args)...);
  747|   846k|              }
  748|   846k|              else {
  749|   846k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   846k|              }
  751|   846k|          }),
  752|   846k|          m_storage(std::addressof(f))
  753|   846k|    {
  754|   846k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  25.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  25.1M|              else {
  749|  25.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.1M|              }
  751|  25.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  25.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  25.1M|        else if constexpr (std::is_object_v<T>) {
  688|  25.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  25.1M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|  25.1M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   846k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   846k|        {
  662|   846k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  4.22k|    {
 5142|  4.22k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  4.22k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  4.22k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.22k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  4.22k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  4.22k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 4.22k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  4.22k|        const auto cb = [&](SourceCharT ch) {
 5165|  4.22k|            return cb_wrapper.on_ascii_only(ch);
 5166|  4.22k|        };
 5167|       |
 5168|  4.22k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 4.22k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  4.22k|        auto it = read_while_code_unit(range, cb);
 5173|  4.22k|        return check_nonempty(it, range);
 5174|  4.22k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  4.22k|    {
 5180|  4.22k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 4.11k, False: 108]
  ------------------
 5181|  4.11k|            return unexpected_scan_error(
 5182|  4.11k|                scan_error::invalid_scanned_value,
 5183|  4.11k|                "No characters matched in [character set]");
 5184|  4.11k|        }
 5185|       |
 5186|    108|        return it;
 5187|  4.22k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   847k|{
 2070|   847k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   847k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  4.22k|        : m_fptr([](storage fn,
  743|  4.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.22k|              cvref<T> obj = *get<T>(fn);
  745|  4.22k|              if constexpr (std::is_void_v<R>) {
  746|  4.22k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.22k|              }
  748|  4.22k|              else {
  749|  4.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.22k|              }
  751|  4.22k|          }),
  752|  4.22k|          m_storage(std::addressof(f))
  753|  4.22k|    {
  754|  4.22k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  4.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.51k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.51k|              else {
  749|  4.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.51k|              }
  751|  4.51k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.51k|    {
  684|  4.51k|        if constexpr (std::is_const_v<T>) {
  685|  4.51k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.51k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5164|  4.51k|        const auto cb = [&](SourceCharT ch) {
 5165|  4.51k|            return cb_wrapper.on_ascii_only(ch);
 5166|  4.51k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  4.22k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.22k|        {
  667|  4.22k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  1.69M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  1.69M|    else {
 2085|  1.69M|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  1.69M|        return read_until_code_point(
 2097|  1.69M|            ranges::subrange{it, range.end()},
 2098|  1.69M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  1.69M|    }
 2100|  1.69M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.69M|        : m_fptr([](storage fn,
  743|  1.69M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.69M|              cvref<T> obj = *get<T>(fn);
  745|  1.69M|              if constexpr (std::is_void_v<R>) {
  746|  1.69M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.69M|              }
  748|  1.69M|              else {
  749|  1.69M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.69M|              }
  751|  1.69M|          }),
  752|  1.69M|          m_storage(std::addressof(f))
  753|  1.69M|    {
  754|  1.69M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  50.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.3M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  50.3M|              else {
  749|  50.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.3M|              }
  751|  50.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  50.3M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  50.3M|        else if constexpr (std::is_object_v<T>) {
  688|  50.3M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  50.3M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|  50.3M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.69M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.69M|        {
  662|  1.69M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  8.44k|    {
 5142|  8.44k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  8.44k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  8.44k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.44k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  8.44k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  8.44k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 8.44k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  8.44k|        const auto cb = [&](SourceCharT ch) {
 5165|  8.44k|            return cb_wrapper.on_ascii_only(ch);
 5166|  8.44k|        };
 5167|       |
 5168|  8.44k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 8.44k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  8.44k|        auto it = read_while_code_unit(range, cb);
 5173|  8.44k|        return check_nonempty(it, range);
 5174|  8.44k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  8.44k|    {
 5180|  8.44k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 8.23k, False: 216]
  ------------------
 5181|  8.23k|            return unexpected_scan_error(
 5182|  8.23k|                scan_error::invalid_scanned_value,
 5183|  8.23k|                "No characters matched in [character set]");
 5184|  8.23k|        }
 5185|       |
 5186|    216|        return it;
 5187|  8.44k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  8.44k|        : m_fptr([](storage fn,
  743|  8.44k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.44k|              cvref<T> obj = *get<T>(fn);
  745|  8.44k|              if constexpr (std::is_void_v<R>) {
  746|  8.44k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.44k|              }
  748|  8.44k|              else {
  749|  8.44k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.44k|              }
  751|  8.44k|          }),
  752|  8.44k|          m_storage(std::addressof(f))
  753|  8.44k|    {
  754|  8.44k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  9.02k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.02k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.02k|              else {
  749|  9.02k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.02k|              }
  751|  9.02k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.02k|    {
  684|  9.02k|        if constexpr (std::is_const_v<T>) {
  685|  9.02k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.02k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  9.02k|        const auto cb = [&](SourceCharT ch) {
 5165|  9.02k|            return cb_wrapper.on_ascii_only(ch);
 5166|  9.02k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  8.44k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  8.44k|        {
  667|  8.44k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   347k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   347k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   347k|            auto rd = make_reader<T, char_type>();
 6195|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 343k]
  |  |  ------------------
  ------------------
 6196|  4.11k|                return unexpected(e);
 6197|  4.11k|            }
 6198|       |
 6199|   343k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 343k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   343k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   343k|                return impl(rd, range, value);
 6202|   343k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   347k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  1.71M|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  1.71M|                       std::is_same_v<T, std::wstring>) {
 5816|  1.71M|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  1.71M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|   343k|    {
 6113|   343k|        const bool need_skipped_width =
 6114|   343k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 343k]
  |  Branch (6114:33): [True: 0, False: 343k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   343k|        auto it = rng.begin();
 6118|   343k|        std::ptrdiff_t prefix_width = 0;
 6119|   343k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 343k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   343k|        else {
 6127|   343k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.08k, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.08k|    }                                                  \
  |  |  |  | 3667|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   342k|            std::tie(it, prefix_width) = prefix_result;
 6129|   342k|        }
 6130|   342k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   342k|        std::ptrdiff_t value_width = 0;
 6134|   342k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 342k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   342k|        else {
 6150|   342k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.14k, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.14k|    }                                                  \
  |  | 3667|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   335k|                                             specs, value, loc));
 6152|       |
 6153|   335k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 335k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   335k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   335k|        std::ptrdiff_t postfix_width = 0;
 6162|   335k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 334k, False: 930]
  ------------------
 6163|   334k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   334k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   334k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   334k|                                 value_width));
 6167|   334k|            std::tie(it, postfix_width) = postfix_result;
 6168|   334k|        }
 6169|       |
 6170|   335k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   335k|                                                 value_width, postfix_width);
 6172|   335k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 335k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   335k|        return it;
 6177|   335k|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|   838k|{
 2982|   838k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|   838k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 1.36k, False: 837k]
  ------------------
 2984|  1.36k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  1.36k|    static_cast<    \
  |  |  929|  1.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  1.36k|        }
 2986|   837k|        else {
 2987|   837k|            dest.assign(source.view());
 2988|   837k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|   838k|    return {};
 2995|   838k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|   342k|    {
 5266|   342k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   342k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   342k|        return read_impl(range, specs, value);
 5268|   342k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|   342k|    {
 5284|   342k|        SCN_CLANG_PUSH
 5285|   342k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   342k|        switch (m_type) {
 5288|   338k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 338k, False: 4.22k]
  ------------------
 5289|   338k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 342k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 342k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  4.22k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 4.22k, False: 338k]
  ------------------
 5299|  4.22k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  4.22k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 342k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 342k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 342k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   342k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   342k|        }
 5320|       |
 5321|   342k|        SCN_CLANG_POP
 5322|   342k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|   846k|    {
 4809|   846k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   846k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|   846k|{
 4741|   846k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   846k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   846k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 7.57k, False: 838k]
  ------------------
 4745|  7.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  7.57k|                                     "Invalid encoding in scanned string");
 4747|  7.57k|    }
 4748|   838k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   838k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 838k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   838k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   838k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  4.22k|    {
 5037|  4.22k|        auto it = read_source_impl(range, {specs});
 5038|  4.22k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 108]
  |  |  ------------------
  ------------------
 5039|  4.11k|            return unexpected(it.error());
 5040|  4.11k|        }
 5041|       |
 5042|    108|        return read_string_impl(range, *it, value);
 5043|  4.22k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|    108|{
 4741|    108|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    108|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    108|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 108]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    108|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    108|    static_cast<    \
  |  |  929|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    108|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 108]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    108|    return SCN_MOVE(result);
  ------------------
  |  |  928|    108|    static_cast<    \
  |  |  929|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    108|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|   342k|    {
 5266|   342k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   342k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   342k|        return read_impl(range, specs, value);
 5268|   342k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|   342k|    {
 5284|   342k|        SCN_CLANG_PUSH
 5285|   342k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   342k|        switch (m_type) {
 5288|   338k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 338k, False: 4.22k]
  ------------------
 5289|   338k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 342k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 342k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  4.22k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 4.22k, False: 338k]
  ------------------
 5299|  4.22k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  4.22k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 342k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 342k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 342k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   342k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   342k|        }
 5320|       |
 5321|   342k|        SCN_CLANG_POP
 5322|   342k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|   846k|    {
 4809|   846k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   846k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|   846k|{
 4741|   846k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   846k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   846k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 7.57k, False: 838k]
  ------------------
 4745|  7.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  7.57k|                                     "Invalid encoding in scanned string");
 4747|  7.57k|    }
 4748|   838k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   838k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 838k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   838k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   838k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|   838k|{
 3001|   838k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|   838k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|   838k|    return {};
 3009|   838k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  4.22k|    {
 5037|  4.22k|        auto it = read_source_impl(range, {specs});
 5038|  4.22k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 108]
  |  |  ------------------
  ------------------
 5039|  4.11k|            return unexpected(it.error());
 5040|  4.11k|        }
 5041|       |
 5042|    108|        return read_string_impl(range, *it, value);
 5043|  4.22k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    108|{
 4741|    108|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    108|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    108|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 108]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    108|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    108|    static_cast<    \
  |  |  929|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    108|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 108]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    108|    return SCN_MOVE(result);
  ------------------
  |  |  928|    108|    static_cast<    \
  |  |  929|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    108|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|   857k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|   857k|                       std::is_same_v<T, std::wstring_view>) {
 5812|   857k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   857k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|   342k|    {
 5266|   342k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   342k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   342k|        return read_impl(range, specs, value);
 5268|   342k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|   342k|    {
 5284|   342k|        SCN_CLANG_PUSH
 5285|   342k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   342k|        switch (m_type) {
 5288|   338k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 338k, False: 4.22k]
  ------------------
 5289|   338k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 342k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 342k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  4.22k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 4.22k, False: 338k]
  ------------------
 5299|  4.22k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  4.22k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 342k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 342k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 342k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   342k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   342k|        }
 5320|       |
 5321|   342k|        SCN_CLANG_POP
 5322|   342k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|   846k|    {
 4816|   846k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|   846k|                                     value);
 4818|   846k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|   846k|{
 4762|   846k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|   846k|    auto src = [&]() {
 4765|   846k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|   846k|            return make_contiguous_buffer(
 4767|   846k|                ranges::subrange{range.begin().base(), result.base()});
 4768|   846k|        }
 4769|   846k|        else {
 4770|   846k|            return make_contiguous_buffer(
 4771|   846k|                ranges::subrange{range.begin(), result});
 4772|   846k|        }
 4773|   846k|    }();
 4774|   846k|    using src_type = decltype(src);
 4775|       |
 4776|   846k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|   846k|    else {
 4789|   846k|        const auto view = src.view();
 4790|   846k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|   846k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 7.57k, False: 838k]
  ------------------
 4793|  7.57k|            return unexpected_scan_error(
 4794|  7.57k|                scan_error::invalid_scanned_value,
 4795|  7.57k|                "Invalid encoding in scanned string_view");
 4796|  7.57k|        }
 4797|       |
 4798|   838k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   838k|    static_cast<    \
  |  |  929|   838k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|   846k|    }
 4800|   846k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|   846k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|   846k|        else {
 4770|   846k|            return make_contiguous_buffer(
 4771|   846k|                ranges::subrange{range.begin(), result});
 4772|   846k|        }
 4773|   846k|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  4.22k|    {
 5051|  4.22k|        auto it = read_source_impl(range, {specs});
 5052|  4.22k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 108]
  |  |  ------------------
  ------------------
 5053|  4.11k|            return unexpected(it.error());
 5054|  4.11k|        }
 5055|       |
 5056|    108|        return read_string_view_impl(range, *it, value);
 5057|  4.22k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    108|{
 4762|    108|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    108|    auto src = [&]() {
 4765|    108|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    108|            return make_contiguous_buffer(
 4767|    108|                ranges::subrange{range.begin().base(), result.base()});
 4768|    108|        }
 4769|    108|        else {
 4770|    108|            return make_contiguous_buffer(
 4771|    108|                ranges::subrange{range.begin(), result});
 4772|    108|        }
 4773|    108|    }();
 4774|    108|    using src_type = decltype(src);
 4775|       |
 4776|    108|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    108|    else {
 4789|    108|        const auto view = src.view();
 4790|    108|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    108|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 108]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|    108|        return SCN_MOVE(result);
  ------------------
  |  |  928|    108|    static_cast<    \
  |  |  929|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    108|    }
 4800|    108|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    108|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    108|        else {
 4770|    108|            return make_contiguous_buffer(
 4771|    108|                ranges::subrange{range.begin(), result});
 4772|    108|        }
 4773|    108|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   847k|{
 2940|   847k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 847k, False: 0]
  ------------------
 2941|   847k|        auto it = read_while_classic_space(range);
 2942|   847k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   847k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   847k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 846k]
  |  |  ------------------
  ------------------
 2944|  1.36k|            return unexpected(e);
 2945|  1.36k|        }
 2946|       |
 2947|   846k|        return it;
 2948|   847k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   847k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   847k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   847k|    else {
 2114|   847k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   847k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   847k|            return detail::is_cp_space(cp);
 2127|   847k|        });
 2128|   847k|    }
 2129|   847k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   847k|        : m_fptr([](storage fn,
  743|   847k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   847k|              cvref<T> obj = *get<T>(fn);
  745|   847k|              if constexpr (std::is_void_v<R>) {
  746|   847k|                  obj(static_cast<decltype(args)>(args)...);
  747|   847k|              }
  748|   847k|              else {
  749|   847k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   847k|              }
  751|   847k|          }),
  752|   847k|          m_storage(std::addressof(f))
  753|   847k|    {
  754|   847k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.92M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.92M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.92M|              else {
  749|  1.92M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.92M|              }
  751|  1.92M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.92M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.92M|        else if constexpr (std::is_object_v<T>) {
  688|  1.92M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.92M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.92M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.92M|            return detail::is_cp_space(cp);
 2127|  1.92M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   847k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   847k|        {
  662|   847k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   142k|{
 5784|   142k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 140k]
  |  |  ------------------
  ------------------
 5785|  1.47k|        return unexpected(e);
 5786|  1.47k|    }
 5787|       |
 5788|   140k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 140k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   140k|    return skip_classic_whitespace(range);
 5793|   140k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|  71.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  71.0k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  71.0k|            auto rd = make_reader<T, char_type>();
 5865|  71.0k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  71.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|  71.0k|    {
 5852|  71.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  71.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  71.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  71.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.11k, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.11k|    }                                                  \
  |  |  |  | 3667|  71.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  69.9k|                        .transform_error(make_eof_scan_error));
 5854|  69.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  71.0k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|  69.9k|    {
 5255|  69.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  69.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  69.9k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  69.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|  71.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  71.0k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  71.0k|            auto rd = make_reader<T, char_type>();
 5865|  71.0k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  71.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|  71.0k|    {
 5852|  71.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  71.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  71.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  71.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.11k, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.11k|    }                                                  \
  |  |  |  | 3667|  71.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  69.9k|                        .transform_error(make_eof_scan_error));
 5854|  69.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  71.0k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|  69.9k|    {
 5255|  69.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  69.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  69.9k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  69.9k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  87.3k|{
 5784|  87.3k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 861, False: 86.4k]
  |  |  ------------------
  ------------------
 5785|    861|        return unexpected(e);
 5786|    861|    }
 5787|       |
 5788|  86.4k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 86.4k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  86.4k|    return skip_classic_whitespace(range);
 5793|  86.4k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  87.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  87.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  87.3k|            auto rd = make_reader<T, char_type>();
 5869|  87.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 87.3k, False: 0]
  ------------------
 5870|  87.3k|                return impl(rd, range, value);
 5871|  87.3k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  87.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|  87.3k|    {
 5852|  87.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  87.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  87.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  87.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 85.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.36k|    }                                                  \
  |  |  |  | 3667|  87.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  85.9k|                        .transform_error(make_eof_scan_error));
 5854|  85.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  87.3k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|  85.9k|    {
 5255|  85.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  85.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  85.9k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  85.9k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   112k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   112k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   112k|          m_current(m_range.begin())
 2867|   112k|    {
 2868|   112k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   309k|    {
 2872|   309k|        return m_current;
 2873|   309k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   196k|    {
 2877|   196k|        return m_range.end();
 2878|   196k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  92.3k|    {
 2892|  92.3k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  92.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  92.3k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  92.3k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 92.3k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  92.3k|        }
 2898|  92.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  92.3k|    static_cast<    \
  |  |  929|  92.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  92.3k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   104k|    {
 2882|   104k|        return ranges::subrange{begin(), end()};
 2883|   104k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   100k|    {
 6026|   100k|        const bool need_skipped_width =
 6027|   100k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 100k]
  |  Branch (6027:33): [True: 0, False: 100k]
  ------------------
 6028|   100k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   100k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 100k]
  ------------------
 6032|   100k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 100k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   100k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 100k, False: 0]
  |  Branch (6036:56): [True: 94.7k, False: 5.80k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  94.7k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 94.7k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   187k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  94.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 93.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.48k|    }                                                  \
  |  |  |  | 3667|  94.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   187k|                            make_eof_scan_error));
 6047|       |
 6048|   187k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 93.2k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  93.2k|            return result_type{it, 0};
 6056|   187k|        }
 6057|       |
 6058|  5.80k|        return result_type{rng.begin(), 0};
 6059|   100k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  91.2k|    {
 6068|  91.2k|        const bool need_skipped_width =
 6069|  91.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 91.2k]
  |  Branch (6069:33): [True: 0, False: 91.2k]
  ------------------
 6070|  91.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  91.2k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 91.2k]
  ------------------
 6073|  91.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 91.2k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  91.2k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 91.2k, False: 0]
  ------------------
 6082|  91.2k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 1.61k, False: 89.6k]
  ------------------
 6083|  91.2k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 1.61k]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|  1.61k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 1.61k]
  ------------------
 6085|  1.61k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  91.2k|        return result_type{rng.begin(), 0};
 6107|  91.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  52.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  52.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  52.3k|            auto rd = make_reader<T, char_type>();
 6187|  52.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 50.2k]
  |  |  ------------------
  ------------------
 6188|  2.05k|                return unexpected(e);
 6189|  2.05k|            }
 6190|       |
 6191|  50.2k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  50.2k|    {
 6113|  50.2k|        const bool need_skipped_width =
 6114|  50.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 50.2k]
  |  Branch (6114:33): [True: 0, False: 50.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  50.2k|        auto it = rng.begin();
 6118|  50.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 50.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  50.2k|        else {
 6127|  50.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 742, False: 49.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    742|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    742|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    742|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    742|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    742|    }                                                  \
  |  |  |  | 3667|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  49.5k|            std::tie(it, prefix_width) = prefix_result;
 6129|  49.5k|        }
 6130|  49.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  49.5k|        std::ptrdiff_t value_width = 0;
 6134|  49.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 49.5k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  49.5k|        else {
 6150|  49.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  49.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  49.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.37k, False: 46.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.37k|    }                                                  \
  |  | 3667|  49.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  46.1k|                                             specs, value, loc));
 6152|       |
 6153|  46.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 46.1k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  46.1k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  46.1k|        std::ptrdiff_t postfix_width = 0;
 6162|  46.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 45.6k, False: 528]
  ------------------
 6163|  45.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  45.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  45.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  45.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  45.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  45.6k|                                 value_width));
 6167|  45.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  45.6k|        }
 6169|       |
 6170|  46.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  46.1k|                                                 value_width, postfix_width);
 6172|  46.1k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 46.1k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  46.1k|        return it;
 6177|  46.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  52.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  52.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  52.3k|            auto rd = make_reader<T, char_type>();
 6187|  52.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 50.2k]
  |  |  ------------------
  ------------------
 6188|  2.05k|                return unexpected(e);
 6189|  2.05k|            }
 6190|       |
 6191|  50.2k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  50.2k|    {
 6113|  50.2k|        const bool need_skipped_width =
 6114|  50.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 50.2k]
  |  Branch (6114:33): [True: 0, False: 50.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  50.2k|        auto it = rng.begin();
 6118|  50.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 50.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  50.2k|        else {
 6127|  50.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 742, False: 49.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    742|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    742|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    742|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    742|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    742|    }                                                  \
  |  |  |  | 3667|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  49.5k|            std::tie(it, prefix_width) = prefix_result;
 6129|  49.5k|        }
 6130|  49.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  49.5k|        std::ptrdiff_t value_width = 0;
 6134|  49.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 49.5k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  49.5k|        else {
 6150|  49.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  49.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  49.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.37k, False: 46.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.37k|    }                                                  \
  |  | 3667|  49.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  46.1k|                                             specs, value, loc));
 6152|       |
 6153|  46.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 46.1k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  46.1k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  46.1k|        std::ptrdiff_t postfix_width = 0;
 6162|  46.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 45.6k, False: 528]
  ------------------
 6163|  45.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  45.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  45.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  45.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  45.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  45.6k|                                 value_width));
 6167|  45.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  45.6k|        }
 6169|       |
 6170|  46.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  46.1k|                                                 value_width, postfix_width);
 6172|  46.1k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 46.1k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  46.1k|        return it;
 6177|  46.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  1.01M|{
 5784|  1.01M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.71k, False: 1.01M]
  |  |  ------------------
  ------------------
 5785|  2.71k|        return unexpected(e);
 5786|  2.71k|    }
 5787|       |
 5788|  1.01M|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 1.01M]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  1.01M|    return skip_classic_whitespace(range);
 5793|  1.01M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|   509k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   509k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   509k|            auto rd = make_reader<T, char_type>();
 5865|   509k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   509k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|   509k|    {
 5852|   509k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   509k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   509k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   509k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.63k, False: 507k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.63k|    }                                                  \
  |  |  |  | 3667|   509k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   507k|                        .transform_error(make_eof_scan_error));
 5854|   507k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   509k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|   507k|    {
 5255|   507k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   507k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   507k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   507k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|   509k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   509k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   509k|            auto rd = make_reader<T, char_type>();
 5865|   509k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   509k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|   509k|    {
 5852|   509k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   509k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   509k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   509k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.63k, False: 507k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.63k|    }                                                  \
  |  |  |  | 3667|   509k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   507k|                        .transform_error(make_eof_scan_error));
 5854|   507k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   509k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|   507k|    {
 5255|   507k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   507k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   507k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   507k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   712k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   712k|    static_cast<    \
  |  |  929|   712k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   712k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   712k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   712k|          m_current(m_range.begin())
 2867|   712k|    {
 2868|   712k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  2.07M|    {
 2872|  2.07M|        return m_current;
 2873|  2.07M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|  1.36M|    {
 2877|  1.36M|        return m_range.end();
 2878|  1.36M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   671k|    {
 2892|   671k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   671k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   671k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   671k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   671k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 671k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   671k|        }
 2898|   671k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   671k|    static_cast<    \
  |  |  929|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   671k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   695k|    {
 2882|   695k|        return ranges::subrange{begin(), end()};
 2883|   695k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   687k|    {
 6026|   687k|        const bool need_skipped_width =
 6027|   687k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 687k]
  |  Branch (6027:33): [True: 0, False: 687k]
  ------------------
 6028|   687k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   687k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 687k]
  ------------------
 6032|   687k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 687k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   687k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 687k, False: 0]
  |  Branch (6036:56): [True: 679k, False: 8.44k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   679k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 679k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.35M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   679k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   679k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   679k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   679k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.17k, False: 676k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.17k|    }                                                  \
  |  |  |  | 3667|   679k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   676k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.35M|                            make_eof_scan_error));
 6047|       |
 6048|  1.35M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 676k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   676k|            return result_type{it, 0};
 6056|  1.35M|        }
 6057|       |
 6058|  8.44k|        return result_type{rng.begin(), 0};
 6059|   687k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   669k|    {
 6068|   669k|        const bool need_skipped_width =
 6069|   669k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 669k]
  |  Branch (6069:33): [True: 0, False: 669k]
  ------------------
 6070|   669k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   669k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 669k]
  ------------------
 6073|   669k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 669k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   669k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 669k, False: 0]
  ------------------
 6082|   669k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 164, False: 669k]
  ------------------
 6083|   669k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 164]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    164|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 164]
  ------------------
 6085|    164|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   669k|        return result_type{rng.begin(), 0};
 6107|   669k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|   347k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   347k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   347k|            auto rd = make_reader<T, char_type>();
 6187|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 343k]
  |  |  ------------------
  ------------------
 6188|  4.11k|                return unexpected(e);
 6189|  4.11k|            }
 6190|       |
 6191|   343k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   347k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|   343k|    {
 6113|   343k|        const bool need_skipped_width =
 6114|   343k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 343k]
  |  Branch (6114:33): [True: 0, False: 343k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   343k|        auto it = rng.begin();
 6118|   343k|        std::ptrdiff_t prefix_width = 0;
 6119|   343k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 343k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   343k|        else {
 6127|   343k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.08k, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.08k|    }                                                  \
  |  |  |  | 3667|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   342k|            std::tie(it, prefix_width) = prefix_result;
 6129|   342k|        }
 6130|   342k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   342k|        std::ptrdiff_t value_width = 0;
 6134|   342k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 342k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   342k|        else {
 6150|   342k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.14k, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.14k|    }                                                  \
  |  | 3667|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   335k|                                             specs, value, loc));
 6152|       |
 6153|   335k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 335k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   335k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   335k|        std::ptrdiff_t postfix_width = 0;
 6162|   335k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 334k, False: 930]
  ------------------
 6163|   334k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   334k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   334k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   334k|                                 value_width));
 6167|   334k|            std::tie(it, postfix_width) = postfix_result;
 6168|   334k|        }
 6169|       |
 6170|   335k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   335k|                                                 value_width, postfix_width);
 6172|   335k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 335k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   335k|        return it;
 6177|   335k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|   347k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   347k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   347k|            auto rd = make_reader<T, char_type>();
 6187|   347k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 343k]
  |  |  ------------------
  ------------------
 6188|  4.11k|                return unexpected(e);
 6189|  4.11k|            }
 6190|       |
 6191|   343k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   347k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|   343k|    {
 6113|   343k|        const bool need_skipped_width =
 6114|   343k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 343k]
  |  Branch (6114:33): [True: 0, False: 343k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   343k|        auto it = rng.begin();
 6118|   343k|        std::ptrdiff_t prefix_width = 0;
 6119|   343k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 343k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   343k|        else {
 6127|   343k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.08k, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.08k|    }                                                  \
  |  |  |  | 3667|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   342k|            std::tie(it, prefix_width) = prefix_result;
 6129|   342k|        }
 6130|   342k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   342k|        std::ptrdiff_t value_width = 0;
 6134|   342k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 342k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   342k|        else {
 6150|   342k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.14k, False: 335k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.14k|    }                                                  \
  |  | 3667|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   335k|                                             specs, value, loc));
 6152|       |
 6153|   335k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 335k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   335k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   335k|        std::ptrdiff_t postfix_width = 0;
 6162|   335k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 334k, False: 930]
  ------------------
 6163|   334k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   334k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   334k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   334k|                                 value_width));
 6167|   334k|            std::tie(it, postfix_width) = postfix_result;
 6168|   334k|        }
 6169|       |
 6170|   335k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   335k|                                                 value_width, postfix_width);
 6172|   335k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 335k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   335k|        return it;
 6177|   335k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   509k|{
 5784|   509k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.35k, False: 507k]
  |  |  ------------------
  ------------------
 5785|  1.35k|        return unexpected(e);
 5786|  1.35k|    }
 5787|       |
 5788|   507k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 507k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   507k|    return skip_classic_whitespace(range);
 5793|   507k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|   509k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   509k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   509k|            auto rd = make_reader<T, char_type>();
 5869|   509k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 509k, False: 0]
  ------------------
 5870|   509k|                return impl(rd, range, value);
 5871|   509k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   509k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|   509k|    {
 5852|   509k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   509k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   509k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   509k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.63k, False: 507k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.63k|    }                                                  \
  |  |  |  | 3667|   509k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   507k|                        .transform_error(make_eof_scan_error));
 5854|   507k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   509k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|   507k|    {
 5255|   507k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   507k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   507k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   507k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  1.02k|{
   52|  1.02k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.02k|    string_buffer.resize(size);
   56|  1.02k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  1.02k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  1.02k|    const auto wsv_reinterpret_size =
   61|  1.02k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 191, False: 838]
  ------------------
   62|  1.02k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  1.02k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  1.02k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  1.02k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  1.02k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  1.02k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  1.02k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.02k|{
  122|  1.02k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.02k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.02k|    buf.resize(sizeof...(Args));
  125|  1.02k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.02k|    return buf;
  127|  1.02k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  1.02k|{
  108|  1.02k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  1.02k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  1.02k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.02k|{
  185|  1.02k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.02k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.02k|                                   format_strings);
  188|  1.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.02k|{
  133|       |    // Regular scan
  134|  6.17k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.17k, False: 1.02k]
  ------------------
  135|  6.17k|        auto it = scn::ranges::begin(source);
  136|  51.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  51.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  51.9k|            auto result = scn::scan<T>(
  139|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  51.9k|                scn::runtime_format(f));
  141|  51.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.17k, False: 45.7k]
  ------------------
  142|  6.17k|                break;
  143|  6.17k|            }
  144|  45.7k|            it = result->begin();
  145|  45.7k|        }
  146|  6.17k|    }
  147|       |
  148|       |    // scan localized
  149|  6.17k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.17k, False: 1.02k]
  ------------------
  150|  6.17k|        auto it = scn::ranges::begin(source);
  151|  51.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  51.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  51.9k|            auto result = scn::scan<T>(
  154|  51.9k|                global_locale,
  155|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  51.9k|                scn::runtime_format(f));
  157|  51.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.17k, False: 45.7k]
  ------------------
  158|  6.17k|                break;
  159|  6.17k|            }
  160|  45.7k|            it = result->begin();
  161|  45.7k|        }
  162|  6.17k|    }
  163|       |
  164|       |    // scan_value
  165|  1.02k|    {
  166|  1.02k|        auto it = scn::ranges::begin(source);
  167|  23.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.6k|            auto result = scn::scan_value<T>(
  170|  23.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.02k, False: 22.6k]
  ------------------
  172|  1.02k|                break;
  173|  1.02k|            }
  174|  22.6k|            it = result->begin();
  175|  22.6k|        }
  176|  1.02k|    }
  177|  1.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.02k|{
  133|       |    // Regular scan
  134|  6.17k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.17k, False: 1.02k]
  ------------------
  135|  6.17k|        auto it = scn::ranges::begin(source);
  136|  51.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  51.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  51.9k|            auto result = scn::scan<T>(
  139|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  51.9k|                scn::runtime_format(f));
  141|  51.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.17k, False: 45.7k]
  ------------------
  142|  6.17k|                break;
  143|  6.17k|            }
  144|  45.7k|            it = result->begin();
  145|  45.7k|        }
  146|  6.17k|    }
  147|       |
  148|       |    // scan localized
  149|  6.17k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.17k, False: 1.02k]
  ------------------
  150|  6.17k|        auto it = scn::ranges::begin(source);
  151|  51.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  51.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  51.9k|            auto result = scn::scan<T>(
  154|  51.9k|                global_locale,
  155|  51.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  51.9k|                scn::runtime_format(f));
  157|  51.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.17k, False: 45.7k]
  ------------------
  158|  6.17k|                break;
  159|  6.17k|            }
  160|  45.7k|            it = result->begin();
  161|  45.7k|        }
  162|  6.17k|    }
  163|       |
  164|       |    // scan_value
  165|  1.02k|    {
  166|  1.02k|        auto it = scn::ranges::begin(source);
  167|  23.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.6k|            auto result = scn::scan_value<T>(
  170|  23.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.02k, False: 22.6k]
  ------------------
  172|  1.02k|                break;
  173|  1.02k|            }
  174|  22.6k|            it = result->begin();
  175|  22.6k|        }
  176|  1.02k|    }
  177|  1.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.02k|{
  133|       |    // Regular scan
  134|  6.17k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.17k, False: 1.02k]
  ------------------
  135|  6.17k|        auto it = scn::ranges::begin(source);
  136|  62.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  62.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  62.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  62.9k|            auto result = scn::scan<T>(
  139|  62.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  62.9k|                scn::runtime_format(f));
  141|  62.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.17k, False: 56.7k]
  ------------------
  142|  6.17k|                break;
  143|  6.17k|            }
  144|  56.7k|            it = result->begin();
  145|  56.7k|        }
  146|  6.17k|    }
  147|       |
  148|       |    // scan localized
  149|  6.17k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.17k, False: 1.02k]
  ------------------
  150|  6.17k|        auto it = scn::ranges::begin(source);
  151|  62.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  62.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  62.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  62.9k|            auto result = scn::scan<T>(
  154|  62.9k|                global_locale,
  155|  62.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  62.9k|                scn::runtime_format(f));
  157|  62.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.17k, False: 56.7k]
  ------------------
  158|  6.17k|                break;
  159|  6.17k|            }
  160|  56.7k|            it = result->begin();
  161|  56.7k|        }
  162|  6.17k|    }
  163|       |
  164|       |    // scan_value
  165|  1.02k|    {
  166|  1.02k|        auto it = scn::ranges::begin(source);
  167|  29.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  29.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  29.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  29.1k|            auto result = scn::scan_value<T>(
  170|  29.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  29.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.02k, False: 28.0k]
  ------------------
  172|  1.02k|                break;
  173|  1.02k|            }
  174|  28.0k|            it = result->begin();
  175|  28.0k|        }
  176|  1.02k|    }
  177|  1.02k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  1.02k|{
   90|  1.02k|    using char_type = ranges::range_value_t<Source>;
   91|  1.02k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.02k|    deque.clear();
   93|  1.02k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.02k|              std::back_inserter(deque));
   95|  1.02k|    return deque;
   96|  1.02k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  1.02k|{
   79|  1.02k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  1.02k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  1.02k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.02k|{
  122|  1.02k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.02k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.02k|    buf.resize(sizeof...(Args));
  125|  1.02k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.02k|    return buf;
  127|  1.02k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  1.02k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  1.02k|    else {
  112|  1.02k|        return wformat_string_view_buffer;
  113|  1.02k|    }
  114|  1.02k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.05k|{
  185|  2.05k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.05k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.05k|                                   format_strings);
  188|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.05k|{
  133|       |    // Regular scan
  134|  12.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.3k, False: 2.05k]
  ------------------
  135|  12.3k|        auto it = scn::ranges::begin(source);
  136|   347k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   347k|            auto result = scn::scan<T>(
  139|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   347k|                scn::runtime_format(f));
  141|   347k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.3k, False: 335k]
  ------------------
  142|  12.3k|                break;
  143|  12.3k|            }
  144|   335k|            it = result->begin();
  145|   335k|        }
  146|  12.3k|    }
  147|       |
  148|       |    // scan localized
  149|  12.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.3k, False: 2.05k]
  ------------------
  150|  12.3k|        auto it = scn::ranges::begin(source);
  151|   347k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   347k|            auto result = scn::scan<T>(
  154|   347k|                global_locale,
  155|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   347k|                scn::runtime_format(f));
  157|   347k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.3k, False: 335k]
  ------------------
  158|  12.3k|                break;
  159|  12.3k|            }
  160|   335k|            it = result->begin();
  161|   335k|        }
  162|  12.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.05k|    {
  166|  2.05k|        auto it = scn::ranges::begin(source);
  167|   169k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   169k|            auto result = scn::scan_value<T>(
  170|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   169k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.05k, False: 167k]
  ------------------
  172|  2.05k|                break;
  173|  2.05k|            }
  174|   167k|            it = result->begin();
  175|   167k|        }
  176|  2.05k|    }
  177|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.05k|{
  133|       |    // Regular scan
  134|  12.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.3k, False: 2.05k]
  ------------------
  135|  12.3k|        auto it = scn::ranges::begin(source);
  136|   347k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   347k|            auto result = scn::scan<T>(
  139|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   347k|                scn::runtime_format(f));
  141|   347k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.3k, False: 335k]
  ------------------
  142|  12.3k|                break;
  143|  12.3k|            }
  144|   335k|            it = result->begin();
  145|   335k|        }
  146|  12.3k|    }
  147|       |
  148|       |    // scan localized
  149|  12.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.3k, False: 2.05k]
  ------------------
  150|  12.3k|        auto it = scn::ranges::begin(source);
  151|   347k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   347k|            auto result = scn::scan<T>(
  154|   347k|                global_locale,
  155|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   347k|                scn::runtime_format(f));
  157|   347k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.3k, False: 335k]
  ------------------
  158|  12.3k|                break;
  159|  12.3k|            }
  160|   335k|            it = result->begin();
  161|   335k|        }
  162|  12.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.05k|    {
  166|  2.05k|        auto it = scn::ranges::begin(source);
  167|   169k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   169k|            auto result = scn::scan_value<T>(
  170|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   169k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.05k, False: 167k]
  ------------------
  172|  2.05k|                break;
  173|  2.05k|            }
  174|   167k|            it = result->begin();
  175|   167k|        }
  176|  2.05k|    }
  177|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.05k|{
  133|       |    // Regular scan
  134|  12.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.3k, False: 2.05k]
  ------------------
  135|  12.3k|        auto it = scn::ranges::begin(source);
  136|   347k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   347k|            auto result = scn::scan<T>(
  139|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   347k|                scn::runtime_format(f));
  141|   347k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.3k, False: 335k]
  ------------------
  142|  12.3k|                break;
  143|  12.3k|            }
  144|   335k|            it = result->begin();
  145|   335k|        }
  146|  12.3k|    }
  147|       |
  148|       |    // scan localized
  149|  12.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.3k, False: 2.05k]
  ------------------
  150|  12.3k|        auto it = scn::ranges::begin(source);
  151|   347k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   347k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   347k|            auto result = scn::scan<T>(
  154|   347k|                global_locale,
  155|   347k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   347k|                scn::runtime_format(f));
  157|   347k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.3k, False: 335k]
  ------------------
  158|  12.3k|                break;
  159|  12.3k|            }
  160|   335k|            it = result->begin();
  161|   335k|        }
  162|  12.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.05k|    {
  166|  2.05k|        auto it = scn::ranges::begin(source);
  167|   169k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   169k|            auto result = scn::scan_value<T>(
  170|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   169k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.05k, False: 167k]
  ------------------
  172|  2.05k|                break;
  173|  2.05k|            }
  174|   167k|            it = result->begin();
  175|   167k|        }
  176|  2.05k|    }
  177|  2.05k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  2.05k|{
   90|  2.05k|    using char_type = ranges::range_value_t<Source>;
   91|  2.05k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.05k|    deque.clear();
   93|  2.05k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.05k|              std::back_inserter(deque));
   95|  2.05k|    return deque;
   96|  2.05k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  2.05k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  2.05k|    else {
   83|  2.05k|        return wnoncontiguous_buffer;
   84|  2.05k|    }
   85|  2.05k|}

LLVMFuzzerTestOneInput:
   57|  1.03k|{
   58|  1.03k|    scn::fuzz::run(data, size);
   59|  1.03k|    return 0;
   60|  1.03k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  1.03k|{
   36|  1.03k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 1.02k]
  |  Branch (36:35): [True: 0, False: 1.02k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  1.02k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  1.02k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  1.02k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  1.02k|    do_basic_run(sv, f);
   45|       |
   46|  1.02k|    const auto& wf = get_format_strings<wchar_t>(
   47|  1.02k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  1.02k|    do_basic_run(wsv_reinterpret, wf);
   49|  1.02k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 1.02k, False: 0]
  ------------------
   50|  1.02k|        do_basic_run(wsv_transcode, wf);
   51|  1.02k|    }
   52|  1.02k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.02k|{
   25|  1.02k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.02k|                                                           format_strings);
   27|  1.02k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.02k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.02k|            source, format_strings);
   30|  1.02k|    }
   31|  1.02k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.02k|{
   25|  1.02k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.02k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.02k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.05k|{
   25|  2.05k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.05k|                                                           format_strings);
   27|  2.05k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  2.05k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.05k|            source, format_strings);
   30|  2.05k|    }
   31|  2.05k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.05k|{
   25|  2.05k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.05k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  2.05k|}

