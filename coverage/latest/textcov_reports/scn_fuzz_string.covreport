_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|  5.48M|{
 3778|  5.48M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  5.48M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  5.48M|    }
 3781|  5.48M|    else if constexpr (sizeof(U) == 2) {
 3782|  5.48M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  5.48M|    }
 3784|  5.48M|    else {
 3785|       |        // utf-32
 3786|  5.48M|        static_assert(sizeof(U) == 4);
 3787|  5.48M|        SCN_UNUSED(ch);
 3788|  5.48M|        return 1;
 3789|  5.48M|    }
 3790|  5.48M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|  5.48M|{
 3742|  5.48M|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|  5.48M|    SCN_GCC_COMPAT_PUSH
 3745|  5.48M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|  5.48M|    constexpr char lengths[] =
 3747|  5.48M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|  5.48M|        "\1\1\1\1\1\1\1\1"
 3749|  5.48M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|  5.48M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|  5.48M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|  5.48M|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|  5.48M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|  5.48M|    SCN_GCC_COMPAT_POP
 3756|  5.48M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  5.39M|{
 3984|  5.39M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  5.39M|        return decode_utf8_code_point_exhaustive(input);
 3986|  5.39M|    }
 3987|  5.39M|    else if constexpr (sizeof(CharT) == 2) {
 3988|  5.39M|        return decode_utf16_code_point_exhaustive(input);
 3989|  5.39M|    }
 3990|  5.39M|    else {
 3991|  5.39M|        SCN_EXPECT(input.size() == 1);
 3992|  5.39M|        auto cp = static_cast<char32_t>(input.front());
 3993|  5.39M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|  5.39M|            return invalid_code_point;
 3995|  5.39M|        }
 3996|  5.39M|        return cp;
 3997|  5.39M|    }
 3998|  5.39M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|  5.39M|{
 3797|  5.39M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|  5.39M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  5.39M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  5.39M|    };
 3802|       |
 3803|  5.39M|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 4.86M, False: 520k]
  ------------------
 3804|  4.86M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 97, False: 4.86M]
  ------------------
 3805|     97|            SCN_UNLIKELY_ATTR
 3806|     97|            return invalid_code_point;
 3807|     97|        }
 3808|  4.86M|        return static_cast<char32_t>(input[0]);
 3809|  4.86M|    }
 3810|       |
 3811|   520k|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 210k, False: 310k]
  ------------------
 3812|   210k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 78, False: 210k]
  ------------------
 3813|     78|            SCN_UNLIKELY_ATTR
 3814|     78|            return invalid_code_point;
 3815|     78|        }
 3816|   210k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 9.58k, False: 201k]
  ------------------
 3817|  9.58k|            SCN_UNLIKELY_ATTR
 3818|  9.58k|            return invalid_code_point;
 3819|  9.58k|        }
 3820|       |
 3821|   201k|        char32_t cp{};
 3822|   201k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|   201k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|   201k|        return cp;
 3825|   210k|    }
 3826|       |
 3827|   310k|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 277k, False: 33.0k]
  ------------------
 3828|   277k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 10, False: 277k]
  ------------------
 3829|     10|            SCN_UNLIKELY_ATTR
 3830|     10|            return invalid_code_point;
 3831|     10|        }
 3832|   277k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 18.8k, False: 258k]
  ------------------
 3833|   277k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 1.38k, False: 256k]
  ------------------
 3834|  20.2k|            SCN_UNLIKELY_ATTR
 3835|  20.2k|            return invalid_code_point;
 3836|  20.2k|        }
 3837|       |
 3838|   256k|        char32_t cp{};
 3839|   256k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|   256k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|   256k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|   256k|        return cp;
 3843|   277k|    }
 3844|       |
 3845|  33.0k|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 33.0k, False: 0]
  ------------------
 3846|  33.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 33.0k]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|  33.0k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 7.70k, False: 25.3k]
  ------------------
 3851|  7.70k|            SCN_UNLIKELY_ATTR
 3852|  7.70k|            return invalid_code_point;
 3853|  7.70k|        }
 3854|  25.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 2.78k, False: 22.5k]
  ------------------
 3855|  25.3k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 204, False: 22.3k]
  ------------------
 3856|  25.3k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 156, False: 22.1k]
  ------------------
 3857|  3.14k|            SCN_UNLIKELY_ATTR
 3858|  3.14k|            return invalid_code_point;
 3859|  3.14k|        }
 3860|       |
 3861|  22.1k|        char32_t cp{};
 3862|  22.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|  22.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|  22.1k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|  22.1k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|  22.1k|        return cp;
 3867|  25.3k|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|   816k|    const auto is_trailing_code_unit = [](char ch) {
 3800|   816k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|   816k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  4.84M|{
 3670|  4.84M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  4.84M|                                          decltype(first), decltype(last)> &&
 3672|  4.84M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  4.84M|        return {first, last};
 3674|  4.84M|    }
 3675|  4.84M|    else {
 3676|  4.84M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  4.84M|                                       to_address(first), to_address(last)))};
 3678|  4.84M|    }
 3679|  4.84M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  14.9M|{
  322|  14.9M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  14.9M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  15.2M|{
  302|  15.2M|    return p;
  303|  15.2M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  2.32M|{
 3701|  2.32M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  2.32M|                      typename std::basic_string_view<CharT>::iterator,
 3703|  2.32M|                      decltype(it)> &&
 3704|  2.32M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  2.32M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  2.32M|        return it;
 3707|  2.32M|    }
 3708|  2.32M|    else {
 3709|  2.32M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  2.32M|    }
 3711|  2.32M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  18.7k|    {
 2695|  18.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  18.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  18.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  18.7k|    {
 2676|  18.7k|        return decay_copy(t.begin());
 2677|  18.7k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|  2.38M|{
 1920|  2.38M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  2.38M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8827|  62.2k|{
 8828|  62.2k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  62.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  62.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.2k|    static_cast<    \
  |  |  929|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.2k|    static_cast<    \
  |  |  929|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  62.2k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|   250k|{
 5357|   250k|    detail::check_scan_arg_types<Args...>();
 5358|   250k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   250k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5095|   309k|{
 5096|   309k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|   309k|                  "Scan argument types must be default constructible");
 5098|   309k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|   309k|                  "Scan argument types must be Destructible");
 5100|   309k|    static_assert(
 5101|   309k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|   309k|        "Scan argument types must not be references");
 5103|   309k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|   250k|    {
 5310|   250k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|   250k|    {
 5321|   250k|        return {detail::make_arg<
 5322|   250k|            kind, Context,
 5323|   250k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   250k|                                 typename Context::char_type>::value>(args)...};
 5325|   250k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|   250k|{
 5131|   250k|    return make_value<Context>(value).ref_value;
 5132|   250k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|   309k|{
 5081|   309k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   309k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   309k|                                  needs_context_tag>) {
 5085|   309k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   309k|    }
 5087|   309k|    else {
 5088|   309k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   309k|            value, context_tag<Context>{}));
 5090|   309k|    }
 5091|   309k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|   309k|    {                                                                        \
 4920|   309k|        return val;                                                          \
 4921|   309k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5049|   309k|{
 5050|   309k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|   309k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|   309k|    constexpr bool scannable_char =
 5054|   309k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|   309k|    static_assert(scannable_char,
 5056|   309k|                  "Cannot scan an argument of an unsupported character "
 5057|   309k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|   309k|    constexpr bool scannable_const =
 5060|   309k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|   309k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|   309k|    constexpr bool scannable_disabled =
 5064|   309k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|   309k|    static_assert(scannable_disabled,
 5066|   309k|                  "Cannot scan an argument that has been disabled by "
 5067|   309k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|   309k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|   309k|    static_assert(
 5071|   309k|        scannable,
 5072|   309k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|   309k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|   309k|    return arg_value{arg};
 5076|   309k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4862|   309k|    {
 4863|   309k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|   124k|{
 8615|   124k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|   124k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|   124k|{
 8552|   124k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   124k|    auto result = vscan_impl(buffer, format, args);
 8555|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 116k]
  |  |  ------------------
  ------------------
 8556|  8.31k|        return unexpected(result.error());
 8557|  8.31k|    }
 8558|   116k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   124k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4680|   308k|{
 4681|   308k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   308k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   308k|                  "\n"
 4685|   308k|                  "Unsupported range type given as input to a scanning "
 4686|   308k|                  "function.\n"
 4687|   308k|                  "A range needs to have a character type (value type) "
 4688|   308k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   308k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   308k|                  "to be included.\n"
 4691|   308k|                  "See the scnlib documentation for more details.");
 4692|   308k|    static_assert(
 4693|   308k|        !std::is_same_v<T, custom_char_traits>,
 4694|   308k|        "\n"
 4695|   308k|        "Unsupported range type given as input to a scanning "
 4696|   308k|        "function.\n"
 4697|   308k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   308k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   308k|        "not supported.");
 4700|   308k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   308k|                  "\n"
 4702|   308k|                  "Unsupported range type given as input to a scanning "
 4703|   308k|                  "function.\n"
 4704|   308k|                  "file_marker_found cannot be used as an "
 4705|   308k|                  "source range type to scn::scan.\n"
 4706|   308k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   308k|                  "and do not provide an explicit source range, "
 4708|   308k|                  "or use scn::scan with a FILE* directly.");
 4709|   308k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   308k|                  "\n"
 4711|   308k|                  "Unsupported range type given as input to a scanning "
 4712|   308k|                  "function.\n"
 4713|   308k|                  "In order to be scannable, a range needs to satisfy "
 4714|   308k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   308k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   308k|                  "\n"
 4717|   308k|                  "Unsupported range type given as input to a scanning "
 4718|   308k|                  "function.\n"
 4719|   308k|                  "A range needs to model forward_range and have a valid "
 4720|   308k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   308k|                  "Examples of scannable ranges are std::string, "
 4722|   308k|                  "std::string_view, "
 4723|   308k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   308k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   308k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   308k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|   308k|{
 4620|   308k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|   308k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|   308k|    }
 4623|   308k|    else {
 4624|   308k|        return invalid_char_type{};
 4625|   308k|    }
 4626|   308k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   308k|    {
 2826|   308k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   308k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   308k|    {
 2807|   308k|        return t.data();
 2808|   308k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3201|   308k|    {
 3202|   308k|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 1.73k, False: 306k]
  ------------------
 3203|   308k|                   ? nullptr
 3204|   308k|                   : std::addressof(*ranges::begin(derived()));
 3205|   308k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   308k|    {
 2976|   308k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   308k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   308k|    {
 2949|   308k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   308k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|  1.18M|    {
 3310|  1.18M|        return m_iterator == m_sentinel;
 3311|  1.18M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3155|   614k|    {
 3156|   614k|        return static_cast<const D&>(*this);
 3157|   614k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   596k|    {
 2695|   596k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   596k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   596k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   596k|    {
 2676|   596k|        return decay_copy(t.begin());
 2677|   596k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  3.37M|    {
 3301|  3.37M|        return m_iterator;
 3302|  3.37M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|   308k|    {
 2901|   308k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|   308k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|   308k|    {
 2867|   308k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|   308k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|  34.0M|{
 1920|  34.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  34.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  34.0M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|  1.18M|    {
 3317|  1.18M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  1.18M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|  68.0M|    {
 1569|  68.0M|        return has_value();
 1570|  68.0M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   136M|    {
  481|   136M|        return m_has_value;
  482|   136M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|  81.0k|    {
 1575|  81.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  81.0k|        return this->get_unexpected().error();
 1577|  81.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  81.0k|    {
  464|  81.0k|        return m_unexpected;
  465|  81.0k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|   611k|    {
  357|   611k|        return m_unexpected;
  358|   611k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|   312k|    {
  343|   312k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   312k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   312k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   355k|    {
  352|   355k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   355k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   355k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   308k|    {
 1148|   308k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|   290k|{
 5884|   290k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|   290k|                      ranges::iterator_t<SourceRange>>) {
 5886|   290k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|   290k|    }
 5888|   290k|    else {
 5889|   290k|        auto it = ranges::begin(source);
 5890|   290k|        while (n > 0) {
 5891|   290k|            --n;
 5892|   290k|            ++it;
 5893|   290k|        }
 5894|   290k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|   290k|    }
 5896|   290k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  1.16M|    {
 2695|  1.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  1.16M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  1.16M|    {
 2676|  1.16M|        return decay_copy(t.begin());
 2677|  1.16M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5870|   290k|{
 5871|   290k|    return ranges::end(source);
 5872|   290k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   290k|    {
 2752|   290k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   290k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   290k|    {
 2734|   290k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   290k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  1.83M|    {
 3305|  1.83M|        return m_sentinel;
 3306|  1.83M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|  67.9M|    {
 1624|  67.9M|        return value();
 1625|  67.9M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|  67.9M|    {
 1598|  67.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  67.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  67.9M|        return this->get_value();
 1600|  67.9M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  67.9M|    {
  447|  67.9M|        return m_value;
  448|  67.9M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   290k|    {
 1401|   290k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|   290k|    {
  433|   290k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7935|   124k|    {
 7936|   124k|        return m_str;
 7937|   124k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   250k|    {
 5387|   250k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|   250k|    {
 5340|   250k|        return m_argptrs;
 5341|   250k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|   374k|    {
 5439|   374k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|   124k|{
 8781|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 116k]
  |  |  ------------------
  ------------------
 8782|  8.31k|        return unexpected(result.error());
 8783|  8.31k|    }
 8784|   116k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   116k|    static_cast<    \
  |  |  929|   116k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   116k|    static_cast<    \
  |  |  929|   116k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   124k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|   308k|    {
 1569|   308k|        return has_value();
 1570|   308k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   616k|    {
  481|   616k|        return m_has_value;
  482|   616k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|  18.0k|    {
 1575|  18.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  18.0k|        return this->get_unexpected().error();
 1577|  18.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  18.0k|    {
  464|  18.0k|        return m_unexpected;
  465|  18.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  9.00k|    {
 1447|  9.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  9.00k|    {
  622|  9.00k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  9.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  9.00k|    {
  685|  9.00k|        scn::detail::construct_at(unexpected_ptr(),
  686|  9.00k|                                  std::forward<Args>(args)...);
  687|  9.00k|        m_has_value = false;
  688|  9.00k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  54.0k|{
  388|  54.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  54.0k|        T(std::forward<Args>(args)...);
  390|  54.0k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  18.0k|    {
  714|  18.0k|        return reinterpret_cast<unexpected<E>*>(
  715|  18.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  18.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   154k|    {
 1148|   154k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|   232k|    {
 1624|   232k|        return value();
 1625|   232k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   290k|    {
 1598|   290k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   290k|        return this->get_value();
 1600|   290k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|   290k|    {
  447|   290k|        return m_value;
  448|   290k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|   145k|    {
 5791|   145k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|   290k|    {
 5642|   290k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|   291k|    {
 5577|   291k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|   145k|    {
 1401|   145k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|   145k|    {
  612|   145k|        construct(std::forward<Args>(args)...);
  613|   145k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|   145k|    {
  678|   145k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|   145k|        m_has_value = true;
  680|   145k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|   145k|{
  388|   145k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|   145k|        T(std::forward<Args>(args)...);
  390|   145k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|   145k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|   435k|    {
  702|   435k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   435k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|   435k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|   290k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|   250k|    {
 5335|   250k|        return m_args;
 5336|   250k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|   250k|    ~scan_arg_store() = default;
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   308k|    {
 2752|   308k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   308k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   308k|    {
 2734|   308k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   308k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|  2.02M|    {
 3287|  2.02M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|   374k|{
 7652|   374k|    return s;
 7653|   374k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|   374k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   124k|    {
 7932|   124k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1568|   154k|    {
 1569|   154k|        return has_value();
 1570|   154k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|   453k|    {
  671|   453k|        return m_has_value;
  672|   453k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1643|   145k|    {
 1644|   145k|        return &value();
 1645|   145k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1597|   145k|    {
 1598|   145k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   145k|        return this->get_value();
 1600|   145k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|   145k|    {
  637|   145k|        return *value_ptr();
  638|   145k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5658|   290k|    {
 5659|   290k|        return ranges::begin(m_range);
 5660|   290k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|   154k|    {
  627|   154k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 145k, False: 9.00k]
  ------------------
  628|   145k|            destroy_value();
  629|   145k|        }
  630|  9.00k|        else {
  631|  9.00k|            destroy_unexpected();
  632|  9.00k|        }
  633|   154k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|   145k|    {
  692|   145k|        scn::detail::destroy_at(value_ptr());
  693|   145k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|   145k|{
  394|   145k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|   145k|        for (auto& elem : *p) {
  396|   145k|            scn::detail::destroy_at(&elem);
  397|   145k|        }
  398|   145k|    }
  399|   145k|    else {
  400|   145k|        p->~T();
  401|   145k|    }
  402|   145k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  9.00k|    {
  696|  9.00k|        scn::detail::destroy_at(unexpected_ptr());
  697|  9.00k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  54.0k|{
  394|  54.0k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  54.0k|        for (auto& elem : *p) {
  396|  54.0k|            scn::detail::destroy_at(&elem);
  397|  54.0k|        }
  398|  54.0k|    }
  399|  54.0k|    else {
  400|  54.0k|        p->~T();
  401|  54.0k|    }
  402|  54.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8894|  62.2k|{
 8895|  62.2k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  62.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  62.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.2k|    static_cast<    \
  |  |  929|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.2k|    static_cast<    \
  |  |  929|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  62.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|   124k|{
 8633|   124k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   124k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|   124k|{
 8568|   124k|#if !SCN_DISABLE_LOCALE
 8569|   124k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   124k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   124k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   124k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 116k]
  |  |  ------------------
  ------------------
 8576|  8.31k|        return unexpected(result.error());
 8577|  8.31k|    }
 8578|   116k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   124k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8933|  29.5k|{
 8934|  29.5k|    T value;
 8935|  29.5k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  29.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  29.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  29.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  29.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 693, False: 28.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    693|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    693|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    693|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    693|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    693|    }                                                  \
  |  |  |  | 3642|  29.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  28.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.8k|    static_cast<    \
  |  |  929|  28.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.8k|    static_cast<    \
  |  |  929|  28.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  29.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5115|  59.4k|{
 5116|  59.4k|    check_scan_arg_types<T>();
 5117|       |
 5118|  59.4k|    basic_scan_arg<Context> arg;
 5119|  59.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  59.4k|    arg.m_value = make_value<Context>(value);
 5121|  59.4k|    return arg;
 5122|  59.4k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|   463k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|  51.0M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|  59.1k|{
 8646|  59.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|  59.1k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  59.1k|{
 8592|  59.1k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  59.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  59.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 57.7k]
  |  |  ------------------
  ------------------
 8596|  1.38k|        return unexpected(result.error());
 8597|  1.38k|    }
 8598|  57.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  59.1k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  57.7k|    {
 1634|  57.7k|        return std::move(value());
 1635|  57.7k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8827|  62.2k|{
 8828|  62.2k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  62.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  62.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.2k|    static_cast<    \
  |  |  929|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.2k|    static_cast<    \
  |  |  929|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  62.2k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5356|   124k|{
 5357|   124k|    detail::check_scan_arg_types<Args...>();
 5358|   124k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   124k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5095|   154k|{
 5096|   154k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|   154k|                  "Scan argument types must be default constructible");
 5098|   154k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|   154k|                  "Scan argument types must be Destructible");
 5100|   154k|    static_assert(
 5101|   154k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|   154k|        "Scan argument types must not be references");
 5103|   154k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5309|   124k|    {
 5310|   124k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|   124k|    {
 5321|   124k|        return {detail::make_arg<
 5322|   124k|            kind, Context,
 5323|   124k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   124k|                                 typename Context::char_type>::value>(args)...};
 5325|   124k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5130|   124k|{
 5131|   124k|    return make_value<Context>(value).ref_value;
 5132|   124k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5080|   154k|{
 5081|   154k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   154k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   154k|                                  needs_context_tag>) {
 5085|   154k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   154k|    }
 5087|   154k|    else {
 5088|   154k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   154k|            value, context_tag<Context>{}));
 5090|   154k|    }
 5091|   154k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4919|   154k|    {                                                                        \
 4920|   154k|        return val;                                                          \
 4921|   154k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5049|   154k|{
 5050|   154k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|   154k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|   154k|    constexpr bool scannable_char =
 5054|   154k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|   154k|    static_assert(scannable_char,
 5056|   154k|                  "Cannot scan an argument of an unsupported character "
 5057|   154k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|   154k|    constexpr bool scannable_const =
 5060|   154k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|   154k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|   154k|    constexpr bool scannable_disabled =
 5064|   154k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|   154k|    static_assert(scannable_disabled,
 5066|   154k|                  "Cannot scan an argument that has been disabled by "
 5067|   154k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|   154k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|   154k|    static_assert(
 5071|   154k|        scannable,
 5072|   154k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|   154k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|   154k|    return arg_value{arg};
 5076|   154k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4862|   154k|    {
 4863|   154k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7935|   124k|    {
 7936|   124k|        return m_str;
 7937|   124k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   124k|    {
 5387|   124k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5339|   124k|    {
 5340|   124k|        return m_argptrs;
 5341|   124k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|   124k|{
 8781|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 116k]
  |  |  ------------------
  ------------------
 8782|  8.31k|        return unexpected(result.error());
 8783|  8.31k|    }
 8784|   116k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   116k|    static_cast<    \
  |  |  929|   116k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   116k|    static_cast<    \
  |  |  929|   116k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   124k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  9.00k|    {
 1447|  9.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  9.00k|    {
  443|  9.00k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   154k|    {
 1148|   154k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|   145k|    {
 5791|   145k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|   145k|    {
 5577|   145k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|   145k|    {
 1401|   145k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|   145k|    {
  433|   145k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5334|   124k|    {
 5335|   124k|        return m_args;
 5336|   124k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   124k|    {
 7932|   124k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1568|   154k|    {
 1569|   154k|        return has_value();
 1570|   154k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   299k|    {
  481|   299k|        return m_has_value;
  482|   299k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1643|   145k|    {
 1644|   145k|        return &value();
 1645|   145k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1597|   145k|    {
 1598|   145k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   145k|        return this->get_value();
 1600|   145k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   145k|    {
  447|   145k|        return m_value;
  448|   145k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8894|  62.2k|{
 8895|  62.2k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  62.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  62.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.2k|    static_cast<    \
  |  |  929|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.2k|    static_cast<    \
  |  |  929|  62.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  62.2k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8933|  29.5k|{
 8934|  29.5k|    T value;
 8935|  29.5k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  29.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  29.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  29.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  29.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 693, False: 28.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    693|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    693|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    693|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    693|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    693|    }                                                  \
  |  |  |  | 3642|  29.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  28.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.8k|    static_cast<    \
  |  |  929|  28.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  28.8k|    static_cast<    \
  |  |  929|  28.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  29.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5115|  29.5k|{
 5116|  29.5k|    check_scan_arg_types<T>();
 5117|       |
 5118|  29.5k|    basic_scan_arg<Context> arg;
 5119|  29.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  29.5k|    arg.m_value = make_value<Context>(value);
 5121|  29.5k|    return arg;
 5122|  29.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  9.00k|    {
 2695|  9.00k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  9.00k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  9.00k|    {
 2676|  9.00k|        return decay_copy(t.begin());
 2677|  9.00k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1919|  2.70M|{
 1920|  2.70M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  2.70M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8827|  62.8k|{
 8828|  62.8k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  62.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  62.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.8k|    static_cast<    \
  |  |  929|  62.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.8k|    static_cast<    \
  |  |  929|  62.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  62.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  62.8k|{
 8615|  62.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  62.8k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|  62.8k|{
 8552|  62.8k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  62.8k|    auto result = vscan_impl(buffer, format, args);
 8555|  62.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.15k, False: 58.7k]
  |  |  ------------------
  ------------------
 8556|  4.15k|        return unexpected(result.error());
 8557|  4.15k|    }
 8558|  58.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  62.8k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4680|   155k|{
 4681|   155k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   155k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   155k|                  "\n"
 4685|   155k|                  "Unsupported range type given as input to a scanning "
 4686|   155k|                  "function.\n"
 4687|   155k|                  "A range needs to have a character type (value type) "
 4688|   155k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   155k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   155k|                  "to be included.\n"
 4691|   155k|                  "See the scnlib documentation for more details.");
 4692|   155k|    static_assert(
 4693|   155k|        !std::is_same_v<T, custom_char_traits>,
 4694|   155k|        "\n"
 4695|   155k|        "Unsupported range type given as input to a scanning "
 4696|   155k|        "function.\n"
 4697|   155k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   155k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   155k|        "not supported.");
 4700|   155k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   155k|                  "\n"
 4702|   155k|                  "Unsupported range type given as input to a scanning "
 4703|   155k|                  "function.\n"
 4704|   155k|                  "file_marker_found cannot be used as an "
 4705|   155k|                  "source range type to scn::scan.\n"
 4706|   155k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   155k|                  "and do not provide an explicit source range, "
 4708|   155k|                  "or use scn::scan with a FILE* directly.");
 4709|   155k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   155k|                  "\n"
 4711|   155k|                  "Unsupported range type given as input to a scanning "
 4712|   155k|                  "function.\n"
 4713|   155k|                  "In order to be scannable, a range needs to satisfy "
 4714|   155k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   155k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   155k|                  "\n"
 4717|   155k|                  "Unsupported range type given as input to a scanning "
 4718|   155k|                  "function.\n"
 4719|   155k|                  "A range needs to model forward_range and have a valid "
 4720|   155k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   155k|                  "Examples of scannable ranges are std::string, "
 4722|   155k|                  "std::string_view, "
 4723|   155k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   155k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   155k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   155k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|   155k|{
 4651|   155k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|   155k|        return file_marker_found{};
 4653|   155k|    }
 4654|   155k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|   155k|        if constexpr (ranges::range<Range>) {
 4656|   155k|            return insufficient_range{};
 4657|   155k|        }
 4658|   155k|        else {
 4659|   155k|            return invalid_input_range{};
 4660|   155k|        }
 4661|   155k|    }
 4662|   155k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|   155k|        return invalid_char_type{};
 4664|   155k|    }
 4665|   155k|    else {
 4666|   155k|        return make_forward_scan_buffer(r);
 4667|   155k|    }
 4668|   155k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4484|   155k|{
 4485|   155k|    return basic_scan_forward_buffer_impl(range);
 4486|   155k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|   155k|    {
 4378|   155k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4352|   155k|    {
 4353|   155k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4121|   155k|    {
 4122|   155k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4036|   155k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   302k|    {
 2695|   302k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   302k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   302k|    {
 2676|   302k|        return decay_copy(t.begin());
 2677|   302k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3300|   449k|    {
 3301|   449k|        return m_iterator;
 3302|   449k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4381|  1.94M|    {
 4382|  1.94M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 14.6k, False: 1.92M]
  ------------------
 4383|  14.6k|            return false;
 4384|  14.6k|        }
 4385|  1.92M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 1.77M, False: 150k]
  ------------------
 4386|  1.77M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|  1.77M|                                          this->m_current_view.begin(),
 4388|  1.77M|                                          this->m_current_view.end());
 4389|  1.77M|        }
 4390|  1.92M|        m_latest = *m_cursor;
 4391|  1.92M|        ++m_cursor;
 4392|  1.92M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|  1.92M|        return true;
 4394|  1.94M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  1.94M|    {
 2752|  1.94M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  1.94M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  1.94M|    {
 2734|  1.94M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  1.94M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3304|  2.08M|    {
 3305|  2.08M|        return m_sentinel;
 3306|  2.08M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4041|   155k|    {
 4042|   155k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   155k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|   155k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|  9.00k|    {
 1447|  9.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|  9.00k|    {
  443|  9.00k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   155k|    {
 1148|   155k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|   146k|{
 5884|   146k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|   146k|                      ranges::iterator_t<SourceRange>>) {
 5886|   146k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|   146k|    }
 5888|   146k|    else {
 5889|   146k|        auto it = ranges::begin(source);
 5890|   146k|        while (n > 0) {
 5891|   146k|            --n;
 5892|   146k|            ++it;
 5893|   146k|        }
 5894|   146k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|   146k|    }
 5896|   146k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   146k|    {
 2695|   146k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   146k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   146k|    {
 2676|   146k|        return decay_copy(t.begin());
 2677|   146k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5870|   146k|{
 5871|   146k|    return ranges::end(source);
 5872|   146k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   146k|    {
 2752|   146k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   146k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   146k|    {
 2734|   146k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   146k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|   146k|    {
 1401|   146k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|   146k|    {
  433|   146k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7935|   125k|    {
 7936|   125k|        return m_str;
 7937|   125k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8780|   125k|{
 8781|   125k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 117k]
  |  |  ------------------
  ------------------
 8782|  8.31k|        return unexpected(result.error());
 8783|  8.31k|    }
 8784|   117k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   117k|    static_cast<    \
  |  |  929|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   117k|    static_cast<    \
  |  |  929|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   125k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1568|   155k|    {
 1569|   155k|        return has_value();
 1570|   155k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   311k|    {
  481|   311k|        return m_has_value;
  482|   311k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1574|  9.00k|    {
 1575|  9.00k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  9.00k|        return this->get_unexpected().error();
 1577|  9.00k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  9.00k|    {
  464|  9.00k|        return m_unexpected;
  465|  9.00k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1446|  9.00k|    {
 1447|  9.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  621|  9.00k|    {
  622|  9.00k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  9.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  684|  9.00k|    {
  685|  9.00k|        scn::detail::construct_at(unexpected_ptr(),
  686|  9.00k|                                  std::forward<Args>(args)...);
  687|  9.00k|        m_has_value = false;
  688|  9.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  18.0k|    {
  714|  18.0k|        return reinterpret_cast<unexpected<E>*>(
  715|  18.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  18.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   155k|    {
 1148|   155k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|   117k|    {
 1624|   117k|        return value();
 1625|   117k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|   146k|    {
 1598|   146k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   146k|        return this->get_value();
 1600|   146k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|   146k|    {
  447|   146k|        return m_value;
  448|   146k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5790|   146k|    {
 5791|   146k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5641|   146k|    {
 5642|   146k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1400|   146k|    {
 1401|   146k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  611|   146k|    {
  612|   146k|        construct(std::forward<Args>(args)...);
  613|   146k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  677|   146k|    {
  678|   146k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|   146k|        m_has_value = true;
  680|   146k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  387|   146k|{
  388|   146k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|   146k|        T(std::forward<Args>(args)...);
  390|   146k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5782|   146k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|   440k|    {
  702|   440k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   440k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|   440k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5786|   293k|    ~scan_result() = default;
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   155k|    {
 2752|   155k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   155k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   155k|    {
 2734|   155k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   155k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3286|   302k|    {
 3287|   302k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   125k|    {
 7932|   125k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1568|   155k|    {
 1569|   155k|        return has_value();
 1570|   155k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|   458k|    {
  671|   458k|        return m_has_value;
  672|   458k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1643|   146k|    {
 1644|   146k|        return &value();
 1645|   146k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1597|   146k|    {
 1598|   146k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   146k|        return this->get_value();
 1600|   146k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|   146k|    {
  637|   146k|        return *value_ptr();
  638|   146k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5658|   146k|    {
 5659|   146k|        return ranges::begin(m_range);
 5660|   146k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|   155k|    {
  627|   155k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 146k, False: 9.00k]
  ------------------
  628|   146k|            destroy_value();
  629|   146k|        }
  630|  9.00k|        else {
  631|  9.00k|            destroy_unexpected();
  632|  9.00k|        }
  633|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|   146k|    {
  692|   146k|        scn::detail::destroy_at(value_ptr());
  693|   146k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  393|   146k|{
  394|   146k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|   146k|        for (auto& elem : *p) {
  396|   146k|            scn::detail::destroy_at(&elem);
  397|   146k|        }
  398|   146k|    }
  399|   146k|    else {
  400|   146k|        p->~T();
  401|   146k|    }
  402|   146k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  9.00k|    {
  696|  9.00k|        scn::detail::destroy_at(unexpected_ptr());
  697|  9.00k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8894|  62.8k|{
 8895|  62.8k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  62.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  62.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.8k|    static_cast<    \
  |  |  929|  62.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  62.8k|    static_cast<    \
  |  |  929|  62.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  62.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  62.8k|{
 8633|  62.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  62.8k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|  62.8k|{
 8568|  62.8k|#if !SCN_DISABLE_LOCALE
 8569|  62.8k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  62.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  62.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  62.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  62.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.15k, False: 58.7k]
  |  |  ------------------
  ------------------
 8576|  4.15k|        return unexpected(result.error());
 8577|  4.15k|    }
 8578|  58.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  62.8k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8933|  29.9k|{
 8934|  29.9k|    T value;
 8935|  29.9k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  29.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  29.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  29.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  29.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 693, False: 29.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    693|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    693|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    693|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    693|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    693|    }                                                  \
  |  |  |  | 3642|  29.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  29.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.2k|    static_cast<    \
  |  |  929|  29.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.2k|    static_cast<    \
  |  |  929|  29.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  29.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|  29.9k|{
 8646|  29.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|  29.9k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  29.9k|{
 8592|  29.9k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  29.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  29.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 693, False: 29.2k]
  |  |  ------------------
  ------------------
 8596|    693|        return unexpected(result.error());
 8597|    693|    }
 8598|  29.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  29.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  29.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|  29.2k|    {
 1634|  29.2k|        return std::move(value());
 1635|  29.2k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  37.4k|    {
 2695|  37.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  37.4k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  37.4k|    {
 2676|  37.4k|        return decay_copy(t.begin());
 2677|  37.4k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|   202M|{
 1920|   202M|    return SCN_FWD(t);
  ------------------
  |  |  930|   202M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   202M|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  26.9M|{
 5357|  26.9M|    detail::check_scan_arg_types<Args...>();
 5358|  26.9M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  26.9M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5095|  33.7M|{
 5096|  33.7M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  33.7M|                  "Scan argument types must be default constructible");
 5098|  33.7M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  33.7M|                  "Scan argument types must be Destructible");
 5100|  33.7M|    static_assert(
 5101|  33.7M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  33.7M|        "Scan argument types must not be references");
 5103|  33.7M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  26.9M|    {
 5310|  26.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  26.9M|    {
 5321|  26.9M|        return {detail::make_arg<
 5322|  26.9M|            kind, Context,
 5323|  26.9M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  26.9M|                                 typename Context::char_type>::value>(args)...};
 5325|  26.9M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  26.9M|{
 5131|  26.9M|    return make_value<Context>(value).ref_value;
 5132|  26.9M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  33.7M|{
 5081|  33.7M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  33.7M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  33.7M|                                  needs_context_tag>) {
 5085|  33.7M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  33.7M|    }
 5087|  33.7M|    else {
 5088|  33.7M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  33.7M|            value, context_tag<Context>{}));
 5090|  33.7M|    }
 5091|  33.7M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  33.7M|    {                                                                        \
 4920|  33.7M|        return val;                                                          \
 4921|  33.7M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5049|  33.7M|{
 5050|  33.7M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  33.7M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  33.7M|    constexpr bool scannable_char =
 5054|  33.7M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  33.7M|    static_assert(scannable_char,
 5056|  33.7M|                  "Cannot scan an argument of an unsupported character "
 5057|  33.7M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  33.7M|    constexpr bool scannable_const =
 5060|  33.7M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  33.7M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  33.7M|    constexpr bool scannable_disabled =
 5064|  33.7M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  33.7M|    static_assert(scannable_disabled,
 5066|  33.7M|                  "Cannot scan an argument that has been disabled by "
 5067|  33.7M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  33.7M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  33.7M|    static_assert(
 5071|  33.7M|        scannable,
 5072|  33.7M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  33.7M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  33.7M|    return arg_value{arg};
 5076|  33.7M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4862|  33.7M|    {
 4863|  33.7M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|  13.4M|{
 8552|  13.4M|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  13.4M|    auto result = vscan_impl(buffer, format, args);
 8555|  13.4M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 13.4M]
  |  |  ------------------
  ------------------
 8556|  16.6k|        return unexpected(result.error());
 8557|  16.6k|    }
 8558|  13.4M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  13.4M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4680|  33.7M|{
 4681|  33.7M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  33.7M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  33.7M|                  "\n"
 4685|  33.7M|                  "Unsupported range type given as input to a scanning "
 4686|  33.7M|                  "function.\n"
 4687|  33.7M|                  "A range needs to have a character type (value type) "
 4688|  33.7M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  33.7M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  33.7M|                  "to be included.\n"
 4691|  33.7M|                  "See the scnlib documentation for more details.");
 4692|  33.7M|    static_assert(
 4693|  33.7M|        !std::is_same_v<T, custom_char_traits>,
 4694|  33.7M|        "\n"
 4695|  33.7M|        "Unsupported range type given as input to a scanning "
 4696|  33.7M|        "function.\n"
 4697|  33.7M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  33.7M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  33.7M|        "not supported.");
 4700|  33.7M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  33.7M|                  "\n"
 4702|  33.7M|                  "Unsupported range type given as input to a scanning "
 4703|  33.7M|                  "function.\n"
 4704|  33.7M|                  "file_marker_found cannot be used as an "
 4705|  33.7M|                  "source range type to scn::scan.\n"
 4706|  33.7M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  33.7M|                  "and do not provide an explicit source range, "
 4708|  33.7M|                  "or use scn::scan with a FILE* directly.");
 4709|  33.7M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  33.7M|                  "\n"
 4711|  33.7M|                  "Unsupported range type given as input to a scanning "
 4712|  33.7M|                  "function.\n"
 4713|  33.7M|                  "In order to be scannable, a range needs to satisfy "
 4714|  33.7M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  33.7M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  33.7M|                  "\n"
 4717|  33.7M|                  "Unsupported range type given as input to a scanning "
 4718|  33.7M|                  "function.\n"
 4719|  33.7M|                  "A range needs to model forward_range and have a valid "
 4720|  33.7M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  33.7M|                  "Examples of scannable ranges are std::string, "
 4722|  33.7M|                  "std::string_view, "
 4723|  33.7M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  33.7M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  33.7M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  33.7M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|  33.7M|{
 4620|  33.7M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|  33.7M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|  33.7M|    }
 4623|  33.7M|    else {
 4624|  33.7M|        return invalid_char_type{};
 4625|  33.7M|    }
 4626|  33.7M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  33.7M|    {
 2826|  33.7M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  33.7M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  33.7M|    {
 2807|  33.7M|        return t.data();
 2808|  33.7M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3201|  33.7M|    {
 3202|  33.7M|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 3.91k, False: 33.7M]
  ------------------
 3203|  33.7M|                   ? nullptr
 3204|  33.7M|                   : std::addressof(*ranges::begin(derived()));
 3205|  33.7M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  33.7M|    {
 2976|  33.7M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  33.7M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  33.7M|    {
 2949|  33.7M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  33.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|  67.4M|    {
 3310|  67.4M|        return m_iterator == m_sentinel;
 3311|  67.4M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3155|  67.4M|    {
 3156|  67.4M|        return static_cast<const D&>(*this);
 3157|  67.4M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  67.4M|    {
 2695|  67.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  67.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  67.4M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  67.4M|    {
 2676|  67.4M|        return decay_copy(t.begin());
 2677|  67.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|  1.53G|    {
 3301|  1.53G|        return m_iterator;
 3302|  1.53G|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|  33.7M|    {
 2901|  33.7M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|  33.7M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|  33.7M|    {
 2867|  33.7M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|  33.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|  67.4M|    {
 3317|  67.4M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  67.4M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  36.0k|    {
 1447|  36.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  36.0k|    {
  443|  36.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  33.7M|    {
 1148|  33.7M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|  33.6M|{
 5884|  33.6M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  33.6M|                      ranges::iterator_t<SourceRange>>) {
 5886|  33.6M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  33.6M|    }
 5888|  33.6M|    else {
 5889|  33.6M|        auto it = ranges::begin(source);
 5890|  33.6M|        while (n > 0) {
 5891|  33.6M|            --n;
 5892|  33.6M|            ++it;
 5893|  33.6M|        }
 5894|  33.6M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  33.6M|    }
 5896|  33.6M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  67.3M|    {
 2695|  67.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  67.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  67.3M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  67.3M|    {
 2676|  67.3M|        return decay_copy(t.begin());
 2677|  67.3M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5870|  33.6M|{
 5871|  33.6M|    return ranges::end(source);
 5872|  33.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  33.6M|    {
 2752|  33.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  33.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  33.6M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  33.6M|    {
 2734|  33.6M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  33.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  33.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|  1.39G|    {
 3305|  1.39G|        return m_sentinel;
 3306|  1.39G|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  33.6M|    {
 1401|  33.6M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  33.6M|    {
  433|  33.6M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7935|  13.4M|    {
 7936|  13.4M|        return m_str;
 7937|  13.4M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  26.9M|    {
 5387|  26.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  26.9M|    {
 5340|  26.9M|        return m_argptrs;
 5341|  26.9M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|  40.4M|    {
 5439|  40.4M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  13.4M|{
 8781|  13.4M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 13.4M]
  |  |  ------------------
  ------------------
 8782|  16.6k|        return unexpected(result.error());
 8783|  16.6k|    }
 8784|  13.4M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.4M|    static_cast<    \
  |  |  929|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.4M|    static_cast<    \
  |  |  929|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  13.4M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|  33.7M|    {
 1569|  33.7M|        return has_value();
 1570|  33.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  67.4M|    {
  481|  67.4M|        return m_has_value;
  482|  67.4M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|  36.0k|    {
 1575|  36.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  36.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  36.0k|        return this->get_unexpected().error();
 1577|  36.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  36.0k|    {
  464|  36.0k|        return m_unexpected;
  465|  36.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  18.0k|    {
  622|  18.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  18.0k|    {
  685|  18.0k|        scn::detail::construct_at(unexpected_ptr(),
  686|  18.0k|                                  std::forward<Args>(args)...);
  687|  18.0k|        m_has_value = false;
  688|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  36.0k|    {
  714|  36.0k|        return reinterpret_cast<unexpected<E>*>(
  715|  36.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  36.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  36.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.8M|    {
 1148|  16.8M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  26.9M|    {
 1624|  26.9M|        return value();
 1625|  26.9M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  33.6M|    {
 1598|  33.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  33.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  33.6M|        return this->get_value();
 1600|  33.6M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  33.6M|    {
  447|  33.6M|        return m_value;
  448|  33.6M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|  16.8M|    {
 5791|  16.8M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5641|  33.6M|    {
 5642|  33.6M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|  33.6M|    {
 5577|  33.6M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|  16.8M|    {
 1401|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|  16.8M|    {
  612|  16.8M|        construct(std::forward<Args>(args)...);
  613|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|  16.8M|    {
  678|  16.8M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|  16.8M|        m_has_value = true;
  680|  16.8M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|  16.8M|{
  388|  16.8M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  16.8M|        T(std::forward<Args>(args)...);
  390|  16.8M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|  16.8M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  50.5M|    {
  702|  50.5M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  50.5M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  50.5M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|  33.6M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  26.9M|    {
 5335|  26.9M|        return m_args;
 5336|  26.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  26.9M|    ~scan_arg_store() = default;
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  33.7M|    {
 2752|  33.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  33.7M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  33.7M|    {
 2734|  33.7M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  33.7M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|   647M|    {
 3287|   647M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|  40.4M|{
 7657|  40.4M|    return s;
 7658|  40.4M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|  40.4M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  13.4M|    {
 7932|  13.4M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1568|  16.8M|    {
 1569|  16.8M|        return has_value();
 1570|  16.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  50.5M|    {
  671|  50.5M|        return m_has_value;
  672|  50.5M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1643|  16.8M|    {
 1644|  16.8M|        return &value();
 1645|  16.8M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1597|  16.8M|    {
 1598|  16.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  16.8M|        return this->get_value();
 1600|  16.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|  16.8M|    {
  637|  16.8M|        return *value_ptr();
  638|  16.8M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5658|  33.6M|    {
 5659|  33.6M|        return ranges::begin(m_range);
 5660|  33.6M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  16.8M|    {
  627|  16.8M|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 16.8M, False: 18.0k]
  ------------------
  628|  16.8M|            destroy_value();
  629|  16.8M|        }
  630|  18.0k|        else {
  631|  18.0k|            destroy_unexpected();
  632|  18.0k|        }
  633|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|  16.8M|    {
  692|  16.8M|        scn::detail::destroy_at(value_ptr());
  693|  16.8M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|  16.8M|{
  394|  16.8M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  16.8M|        for (auto& elem : *p) {
  396|  16.8M|            scn::detail::destroy_at(&elem);
  397|  16.8M|        }
  398|  16.8M|    }
  399|  16.8M|    else {
  400|  16.8M|        p->~T();
  401|  16.8M|    }
  402|  16.8M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  18.0k|    {
  696|  18.0k|        scn::detail::destroy_at(unexpected_ptr());
  697|  18.0k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|  13.4M|{
 8568|  13.4M|#if !SCN_DISABLE_LOCALE
 8569|  13.4M|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  13.4M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  13.4M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  13.4M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  13.4M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 13.4M]
  |  |  ------------------
  ------------------
 8576|  16.6k|        return unexpected(result.error());
 8577|  16.6k|    }
 8578|  13.4M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  13.4M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5115|  6.74M|{
 5116|  6.74M|    check_scan_arg_types<T>();
 5117|       |
 5118|  6.74M|    basic_scan_arg<Context> arg;
 5119|  6.74M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  6.74M|    arg.m_value = make_value<Context>(value);
 5121|  6.74M|    return arg;
 5122|  6.74M|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|  50.5M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  6.74M|{
 8592|  6.74M|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  6.74M|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  6.74M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 6.73M]
  |  |  ------------------
  ------------------
 8596|  2.77k|        return unexpected(result.error());
 8597|  2.77k|    }
 8598|  6.73M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  6.74M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  6.73M|    {
 1634|  6.73M|        return std::move(value());
 1635|  6.73M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5356|  13.4M|{
 5357|  13.4M|    detail::check_scan_arg_types<Args...>();
 5358|  13.4M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  13.4M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5095|  16.8M|{
 5096|  16.8M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  16.8M|                  "Scan argument types must be default constructible");
 5098|  16.8M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  16.8M|                  "Scan argument types must be Destructible");
 5100|  16.8M|    static_assert(
 5101|  16.8M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  16.8M|        "Scan argument types must not be references");
 5103|  16.8M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5309|  13.4M|    {
 5310|  13.4M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  13.4M|    {
 5321|  13.4M|        return {detail::make_arg<
 5322|  13.4M|            kind, Context,
 5323|  13.4M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  13.4M|                                 typename Context::char_type>::value>(args)...};
 5325|  13.4M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5130|  13.4M|{
 5131|  13.4M|    return make_value<Context>(value).ref_value;
 5132|  13.4M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5080|  16.8M|{
 5081|  16.8M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.8M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.8M|                                  needs_context_tag>) {
 5085|  16.8M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.8M|    }
 5087|  16.8M|    else {
 5088|  16.8M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.8M|            value, context_tag<Context>{}));
 5090|  16.8M|    }
 5091|  16.8M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4919|  16.8M|    {                                                                        \
 4920|  16.8M|        return val;                                                          \
 4921|  16.8M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5049|  16.8M|{
 5050|  16.8M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  16.8M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  16.8M|    constexpr bool scannable_char =
 5054|  16.8M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  16.8M|    static_assert(scannable_char,
 5056|  16.8M|                  "Cannot scan an argument of an unsupported character "
 5057|  16.8M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  16.8M|    constexpr bool scannable_const =
 5060|  16.8M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  16.8M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  16.8M|    constexpr bool scannable_disabled =
 5064|  16.8M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  16.8M|    static_assert(scannable_disabled,
 5066|  16.8M|                  "Cannot scan an argument that has been disabled by "
 5067|  16.8M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  16.8M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  16.8M|    static_assert(
 5071|  16.8M|        scannable,
 5072|  16.8M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  16.8M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  16.8M|    return arg_value{arg};
 5076|  16.8M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4862|  16.8M|    {
 4863|  16.8M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7935|  13.4M|    {
 7936|  13.4M|        return m_str;
 7937|  13.4M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  13.4M|    {
 5387|  13.4M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5339|  13.4M|    {
 5340|  13.4M|        return m_argptrs;
 5341|  13.4M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  13.4M|{
 8781|  13.4M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 13.4M]
  |  |  ------------------
  ------------------
 8782|  16.6k|        return unexpected(result.error());
 8783|  16.6k|    }
 8784|  13.4M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.4M|    static_cast<    \
  |  |  929|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.4M|    static_cast<    \
  |  |  929|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  13.4M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.8M|    {
 1148|  16.8M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|  16.8M|    {
 5791|  16.8M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|  16.8M|    {
 5577|  16.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|  16.8M|    {
 1401|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|  16.8M|    {
  433|  16.8M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5334|  13.4M|    {
 5335|  13.4M|        return m_args;
 5336|  13.4M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  13.4M|    {
 7932|  13.4M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1568|  16.8M|    {
 1569|  16.8M|        return has_value();
 1570|  16.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  33.7M|    {
  481|  33.7M|        return m_has_value;
  482|  33.7M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1643|  16.8M|    {
 1644|  16.8M|        return &value();
 1645|  16.8M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1597|  16.8M|    {
 1598|  16.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  16.8M|        return this->get_value();
 1600|  16.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  16.8M|    {
  447|  16.8M|        return m_value;
  448|  16.8M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5115|  3.37M|{
 5116|  3.37M|    check_scan_arg_types<T>();
 5117|       |
 5118|  3.37M|    basic_scan_arg<Context> arg;
 5119|  3.37M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  3.37M|    arg.m_value = make_value<Context>(value);
 5121|  3.37M|    return arg;
 5122|  3.37M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  18.0k|    {
 2695|  18.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  18.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  18.0k|    {
 2676|  18.0k|        return decay_copy(t.begin());
 2677|  18.0k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1919|   276M|{
 1920|   276M|    return SCN_FWD(t);
  ------------------
  |  |  930|   276M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   276M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|  6.74M|{
 8552|  6.74M|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  6.74M|    auto result = vscan_impl(buffer, format, args);
 8555|  6.74M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 6.73M]
  |  |  ------------------
  ------------------
 8556|  8.31k|        return unexpected(result.error());
 8557|  8.31k|    }
 8558|  6.73M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  6.74M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4680|  16.8M|{
 4681|  16.8M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  16.8M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  16.8M|                  "\n"
 4685|  16.8M|                  "Unsupported range type given as input to a scanning "
 4686|  16.8M|                  "function.\n"
 4687|  16.8M|                  "A range needs to have a character type (value type) "
 4688|  16.8M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  16.8M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  16.8M|                  "to be included.\n"
 4691|  16.8M|                  "See the scnlib documentation for more details.");
 4692|  16.8M|    static_assert(
 4693|  16.8M|        !std::is_same_v<T, custom_char_traits>,
 4694|  16.8M|        "\n"
 4695|  16.8M|        "Unsupported range type given as input to a scanning "
 4696|  16.8M|        "function.\n"
 4697|  16.8M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  16.8M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  16.8M|        "not supported.");
 4700|  16.8M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  16.8M|                  "\n"
 4702|  16.8M|                  "Unsupported range type given as input to a scanning "
 4703|  16.8M|                  "function.\n"
 4704|  16.8M|                  "file_marker_found cannot be used as an "
 4705|  16.8M|                  "source range type to scn::scan.\n"
 4706|  16.8M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  16.8M|                  "and do not provide an explicit source range, "
 4708|  16.8M|                  "or use scn::scan with a FILE* directly.");
 4709|  16.8M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  16.8M|                  "\n"
 4711|  16.8M|                  "Unsupported range type given as input to a scanning "
 4712|  16.8M|                  "function.\n"
 4713|  16.8M|                  "In order to be scannable, a range needs to satisfy "
 4714|  16.8M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  16.8M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  16.8M|                  "\n"
 4717|  16.8M|                  "Unsupported range type given as input to a scanning "
 4718|  16.8M|                  "function.\n"
 4719|  16.8M|                  "A range needs to model forward_range and have a valid "
 4720|  16.8M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  16.8M|                  "Examples of scannable ranges are std::string, "
 4722|  16.8M|                  "std::string_view, "
 4723|  16.8M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  16.8M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  16.8M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  16.8M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|  16.8M|{
 4651|  16.8M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|  16.8M|        return file_marker_found{};
 4653|  16.8M|    }
 4654|  16.8M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|  16.8M|        if constexpr (ranges::range<Range>) {
 4656|  16.8M|            return insufficient_range{};
 4657|  16.8M|        }
 4658|  16.8M|        else {
 4659|  16.8M|            return invalid_input_range{};
 4660|  16.8M|        }
 4661|  16.8M|    }
 4662|  16.8M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|  16.8M|        return invalid_char_type{};
 4664|  16.8M|    }
 4665|  16.8M|    else {
 4666|  16.8M|        return make_forward_scan_buffer(r);
 4667|  16.8M|    }
 4668|  16.8M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4484|  16.8M|{
 4485|  16.8M|    return basic_scan_forward_buffer_impl(range);
 4486|  16.8M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|  16.8M|    {
 4378|  16.8M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4352|  16.8M|    {
 4353|  16.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4121|  16.8M|    {
 4122|  16.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4036|  16.8M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  33.7M|    {
 2695|  33.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  33.7M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  33.7M|    {
 2676|  33.7M|        return decay_copy(t.begin());
 2677|  33.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3300|  50.5M|    {
 3301|  50.5M|        return m_iterator;
 3302|  50.5M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4381|   192M|    {
 4382|   192M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 26.0k, False: 192M]
  ------------------
 4383|  26.0k|            return false;
 4384|  26.0k|        }
 4385|   192M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 175M, False: 16.8M]
  ------------------
 4386|   175M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|   175M|                                          this->m_current_view.begin(),
 4388|   175M|                                          this->m_current_view.end());
 4389|   175M|        }
 4390|   192M|        m_latest = *m_cursor;
 4391|   192M|        ++m_cursor;
 4392|   192M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|   192M|        return true;
 4394|   192M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   192M|    {
 2752|   192M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   192M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   192M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   192M|    {
 2734|   192M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   192M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   192M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3304|   209M|    {
 3305|   209M|        return m_sentinel;
 3306|   209M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4041|  16.8M|    {
 4042|  16.8M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  16.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|  16.8M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.8M|    {
 1148|  16.8M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|  16.8M|{
 5884|  16.8M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  16.8M|                      ranges::iterator_t<SourceRange>>) {
 5886|  16.8M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  16.8M|    }
 5888|  16.8M|    else {
 5889|  16.8M|        auto it = ranges::begin(source);
 5890|  16.8M|        while (n > 0) {
 5891|  16.8M|            --n;
 5892|  16.8M|            ++it;
 5893|  16.8M|        }
 5894|  16.8M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  16.8M|    }
 5896|  16.8M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  16.8M|    {
 2695|  16.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  16.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  16.8M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  16.8M|    {
 2676|  16.8M|        return decay_copy(t.begin());
 2677|  16.8M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5870|  16.8M|{
 5871|  16.8M|    return ranges::end(source);
 5872|  16.8M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  16.8M|    {
 2752|  16.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  16.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  16.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  16.8M|    {
 2734|  16.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  16.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  16.8M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|  16.8M|    {
 1401|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  16.8M|    {
  433|  16.8M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7935|  13.4M|    {
 7936|  13.4M|        return m_str;
 7937|  13.4M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8780|  13.4M|{
 8781|  13.4M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  13.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 13.4M]
  |  |  ------------------
  ------------------
 8782|  16.6k|        return unexpected(result.error());
 8783|  16.6k|    }
 8784|  13.4M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.4M|    static_cast<    \
  |  |  929|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  13.4M|    static_cast<    \
  |  |  929|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  13.4M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1568|  16.8M|    {
 1569|  16.8M|        return has_value();
 1570|  16.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  33.7M|    {
  481|  33.7M|        return m_has_value;
  482|  33.7M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1574|  18.0k|    {
 1575|  18.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  18.0k|        return this->get_unexpected().error();
 1577|  18.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  18.0k|    {
  464|  18.0k|        return m_unexpected;
  465|  18.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  621|  18.0k|    {
  622|  18.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  684|  18.0k|    {
  685|  18.0k|        scn::detail::construct_at(unexpected_ptr(),
  686|  18.0k|                                  std::forward<Args>(args)...);
  687|  18.0k|        m_has_value = false;
  688|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  36.0k|    {
  714|  36.0k|        return reinterpret_cast<unexpected<E>*>(
  715|  36.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  36.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  36.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.8M|    {
 1148|  16.8M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|  13.4M|    {
 1624|  13.4M|        return value();
 1625|  13.4M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|  16.8M|    {
 1598|  16.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  16.8M|        return this->get_value();
 1600|  16.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  16.8M|    {
  447|  16.8M|        return m_value;
  448|  16.8M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5790|  16.8M|    {
 5791|  16.8M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5641|  16.8M|    {
 5642|  16.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1400|  16.8M|    {
 1401|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  611|  16.8M|    {
  612|  16.8M|        construct(std::forward<Args>(args)...);
  613|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  677|  16.8M|    {
  678|  16.8M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|  16.8M|        m_has_value = true;
  680|  16.8M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  387|  16.8M|{
  388|  16.8M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  16.8M|        T(std::forward<Args>(args)...);
  390|  16.8M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5782|  16.8M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  50.5M|    {
  702|  50.5M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  50.5M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  50.5M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5786|  33.6M|    ~scan_result() = default;
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  16.8M|    {
 2752|  16.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  16.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  16.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  16.8M|    {
 2734|  16.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  16.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  16.8M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3286|  33.7M|    {
 3287|  33.7M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  13.4M|    {
 7932|  13.4M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1568|  16.8M|    {
 1569|  16.8M|        return has_value();
 1570|  16.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  50.5M|    {
  671|  50.5M|        return m_has_value;
  672|  50.5M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1643|  16.8M|    {
 1644|  16.8M|        return &value();
 1645|  16.8M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1597|  16.8M|    {
 1598|  16.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  16.8M|        return this->get_value();
 1600|  16.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|  16.8M|    {
  637|  16.8M|        return *value_ptr();
  638|  16.8M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5658|  16.8M|    {
 5659|  16.8M|        return ranges::begin(m_range);
 5660|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  16.8M|    {
  627|  16.8M|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 16.8M, False: 18.0k]
  ------------------
  628|  16.8M|            destroy_value();
  629|  16.8M|        }
  630|  18.0k|        else {
  631|  18.0k|            destroy_unexpected();
  632|  18.0k|        }
  633|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|  16.8M|    {
  692|  16.8M|        scn::detail::destroy_at(value_ptr());
  693|  16.8M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  393|  16.8M|{
  394|  16.8M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  16.8M|        for (auto& elem : *p) {
  396|  16.8M|            scn::detail::destroy_at(&elem);
  397|  16.8M|        }
  398|  16.8M|    }
  399|  16.8M|    else {
  400|  16.8M|        p->~T();
  401|  16.8M|    }
  402|  16.8M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  18.0k|    {
  696|  18.0k|        scn::detail::destroy_at(unexpected_ptr());
  697|  18.0k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|  6.74M|{
 8568|  6.74M|#if !SCN_DISABLE_LOCALE
 8569|  6.74M|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  6.74M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  6.74M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  6.74M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  6.74M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 6.73M]
  |  |  ------------------
  ------------------
 8576|  8.31k|        return unexpected(result.error());
 8577|  8.31k|    }
 8578|  6.73M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  6.74M|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  3.37M|{
 8592|  3.37M|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  3.37M|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  3.37M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 3.36M]
  |  |  ------------------
  ------------------
 8596|  1.38k|        return unexpected(result.error());
 8597|  1.38k|    }
 8598|  3.36M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  3.37M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|  3.36M|    {
 1634|  3.36M|        return std::move(value());
 1635|  3.36M|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|   106k|    {
 3539|   106k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   106k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|   106k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|   156M|    {
 3545|   156M|        return m_code == good;
 3546|   156M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|  37.4k|    {
 3556|  37.4k|        return m_code;
 3557|  37.4k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|  6.42M|    {
 3301|  6.42M|        return m_iterator;
 3302|  6.42M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|   718M|    {
 3301|   718M|        return m_iterator;
 3302|   718M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|  20.4M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6242|  24.9k|    {
 6243|  24.9k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6243:13): [True: 0, False: 24.9k]
  |  Branch (6243:39): [True: 0, False: 0]
  ------------------
 6244|       |            // clang-format off
 6245|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6246|       |            // clang-format on
 6247|      0|        }
 6248|       |
 6249|  24.9k|        m_specs.width = width;
 6250|  24.9k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|  20.4M|    {
 6264|  20.4M|        m_specs.type = type;
 6265|  20.4M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6280|  29.6k|    {
 6281|  29.6k|        const auto begin_value = static_cast<unsigned>(begin);
 6282|  29.6k|        const auto end_value = static_cast<unsigned>(end);
 6283|  29.6k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  29.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6284|       |
 6285|  29.6k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  29.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 29.6k, False: 0]
  |  |  ------------------
  ------------------
 6286|       |            // No need to bit-twiddle with a mask, because with the
 6287|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6288|  29.6k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  29.6k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6289|   800k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6289:40): [True: 770k, False: 29.6k]
  ------------------
 6290|   770k|                m_specs.charset_literals[v / 8] |=
 6291|   770k|                    static_cast<unsigned char>(1ul << (v % 8));
 6292|   770k|            }
 6293|  29.6k|        }
 6294|      0|        else {
 6295|      0|            m_specs.charset_has_nonascii = true;
 6296|      0|        }
 6297|  29.6k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6325|  24.9k|    {
 6326|  24.9k|        SCN_UNLIKELY_ATTR
 6327|  24.9k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6328|  24.9k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|  20.4M|    {
 6337|  20.4M|        return static_cast<bool>(m_error);
 6338|  20.4M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|  37.4k|{
 3580|  37.4k|    return a.code() == b;
 3581|  37.4k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|  37.4k|{
 3584|  37.4k|    return !(a == b);
 3585|  37.4k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|  12.4k|{
 7024|  12.4k|    switch (type) {
 7025|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 0, False: 12.4k]
  ------------------
 7026|      0|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 12.4k]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 12.4k]
  ------------------
 7030|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 0, False: 12.4k]
  ------------------
 7031|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 12.4k]
  ------------------
 7032|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 12.4k]
  ------------------
 7033|      0|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 12.4k]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 12.4k]
  ------------------
 7037|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 0, False: 12.4k]
  ------------------
 7038|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 12.4k]
  ------------------
 7039|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 12.4k]
  ------------------
 7040|      0|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 0, False: 12.4k]
  ------------------
 7043|      0|            return arg_type_category::pointer;
 7044|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 0, False: 12.4k]
  ------------------
 7045|      0|            return arg_type_category::boolean;
 7046|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 0, False: 12.4k]
  ------------------
 7047|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 0, False: 12.4k]
  ------------------
 7048|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 12.4k]
  ------------------
 7049|      0|            return arg_type_category::character;
 7050|       |
 7051|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 0, False: 12.4k]
  ------------------
 7052|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 0, False: 12.4k]
  ------------------
 7053|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 0, False: 12.4k]
  ------------------
 7054|      0|            return arg_type_category::floating;
 7055|       |
 7056|  1.38k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 1.38k, False: 11.0k]
  ------------------
 7057|  4.15k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 2.77k, False: 9.70k]
  ------------------
 7058|  6.93k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 2.77k, False: 9.70k]
  ------------------
 7059|  12.4k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 5.54k, False: 6.93k]
  ------------------
 7060|  12.4k|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 12.4k]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 12.4k]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|  12.4k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|  12.4k|            SCN_CLANG_POP
 7071|  12.4k|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|  12.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3624|  12.4k|{
 3625|  12.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  12.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3624|  8.16k|{
 3625|  8.16k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  8.16k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3624|  4.10k|{
 3625|  4.10k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  4.10k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7165|  20.4M|{
 7166|  20.4M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7166:9): [True: 0, False: 20.4M]
  ------------------
 7167|  20.4M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7167:9): [True: 20.4M, False: 27.3k]
  ------------------
 7168|  20.4M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7168:9): [True: 14.8k, False: 12.4k]
  ------------------
 7169|  20.4M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7169:9): [True: 0, False: 12.4k]
  ------------------
 7170|  20.4M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7170:9): [True: 0, False: 12.4k]
  ------------------
 7171|  20.4M|        return;
 7172|  20.4M|    }
 7173|  12.4k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7173:9): [True: 12.4k, False: 0]
  ------------------
 7174|  12.4k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 0]
  |  |  ------------------
  ------------------
 7175|       |            // clang-format off
 7176|  12.4k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7177|       |            // clang-format on
 7178|  12.4k|        }
 7179|      0|        return;
 7180|  12.4k|    }
 7181|      0|    SCN_UNLIKELY_ATTR
 7182|      0|    handler.on_error("Invalid type specifier for string");
 7183|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4165|  35.2M|    {
 4166|  35.2M|        return m_end == nullptr;
 4167|  35.2M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   144k|{
 3686|   144k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   144k|                                          const CharT*, const CharT*>) {
 3688|   144k|        return {first, last};
 3689|   144k|    }
 3690|   144k|    else {
 3691|   144k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   144k|    }
 3693|   144k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4181|   742k|    {
 4182|   742k|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 742k]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|   742k|        return parent()->get_segment_starting_at(position());
 4188|   742k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4175|  20.5M|    {
 4176|  20.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  20.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  20.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|  20.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4071|   742k|    {
 4072|   742k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 435k, False: 307k]
  |  |  ------------------
  ------------------
 4073|   742k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|   435k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|   435k|        }
 4076|   307k|        const auto start = pos - m_putback_buffer.size();
 4077|   307k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|   307k|        return m_current_view.substr(start);
 4079|   307k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4160|   837k|    {
 4161|   837k|        return m_position;
 4162|   837k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4093|   467k|    {
 4094|   467k|        return m_is_contiguous;
 4095|   467k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4165|  3.56G|    {
 4166|  3.56G|        return m_end == nullptr;
 4167|  3.56G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|  16.8M|{
 3686|  16.8M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|  16.8M|                                          const CharT*, const CharT*>) {
 3688|  16.8M|        return {first, last};
 3689|  16.8M|    }
 3690|  16.8M|    else {
 3691|  16.8M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|  16.8M|    }
 3693|  16.8M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4181|  50.5M|    {
 4182|  50.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 50.5M]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|  50.5M|        return parent()->get_segment_starting_at(position());
 4188|  50.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4175|  2.07G|    {
 4176|  2.07G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  2.07G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  2.07G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|  2.07G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4071|  50.5M|    {
 4072|  50.5M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  50.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.6M, False: 16.8M]
  |  |  ------------------
  ------------------
 4073|  50.5M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|  33.6M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|  33.6M|        }
 4076|  16.8M|        const auto start = pos - m_putback_buffer.size();
 4077|  16.8M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  16.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|  16.8M|        return m_current_view.substr(start);
 4079|  16.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4160|  60.6M|    {
 4161|  60.6M|        return m_position;
 4162|  60.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4093|  50.5M|    {
 4094|  50.5M|        return m_is_contiguous;
 4095|  50.5M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|  1.75M|    {
 3151|  1.75M|        return static_cast<D&>(*this);
 3152|  1.75M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   877k|    {
 2949|   877k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   877k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   877k|    {
 2976|   877k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   877k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|   877k|    {
 3192|   877k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 680, False: 876k]
  ------------------
 3193|   877k|                   ? nullptr
 3194|   877k|                   : std::addressof(*ranges::begin(derived()));
 3195|   877k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|  67.4M|    {
 3151|  67.4M|        return static_cast<D&>(*this);
 3152|  67.4M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  33.7M|    {
 2949|  33.7M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  33.7M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  33.7M|    {
 2976|  33.7M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  33.7M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|  33.7M|    {
 3192|  33.7M|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 0, False: 33.7M]
  ------------------
 3193|  33.7M|                   ? nullptr
 3194|  33.7M|                   : std::addressof(*ranges::begin(derived()));
 3195|  33.7M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8129|  63.1k|    {
 8130|  63.1k|        return ranges::subrange{begin(), end()};
 8131|  63.1k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8113|   188k|    {
 8114|   188k|        return m_current;
 8115|   188k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8121|  63.1k|    {
 8122|  63.1k|        return ranges::default_sentinel;
 8123|  63.1k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  2.35M|    {
 3287|  2.35M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|  51.0M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   149k|    {
 1808|   149k|        return detail::transform_error_impl(std::move(*this),
 1809|   149k|                                            std::forward<F>(f));
 1810|   149k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   149k|{
 1294|   149k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   149k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   149k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   149k|            return result(*std::forward<Exp>(exp));
 1298|   149k|        }
 1299|       |
 1300|   149k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   149k|        return result(unexpect, monostate{});
 1302|   149k|    }
 1303|   149k|    else {
 1304|   149k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   149k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   149k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 146k, False: 2.43k]
  |  |  ------------------
  ------------------
 1306|   149k|                   ? result(*std::forward<Exp>(exp))
 1307|   149k|                   : result(unexpect,
 1308|  2.43k|                            trivial_invoke(std::forward<F>(f),
 1309|  2.43k|                                           std::forward<Exp>(exp).error()));
 1310|   149k|    }
 1311|   149k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   298k|    {
  481|   298k|        return m_has_value;
  482|   298k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|   146k|    {
 1634|   146k|        return std::move(value());
 1635|   146k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|   146k|    {
 1598|   146k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   146k|        return this->get_value();
 1600|   146k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   146k|    {
  447|   146k|        return m_value;
  448|   146k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|   293k|    {
 1401|   293k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   293k|    {
  433|   293k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   365k|    {
 1148|   365k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|  18.9k|{
 1182|  18.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  18.9k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  2.43k|    {
 1585|  2.43k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  2.43k|        return std::move(this->get_unexpected().error());
 1587|  2.43k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  2.43k|    {
  464|  2.43k|        return m_unexpected;
  465|  2.43k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|  37.8k|    {
  357|  37.8k|        return m_unexpected;
  358|  37.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|  2.43k|    {
 1457|  2.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  11.8k|    {
  443|  11.8k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8129|  6.74M|    {
 8130|  6.74M|        return ranges::subrange{begin(), end()};
 8131|  6.74M|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8113|  20.2M|    {
 8114|  20.2M|        return m_current;
 8115|  20.2M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8121|  6.74M|    {
 8122|  6.74M|        return ranges::default_sentinel;
 8123|  6.74M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|   273M|    {
 3287|   273M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  16.8M|    {
 1808|  16.8M|        return detail::transform_error_impl(std::move(*this),
 1809|  16.8M|                                            std::forward<F>(f));
 1810|  16.8M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  16.8M|{
 1294|  16.8M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  16.8M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  16.8M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  16.8M|            return result(*std::forward<Exp>(exp));
 1298|  16.8M|        }
 1299|       |
 1300|  16.8M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  16.8M|        return result(unexpect, monostate{});
 1302|  16.8M|    }
 1303|  16.8M|    else {
 1304|  16.8M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  16.8M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  16.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.8M, False: 3.90k]
  |  |  ------------------
  ------------------
 1306|  16.8M|                   ? result(*std::forward<Exp>(exp))
 1307|  16.8M|                   : result(unexpect,
 1308|  3.90k|                            trivial_invoke(std::forward<F>(f),
 1309|  3.90k|                                           std::forward<Exp>(exp).error()));
 1310|  16.8M|    }
 1311|  16.8M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  33.7M|    {
  481|  33.7M|        return m_has_value;
  482|  33.7M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|  16.8M|    {
 1634|  16.8M|        return std::move(value());
 1635|  16.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|  16.8M|    {
 1598|  16.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  16.8M|        return this->get_value();
 1600|  16.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  16.8M|    {
  447|  16.8M|        return m_value;
  448|  16.8M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|  33.6M|    {
 1401|  33.6M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  33.6M|    {
  433|  33.6M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  40.4M|    {
 1148|  40.4M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  3.90k|    {
 1585|  3.90k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  3.90k|        return std::move(this->get_unexpected().error());
 1587|  3.90k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  3.90k|    {
  464|  3.90k|        return m_unexpected;
  465|  3.90k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|  3.90k|    {
 1457|  3.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  23.1k|    {
  443|  23.1k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  24.7k|    {
  343|  24.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  24.7k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  18.8k|    {
 1447|  18.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  23.6k|    {
  443|  23.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   722k|    {
 1148|   722k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|   580k|    {
 1401|   580k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   580k|    {
  433|   580k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|   722k|    {
 1569|   722k|        return has_value();
 1570|   722k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  1.44M|    {
  481|  1.44M|        return m_has_value;
  482|  1.44M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|  23.6k|    {
 1575|  23.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  23.6k|        return this->get_unexpected().error();
 1577|  23.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  23.6k|    {
  464|  23.6k|        return m_unexpected;
  465|  23.6k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|   580k|    {
 1634|   580k|        return std::move(value());
 1635|   580k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|   699k|    {
 1598|   699k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   699k|        return this->get_value();
 1600|   699k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|   699k|    {
  447|   699k|        return m_value;
  448|   699k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  38.4k|    {
 1447|  38.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  46.2k|    {
  443|  46.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  80.9M|    {
 1148|  80.9M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  67.3M|    {
 1401|  67.3M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  67.3M|    {
  433|  67.3M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|  80.9M|    {
 1569|  80.9M|        return has_value();
 1570|  80.9M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|   161M|    {
  481|   161M|        return m_has_value;
  482|   161M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|  46.2k|    {
 1575|  46.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  46.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  46.2k|        return this->get_unexpected().error();
 1577|  46.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  46.2k|    {
  464|  46.2k|        return m_unexpected;
  465|  46.2k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  67.3M|    {
 1634|  67.3M|        return std::move(value());
 1635|  67.3M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  80.8M|    {
 1598|  80.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  80.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  80.8M|        return this->get_value();
 1600|  80.8M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|  80.8M|    {
  447|  80.8M|        return m_value;
  448|  80.8M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|   295k|    {
 1808|   295k|        return detail::transform_error_impl(std::move(*this),
 1809|   295k|                                            std::forward<F>(f));
 1810|   295k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|   295k|{
 1294|   295k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   295k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   295k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   295k|            return result(*std::forward<Exp>(exp));
 1298|   295k|        }
 1299|       |
 1300|   295k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   295k|        return result(unexpect, monostate{});
 1302|   295k|    }
 1303|   295k|    else {
 1304|   295k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   295k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   295k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 290k, False: 4.77k]
  |  |  ------------------
  ------------------
 1306|   295k|                   ? result(*std::forward<Exp>(exp))
 1307|   295k|                   : result(unexpect,
 1308|  4.77k|                            trivial_invoke(std::forward<F>(f),
 1309|  4.77k|                                           std::forward<Exp>(exp).error()));
 1310|   295k|    }
 1311|   295k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   591k|    {
  481|   591k|        return m_has_value;
  482|   591k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|   290k|    {
 1634|   290k|        return std::move(value());
 1635|   290k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|   290k|    {
 1598|   290k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   290k|        return this->get_value();
 1600|   290k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   290k|    {
  447|   290k|        return m_value;
  448|   290k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|  4.77k|    {
 1585|  4.77k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  4.77k|        return std::move(this->get_unexpected().error());
 1587|  4.77k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  4.77k|    {
  464|  4.77k|        return m_unexpected;
  465|  4.77k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  4.77k|    {
 1457|  4.77k|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|   115M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  9.41k|    {
 1447|  9.41k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4209|  3.49M|    {
 4210|  3.49M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  3.49M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 3.49M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  3.49M|        auto res = read_at_position();
 4219|  3.49M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  3.49M|        return parent()->get_character_at(m_position);
 4221|  3.49M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4274|  10.4M|    {
 4275|  10.4M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|  10.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 10.4M]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|  10.4M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  10.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.55M, False: 1.94M]
  |  |  ------------------
  ------------------
 4282|  8.55M|            return true;
 4283|  8.55M|        }
 4284|       |
 4285|  3.86M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 1.94M, False: 1.92M]
  ------------------
 4286|  1.94M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 14.6k, False: 1.92M]
  ------------------
 4287|  14.6k|                return false;
 4288|  14.6k|            }
 4289|  1.94M|        }
 4290|  1.92M|        return true;
 4291|  1.94M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4051|  14.3M|    {
 4052|  14.3M|        return m_putback_buffer.size() + m_current_view.size();
 4053|  14.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4082|  3.49M|    {
 4083|  3.49M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92M, False: 1.56M]
  |  |  ------------------
  ------------------
 4084|  3.49M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  1.92M|            return m_putback_buffer[pos];
 4086|  1.92M|        }
 4087|  1.56M|        const auto start = pos - m_putback_buffer.size();
 4088|  1.56M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|  1.56M|        return m_current_view[start];
 4090|  1.56M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4195|  3.19M|    {
 4196|  3.19M|        ++m_position;
 4197|  3.19M|        (void)read_at_position();
 4198|  3.19M|        return *this;
 4199|  3.19M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4244|  1.38M|    {
 4245|  1.38M|        return !(lhs == rhs);
 4246|  1.38M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4239|  1.38M|    {
 4240|  1.38M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 1.38M, False: 0]
  |  Branch (4240:46): [True: 226k, False: 1.15M]
  ------------------
 4241|  1.38M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  1.86M|    {
 4251|  1.86M|        return x.is_at_end();
 4252|  1.86M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4294|  3.79M|    {
 4295|  3.79M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 3.79M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  3.79M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 3.79M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  3.79M|        return !read_at_position();
 4302|  3.79M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|   146k|    {
 1401|   146k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   146k|    {
  433|   146k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   149k|    {
 1148|   149k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  2.43k|    {
 1447|  2.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.43k|    {
  443|  2.43k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  18.9k|    {
  352|  18.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  18.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  18.9k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  18.9k|    {
  343|  18.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  18.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  18.9k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|    984|    {
 1447|    984|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    984|    {
  443|    984|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   120k|    {
 1148|   120k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   119k|    {
 1401|   119k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   119k|    {
  433|   119k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|   120k|    {
 1569|   120k|        return has_value();
 1570|   120k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   240k|    {
  481|   240k|        return m_has_value;
  482|   240k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|    984|    {
 1575|    984|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    984|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    984|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    984|        return this->get_unexpected().error();
 1577|    984|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|    984|    {
  464|    984|        return m_unexpected;
  465|    984|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   119k|    {
 1634|   119k|        return std::move(value());
 1635|   119k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   119k|    {
 1598|   119k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   119k|        return this->get_value();
 1600|   119k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   119k|    {
  447|   119k|        return m_value;
  448|   119k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  5.79M|    {
 3305|  5.79M|        return m_sentinel;
 3306|  5.79M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3300|   154k|    {
 3301|   154k|        return m_iterator;
 3302|   154k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3304|   154k|    {
 3305|   154k|        return m_sentinel;
 3306|   154k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|   365k|    {
 1569|   365k|        return has_value();
 1570|   365k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|   730k|    {
  481|   730k|        return m_has_value;
  482|   730k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|  11.8k|    {
 1575|  11.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  11.8k|        return this->get_unexpected().error();
 1577|  11.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  11.8k|    {
  464|  11.8k|        return m_unexpected;
  465|  11.8k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|   293k|    {
 1634|   293k|        return std::move(value());
 1635|   293k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|   353k|    {
 1598|   353k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   353k|        return this->get_value();
 1600|   353k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   353k|    {
  447|   353k|        return m_value;
  448|   353k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   295k|{
  322|   295k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   295k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|   147k|    {
 3287|   147k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|  1.93M|    {
 4262|  1.93M|        return !x.is_at_end();
 4263|  1.93M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  58.9k|    {
 1401|  58.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  58.9k|    {
  433|  58.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  4.77k|    {
 1447|  4.77k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  4.77k|    {
  443|  4.77k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   295k|    {
 1148|   295k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|   290k|    {
 1401|   290k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   290k|    {
  433|   290k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  1.90k|    {
 1447|  1.90k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.90k|    {
  443|  1.90k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   238k|    {
 1148|   238k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|   236k|    {
 1401|   236k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   236k|    {
  433|   236k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|   238k|    {
 1569|   238k|        return has_value();
 1570|   238k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|   477k|    {
  481|   477k|        return m_has_value;
  482|   477k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1574|  1.90k|    {
 1575|  1.90k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.90k|        return this->get_unexpected().error();
 1577|  1.90k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.90k|    {
  464|  1.90k|        return m_unexpected;
  465|  1.90k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|   236k|    {
 1634|   236k|        return std::move(value());
 1635|   236k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|   236k|    {
 1598|   236k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   236k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   236k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   236k|        return this->get_value();
 1600|   236k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|   236k|    {
  447|   236k|        return m_value;
  448|   236k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   877k|    {
 2826|   877k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   877k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   877k|    {
 2807|   877k|        return t.data();
 2808|   877k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|   116k|    {
 1401|   116k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   116k|    {
  433|   116k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|  81.0k|    {
 1447|  81.0k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  81.0k|    {
  443|  81.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  51.0M|    {
 1148|  51.0M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|  50.9M|    {
 1401|  50.9M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  50.9M|    {
  433|  50.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  59.7k|    {
 1624|  59.7k|        return value();
 1625|  59.7k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|   118k|    {
 1624|   118k|        return value();
 1625|   118k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1400|    754|    {
 1401|    754|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  432|    754|    {
  433|    754|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1400|  1.50k|    {
 1401|  1.50k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.50k|    {
  433|  1.50k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  19.2k|    {
 1447|  19.2k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4209|   385M|    {
 4210|   385M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   385M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   385M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|   385M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 385M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|   385M|        auto res = read_at_position();
 4219|   385M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   385M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   385M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|   385M|        return parent()->get_character_at(m_position);
 4221|   385M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4274|  1.05G|    {
 4275|  1.05G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  1.05G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|  1.05G|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 1.05G]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|  1.05G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  1.05G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 867M, False: 192M]
  |  |  ------------------
  ------------------
 4282|   867M|            return true;
 4283|   867M|        }
 4284|       |
 4285|   384M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 192M, False: 192M]
  ------------------
 4286|   192M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 26.0k, False: 192M]
  ------------------
 4287|  26.0k|                return false;
 4288|  26.0k|            }
 4289|   192M|        }
 4290|   192M|        return true;
 4291|   192M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4051|  1.44G|    {
 4052|  1.44G|        return m_putback_buffer.size() + m_current_view.size();
 4053|  1.44G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4082|   385M|    {
 4083|   385M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   385M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 209M, False: 175M]
  |  |  ------------------
  ------------------
 4084|   385M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|   209M|            return m_putback_buffer[pos];
 4086|   209M|        }
 4087|   175M|        const auto start = pos - m_putback_buffer.size();
 4088|   175M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   175M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   175M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|   175M|        return m_current_view[start];
 4090|   175M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4195|   256M|    {
 4196|   256M|        ++m_position;
 4197|   256M|        (void)read_at_position();
 4198|   256M|        return *this;
 4199|   256M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4244|  70.5M|    {
 4245|  70.5M|        return !(lhs == rhs);
 4246|  70.5M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4239|  70.5M|    {
 4240|  70.5M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 70.5M, False: 0]
  |  Branch (4240:46): [True: 6.74M, False: 63.7M]
  ------------------
 4241|  70.5M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|   219M|    {
 4251|   219M|        return x.is_at_end();
 4252|   219M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4294|   418M|    {
 4295|   418M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 418M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|   418M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 418M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|   418M|        return !read_at_position();
 4302|   418M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|   954M|{
 3778|   954M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|   954M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|   954M|    }
 3781|   954M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|   954M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|   954M|    }
 3784|   954M|    else {
 3785|       |        // utf-32
 3786|   954M|        static_assert(sizeof(U) == 4);
 3787|   954M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   954M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   954M|        return 1;
 3789|   954M|    }
 3790|   954M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|  16.8M|    {
 1401|  16.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  16.8M|    {
  433|  16.8M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.8M|    {
 1148|  16.8M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  3.90k|    {
 1447|  3.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  3.90k|    {
  443|  3.90k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|   954M|{
 3984|   954M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|   954M|        return decode_utf8_code_point_exhaustive(input);
 3986|   954M|    }
 3987|   954M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|   954M|        return decode_utf16_code_point_exhaustive(input);
 3989|   954M|    }
 3990|   954M|    else {
 3991|   954M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   954M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   954M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|   954M|        auto cp = static_cast<char32_t>(input.front());
 3993|   954M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   954M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.03M, False: 953M]
  |  |  ------------------
  ------------------
 3994|  1.03M|            return invalid_code_point;
 3995|  1.03M|        }
 3996|   953M|        return cp;
 3997|   954M|    }
 3998|   954M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  1.56k|    {
 1447|  1.56k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.56k|    {
  443|  1.56k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  13.4M|    {
 1148|  13.4M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  13.4M|    {
 1401|  13.4M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  13.4M|    {
  433|  13.4M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|  13.4M|    {
 1569|  13.4M|        return has_value();
 1570|  13.4M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  26.9M|    {
  481|  26.9M|        return m_has_value;
  482|  26.9M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|  1.56k|    {
 1575|  1.56k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.56k|        return this->get_unexpected().error();
 1577|  1.56k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.56k|    {
  464|  1.56k|        return m_unexpected;
  465|  1.56k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  13.4M|    {
 1634|  13.4M|        return std::move(value());
 1635|  13.4M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  13.4M|    {
 1598|  13.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  13.4M|        return this->get_value();
 1600|  13.4M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  13.4M|    {
  447|  13.4M|        return m_value;
  448|  13.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|   668M|    {
 3305|   668M|        return m_sentinel;
 3306|   668M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3300|  16.8M|    {
 3301|  16.8M|        return m_iterator;
 3302|  16.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3304|  16.8M|    {
 3305|  16.8M|        return m_sentinel;
 3306|  16.8M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|  40.4M|    {
 1569|  40.4M|        return has_value();
 1570|  40.4M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  80.9M|    {
  481|  80.9M|        return m_has_value;
  482|  80.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|  23.1k|    {
 1575|  23.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  23.1k|        return this->get_unexpected().error();
 1577|  23.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  23.1k|    {
  464|  23.1k|        return m_unexpected;
  465|  23.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|  33.6M|    {
 1634|  33.6M|        return std::move(value());
 1635|  33.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|  40.4M|    {
 1598|  40.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  40.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  40.4M|        return this->get_value();
 1600|  40.4M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  40.4M|    {
  447|  40.4M|        return m_value;
  448|  40.4M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|   377M|{
 3670|   377M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|   377M|                                          decltype(first), decltype(last)> &&
 3672|   377M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|   377M|        return {first, last};
 3674|   377M|    }
 3675|   377M|    else {
 3676|   377M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|   377M|                                       to_address(first), to_address(last)))};
 3678|   377M|    }
 3679|   377M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  1.13G|{
  322|  1.13G|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.13G|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.13G|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  1.16G|{
  302|  1.16G|    return p;
  303|  1.16G|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  33.7M|{
  322|  33.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  33.7M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|  16.8M|    {
 3287|  16.8M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|   199M|    {
 4262|   199M|        return !x.is_at_end();
 4263|   199M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  6.73M|    {
 1401|  6.73M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  6.73M|    {
  433|  6.73M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  7.81k|    {
 1447|  7.81k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  7.81k|    {
  443|  7.81k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  33.7M|    {
 1148|  33.7M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  33.7M|    {
 1401|  33.7M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  33.7M|    {
  433|  33.7M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  67.4M|    {
  481|  67.4M|        return m_has_value;
  482|  67.4M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  33.7M|    {
 1598|  33.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  33.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  33.7M|        return this->get_value();
 1600|  33.7M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  33.7M|    {
  447|  33.7M|        return m_value;
  448|  33.7M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  3.12k|    {
 1447|  3.12k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  3.12k|    {
  443|  3.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  26.9M|    {
 1148|  26.9M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  26.9M|    {
 1401|  26.9M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  26.9M|    {
  433|  26.9M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  33.7M|    {
 1808|  33.7M|        return detail::transform_error_impl(std::move(*this),
 1809|  33.7M|                                            std::forward<F>(f));
 1810|  33.7M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  33.7M|{
 1294|  33.7M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  33.7M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  33.7M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  33.7M|            return result(*std::forward<Exp>(exp));
 1298|  33.7M|        }
 1299|       |
 1300|  33.7M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  33.7M|        return result(unexpect, monostate{});
 1302|  33.7M|    }
 1303|  33.7M|    else {
 1304|  33.7M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  33.7M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  33.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.7M, False: 7.81k]
  |  |  ------------------
  ------------------
 1306|  33.7M|                   ? result(*std::forward<Exp>(exp))
 1307|  33.7M|                   : result(unexpect,
 1308|  7.81k|                            trivial_invoke(std::forward<F>(f),
 1309|  7.81k|                                           std::forward<Exp>(exp).error()));
 1310|  33.7M|    }
 1311|  33.7M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  33.7M|    {
 1634|  33.7M|        return std::move(value());
 1635|  33.7M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1584|  7.81k|    {
 1585|  7.81k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  7.81k|        return std::move(this->get_unexpected().error());
 1587|  7.81k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  7.81k|    {
  464|  7.81k|        return m_unexpected;
  465|  7.81k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  7.81k|    {
 1457|  7.81k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|  26.9M|    {
 1569|  26.9M|        return has_value();
 1570|  26.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  53.9M|    {
  481|  53.9M|        return m_has_value;
  482|  53.9M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1574|  3.12k|    {
 1575|  3.12k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  3.12k|        return this->get_unexpected().error();
 1577|  3.12k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  3.12k|    {
  464|  3.12k|        return m_unexpected;
  465|  3.12k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  26.9M|    {
 1634|  26.9M|        return std::move(value());
 1635|  26.9M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  26.9M|    {
 1598|  26.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  26.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  26.9M|        return this->get_value();
 1600|  26.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  26.9M|    {
  447|  26.9M|        return m_value;
  448|  26.9M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  33.7M|    {
 2826|  33.7M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  33.7M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  33.7M|    {
 2807|  33.7M|        return t.data();
 2808|  33.7M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  13.4M|    {
 1401|  13.4M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  13.4M|    {
  433|  13.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  6.73M|    {
 1624|  6.73M|        return value();
 1625|  6.73M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  13.4M|    {
 1624|  13.4M|        return value();
 1625|  13.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1400|     30|    {
 1401|     30|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  432|     30|    {
  433|     30|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1400|     60|    {
 1401|     60|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|     60|    {
  433|     60|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|   374k|    {
 5427|   374k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   374k|        return static_cast<std::size_t>(m_desc &
 5432|   374k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   374k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|   749k|    {
 5452|   749k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   749k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|   374k|    {
 5395|   374k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|   374k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|   374k|        const auto t = type(id);
 5407|   374k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|   374k|        basic_scan_arg<Context> arg;
 5412|   374k|        arg.m_type = t;
 5413|   374k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 374k, False: 0]
  ------------------
 5414|   374k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|   374k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|   374k|        return arg;
 5420|   374k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|   374k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|   374k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|   374k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|   374k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|   374k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|   374k|    {
 5456|   374k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|   374k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|   652k|    {
 5208|   652k|        return m_type != detail::arg_type::none_type;
 5209|   652k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   177k|{
 8378|   177k|#define SCN_VISIT(Type)                                         \
 8379|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   177k|    }                                                           \
 8382|   177k|    else {                                                      \
 8383|   177k|        return vis(monostate_val);                              \
 8384|   177k|    }
 8385|       |
 8386|   177k|    monostate monostate_val{};
 8387|       |
 8388|   177k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 177k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 177k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 177k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 177k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 177k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 177k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 177k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 177k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 177k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 177k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 177k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 177k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 177k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 177k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 177k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 177k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 177k]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 177k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  88.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 88.6k, False: 88.6k]
  ------------------
 8426|  88.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  88.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  88.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  88.6k|    }                                                           \
  |  | 8382|  88.6k|    else {                                                      \
  |  | 8383|  88.6k|        return vis(monostate_val);                              \
  |  | 8384|  88.6k|    }
  ------------------
 8427|  88.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 88.6k, False: 88.6k]
  ------------------
 8428|  88.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  88.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  88.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  88.6k|    }                                                           \
  |  | 8382|  88.6k|    else {                                                      \
  |  | 8383|  88.6k|        return vis(monostate_val);                              \
  |  | 8384|  88.6k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 177k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 177k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 177k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 177k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 177k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 177k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 177k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   177k|            SCN_CLANG_POP
 8456|   177k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|   196k|    {
 5506|   196k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|  65.9k|    {
 8099|  65.9k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|   196k|    {
 8017|   196k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4314|   155k|{
 4315|   155k|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 155k]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|   155k|    return ranges::subrange{forward_iterator{this, 0},
 4320|   155k|                            ranges::default_sentinel};
 4321|   155k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4147|   155k|    {
 4148|   155k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|   155k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|   155k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  89.8k|{
 8378|  89.8k|#define SCN_VISIT(Type)                                         \
 8379|  89.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  89.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  89.8k|    }                                                           \
 8382|  89.8k|    else {                                                      \
 8383|  89.8k|        return vis(monostate_val);                              \
 8384|  89.8k|    }
 8385|       |
 8386|  89.8k|    monostate monostate_val{};
 8387|       |
 8388|  89.8k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 89.8k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 89.8k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 89.8k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 89.8k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 89.8k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 89.8k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 89.8k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 89.8k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 89.8k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 89.8k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 89.8k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 89.8k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 89.8k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 89.8k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 89.8k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 89.8k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 89.8k]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 89.8k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 89.8k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|  89.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 89.8k, False: 0]
  ------------------
 8428|  89.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  89.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  89.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  89.8k|    }                                                           \
  |  | 8382|  89.8k|    else {                                                      \
  |  | 8383|  89.8k|        return vis(monostate_val);                              \
  |  | 8384|  89.8k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 89.8k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 89.8k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 89.8k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 89.8k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 89.8k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 89.8k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 89.8k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  89.8k|            SCN_CLANG_POP
 8456|  89.8k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   130k|{
 7005|   130k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   130k|    handler.check_args_exhausted();
 7007|   130k|    return handler.get_error();
 7008|   130k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   130k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   130k|    auto begin = format.data();
 6974|   130k|    auto it = begin;
 6975|   130k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   247k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 130k, False: 116k]
  ------------------
 6978|   130k|        const auto ch = *it++;
 6979|   130k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 130k, False: 0]
  ------------------
 6980|   130k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   130k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   130k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 13.8k, False: 116k]
  ------------------
 6984|  13.8k|                return;
 6985|  13.8k|            }
 6986|   130k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|   130k|    }
 6997|       |
 6998|   116k|    handler.on_literal_text(begin, end);
 6999|   116k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|   130k|{
 6903|   130k|    struct id_adapter {
 6904|   130k|        constexpr void operator()()
 6905|   130k|        {
 6906|   130k|            arg_id = handler.on_arg_id();
 6907|   130k|        }
 6908|   130k|        constexpr void operator()(std::size_t id)
 6909|   130k|        {
 6910|   130k|            arg_id = handler.on_arg_id(id);
 6911|   130k|        }
 6912|       |
 6913|   130k|        constexpr void on_error(const char* msg)
 6914|   130k|        {
 6915|   130k|            SCN_UNLIKELY_ATTR
 6916|   130k|            handler.on_error(msg);
 6917|   130k|        }
 6918|       |
 6919|   130k|        Handler& handler;
 6920|   130k|        std::size_t arg_id;
 6921|   130k|    };
 6922|       |
 6923|   130k|    ++begin;
 6924|   130k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|   130k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 130k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|   130k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 130k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|   130k|    else {
 6936|   130k|        auto adapter = id_adapter{handler, 0};
 6937|   130k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|   130k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|   130k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 130k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|   130k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 130k, False: 0]
  ------------------
 6948|   130k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|   130k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|   130k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.54k, False: 125k]
  |  |  |  Branch (859:45): [True: 0, False: 130k]
  |  |  |  Branch (859:45): [True: 5.54k, False: 125k]
  |  |  ------------------
  ------------------
 6954|  5.54k|                handler.on_error("Unknown format specifier");
 6955|  5.54k|                return begin;
 6956|  5.54k|            }
 6957|   130k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|   130k|    }
 6964|   125k|    return begin + 1;
 6965|   130k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|   196k|    {
 8000|   196k|        return m_args.get(id);
 8001|   196k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|   188k|    {
 8010|   188k|        return m_locale;
 8011|   188k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|   196k|    {
 5527|   196k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 196k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|   196k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|   196k|        do_check_arg_id(id);
 5535|   196k|        return id;
 5536|   196k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|   196k|{
 6015|   196k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|   196k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|   196k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|   130k|{
 6404|   130k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|   130k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 130k, False: 0]
  |  Branch (6405:26): [True: 0, False: 130k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|   130k|    handler();
 6410|   130k|    return begin;
 6411|   130k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6352|  8.31k|{
 6353|  8.31k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  8.31k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  8.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  8.31k|    unsigned long long value = 0;
 6357|  16.6k|    do {
 6358|  16.6k|        value *= 10;
 6359|  16.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  16.6k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 0, False: 16.6k]
  ------------------
 6361|  16.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|      0|            return -1;
 6363|      0|        }
 6364|  16.6k|        ++begin;
 6365|  16.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 16.6k, False: 0]
  |  Branch (6365:30): [True: 16.6k, False: 0]
  |  Branch (6365:47): [True: 8.31k, False: 8.31k]
  ------------------
 6366|  8.31k|    return static_cast<int>(value);
 6367|  8.31k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|   130k|        {
 6906|   130k|            arg_id = handler.on_arg_id();
 6907|   130k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|   393k|    {
 5213|   393k|        return m_type;
 5214|   393k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|   188k|    {
 5522|   188k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|   188k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|   385k|    {
 5511|   385k|        return m_format.data();
 5512|   385k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|   130k|    {
 7083|   130k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|   130k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|   130k|{
 6819|   130k|    auto do_presentation = [&]() -> const CharT* {
 6820|   130k|        if (*begin == CharT{'['}) {
 6821|   130k|            auto set = parse_presentation_set(begin, end, handler);
 6822|   130k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|   130k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|   130k|                return begin;
 6827|   130k|            }
 6828|   130k|            handler.on_character_set_string(set);
 6829|   130k|            return begin;
 6830|   130k|        }
 6831|   130k|        if (*begin == CharT{'/'}) {
 6832|   130k|            return parse_presentation_regex(begin, end, handler);
 6833|   130k|        }
 6834|   130k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   130k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|   130k|            handler.on_error("Invalid type specifier in format string");
 6837|   130k|            return begin;
 6838|   130k|        }
 6839|   130k|        handler.on_type(type);
 6840|   130k|        return begin;
 6841|   130k|    };
 6842|       |
 6843|   130k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 130k, False: 0]
  |  Branch (6843:28): [True: 120k, False: 9.82k]
  ------------------
 6844|   130k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 120k, False: 0]
  |  Branch (6844:36): [True: 118k, False: 2.77k]
  ------------------
 6845|   118k|        return do_presentation();
 6846|   118k|    }
 6847|       |
 6848|  12.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  12.5k|    begin = parse_align(begin, end, handler);
 6854|  12.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  12.5k|    begin = parse_width(begin, end, handler);
 6860|  12.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  12.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 12.5k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  12.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 2.77k, False: 9.82k]
  ------------------
 6879|  2.77k|        handler.on_localized();
 6880|  2.77k|        ++begin;
 6881|  2.77k|    }
 6882|  12.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  12.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 12.5k, False: 0]
  |  Branch (6887:25): [True: 9.82k, False: 2.77k]
  ------------------
 6888|  9.82k|        do_presentation();
 6889|  9.82k|    }
 6890|  12.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  12.5k|    return begin;
 6896|  12.5k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|   181k|{
 6468|   181k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 177k, False: 4.15k]
  |  Branch (6468:33): [True: 177k, False: 0]
  ------------------
 6469|   181k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 4.15k, False: 0]
  |  Branch (6469:33): [True: 4.15k, False: 0]
  ------------------
 6470|   181k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|   128k|    auto do_presentation = [&]() -> const CharT* {
 6820|   128k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 4.28k, False: 123k]
  ------------------
 6821|  4.28k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  4.28k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.28k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|  4.28k|            handler.on_character_set_string(set);
 6829|  4.28k|            return begin;
 6830|  4.28k|        }
 6831|   123k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 123k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|   123k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   123k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 120k]
  |  |  ------------------
  ------------------
 6836|  2.77k|            handler.on_error("Invalid type specifier in format string");
 6837|  2.77k|            return begin;
 6838|  2.77k|        }
 6839|   120k|        handler.on_type(type);
 6840|   120k|        return begin;
 6841|   123k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|  4.28k|{
 6658|  4.28k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  4.28k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  4.28k|    auto start = begin;
 6662|  4.28k|    ++begin;
 6663|       |
 6664|  4.28k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.28k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  4.28k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 0, False: 4.28k]
  ------------------
 6671|      0|        handler.on_charset_inverted();
 6672|      0|        ++begin;
 6673|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 0]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|      0|    }
 6684|  4.28k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 4.28k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  12.8k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 12.8k, False: 0]
  ------------------
 6689|  12.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.8k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|  12.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 4.28k, False: 8.56k]
  ------------------
 6694|  4.28k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  4.28k|        }
 6696|       |
 6697|  8.56k|        parse_presentation_set_literal(begin, end, handler);
 6698|  8.56k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  4.28k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6621|  8.56k|{
 6622|  8.56k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  8.56k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  8.56k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.56k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|  8.56k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 8.56k, False: 0]
  |  Branch (6629:25): [True: 8.56k, False: 0]
  |  Branch (6629:49): [True: 8.56k, False: 0]
  ------------------
 6630|  8.56k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 8.56k, False: 0]
  ------------------
 6631|  8.56k|        ++begin;
 6632|       |
 6633|  8.56k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  8.56k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.56k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  8.56k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.56k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  8.56k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  8.56k|        return;
 6647|  8.56k|    }
 6648|       |
 6649|      0|    handler.on_charset_single(cp_first);
 6650|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6597|  17.1k|{
 6598|  17.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  17.1k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  17.1k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  |  Branch (859:45): [True: 0, False: 17.1k]
  |  |  |  Branch (859:45): [True: 0, False: 17.1k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  17.1k|    const auto cp =
 6607|  17.1k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  17.1k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.1k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|  17.1k|    begin += len;
 6614|  17.1k|    return cp;
 6615|  17.1k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|  6.42k|    {
 6307|  6.42k|        m_specs.charset_string_data = fmt.data();
 6308|  6.42k|        m_specs.charset_string_size = fmt.size();
 6309|  6.42k|        on_type(presentation_type::string_set);
 6310|  6.42k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|   186k|{
 6416|   186k|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 186k]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 186k]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 186k]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 186k]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 186k]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 186k]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 186k]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 186k]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 186k]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 186k]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|      0|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 0, False: 186k]
  ------------------
 6435|      0|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 186k]
  ------------------
 6436|      0|            return presentation_type::float_hex;
 6437|      0|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 0, False: 186k]
  ------------------
 6438|      0|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 186k]
  ------------------
 6439|      0|            return presentation_type::float_scientific;
 6440|      0|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 0, False: 186k]
  ------------------
 6441|      0|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 186k]
  ------------------
 6442|      0|            return presentation_type::float_fixed;
 6443|      0|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 0, False: 186k]
  ------------------
 6444|      0|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 186k]
  ------------------
 6445|      0|            return presentation_type::float_general;
 6446|   177k|        case 's':
  ------------------
  |  Branch (6446:9): [True: 177k, False: 8.31k]
  ------------------
 6447|   177k|            return presentation_type::string;
 6448|  4.15k|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 4.15k, False: 181k]
  ------------------
 6449|  4.15k|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 186k]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 186k]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 186k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 186k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|  4.15k|        default:
  ------------------
  |  Branch (6460:9): [True: 4.15k, False: 181k]
  ------------------
 6461|  4.15k|            return presentation_type::none;
 6462|   186k|    }
 6463|   186k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|  12.5k|{
 6493|  12.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  12.5k|    auto check_align = [](wchar_t ch) {
 6496|  12.5k|        switch (ch) {
 6497|  12.5k|            case L'<':
 6498|  12.5k|                return align_type::left;
 6499|  12.5k|            case L'>':
 6500|  12.5k|                return align_type::right;
 6501|  12.5k|            case L'^':
 6502|  12.5k|                return align_type::center;
 6503|  12.5k|            default:
 6504|  12.5k|                return align_type::none;
 6505|  12.5k|        }
 6506|  12.5k|    };
 6507|       |
 6508|  12.5k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  12.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  25.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  |  Branch (859:45): [True: 0, False: 12.5k]
  |  |  |  Branch (859:45): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6510|  12.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  12.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  12.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  12.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  12.5k|    const auto begin_before_fill = begin;
 6520|  12.5k|    begin += potential_fill_len;
 6521|       |
 6522|  12.5k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 12.5k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  12.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  12.5k|    const auto begin_after_fill = begin;
 6528|  12.5k|    ++begin;
 6529|       |
 6530|  12.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 12.5k, False: 0]
  ------------------
 6531|  12.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  12.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 4.28k, False: 8.31k]
  ------------------
 6536|  4.28k|            return begin_before_fill;
 6537|  4.28k|        }
 6538|  12.5k|    }
 6539|       |
 6540|  8.31k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 8.31k, False: 0]
  ------------------
 6541|  8.31k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 8.31k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  8.31k|        return begin_before_fill;
 6546|  8.31k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  8.31k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|  18.8k|{
 6475|  18.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  18.8k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  18.8k|        return 1;
 6478|  18.8k|    }
 6479|  18.8k|    else {
 6480|  18.8k|        const auto lengths =
 6481|  18.8k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  18.8k|            "\3\4";
 6483|  18.8k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  18.8k|        return len;
 6485|  18.8k|    }
 6486|  18.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  25.1k|    auto check_align = [](wchar_t ch) {
 6496|  25.1k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 25.1k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 25.1k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 25.1k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  25.1k|            default:
  ------------------
  |  Branch (6503:13): [True: 25.1k, False: 0]
  ------------------
 6504|  25.1k|                return align_type::none;
 6505|  25.1k|        }
 6506|  25.1k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|  12.5k|{
 6558|  12.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  12.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 12.5k, False: 0]
  |  Branch (6560:33): [True: 5.54k, False: 7.05k]
  ------------------
 6561|  5.54k|        int width = parse_simple_int(begin, end);
 6562|  5.54k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.54k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.54k, False: 0]
  |  |  ------------------
  ------------------
 6563|  5.54k|            handler.on_width(width);
 6564|  5.54k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  5.54k|    }
 6570|  12.5k|    return begin;
 6571|  12.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|  2.77k|    {
 7088|  2.77k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  2.77k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 2.77k, False: 0]
  ------------------
 7090|  2.77k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 2.77k, False: 0]
  ------------------
 7091|  2.77k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 2.77k, False: 0]
  ------------------
 7092|  2.77k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 2.77k, False: 0]
  ------------------
 7093|  2.77k|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|  2.77k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|  2.77k|        }
 7098|       |
 7099|      0|        Handler::on_localized();
 7100|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   125k|{
 8378|   125k|#define SCN_VISIT(Type)                                         \
 8379|   125k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   125k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   125k|    }                                                           \
 8382|   125k|    else {                                                      \
 8383|   125k|        return vis(monostate_val);                              \
 8384|   125k|    }
 8385|       |
 8386|   125k|    monostate monostate_val{};
 8387|       |
 8388|   125k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 125k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 125k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 125k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 125k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 125k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 125k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 125k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 125k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 125k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 125k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 125k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 125k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 125k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 125k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 125k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 125k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 125k]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 125k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  62.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 62.6k, False: 62.6k]
  ------------------
 8426|  62.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  62.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  62.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  62.6k|    }                                                           \
  |  | 8382|  62.6k|    else {                                                      \
  |  | 8383|  62.6k|        return vis(monostate_val);                              \
  |  | 8384|  62.6k|    }
  ------------------
 8427|  62.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 62.6k, False: 62.6k]
  ------------------
 8428|  62.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  62.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  62.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  62.6k|    }                                                           \
  |  | 8382|  62.6k|    else {                                                      \
  |  | 8383|  62.6k|        return vis(monostate_val);                              \
  |  | 8384|  62.6k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 125k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 125k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 125k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 125k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 125k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 125k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 125k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   125k|            SCN_CLANG_POP
 8456|   125k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  65.9k|{
 7005|  65.9k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  65.9k|    handler.check_args_exhausted();
 7007|  65.9k|    return handler.get_error();
 7008|  65.9k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  65.9k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  65.9k|    auto begin = format.data();
 6974|  65.9k|    auto it = begin;
 6975|  65.9k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   124k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 65.9k, False: 58.9k]
  ------------------
 6978|  65.9k|        const auto ch = *it++;
 6979|  65.9k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 65.9k, False: 0]
  ------------------
 6980|  65.9k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  65.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  65.9k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 6.93k, False: 58.9k]
  ------------------
 6984|  6.93k|                return;
 6985|  6.93k|            }
 6986|  65.9k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  65.9k|    }
 6997|       |
 6998|  58.9k|    handler.on_literal_text(begin, end);
 6999|  58.9k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8135|  58.9k|    {
 8136|  58.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  58.9k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6902|  65.9k|{
 6903|  65.9k|    struct id_adapter {
 6904|  65.9k|        constexpr void operator()()
 6905|  65.9k|        {
 6906|  65.9k|            arg_id = handler.on_arg_id();
 6907|  65.9k|        }
 6908|  65.9k|        constexpr void operator()(std::size_t id)
 6909|  65.9k|        {
 6910|  65.9k|            arg_id = handler.on_arg_id(id);
 6911|  65.9k|        }
 6912|       |
 6913|  65.9k|        constexpr void on_error(const char* msg)
 6914|  65.9k|        {
 6915|  65.9k|            SCN_UNLIKELY_ATTR
 6916|  65.9k|            handler.on_error(msg);
 6917|  65.9k|        }
 6918|       |
 6919|  65.9k|        Handler& handler;
 6920|  65.9k|        std::size_t arg_id;
 6921|  65.9k|    };
 6922|       |
 6923|  65.9k|    ++begin;
 6924|  65.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.9k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  65.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 65.9k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  65.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 65.9k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  65.9k|    else {
 6936|  65.9k|        auto adapter = id_adapter{handler, 0};
 6937|  65.9k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  65.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.9k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  65.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 65.9k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  65.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 65.9k, False: 0]
  ------------------
 6948|  65.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.9k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  65.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  65.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 63.1k]
  |  |  |  Branch (859:45): [True: 0, False: 65.9k]
  |  |  |  Branch (859:45): [True: 2.77k, False: 63.1k]
  |  |  ------------------
  ------------------
 6954|  2.77k|                handler.on_error("Unknown format specifier");
 6955|  2.77k|                return begin;
 6956|  2.77k|            }
 6957|  65.9k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  65.9k|    }
 6964|  63.1k|    return begin + 1;
 6965|  65.9k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  65.9k|{
 6404|  65.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  65.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  65.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 65.9k, False: 0]
  |  Branch (6405:26): [True: 0, False: 65.9k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  65.9k|    handler();
 6410|  65.9k|    return begin;
 6411|  65.9k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  65.9k|        {
 6906|  65.9k|            arg_id = handler.on_arg_id();
 6907|  65.9k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|  65.9k|    {
 7083|  65.9k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  65.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  65.9k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6818|  65.9k|{
 6819|  65.9k|    auto do_presentation = [&]() -> const CharT* {
 6820|  65.9k|        if (*begin == CharT{'['}) {
 6821|  65.9k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  65.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  65.9k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  65.9k|                return begin;
 6827|  65.9k|            }
 6828|  65.9k|            handler.on_character_set_string(set);
 6829|  65.9k|            return begin;
 6830|  65.9k|        }
 6831|  65.9k|        if (*begin == CharT{'/'}) {
 6832|  65.9k|            return parse_presentation_regex(begin, end, handler);
 6833|  65.9k|        }
 6834|  65.9k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  65.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  65.9k|            handler.on_error("Invalid type specifier in format string");
 6837|  65.9k|            return begin;
 6838|  65.9k|        }
 6839|  65.9k|        handler.on_type(type);
 6840|  65.9k|        return begin;
 6841|  65.9k|    };
 6842|       |
 6843|  65.9k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 65.9k, False: 0]
  |  Branch (6843:28): [True: 60.9k, False: 4.91k]
  ------------------
 6844|  65.9k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 60.9k, False: 0]
  |  Branch (6844:36): [True: 59.6k, False: 1.38k]
  ------------------
 6845|  59.6k|        return do_presentation();
 6846|  59.6k|    }
 6847|       |
 6848|  6.29k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  6.29k|    begin = parse_align(begin, end, handler);
 6854|  6.29k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  6.29k|    begin = parse_width(begin, end, handler);
 6860|  6.29k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  6.29k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 6.29k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  6.29k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 1.38k, False: 4.91k]
  ------------------
 6879|  1.38k|        handler.on_localized();
 6880|  1.38k|        ++begin;
 6881|  1.38k|    }
 6882|  6.29k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  6.29k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 6.29k, False: 0]
  |  Branch (6887:25): [True: 4.91k, False: 1.38k]
  ------------------
 6888|  4.91k|        do_presentation();
 6889|  4.91k|    }
 6890|  6.29k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  6.29k|    return begin;
 6896|  6.29k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|  64.5k|    auto do_presentation = [&]() -> const CharT* {
 6820|  64.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 2.14k, False: 62.3k]
  ------------------
 6821|  2.14k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  2.14k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.14k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|  2.14k|            handler.on_character_set_string(set);
 6829|  2.14k|            return begin;
 6830|  2.14k|        }
 6831|  62.3k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 62.3k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  62.3k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  62.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 60.9k]
  |  |  ------------------
  ------------------
 6836|  1.38k|            handler.on_error("Invalid type specifier in format string");
 6837|  1.38k|            return begin;
 6838|  1.38k|        }
 6839|  60.9k|        handler.on_type(type);
 6840|  60.9k|        return begin;
 6841|  62.3k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6657|  2.14k|{
 6658|  2.14k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  2.14k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  2.14k|    auto start = begin;
 6662|  2.14k|    ++begin;
 6663|       |
 6664|  2.14k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.14k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  2.14k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 0, False: 2.14k]
  ------------------
 6671|      0|        handler.on_charset_inverted();
 6672|      0|        ++begin;
 6673|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 0]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|      0|    }
 6684|  2.14k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 2.14k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  6.42k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 6.42k, False: 0]
  ------------------
 6689|  6.42k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  6.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.42k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|  6.42k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 2.14k, False: 4.28k]
  ------------------
 6694|  2.14k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  2.14k|        }
 6696|       |
 6697|  4.28k|        parse_presentation_set_literal(begin, end, handler);
 6698|  4.28k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  2.14k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6621|  4.28k|{
 6622|  4.28k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  4.28k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  4.28k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.28k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|  4.28k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 4.28k, False: 0]
  |  Branch (6629:25): [True: 4.28k, False: 0]
  |  Branch (6629:49): [True: 4.28k, False: 0]
  ------------------
 6630|  4.28k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 4.28k, False: 0]
  ------------------
 6631|  4.28k|        ++begin;
 6632|       |
 6633|  4.28k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  4.28k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.28k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  4.28k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.28k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  4.28k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  4.28k|        return;
 6647|  4.28k|    }
 6648|       |
 6649|      0|    handler.on_charset_single(cp_first);
 6650|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6597|  8.56k|{
 6598|  8.56k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  8.56k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  8.56k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.56k]
  |  |  |  Branch (859:45): [True: 0, False: 8.56k]
  |  |  |  Branch (859:45): [True: 0, False: 8.56k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  8.56k|    const auto cp =
 6607|  8.56k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  8.56k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  8.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.56k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|  8.56k|    begin += len;
 6614|  8.56k|    return cp;
 6615|  8.56k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6492|  6.29k|{
 6493|  6.29k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  6.29k|    auto check_align = [](wchar_t ch) {
 6496|  6.29k|        switch (ch) {
 6497|  6.29k|            case L'<':
 6498|  6.29k|                return align_type::left;
 6499|  6.29k|            case L'>':
 6500|  6.29k|                return align_type::right;
 6501|  6.29k|            case L'^':
 6502|  6.29k|                return align_type::center;
 6503|  6.29k|            default:
 6504|  6.29k|                return align_type::none;
 6505|  6.29k|        }
 6506|  6.29k|    };
 6507|       |
 6508|  6.29k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  6.29k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  |  Branch (859:45): [True: 0, False: 6.29k]
  |  |  |  Branch (859:45): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 6510|  6.29k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  6.29k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  6.29k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  6.29k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  6.29k|    const auto begin_before_fill = begin;
 6520|  6.29k|    begin += potential_fill_len;
 6521|       |
 6522|  6.29k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 6.29k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  6.29k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  6.29k|    const auto begin_after_fill = begin;
 6528|  6.29k|    ++begin;
 6529|       |
 6530|  6.29k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 6.29k, False: 0]
  ------------------
 6531|  6.29k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.29k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  6.29k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 2.14k, False: 4.15k]
  ------------------
 6536|  2.14k|            return begin_before_fill;
 6537|  2.14k|        }
 6538|  6.29k|    }
 6539|       |
 6540|  4.15k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 4.15k, False: 0]
  ------------------
 6541|  4.15k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 4.15k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  4.15k|        return begin_before_fill;
 6546|  4.15k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  4.15k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|  12.5k|    auto check_align = [](wchar_t ch) {
 6496|  12.5k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 12.5k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 12.5k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 12.5k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  12.5k|            default:
  ------------------
  |  Branch (6503:13): [True: 12.5k, False: 0]
  ------------------
 6504|  12.5k|                return align_type::none;
 6505|  12.5k|        }
 6506|  12.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6557|  6.29k|{
 6558|  6.29k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  6.29k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 6.29k, False: 0]
  |  Branch (6560:33): [True: 2.77k, False: 3.52k]
  ------------------
 6561|  2.77k|        int width = parse_simple_int(begin, end);
 6562|  2.77k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  2.77k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.77k, False: 0]
  |  |  ------------------
  ------------------
 6563|  2.77k|            handler.on_width(width);
 6564|  2.77k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  2.77k|    }
 6570|  6.29k|    return begin;
 6571|  6.29k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7087|  1.38k|    {
 7088|  1.38k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  1.38k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 1.38k, False: 0]
  ------------------
 7090|  1.38k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 1.38k, False: 0]
  ------------------
 7091|  1.38k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 1.38k, False: 0]
  ------------------
 7092|  1.38k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 1.38k, False: 0]
  ------------------
 7093|  1.38k|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|  1.38k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|  1.38k|        }
 7098|       |
 7099|      0|        Handler::on_localized();
 7100|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  63.1k|{
 8378|  63.1k|#define SCN_VISIT(Type)                                         \
 8379|  63.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  63.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  63.1k|    }                                                           \
 8382|  63.1k|    else {                                                      \
 8383|  63.1k|        return vis(monostate_val);                              \
 8384|  63.1k|    }
 8385|       |
 8386|  63.1k|    monostate monostate_val{};
 8387|       |
 8388|  63.1k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 63.1k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 63.1k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 63.1k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 63.1k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 63.1k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 63.1k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 63.1k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 63.1k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 63.1k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 63.1k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 63.1k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 63.1k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 63.1k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 63.1k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 63.1k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 63.1k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 63.1k]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 63.1k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 63.1k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|  63.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 63.1k, False: 0]
  ------------------
 8428|  63.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  63.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  63.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  63.1k|    }                                                           \
  |  | 8382|  63.1k|    else {                                                      \
  |  | 8383|  63.1k|        return vis(monostate_val);                              \
  |  | 8384|  63.1k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 63.1k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 63.1k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 63.1k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 63.1k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 63.1k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 63.1k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 63.1k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  63.1k|            SCN_CLANG_POP
 8456|  63.1k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4046|  9.00k|    {
 4047|  9.00k|        sync(0);
 4048|  9.00k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|  40.4M|    {
 5427|  40.4M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  40.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 40.4M]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|  40.4M|        return static_cast<std::size_t>(m_desc &
 5432|  40.4M|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|  40.4M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|  80.9M|    {
 5452|  80.9M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|  80.9M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|  40.4M|    {
 5395|  40.4M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  40.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 40.4M]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  40.4M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  40.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 40.4M]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|  40.4M|        const auto t = type(id);
 5407|  40.4M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  40.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 40.4M]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|  40.4M|        basic_scan_arg<Context> arg;
 5412|  40.4M|        arg.m_type = t;
 5413|  40.4M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 40.4M, False: 0]
  ------------------
 5414|  40.4M|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  40.4M|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  40.4M|        return arg;
 5420|  40.4M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|  40.4M|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  40.4M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  40.4M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  40.4M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  40.4M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|  40.4M|    {
 5456|  40.4M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  40.4M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|  70.8M|    {
 5208|  70.8M|        return m_type != detail::arg_type::none_type;
 5209|  70.8M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  20.2M|{
 8378|  20.2M|#define SCN_VISIT(Type)                                         \
 8379|  20.2M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  20.2M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  20.2M|    }                                                           \
 8382|  20.2M|    else {                                                      \
 8383|  20.2M|        return vis(monostate_val);                              \
 8384|  20.2M|    }
 8385|       |
 8386|  20.2M|    monostate monostate_val{};
 8387|       |
 8388|  20.2M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 20.2M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 20.2M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 20.2M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 20.2M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 20.2M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 20.2M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 20.2M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 20.2M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 20.2M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 20.2M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 20.2M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 20.2M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 20.2M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 20.2M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 20.2M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 20.2M]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 20.2M]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 20.2M]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 20.2M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 20.2M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|  10.1M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 10.1M, False: 10.1M]
  ------------------
 8430|  10.1M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|  10.1M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.1M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.1M|    }                                                           \
  |  | 8382|  10.1M|    else {                                                      \
  |  | 8383|  10.1M|        return vis(monostate_val);                              \
  |  | 8384|  10.1M|    }
  ------------------
 8431|  10.1M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 10.1M, False: 10.1M]
  ------------------
 8432|  10.1M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  10.1M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.1M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.1M|    }                                                           \
  |  | 8382|  10.1M|    else {                                                      \
  |  | 8383|  10.1M|        return vis(monostate_val);                              \
  |  | 8384|  10.1M|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 20.2M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 20.2M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 20.2M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 20.2M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 20.2M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  20.2M|            SCN_CLANG_POP
 8456|  20.2M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|  20.2M|    {
 5506|  20.2M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|  6.75M|    {
 8099|  6.75M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|  20.2M|    {
 8017|  20.2M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  13.5M|{
 7005|  13.5M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  13.5M|    handler.check_args_exhausted();
 7007|  13.5M|    return handler.get_error();
 7008|  13.5M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  13.5M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  13.5M|    auto begin = format.data();
 6974|  13.5M|    auto it = begin;
 6975|  13.5M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  26.9M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 13.5M, False: 13.4M]
  ------------------
 6978|  13.5M|        const auto ch = *it++;
 6979|  13.5M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 13.5M, False: 0]
  ------------------
 6980|  13.5M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  13.5M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  13.5M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 27.7k, False: 13.4M]
  ------------------
 6984|  27.7k|                return;
 6985|  27.7k|            }
 6986|  13.5M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  13.5M|    }
 6997|       |
 6998|  13.4M|    handler.on_literal_text(begin, end);
 6999|  13.4M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|  13.5M|{
 6903|  13.5M|    struct id_adapter {
 6904|  13.5M|        constexpr void operator()()
 6905|  13.5M|        {
 6906|  13.5M|            arg_id = handler.on_arg_id();
 6907|  13.5M|        }
 6908|  13.5M|        constexpr void operator()(std::size_t id)
 6909|  13.5M|        {
 6910|  13.5M|            arg_id = handler.on_arg_id(id);
 6911|  13.5M|        }
 6912|       |
 6913|  13.5M|        constexpr void on_error(const char* msg)
 6914|  13.5M|        {
 6915|  13.5M|            SCN_UNLIKELY_ATTR
 6916|  13.5M|            handler.on_error(msg);
 6917|  13.5M|        }
 6918|       |
 6919|  13.5M|        Handler& handler;
 6920|  13.5M|        std::size_t arg_id;
 6921|  13.5M|    };
 6922|       |
 6923|  13.5M|    ++begin;
 6924|  13.5M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.5M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  13.5M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 13.5M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  13.5M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 13.5M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  13.5M|    else {
 6936|  13.5M|        auto adapter = id_adapter{handler, 0};
 6937|  13.5M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  13.5M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.5M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  13.5M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 13.5M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  13.5M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 13.5M, False: 0]
  ------------------
 6948|  13.5M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  13.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.5M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  13.5M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  13.5M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  27.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 13.4M]
  |  |  |  Branch (859:45): [True: 0, False: 13.5M]
  |  |  |  Branch (859:45): [True: 11.0k, False: 13.4M]
  |  |  ------------------
  ------------------
 6954|  11.0k|                handler.on_error("Unknown format specifier");
 6955|  11.0k|                return begin;
 6956|  11.0k|            }
 6957|  13.5M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  13.5M|    }
 6964|  13.4M|    return begin + 1;
 6965|  13.5M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|  20.2M|    {
 8000|  20.2M|        return m_args.get(id);
 8001|  20.2M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|  20.2M|    {
 8010|  20.2M|        return m_locale;
 8011|  20.2M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|  20.2M|    {
 5527|  20.2M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  20.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.2M]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  20.2M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  20.2M|        do_check_arg_id(id);
 5535|  20.2M|        return id;
 5536|  20.2M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|  20.2M|{
 6015|  20.2M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  20.2M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  20.2M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  13.5M|{
 6404|  13.5M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  13.5M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 13.5M, False: 0]
  |  Branch (6405:26): [True: 0, False: 13.5M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  13.5M|    handler();
 6410|  13.5M|    return begin;
 6411|  13.5M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6352|  16.6k|{
 6353|  16.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  16.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  16.6k|    unsigned long long value = 0;
 6357|  33.2k|    do {
 6358|  33.2k|        value *= 10;
 6359|  33.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  33.2k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 0, False: 33.2k]
  ------------------
 6361|  33.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|      0|            return -1;
 6363|      0|        }
 6364|  33.2k|        ++begin;
 6365|  33.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 33.2k, False: 0]
  |  Branch (6365:30): [True: 33.2k, False: 0]
  |  Branch (6365:47): [True: 16.6k, False: 16.6k]
  ------------------
 6366|  16.6k|    return static_cast<int>(value);
 6367|  16.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  13.5M|        {
 6906|  13.5M|            arg_id = handler.on_arg_id();
 6907|  13.5M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|  40.5M|    {
 5213|  40.5M|        return m_type;
 5214|  40.5M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|  20.2M|    {
 5522|  20.2M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  20.2M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4314|  16.8M|{
 4315|  16.8M|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 16.8M]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|  16.8M|    return ranges::subrange{forward_iterator{this, 0},
 4320|  16.8M|                            ranges::default_sentinel};
 4321|  16.8M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4147|  16.8M|    {
 4148|  16.8M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  16.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|  16.8M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  16.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|  16.8M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|  40.4M|    {
 5511|  40.4M|        return m_format.data();
 5512|  40.4M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  13.5M|    {
 7083|  13.5M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  13.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  13.5M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|  13.5M|{
 6819|  13.5M|    auto do_presentation = [&]() -> const CharT* {
 6820|  13.5M|        if (*begin == CharT{'['}) {
 6821|  13.5M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  13.5M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  13.5M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  13.5M|                return begin;
 6827|  13.5M|            }
 6828|  13.5M|            handler.on_character_set_string(set);
 6829|  13.5M|            return begin;
 6830|  13.5M|        }
 6831|  13.5M|        if (*begin == CharT{'/'}) {
 6832|  13.5M|            return parse_presentation_regex(begin, end, handler);
 6833|  13.5M|        }
 6834|  13.5M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  13.5M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  13.5M|            handler.on_error("Invalid type specifier in format string");
 6837|  13.5M|            return begin;
 6838|  13.5M|        }
 6839|  13.5M|        handler.on_type(type);
 6840|  13.5M|        return begin;
 6841|  13.5M|    };
 6842|       |
 6843|  13.5M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 13.5M, False: 0]
  |  Branch (6843:28): [True: 13.4M, False: 16.6k]
  ------------------
 6844|  13.5M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 13.4M, False: 0]
  |  Branch (6844:36): [True: 13.4M, False: 5.54k]
  ------------------
 6845|  13.4M|        return do_presentation();
 6846|  13.4M|    }
 6847|       |
 6848|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  22.2k|    begin = parse_align(begin, end, handler);
 6854|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  22.2k|    begin = parse_width(begin, end, handler);
 6860|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  22.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 22.2k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  22.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 5.54k, False: 16.6k]
  ------------------
 6879|  5.54k|        handler.on_localized();
 6880|  5.54k|        ++begin;
 6881|  5.54k|    }
 6882|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  22.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 22.2k, False: 0]
  |  Branch (6887:25): [True: 16.6k, False: 5.54k]
  ------------------
 6888|  16.6k|        do_presentation();
 6889|  16.6k|    }
 6890|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  22.2k|    return begin;
 6896|  22.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|  20.2M|{
 6468|  20.2M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 20.2M, False: 8.31k]
  |  Branch (6468:33): [True: 20.2M, False: 0]
  ------------------
 6469|  20.2M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 8.31k, False: 0]
  |  Branch (6469:33): [True: 8.31k, False: 0]
  ------------------
 6470|  20.2M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  13.4M|    auto do_presentation = [&]() -> const CharT* {
 6820|  13.4M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 5.60k, False: 13.4M]
  ------------------
 6821|  5.60k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  5.60k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.60k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|  5.60k|            handler.on_character_set_string(set);
 6829|  5.60k|            return begin;
 6830|  5.60k|        }
 6831|  13.4M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 13.4M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  13.4M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  13.4M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  13.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.54k, False: 13.4M]
  |  |  ------------------
  ------------------
 6836|  5.54k|            handler.on_error("Invalid type specifier in format string");
 6837|  5.54k|            return begin;
 6838|  5.54k|        }
 6839|  13.4M|        handler.on_type(type);
 6840|  13.4M|        return begin;
 6841|  13.4M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|  5.60k|{
 6658|  5.60k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  5.60k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  5.60k|    auto start = begin;
 6662|  5.60k|    ++begin;
 6663|       |
 6664|  5.60k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.60k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  5.60k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 0, False: 5.60k]
  ------------------
 6671|      0|        handler.on_charset_inverted();
 6672|      0|        ++begin;
 6673|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 0]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|      0|    }
 6684|  5.60k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 5.60k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  16.8k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 16.8k, False: 0]
  ------------------
 6689|  16.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|  16.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 5.60k, False: 11.2k]
  ------------------
 6694|  5.60k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  5.60k|        }
 6696|       |
 6697|  11.2k|        parse_presentation_set_literal(begin, end, handler);
 6698|  11.2k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  5.60k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6621|  11.2k|{
 6622|  11.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  11.2k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  11.2k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|  11.2k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 11.2k, False: 0]
  |  Branch (6629:25): [True: 11.2k, False: 0]
  |  Branch (6629:49): [True: 11.2k, False: 0]
  ------------------
 6630|  11.2k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 11.2k, False: 0]
  ------------------
 6631|  11.2k|        ++begin;
 6632|       |
 6633|  11.2k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  11.2k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  11.2k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  11.2k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  11.2k|        return;
 6647|  11.2k|    }
 6648|       |
 6649|      0|    handler.on_charset_single(cp_first);
 6650|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6597|  22.4k|{
 6598|  22.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  22.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  22.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  44.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.4k]
  |  |  |  Branch (859:45): [True: 0, False: 22.4k]
  |  |  |  Branch (859:45): [True: 0, False: 22.4k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  22.4k|    const auto cp =
 6607|  22.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  22.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  22.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.4k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|  22.4k|    begin += len;
 6614|  22.4k|    return cp;
 6615|  22.4k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|  8.40k|    {
 6307|  8.40k|        m_specs.charset_string_data = fmt.data();
 6308|  8.40k|        m_specs.charset_string_size = fmt.size();
 6309|  8.40k|        on_type(presentation_type::string_set);
 6310|  8.40k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|  20.2M|{
 6416|  20.2M|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 20.2M]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 20.2M]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 20.2M]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 20.2M]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 20.2M]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 20.2M]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 20.2M]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 20.2M]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 20.2M]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 20.2M]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|      0|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 0, False: 20.2M]
  ------------------
 6435|      0|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 20.2M]
  ------------------
 6436|      0|            return presentation_type::float_hex;
 6437|      0|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 0, False: 20.2M]
  ------------------
 6438|      0|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 20.2M]
  ------------------
 6439|      0|            return presentation_type::float_scientific;
 6440|      0|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 0, False: 20.2M]
  ------------------
 6441|      0|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 20.2M]
  ------------------
 6442|      0|            return presentation_type::float_fixed;
 6443|      0|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 0, False: 20.2M]
  ------------------
 6444|      0|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 20.2M]
  ------------------
 6445|      0|            return presentation_type::float_general;
 6446|  20.2M|        case 's':
  ------------------
  |  Branch (6446:9): [True: 20.2M, False: 16.6k]
  ------------------
 6447|  20.2M|            return presentation_type::string;
 6448|  8.31k|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 8.31k, False: 20.2M]
  ------------------
 6449|  8.31k|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 20.2M]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 20.2M]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 20.2M]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 20.2M]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|  8.31k|        default:
  ------------------
  |  Branch (6460:9): [True: 8.31k, False: 20.2M]
  ------------------
 6461|  8.31k|            return presentation_type::none;
 6462|  20.2M|    }
 6463|  20.2M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|  22.2k|{
 6493|  22.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  22.2k|    auto check_align = [](wchar_t ch) {
 6496|  22.2k|        switch (ch) {
 6497|  22.2k|            case L'<':
 6498|  22.2k|                return align_type::left;
 6499|  22.2k|            case L'>':
 6500|  22.2k|                return align_type::right;
 6501|  22.2k|            case L'^':
 6502|  22.2k|                return align_type::center;
 6503|  22.2k|            default:
 6504|  22.2k|                return align_type::none;
 6505|  22.2k|        }
 6506|  22.2k|    };
 6507|       |
 6508|  22.2k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  22.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  |  Branch (859:45): [True: 0, False: 22.2k]
  |  |  |  Branch (859:45): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6510|  22.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  22.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  22.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  22.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  22.2k|    const auto begin_before_fill = begin;
 6520|  22.2k|    begin += potential_fill_len;
 6521|       |
 6522|  22.2k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 22.2k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  22.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  22.2k|    const auto begin_after_fill = begin;
 6528|  22.2k|    ++begin;
 6529|       |
 6530|  22.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 22.2k, False: 0]
  ------------------
 6531|  22.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  22.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 5.60k, False: 16.6k]
  ------------------
 6536|  5.60k|            return begin_before_fill;
 6537|  5.60k|        }
 6538|  22.2k|    }
 6539|       |
 6540|  16.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 16.6k, False: 0]
  ------------------
 6541|  16.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 16.6k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  16.6k|        return begin_before_fill;
 6546|  16.6k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  16.6k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|  33.3k|{
 6475|  33.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  33.3k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  33.3k|        return 1;
 6478|  33.3k|    }
 6479|  33.3k|    else {
 6480|  33.3k|        const auto lengths =
 6481|  33.3k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  33.3k|            "\3\4";
 6483|  33.3k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  33.3k|        return len;
 6485|  33.3k|    }
 6486|  33.3k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  44.4k|    auto check_align = [](wchar_t ch) {
 6496|  44.4k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 44.4k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 44.4k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 44.4k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  44.4k|            default:
  ------------------
  |  Branch (6503:13): [True: 44.4k, False: 0]
  ------------------
 6504|  44.4k|                return align_type::none;
 6505|  44.4k|        }
 6506|  44.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|  22.2k|{
 6558|  22.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  22.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 22.2k, False: 0]
  |  Branch (6560:33): [True: 11.0k, False: 11.1k]
  ------------------
 6561|  11.0k|        int width = parse_simple_int(begin, end);
 6562|  11.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.0k, False: 0]
  |  |  ------------------
  ------------------
 6563|  11.0k|            handler.on_width(width);
 6564|  11.0k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  11.0k|    }
 6570|  22.2k|    return begin;
 6571|  22.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7087|  5.54k|    {
 7088|  5.54k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  5.54k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 5.54k, False: 0]
  ------------------
 7090|  5.54k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 5.54k, False: 0]
  ------------------
 7091|  5.54k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 5.54k, False: 0]
  ------------------
 7092|  5.54k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 5.54k, False: 0]
  ------------------
 7093|  5.54k|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|  5.54k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|  5.54k|        }
 7098|       |
 7099|      0|        Handler::on_localized();
 7100|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  13.4M|{
 8378|  13.4M|#define SCN_VISIT(Type)                                         \
 8379|  13.4M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  13.4M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  13.4M|    }                                                           \
 8382|  13.4M|    else {                                                      \
 8383|  13.4M|        return vis(monostate_val);                              \
 8384|  13.4M|    }
 8385|       |
 8386|  13.4M|    monostate monostate_val{};
 8387|       |
 8388|  13.4M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 13.4M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 13.4M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 13.4M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 13.4M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 13.4M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 13.4M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 13.4M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 13.4M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 13.4M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 13.4M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 13.4M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 13.4M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 13.4M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 13.4M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 13.4M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 13.4M]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 13.4M]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 13.4M]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 13.4M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 13.4M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|  6.74M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 6.74M, False: 6.74M]
  ------------------
 8430|  6.74M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|  6.74M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  6.74M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  6.74M|    }                                                           \
  |  | 8382|  6.74M|    else {                                                      \
  |  | 8383|  6.74M|        return vis(monostate_val);                              \
  |  | 8384|  6.74M|    }
  ------------------
 8431|  6.74M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 6.74M, False: 6.74M]
  ------------------
 8432|  6.74M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  6.74M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  6.74M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  6.74M|    }                                                           \
  |  | 8382|  6.74M|    else {                                                      \
  |  | 8383|  6.74M|        return vis(monostate_val);                              \
  |  | 8384|  6.74M|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 13.4M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 13.4M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 13.4M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 13.4M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 13.4M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  13.4M|            SCN_CLANG_POP
 8456|  13.4M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  10.1M|{
 8378|  10.1M|#define SCN_VISIT(Type)                                         \
 8379|  10.1M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  10.1M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  10.1M|    }                                                           \
 8382|  10.1M|    else {                                                      \
 8383|  10.1M|        return vis(monostate_val);                              \
 8384|  10.1M|    }
 8385|       |
 8386|  10.1M|    monostate monostate_val{};
 8387|       |
 8388|  10.1M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 10.1M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 10.1M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 10.1M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 10.1M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 10.1M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 10.1M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 10.1M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 10.1M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 10.1M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 10.1M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 10.1M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 10.1M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 10.1M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 10.1M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 10.1M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 10.1M]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 10.1M]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 10.1M]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 10.1M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 10.1M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 10.1M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  10.1M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 10.1M, False: 0]
  ------------------
 8432|  10.1M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  10.1M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.1M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.1M|    }                                                           \
  |  | 8382|  10.1M|    else {                                                      \
  |  | 8383|  10.1M|        return vis(monostate_val);                              \
  |  | 8384|  10.1M|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 10.1M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 10.1M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 10.1M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 10.1M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 10.1M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  10.1M|            SCN_CLANG_POP
 8456|  10.1M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  6.75M|{
 7005|  6.75M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  6.75M|    handler.check_args_exhausted();
 7007|  6.75M|    return handler.get_error();
 7008|  6.75M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  6.75M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  6.75M|    auto begin = format.data();
 6974|  6.75M|    auto it = begin;
 6975|  6.75M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  13.4M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 6.75M, False: 6.73M]
  ------------------
 6978|  6.75M|        const auto ch = *it++;
 6979|  6.75M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 6.75M, False: 0]
  ------------------
 6980|  6.75M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  6.75M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  6.75M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 13.8k, False: 6.73M]
  ------------------
 6984|  13.8k|                return;
 6985|  13.8k|            }
 6986|  6.75M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  6.75M|    }
 6997|       |
 6998|  6.73M|    handler.on_literal_text(begin, end);
 6999|  6.73M|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8135|  6.73M|    {
 8136|  6.73M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  6.73M|    static_cast<    \
  |  |  929|  6.73M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  6.73M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6902|  6.75M|{
 6903|  6.75M|    struct id_adapter {
 6904|  6.75M|        constexpr void operator()()
 6905|  6.75M|        {
 6906|  6.75M|            arg_id = handler.on_arg_id();
 6907|  6.75M|        }
 6908|  6.75M|        constexpr void operator()(std::size_t id)
 6909|  6.75M|        {
 6910|  6.75M|            arg_id = handler.on_arg_id(id);
 6911|  6.75M|        }
 6912|       |
 6913|  6.75M|        constexpr void on_error(const char* msg)
 6914|  6.75M|        {
 6915|  6.75M|            SCN_UNLIKELY_ATTR
 6916|  6.75M|            handler.on_error(msg);
 6917|  6.75M|        }
 6918|       |
 6919|  6.75M|        Handler& handler;
 6920|  6.75M|        std::size_t arg_id;
 6921|  6.75M|    };
 6922|       |
 6923|  6.75M|    ++begin;
 6924|  6.75M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.75M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  6.75M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 6.75M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  6.75M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 6.75M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  6.75M|    else {
 6936|  6.75M|        auto adapter = id_adapter{handler, 0};
 6937|  6.75M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  6.75M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.75M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  6.75M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 6.75M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  6.75M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 6.75M, False: 0]
  ------------------
 6948|  6.75M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  6.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.75M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  6.75M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  6.75M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  13.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.54k, False: 6.74M]
  |  |  |  Branch (859:45): [True: 0, False: 6.75M]
  |  |  |  Branch (859:45): [True: 5.54k, False: 6.74M]
  |  |  ------------------
  ------------------
 6954|  5.54k|                handler.on_error("Unknown format specifier");
 6955|  5.54k|                return begin;
 6956|  5.54k|            }
 6957|  6.75M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  6.75M|    }
 6964|  6.74M|    return begin + 1;
 6965|  6.75M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  6.75M|{
 6404|  6.75M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  6.75M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 6.75M, False: 0]
  |  Branch (6405:26): [True: 0, False: 6.75M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  6.75M|    handler();
 6410|  6.75M|    return begin;
 6411|  6.75M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  6.75M|        {
 6906|  6.75M|            arg_id = handler.on_arg_id();
 6907|  6.75M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|  6.75M|    {
 7083|  6.75M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  6.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  6.75M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6818|  6.75M|{
 6819|  6.75M|    auto do_presentation = [&]() -> const CharT* {
 6820|  6.75M|        if (*begin == CharT{'['}) {
 6821|  6.75M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  6.75M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  6.75M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  6.75M|                return begin;
 6827|  6.75M|            }
 6828|  6.75M|            handler.on_character_set_string(set);
 6829|  6.75M|            return begin;
 6830|  6.75M|        }
 6831|  6.75M|        if (*begin == CharT{'/'}) {
 6832|  6.75M|            return parse_presentation_regex(begin, end, handler);
 6833|  6.75M|        }
 6834|  6.75M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  6.75M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  6.75M|            handler.on_error("Invalid type specifier in format string");
 6837|  6.75M|            return begin;
 6838|  6.75M|        }
 6839|  6.75M|        handler.on_type(type);
 6840|  6.75M|        return begin;
 6841|  6.75M|    };
 6842|       |
 6843|  6.75M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 6.75M, False: 0]
  |  Branch (6843:28): [True: 6.74M, False: 8.34k]
  ------------------
 6844|  6.75M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 6.74M, False: 0]
  |  Branch (6844:36): [True: 6.74M, False: 2.77k]
  ------------------
 6845|  6.74M|        return do_presentation();
 6846|  6.74M|    }
 6847|       |
 6848|  11.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  11.1k|    begin = parse_align(begin, end, handler);
 6854|  11.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  11.1k|    begin = parse_width(begin, end, handler);
 6860|  11.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  11.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 11.1k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  11.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 2.77k, False: 8.34k]
  ------------------
 6879|  2.77k|        handler.on_localized();
 6880|  2.77k|        ++begin;
 6881|  2.77k|    }
 6882|  11.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  11.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 11.1k, False: 0]
  |  Branch (6887:25): [True: 8.34k, False: 2.77k]
  ------------------
 6888|  8.34k|        do_presentation();
 6889|  8.34k|    }
 6890|  11.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  11.1k|    return begin;
 6896|  11.1k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|  6.74M|    auto do_presentation = [&]() -> const CharT* {
 6820|  6.74M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 2.80k, False: 6.74M]
  ------------------
 6821|  2.80k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  2.80k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.80k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|  2.80k|            handler.on_character_set_string(set);
 6829|  2.80k|            return begin;
 6830|  2.80k|        }
 6831|  6.74M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 6.74M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  6.74M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  6.74M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 6.74M]
  |  |  ------------------
  ------------------
 6836|  2.77k|            handler.on_error("Invalid type specifier in format string");
 6837|  2.77k|            return begin;
 6838|  2.77k|        }
 6839|  6.74M|        handler.on_type(type);
 6840|  6.74M|        return begin;
 6841|  6.74M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6657|  2.80k|{
 6658|  2.80k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  2.80k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  2.80k|    auto start = begin;
 6662|  2.80k|    ++begin;
 6663|       |
 6664|  2.80k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.80k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  2.80k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 0, False: 2.80k]
  ------------------
 6671|      0|        handler.on_charset_inverted();
 6672|      0|        ++begin;
 6673|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 0]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|      0|    }
 6684|  2.80k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 2.80k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  8.40k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 8.40k, False: 0]
  ------------------
 6689|  8.40k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.40k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|  8.40k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 2.80k, False: 5.60k]
  ------------------
 6694|  2.80k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  2.80k|        }
 6696|       |
 6697|  5.60k|        parse_presentation_set_literal(begin, end, handler);
 6698|  5.60k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  2.80k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6621|  5.60k|{
 6622|  5.60k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  5.60k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  5.60k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.60k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|  5.60k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 5.60k, False: 0]
  |  Branch (6629:25): [True: 5.60k, False: 0]
  |  Branch (6629:49): [True: 5.60k, False: 0]
  ------------------
 6630|  5.60k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 5.60k, False: 0]
  ------------------
 6631|  5.60k|        ++begin;
 6632|       |
 6633|  5.60k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  5.60k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.60k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  5.60k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.60k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  5.60k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  5.60k|        return;
 6647|  5.60k|    }
 6648|       |
 6649|      0|    handler.on_charset_single(cp_first);
 6650|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6597|  11.2k|{
 6598|  11.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  11.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  11.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  22.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.2k]
  |  |  |  Branch (859:45): [True: 0, False: 11.2k]
  |  |  |  Branch (859:45): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  11.2k|    const auto cp =
 6607|  11.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  11.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|  11.2k|    begin += len;
 6614|  11.2k|    return cp;
 6615|  11.2k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6492|  11.1k|{
 6493|  11.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  11.1k|    auto check_align = [](wchar_t ch) {
 6496|  11.1k|        switch (ch) {
 6497|  11.1k|            case L'<':
 6498|  11.1k|                return align_type::left;
 6499|  11.1k|            case L'>':
 6500|  11.1k|                return align_type::right;
 6501|  11.1k|            case L'^':
 6502|  11.1k|                return align_type::center;
 6503|  11.1k|            default:
 6504|  11.1k|                return align_type::none;
 6505|  11.1k|        }
 6506|  11.1k|    };
 6507|       |
 6508|  11.1k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  11.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1k]
  |  |  |  Branch (859:45): [True: 0, False: 11.1k]
  |  |  |  Branch (859:45): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 6510|  11.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  11.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  11.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  11.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  11.1k|    const auto begin_before_fill = begin;
 6520|  11.1k|    begin += potential_fill_len;
 6521|       |
 6522|  11.1k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 11.1k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  11.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  11.1k|    const auto begin_after_fill = begin;
 6528|  11.1k|    ++begin;
 6529|       |
 6530|  11.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 11.1k, False: 0]
  ------------------
 6531|  11.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  11.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 2.80k, False: 8.31k]
  ------------------
 6536|  2.80k|            return begin_before_fill;
 6537|  2.80k|        }
 6538|  11.1k|    }
 6539|       |
 6540|  8.31k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 8.31k, False: 0]
  ------------------
 6541|  8.31k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 8.31k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  8.31k|        return begin_before_fill;
 6546|  8.31k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  8.31k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|  22.2k|    auto check_align = [](wchar_t ch) {
 6496|  22.2k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 22.2k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 22.2k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 22.2k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  22.2k|            default:
  ------------------
  |  Branch (6503:13): [True: 22.2k, False: 0]
  ------------------
 6504|  22.2k|                return align_type::none;
 6505|  22.2k|        }
 6506|  22.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6557|  11.1k|{
 6558|  11.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  11.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 11.1k, False: 0]
  |  Branch (6560:33): [True: 5.54k, False: 5.57k]
  ------------------
 6561|  5.54k|        int width = parse_simple_int(begin, end);
 6562|  5.54k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.54k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.54k, False: 0]
  |  |  ------------------
  ------------------
 6563|  5.54k|            handler.on_width(width);
 6564|  5.54k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  5.54k|    }
 6570|  11.1k|    return begin;
 6571|  11.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7087|  2.77k|    {
 7088|  2.77k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  2.77k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 2.77k, False: 0]
  ------------------
 7090|  2.77k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 2.77k, False: 0]
  ------------------
 7091|  2.77k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 2.77k, False: 0]
  ------------------
 7092|  2.77k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 2.77k, False: 0]
  ------------------
 7093|  2.77k|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|  2.77k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|  2.77k|        }
 7098|       |
 7099|      0|        Handler::on_localized();
 7100|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  6.74M|{
 8378|  6.74M|#define SCN_VISIT(Type)                                         \
 8379|  6.74M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  6.74M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  6.74M|    }                                                           \
 8382|  6.74M|    else {                                                      \
 8383|  6.74M|        return vis(monostate_val);                              \
 8384|  6.74M|    }
 8385|       |
 8386|  6.74M|    monostate monostate_val{};
 8387|       |
 8388|  6.74M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 6.74M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 6.74M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 6.74M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 6.74M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 6.74M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 6.74M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 6.74M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 6.74M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 6.74M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 6.74M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 6.74M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 6.74M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 6.74M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 6.74M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 6.74M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 6.74M]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 6.74M]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 6.74M]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 6.74M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 6.74M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 6.74M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  6.74M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 6.74M, False: 0]
  ------------------
 8432|  6.74M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  6.74M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  6.74M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  6.74M|    }                                                           \
  |  | 8382|  6.74M|    else {                                                      \
  |  | 8383|  6.74M|        return vis(monostate_val);                              \
  |  | 8384|  6.74M|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 6.74M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 6.74M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.74M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 6.74M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 6.74M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  6.74M|            SCN_CLANG_POP
 8456|  6.74M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4046|  18.0k|    {
 4047|  18.0k|        sync(0);
 4048|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5380|  89.0k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5380|  10.1M|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  6.74M|{
   89|  6.74M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  6.74M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.74M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  6.74M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  13.4M|{
   44|  13.4M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  13.4M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNSQ_13type_identityISL_E4typeEJDpNS15_ISW_E4typeEEEE:
  126|  6.74M|{
  127|  6.74M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  6.74M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  6.74M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  6.74M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  13.4M|{
   60|  13.4M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  13.4M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  162|  3.37M|{
  163|  3.37M|    T value;
  164|  3.37M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.37M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  3.37M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.37M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.37M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.38k, False: 3.36M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.38k|    }                                                  \
  |  |  |  | 3642|  3.37M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.36M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.36M|    static_cast<    \
  |  |  929|  3.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.36M|    static_cast<    \
  |  |  929|  3.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.37M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  6.74M|{
   72|  6.74M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  6.74M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  6.74M|{
   89|  6.74M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  6.74M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.74M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  6.74M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EELPv0ELSF_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
  126|  6.74M|{
  127|  6.74M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  6.74M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  6.74M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  6.74M|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
  162|  3.37M|{
  163|  3.37M|    T value;
  164|  3.37M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.37M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  3.37M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.37M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.37M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.38k, False: 3.36M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.38k|    }                                                  \
  |  |  |  | 3642|  3.37M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.36M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.36M|    static_cast<    \
  |  |  929|  3.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.36M|    static_cast<    \
  |  |  929|  3.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.37M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEEOSP_NS0_24basic_scan_format_stringIwNSU_13type_identityISP_E4typeEJDpNS16_IS10_E4typeEEEE:
   88|  6.74M|{
   89|  6.74M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  6.74M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  6.74M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  6.74M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  6.74M|{
   44|  6.74M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  6.74M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EELPv0ELSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSQ_NS0_24basic_scan_format_stringIwNSV_13type_identityISQ_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|  6.74M|{
  127|  6.74M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  6.74M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  6.74M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  6.74M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  6.74M|{
   60|  6.74M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  6.74M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJT_EEEEEOSP_:
  162|  3.37M|{
  163|  3.37M|    T value;
  164|  3.37M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.37M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  3.37M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.37M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.37M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.38k, False: 3.36M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.38k|    }                                                  \
  |  |  |  | 3642|  3.37M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.36M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.36M|    static_cast<    \
  |  |  929|  3.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.36M|    static_cast<    \
  |  |  929|  3.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.37M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  3.37M|{
   72|  3.37M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  3.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  3.37M|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  20.4M|{
  653|  20.4M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  20.4M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|   124k|{
 2176|   124k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|   124k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  62.8k|{
 2184|  62.8k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  62.8k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  62.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 58.7k, False: 4.15k]
  |  |  ------------------
  ------------------
 2186|  58.7k|        source.sync(*n);
 2187|  58.7k|    }
 2188|  4.15k|    else {
 2189|  4.15k|        source.sync_all();
 2190|  4.15k|    }
 2191|  62.8k|    return n;
 2192|  62.8k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  13.4M|{
 2200|  13.4M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  13.4M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  6.74M|{
 2208|  6.74M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  6.74M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  6.74M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.73M, False: 8.31k]
  |  |  ------------------
  ------------------
 2210|  6.73M|        source.sync(*n);
 2211|  6.73M|    }
 2212|  8.31k|    else {
 2213|  8.31k|        source.sync_all();
 2214|  8.31k|    }
 2215|  6.74M|    return n;
 2216|  6.74M|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   437k|{
  194|   437k|    return find_classic_impl(
  195|   437k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   437k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   437k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   443k|{
  202|   443k|    return find_classic_impl(
  203|   443k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   443k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   443k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|   124k|{
 2133|   124k|    return vscan_internal(source, format, args);
 2134|   124k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  62.8k|{
 2139|  62.8k|    auto n = vscan_internal(source, format, args);
 2140|  62.8k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  62.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 58.7k, False: 4.15k]
  |  |  ------------------
  ------------------
 2141|  58.7k|        source.sync(*n);
 2142|  58.7k|    }
 2143|  4.15k|    else {
 2144|  4.15k|        source.sync_all();
 2145|  4.15k|    }
 2146|  62.8k|    return n;
 2147|  62.8k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  13.4M|{
 2153|  13.4M|    return vscan_internal(source, format, args);
 2154|  13.4M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|  6.74M|{
 2159|  6.74M|    auto n = vscan_internal(source, format, args);
 2160|  6.74M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  6.74M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.73M, False: 8.31k]
  |  |  ------------------
  ------------------
 2161|  6.73M|        source.sync(*n);
 2162|  6.73M|    }
 2163|  8.31k|    else {
 2164|  8.31k|        source.sync_all();
 2165|  8.31k|    }
 2166|  6.74M|    return n;
 2167|  6.74M|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|  59.1k|{
 2243|  59.1k|    return vscan_value_internal(source, arg);
 2244|  59.1k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|  29.9k|{
 2248|  29.9k|    auto n = vscan_value_internal(source, arg);
 2249|  29.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  29.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 29.2k, False: 693]
  |  |  ------------------
  ------------------
 2250|  29.2k|        source.sync(*n);
 2251|  29.2k|    }
 2252|    693|    else {
 2253|    693|        source.sync_all();
 2254|    693|    }
 2255|  29.9k|    return n;
 2256|  29.9k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  6.74M|{
 2262|  6.74M|    return vscan_value_internal(source, arg);
 2263|  6.74M|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  3.37M|{
 2268|  3.37M|    auto n = vscan_value_internal(source, arg);
 2269|  3.37M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  3.37M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.36M, False: 1.38k]
  |  |  ------------------
  ------------------
 2270|  3.36M|        source.sync(*n);
 2271|  3.36M|    }
 2272|  1.38k|    else {
 2273|  1.38k|        source.sync_all();
 2274|  1.38k|    }
 2275|  3.37M|    return n;
 2276|  3.37M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   437k|{
  118|   437k|    auto it = source.begin();
  119|       |
  120|   782k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 632k, False: 149k]
  ------------------
  121|   632k|        auto sv =
  122|   632k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   632k|                .substr(0, 8);
  124|       |
  125|   632k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 478k, False: 153k]
  ------------------
  126|   478k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   478k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   478k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 233k, False: 245k]
  ------------------
  129|   233k|                break;
  130|   233k|            }
  131|   245k|            continue;
  132|   478k|        }
  133|       |
  134|   464k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 365k, False: 99.4k]
  ------------------
  135|   365k|            auto tmp =
  136|   365k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   365k|            auto res = get_next_code_point(tmp);
  138|   365k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 54.4k, False: 310k]
  ------------------
  139|  54.4k|                return it;
  140|  54.4k|            }
  141|   310k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   310k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   310k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   310k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   310k|        }
  145|   153k|    }
  146|       |
  147|   383k|    return detail::make_string_view_iterator(source, it);
  148|   437k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  1.08M|{
  105|  1.08M|    static_assert(sizeof(*source.data()) == 1);
  106|  1.08M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  1.08M|    uint64_t word{};
  108|  1.08M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  1.08M|    return has_byte_greater(word, 127) != 0;
  111|  1.08M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  2.09M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   365k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   443k|{
  118|   443k|    auto it = source.begin();
  119|       |
  120|   598k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 448k, False: 149k]
  ------------------
  121|   448k|        auto sv =
  122|   448k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   448k|                .substr(0, 8);
  124|       |
  125|   448k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 388k, False: 60.9k]
  ------------------
  126|   388k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   388k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   388k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 234k, False: 153k]
  ------------------
  129|   234k|                break;
  130|   234k|            }
  131|   153k|            continue;
  132|   388k|        }
  133|       |
  134|   126k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 124k, False: 1.72k]
  ------------------
  135|   124k|            auto tmp =
  136|   124k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   124k|            auto res = get_next_code_point(tmp);
  138|   124k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 59.1k, False: 65.1k]
  ------------------
  139|  59.1k|                return it;
  140|  59.1k|            }
  141|  65.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  65.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  65.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  65.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  65.1k|        }
  145|  60.9k|    }
  146|       |
  147|   384k|    return detail::make_string_view_iterator(source, it);
  148|   443k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.17M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   124k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   125k|{
 2065|   125k|    const auto argcount = args.size();
 2066|   125k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 59.8k, False: 65.9k]
  |  Branch (2066:60): [True: 59.8k, False: 0]
  ------------------
 2067|  59.8k|        auto arg = args.get(0);
 2068|  59.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  59.8k|    static_cast<    \
  |  |  929|  59.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  59.8k|    }
 2070|       |
 2071|  65.9k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 65.9k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  65.9k|    SCN_UNLIKELY_ATTR
 2079|  65.9k|    {
 2080|  65.9k|        auto handler = format_handler<false, CharT>{
 2081|  65.9k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  65.9k|    static_cast<    \
  |  |  929|  65.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  65.9k|    static_cast<    \
  |  |  929|  65.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  65.9k|        return vscan_parse_format_string(format, handler);
 2083|  65.9k|    }
 2084|  65.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   374k|{
 1625|   374k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 196k, False: 178k]
  ------------------
 1626|   196k|        return false;
 1627|   196k|    }
 1628|   178k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 178k, False: 0]
  |  Branch (1628:39): [True: 178k, False: 0]
  ------------------
 1629|   374k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  89.8k|{
 1658|  89.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 89.8k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  89.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  89.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 89.8k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  89.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  89.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  89.8k|    static_cast<    \
  |  |  929|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  89.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  89.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  89.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  89.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.07k, False: 87.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.07k|    }                                                  \
  |  |  |  | 3642|  89.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  87.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  87.7k|    return it.position();
 1675|  89.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   130k|    {
 1903|   130k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  20.4M|    {
 1722|  20.4M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  20.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.4M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  20.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   130k|    {
 1853|   130k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   130k|{
 2030|   130k|    const auto beg = handler.get_ctx().begin();
 2031|   130k|    detail::parse_format_string<false>(format, handler);
 2032|   130k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.8k, False: 116k]
  |  |  ------------------
  ------------------
 2033|  13.8k|        return unexpected(handler.error);
 2034|  13.8k|    }
 2035|   116k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   130k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|   876k|    {
 2014|   876k|        return ctx.get();
 2015|   876k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   876k|    {
 1857|   876k|        return contiguous_ctx;
 1858|   876k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   247k|    {
 1907|   247k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 247k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   247k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   130k|{
 1681|   130k|    auto arg = ctx.arg(id);
 1682|   130k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   130k|    return arg;
 1686|   130k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  20.4M|    {
 1797|  20.4M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  20.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.4M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  20.4M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  20.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.4M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  20.4M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  20.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20.4M, False: 0]
  |  |  ------------------
  ------------------
 1807|  20.4M|            visited_args_lower64 |= (1ull << id);
 1808|  20.4M|            return;
 1809|  20.4M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  20.4M|    {
 1782|  20.4M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  20.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.4M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  20.4M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  20.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20.4M, False: 0]
  |  |  ------------------
  ------------------
 1788|  20.4M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  20.4M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  20.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  37.4k|    {
 1766|  37.4k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  37.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.4k, False: 0]
  |  |  ------------------
  ------------------
 1767|  37.4k|            error = err;
 1768|  37.4k|        }
 1769|  37.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|   130k|    {
 1936|   130k|        return parse_ctx.next_arg_id();
 1937|   130k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|   130k|    {
 1977|   130k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   130k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   130k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 130k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   130k|        auto specs = detail::format_specs{};
 1990|   130k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   130k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   130k|            arg.type()};
 1993|       |
 1994|   130k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   130k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 130k]
  |  Branch (1995:29): [True: 0, False: 130k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   130k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.54k, False: 125k]
  |  |  ------------------
  ------------------
 2001|  5.54k|            return parse_ctx.begin();
 2002|  5.54k|        }
 2003|   125k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   125k|        on_visit_scan_arg(
 2006|   125k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   125k|                                           get_ctx().locale()},
 2008|   125k|            arg);
 2009|   125k|        return parse_ctx.begin();
 2010|   130k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   130k|    {
 1701|   130k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|   125k|    {
 1948|   125k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 125k]
  |  Branch (1948:23): [True: 0, False: 125k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   125k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   125k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 116k]
  |  |  ------------------
  ------------------
 1955|  8.31k|            on_error(r.error());
 1956|  8.31k|        }
 1957|   116k|        else {
 1958|   116k|            get_ctx().advance_to(*r);
 1959|   116k|        }
 1960|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  24.9k|    {
 1761|  24.9k|        SCN_UNLIKELY_ATTR
 1762|  24.9k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  24.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  20.4M|    {
 1729|  20.4M|        {
 1730|  20.4M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 20.4M]
  ------------------
 1731|  20.4M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 20.4M]
  ------------------
 1732|  20.4M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  20.4M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  20.4M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 20.4M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  20.4M|        }
 1739|       |
 1740|  20.4M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 20.4M, False: 0]
  ------------------
 1741|  20.4M|            return;
 1742|  20.4M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  20.4M|    {
 1777|  20.4M|        return error;
 1778|  20.4M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  61.3M|    {
 1773|  61.3M|        return static_cast<bool>(error);
 1774|  61.3M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  65.9k|    {
 1903|  65.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  65.9k|    {
 1830|  65.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  65.9k|{
 2030|  65.9k|    const auto beg = handler.get_ctx().begin();
 2031|  65.9k|    detail::parse_format_string<false>(format, handler);
 2032|  65.9k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.93k, False: 58.9k]
  |  |  ------------------
  ------------------
 2033|  6.93k|        return unexpected(handler.error);
 2034|  6.93k|    }
 2035|  58.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  65.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|   441k|    {
 2014|   441k|        return ctx.get();
 2015|   441k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   441k|    {
 1834|   441k|        return ctx;
 1835|   441k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   124k|    {
 1907|   124k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 124k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   124k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  65.9k|{
 1681|  65.9k|    auto arg = ctx.arg(id);
 1682|  65.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.9k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  65.9k|    return arg;
 1686|  65.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  65.9k|    {
 1936|  65.9k|        return parse_ctx.next_arg_id();
 1937|  65.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  65.9k|    {
 1977|  65.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  65.9k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  65.9k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 65.9k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  65.9k|        auto specs = detail::format_specs{};
 1990|  65.9k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  65.9k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  65.9k|            arg.type()};
 1993|       |
 1994|  65.9k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  65.9k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 65.9k]
  |  Branch (1995:29): [True: 0, False: 65.9k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  65.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 63.1k]
  |  |  ------------------
  ------------------
 2001|  2.77k|            return parse_ctx.begin();
 2002|  2.77k|        }
 2003|  63.1k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  63.1k|        on_visit_scan_arg(
 2006|  63.1k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  63.1k|                                           get_ctx().locale()},
 2008|  63.1k|            arg);
 2009|  63.1k|        return parse_ctx.begin();
 2010|  65.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  65.9k|    {
 1701|  65.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  63.1k|    {
 1948|  63.1k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 63.1k]
  |  Branch (1948:23): [True: 0, False: 63.1k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  63.1k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  63.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.15k, False: 58.9k]
  |  |  ------------------
  ------------------
 1955|  4.15k|            on_error(r.error());
 1956|  4.15k|        }
 1957|  58.9k|        else {
 1958|  58.9k|            get_ctx().advance_to(*r);
 1959|  58.9k|        }
 1960|  63.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   249k|{
 2045|   249k|    const auto argcount = args.size();
 2046|   249k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 118k, False: 130k]
  |  Branch (2046:60): [True: 118k, False: 0]
  ------------------
 2047|   118k|        auto arg = args.get(0);
 2048|   118k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   118k|    static_cast<    \
  |  |  929|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   118k|    }
 2050|       |
 2051|   130k|    auto handler = format_handler<true, CharT>{
 2052|   130k|        ranges::subrange<const CharT*>{source.data(),
 2053|   130k|                                       source.data() + source.size()},
 2054|   130k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   130k|    return vscan_parse_format_string(format, handler);
 2056|   249k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   177k|{
 1638|   177k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   177k|    auto reader =
 1644|   177k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   177k|            ranges::subrange<const CharT*>{source.data(),
 1646|   177k|                                           source.data() + source.size()},
 1647|   177k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   177k|    static_cast<    \
  |  |  929|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   177k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|   177k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.15k, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  4.15k|    }                                                  \
  |  |  |  | 3642|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   173k|    return ranges::distance(source.data(), it);
 1650|   177k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  26.9M|{
 2045|  26.9M|    const auto argcount = args.size();
 2046|  26.9M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 13.4M, False: 13.5M]
  |  Branch (2046:60): [True: 13.4M, False: 0]
  ------------------
 2047|  13.4M|        auto arg = args.get(0);
 2048|  13.4M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  13.4M|    static_cast<    \
  |  |  929|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  13.4M|    }
 2050|       |
 2051|  13.5M|    auto handler = format_handler<true, CharT>{
 2052|  13.5M|        ranges::subrange<const CharT*>{source.data(),
 2053|  13.5M|                                       source.data() + source.size()},
 2054|  13.5M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  13.5M|    static_cast<    \
  |  |  929|  13.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  13.5M|    static_cast<    \
  |  |  929|  13.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  13.5M|    return vscan_parse_format_string(format, handler);
 2056|  26.9M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  40.4M|{
 1625|  40.4M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 20.2M, False: 20.2M]
  ------------------
 1626|  20.2M|        return false;
 1627|  20.2M|    }
 1628|  20.2M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 20.2M, False: 0]
  |  Branch (1628:39): [True: 20.2M, False: 0]
  ------------------
 1629|  40.4M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  20.2M|{
 1638|  20.2M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  20.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.2M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  20.2M|    auto reader =
 1644|  20.2M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  20.2M|            ranges::subrange<const CharT*>{source.data(),
 1646|  20.2M|                                           source.data() + source.size()},
 1647|  20.2M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  20.2M|    static_cast<    \
  |  |  929|  20.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  20.2M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  20.2M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  20.2M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  20.2M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.31k, False: 20.2M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  8.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  8.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  8.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  8.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  8.31k|    }                                                  \
  |  |  |  | 3642|  20.2M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  20.2M|    return ranges::distance(source.data(), it);
 1650|  20.2M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|  13.5M|    {
 1903|  13.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|  13.5M|    {
 1853|  13.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  13.5M|{
 2030|  13.5M|    const auto beg = handler.get_ctx().begin();
 2031|  13.5M|    detail::parse_format_string<false>(format, handler);
 2032|  13.5M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  13.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.7k, False: 13.4M]
  |  |  ------------------
  ------------------
 2033|  27.7k|        return unexpected(handler.error);
 2034|  27.7k|    }
 2035|  13.4M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  13.5M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  94.4M|    {
 2014|  94.4M|        return ctx.get();
 2015|  94.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  94.4M|    {
 1857|  94.4M|        return contiguous_ctx;
 1858|  94.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  26.9M|    {
 1907|  26.9M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 26.9M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  26.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  13.5M|{
 1681|  13.5M|    auto arg = ctx.arg(id);
 1682|  13.5M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  13.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.5M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  13.5M|    return arg;
 1686|  13.5M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  13.5M|    {
 1936|  13.5M|        return parse_ctx.next_arg_id();
 1937|  13.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  13.5M|    {
 1977|  13.5M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  13.5M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  13.5M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 13.5M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  13.5M|        auto specs = detail::format_specs{};
 1990|  13.5M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  13.5M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  13.5M|            arg.type()};
 1993|       |
 1994|  13.5M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  13.5M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 13.5M]
  |  Branch (1995:29): [True: 0, False: 13.5M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  13.5M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  13.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 13.4M]
  |  |  ------------------
  ------------------
 2001|  11.0k|            return parse_ctx.begin();
 2002|  11.0k|        }
 2003|  13.4M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  13.4M|        on_visit_scan_arg(
 2006|  13.4M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  13.4M|                                           get_ctx().locale()},
 2008|  13.4M|            arg);
 2009|  13.4M|        return parse_ctx.begin();
 2010|  13.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  13.5M|    {
 1701|  13.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  13.4M|    {
 1948|  13.4M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 13.4M]
  |  Branch (1948:23): [True: 0, False: 13.4M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  13.4M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  13.4M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  13.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 13.4M]
  |  |  ------------------
  ------------------
 1955|  16.6k|            on_error(r.error());
 1956|  16.6k|        }
 1957|  13.4M|        else {
 1958|  13.4M|            get_ctx().advance_to(*r);
 1959|  13.4M|        }
 1960|  13.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  13.4M|{
 2065|  13.4M|    const auto argcount = args.size();
 2066|  13.4M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 6.74M, False: 6.75M]
  |  Branch (2066:60): [True: 6.74M, False: 0]
  ------------------
 2067|  6.74M|        auto arg = args.get(0);
 2068|  6.74M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  6.74M|    static_cast<    \
  |  |  929|  6.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  6.74M|    }
 2070|       |
 2071|  6.75M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 6.75M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  6.75M|    SCN_UNLIKELY_ATTR
 2079|  6.75M|    {
 2080|  6.75M|        auto handler = format_handler<false, CharT>{
 2081|  6.75M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  6.75M|    static_cast<    \
  |  |  929|  6.75M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  6.75M|    static_cast<    \
  |  |  929|  6.75M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  6.75M|        return vscan_parse_format_string(format, handler);
 2083|  6.75M|    }
 2084|  6.75M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  10.1M|{
 1658|  10.1M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  10.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.1M]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  10.1M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  10.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10.1M]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  10.1M|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  10.1M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  10.1M|    static_cast<    \
  |  |  929|  10.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  10.1M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  10.1M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.1M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.1M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.15k, False: 10.1M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  4.15k|    }                                                  \
  |  |  |  | 3642|  10.1M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  10.1M|    return it.position();
 1675|  10.1M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|  6.75M|    {
 1903|  6.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|  6.75M|    {
 1830|  6.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  6.75M|{
 2030|  6.75M|    const auto beg = handler.get_ctx().begin();
 2031|  6.75M|    detail::parse_format_string<false>(format, handler);
 2032|  6.75M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  6.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.8k, False: 6.73M]
  |  |  ------------------
  ------------------
 2033|  13.8k|        return unexpected(handler.error);
 2034|  13.8k|    }
 2035|  6.73M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  6.75M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  47.2M|    {
 2014|  47.2M|        return ctx.get();
 2015|  47.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  47.2M|    {
 1834|  47.2M|        return ctx;
 1835|  47.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  13.4M|    {
 1907|  13.4M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 13.4M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  13.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  6.75M|{
 1681|  6.75M|    auto arg = ctx.arg(id);
 1682|  6.75M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  6.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.75M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  6.75M|    return arg;
 1686|  6.75M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|  6.75M|    {
 1936|  6.75M|        return parse_ctx.next_arg_id();
 1937|  6.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|  6.75M|    {
 1977|  6.75M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  6.75M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  6.75M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 6.75M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  6.75M|        auto specs = detail::format_specs{};
 1990|  6.75M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  6.75M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  6.75M|            arg.type()};
 1993|       |
 1994|  6.75M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  6.75M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 6.75M]
  |  Branch (1995:29): [True: 0, False: 6.75M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  6.75M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  6.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.54k, False: 6.74M]
  |  |  ------------------
  ------------------
 2001|  5.54k|            return parse_ctx.begin();
 2002|  5.54k|        }
 2003|  6.74M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  6.74M|        on_visit_scan_arg(
 2006|  6.74M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  6.74M|                                           get_ctx().locale()},
 2008|  6.74M|            arg);
 2009|  6.74M|        return parse_ctx.begin();
 2010|  6.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|  6.75M|    {
 1701|  6.75M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  6.74M|    {
 1948|  6.74M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 6.74M]
  |  Branch (1948:23): [True: 0, False: 6.74M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  6.74M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  6.74M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 6.73M]
  |  |  ------------------
  ------------------
 1955|  8.31k|            on_error(r.error());
 1956|  8.31k|        }
 1957|  6.73M|        else {
 1958|  6.73M|            get_ctx().advance_to(*r);
 1959|  6.73M|        }
 1960|  6.74M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  59.1k|{
 2091|  59.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  59.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  29.9k|{
 2091|  29.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  29.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  6.74M|{
 2091|  6.74M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  6.74M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  3.37M|{
 2091|  3.37M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  3.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  3.37M|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|    693|{
 1363|    693|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|    693|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|    693|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|    693|            std::u32string tmp;
 1368|    693|            transcode_to_string_impl_to32(src, tmp);
 1369|    693|            return transcode_to_string_impl_32to16<false>(
 1370|    693|                std::u32string_view{tmp}, dest);
 1371|    693|        }
 1372|    693|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|    693|            return transcode_to_string_impl_to32(src, dest);
 1374|    693|        }
 1375|    693|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|    693|{
 1256|    693|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|    693|    auto it = src.begin();
 1259|   313k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 313k, False: 693]
  ------------------
 1260|   313k|        auto res = get_next_code_point(
 1261|   313k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   313k|                                                                 src.end()));
 1263|   313k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.70k, False: 309k]
  |  |  ------------------
  ------------------
 1264|  3.70k|            dest.push_back(DestCharT{0xfffd});
 1265|  3.70k|        }
 1266|   309k|        else {
 1267|   309k|            dest.push_back(res.value);
 1268|   309k|        }
 1269|   313k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   313k|    }
 1271|    693|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   802k|{
 1169|   802k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   802k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   802k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   802k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   802k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 790k]
  |  |  ------------------
  ------------------
 1173|  12.5k|        return {get_start_for_next_code_point(input),
 1174|  12.5k|                detail::invalid_code_point};
 1175|  12.5k|    }
 1176|   790k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.41k, False: 786k]
  |  |  ------------------
  ------------------
 1177|  3.41k|        return {input.end(), detail::invalid_code_point};
 1178|  3.41k|    }
 1179|       |
 1180|   786k|    return {input.begin() + len,
 1181|   786k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   790k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  12.5k|{
 1155|  12.5k|    auto it = input.begin();
 1156|  50.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 50.5k, False: 344]
  ------------------
 1157|  50.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 12.1k, False: 38.4k]
  ------------------
 1158|  12.1k|            break;
 1159|  12.1k|        }
 1160|  50.5k|    }
 1161|  12.5k|    return it;
 1162|  12.5k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  12.4k|    {
 2931|  12.4k|        SCN_UNLIKELY_ATTR
 2932|  12.4k|        m_msg = msg;
 2933|  12.4k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  20.4M|    {
 2936|  20.4M|        return m_msg == nullptr;
 2937|  20.4M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  3.27M|{
  458|  3.27M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  3.27M|        static_cast<unsigned char>(ch))];
  460|  3.27M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  35.9k|{
  469|  35.9k|    return static_cast<unsigned char>(ch) <= 127;
  470|  35.9k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  8.43k|{
  474|  8.43k|#if WCHAR_MIN < 0
  475|  8.43k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 7.74k, False: 696]
  |  Branch (475:23): [True: 4.68k, False: 3.05k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  8.43k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  1.08M|{
  539|  1.08M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  1.08M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  81.6M|{
  784|  81.6M|    return e != eof_error::good;
  785|  81.6M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  18.9k|{
  798|  18.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  18.9k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  18.9k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   579M|{
 1200|       |    // Pattern_White_Space property
 1201|   579M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 474M, False: 105M]
  |  Branch (1201:27): [True: 67.5M, False: 406M]
  ------------------
 1202|   579M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 79.2M, False: 432M]
  ------------------
 1203|   579M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 1.18M, False: 431M]
  ------------------
 1204|   579M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 292k, False: 431M]
  ------------------
 1205|   579M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 252k, False: 430M]
  ------------------
 1206|   579M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 418k, False: 430M]
  ------------------
 1207|   579M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 430M]
  ------------------
 1208|   579M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6009|  20.3M|{
 6010|  20.3M|    if (specs.width != 0) {
  ------------------
  |  Branch (6010:9): [True: 0, False: 20.3M]
  ------------------
 6011|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6011:13): [True: 0, False: 0]
  ------------------
 6012|      0|            return {scan_error::invalid_scanned_value,
 6013|      0|                    "Scanned value too narrow, width did not exceed what "
 6014|      0|                    "was specified in the format string"};
 6015|      0|        }
 6016|      0|    }
 6017|  20.3M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6017:9): [True: 0, False: 20.3M]
  ------------------
 6018|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6018:13): [True: 0, False: 0]
  ------------------
 6019|      0|            return {scan_error::invalid_scanned_value,
 6020|      0|                    "Scanned value too wide, width exceeded the specified "
 6021|      0|                    "precision"};
 6022|      0|        }
 6023|      0|    }
 6024|  20.3M|    return {};
 6025|  20.3M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   585k|    {
  304|   585k|        ranges::advance(x, n);
  305|   585k|        return x;
  306|   585k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   585k|    {
  268|   585k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   585k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   585k|    {
  151|   585k|        i += n;
  152|   585k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.25M|    {
  108|  1.25M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.25M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.25M|    {
   87|  1.25M|        return s - i;
   88|  1.25M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  33.6M|    {
  108|  33.6M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.6M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  33.6M|    {
   87|  33.6M|        return s - i;
   88|  33.6M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   151k|{
  981|   151k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   151k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   151k|        return true;
  984|   151k|    }
  985|   151k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   151k|                           ranges::const_iterator_t<Range>,
  987|   151k|                           typename detail::basic_scan_buffer<
  988|   151k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   151k|        auto beg = r.begin();
  990|   151k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 151k, False: 0]
  ------------------
  991|   151k|            return false;
  992|   151k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   151k|    else {
 1006|   151k|        return false;
 1007|   151k|    }
 1008|   151k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6038|  61.7k|    {
 6039|  61.7k|        const bool need_skipped_width =
 6040|  61.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 0, False: 61.7k]
  |  Branch (6040:33): [True: 0, False: 61.7k]
  ------------------
 6041|  61.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|  61.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 0, False: 61.7k]
  ------------------
 6045|  61.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 0, False: 61.7k]
  ------------------
 6046|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6047|      0|                             need_skipped_width);
 6048|      0|        }
 6049|  61.7k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 61.7k, False: 0]
  |  Branch (6049:56): [True: 59.6k, False: 2.14k]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|  59.6k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 59.6k]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|   118k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  59.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  59.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  59.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 984, False: 58.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    984|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    984|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    984|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    984|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    984|    }                                                  \
  |  |  |  | 3642|  59.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|   118k|                            make_eof_scan_error));
 6060|       |
 6061|   118k|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 0, False: 58.6k]
  ------------------
 6062|      0|                return result_type{
 6063|      0|                    it,
 6064|      0|                    calculate_text_width(make_contiguous_buffer(
 6065|      0|                                             ranges::subrange{rng.begin(), it})
 6066|      0|                                             .view())};
 6067|      0|            }
 6068|  58.6k|            return result_type{it, 0};
 6069|   118k|        }
 6070|       |
 6071|  2.14k|        return result_type{rng.begin(), 0};
 6072|  61.7k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.14k|{
 1976|  2.14k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.14k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.14k|{
 1957|  2.14k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.14k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.14k|    }
 1960|  2.14k|    else {
 1961|  2.14k|        auto first = range.begin();
 1962|  5.40k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 5.37k, False: 32]
  ------------------
 1963|  5.37k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.10k, False: 3.26k]
  ------------------
 1964|  2.10k|                return first;
 1965|  2.10k|            }
 1966|  5.37k|        }
 1967|     32|        return first;
 1968|  2.14k|    }
 1969|  2.14k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  32.2k|    {
  763|  32.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  32.2k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  6.42k|    {
  754|  6.42k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  16.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.1k|              cvref<T> obj = *get<T>(fn);
  745|  16.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  16.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.1k|              }
  748|  16.1k|              else {
  749|  16.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.1k|              }
  751|  16.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  16.1k|    {
  684|  16.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  16.1k|            return static_cast<T*>(s.m_cp);
  686|  16.1k|        }
  687|  16.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  16.1k|            return static_cast<T*>(s.m_p);
  689|  16.1k|        }
  690|  16.1k|        else {
  691|  16.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  16.1k|        }
  693|  16.1k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  6.42k|        {
  662|  6.42k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  58.9k|    {
  108|  58.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  58.9k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  58.9k|    {
   94|  58.9k|        iter_difference_t<I> counter{0};
   95|   681k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 622k, False: 58.9k]
  ------------------
   96|   622k|            ++i;
   97|   622k|            ++counter;
   98|   622k|        }
   99|  58.9k|        return counter;
  100|  58.9k|    }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   727M|    {
  763|   727M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   727M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   727M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  50.7M|    {
  754|  50.7M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   148M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   148M|              cvref<T> obj = *get<T>(fn);
  745|   148M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   148M|                  obj(static_cast<decltype(args)>(args)...);
  747|   148M|              }
  748|   148M|              else {
  749|   148M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   148M|              }
  751|   148M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   148M|    {
  684|   148M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   148M|            return static_cast<T*>(s.m_cp);
  686|   148M|        }
  687|   148M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   148M|            return static_cast<T*>(s.m_p);
  689|   148M|        }
  690|   148M|        else {
  691|   148M|            return reinterpret_cast<T*>(s.m_fp);
  692|   148M|        }
  693|   148M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  50.7M|        {
  662|  50.7M|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   238k|{
  950|   238k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.43k, False: 236k]
  |  |  ------------------
  ------------------
  951|  2.43k|        return eof_error::eof;
  952|  2.43k|    }
  953|   236k|    return eof_error::good;
  954|   238k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.86M|{
  944|  1.86M|    return is_range_eof(r.begin(), r.end());
  945|  1.86M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.86M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.86M|    {
  937|  1.86M|        return begin == end;
  938|  1.86M|    }
  939|  1.86M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|   147k|{
 1683|   147k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   147k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   147k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   147k|        return string_view_wrapper{SCN_FWD(range)};
 1687|   147k|    }
 1688|   147k|    else {
 1689|   147k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   147k|    }
 1691|   147k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|   147k|    {
 1537|   147k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   147k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|   147k|    {
 1621|   147k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   147k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   147k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   147k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   147k|            m_storage.reset();
 1627|   147k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   147k|        }
 1629|   147k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   147k|                                          std::basic_string<CharT>>) {
 1631|   147k|            m_storage.emplace(SCN_FWD(range));
 1632|   147k|            m_view = string_view_type{*m_storage};
 1633|   147k|        }
 1634|   147k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   147k|                                          typename detail::basic_scan_buffer<
 1636|   147k|                                              value_t>::forward_iterator> &&
 1637|   147k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   147k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   147k|            auto end_seg = range.end().contiguous_segment();
 1640|   147k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.45k, False: 144k]
  |  |  ------------------
  ------------------
 1641|   147k|                             detail::to_address(end_seg.end()))) {
 1642|  3.45k|                auto& str = m_storage.emplace();
 1643|  3.45k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.45k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.45k|                m_view = string_view_type{str};
 1646|  3.45k|                return;
 1647|  3.45k|            }
 1648|       |
 1649|   144k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   144k|                                                            end_seg.data());
 1651|   144k|            m_storage.reset();
 1652|   144k|        }
 1653|   147k|        else {
 1654|   147k|            auto& str = m_storage.emplace();
 1655|   147k|            if constexpr (ranges::sized_range<Range>) {
 1656|   147k|                str.reserve(range.size());
 1657|   147k|            }
 1658|   147k|            if constexpr (ranges::common_range<Range>) {
 1659|   147k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   147k|                          std::back_inserter(str));
 1661|   147k|            }
 1662|   147k|            else {
 1663|   147k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   147k|                     ++it) {
 1665|   147k|                    str.push_back(*it);
 1666|   147k|                }
 1667|   147k|            }
 1668|   147k|            m_view = string_view_type{str};
 1669|   147k|        }
 1670|   147k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   291k|    {
 1582|   291k|        return m_view;
 1583|   291k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|   147k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6080|  58.6k|    {
 6081|  58.6k|        const bool need_skipped_width =
 6082|  58.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6082:13): [True: 0, False: 58.6k]
  |  Branch (6082:33): [True: 0, False: 58.6k]
  ------------------
 6083|  58.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6084|       |
 6085|  58.6k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6085:13): [True: 0, False: 58.6k]
  ------------------
 6086|  58.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6086:13): [True: 0, False: 58.6k]
  ------------------
 6087|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6088|      0|                             specs.fill, need_skipped_width);
 6089|      0|        }
 6090|  58.6k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6090:13): [True: 58.6k, False: 0]
  ------------------
 6091|  58.6k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6091:13): [True: 738, False: 57.8k]
  ------------------
 6092|  58.6k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6092:15): [True: 0, False: 738]
  |  Branch (6092:35): [True: 0, False: 0]
  ------------------
 6093|    738|             (specs.precision != 0 &&
  ------------------
  |  Branch (6093:15): [True: 0, False: 738]
  ------------------
 6094|    738|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  ------------------
 6095|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6095:17): [True: 0, False: 0]
  ------------------
 6096|      0|                const auto initial_width =
 6097|      0|                    specs.precision - prefix_width - value_width;
 6098|      0|                auto max_width_view = take_width(rng, initial_width);
 6099|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6100|      0|                                  .transform_error(make_eof_scan_error));
 6101|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6102|      0|            }
 6103|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6104|      0|                            make_eof_scan_error));
 6105|       |
 6106|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6106:17): [True: 0, False: 0]
  ------------------
 6107|      0|                return result_type{
 6108|      0|                    it,
 6109|      0|                    calculate_text_width(make_contiguous_buffer(
 6110|      0|                                             ranges::subrange{rng.begin(), it})
 6111|      0|                                             .view())};
 6112|      0|            }
 6113|      0|            return result_type{it, 0};
 6114|      0|        }
 6115|  58.6k|        return result_type{rng.begin(), 0};
 6116|  58.6k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   471k|{
  950|   471k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.77k, False: 467k]
  |  |  ------------------
  ------------------
  951|  4.77k|        return eof_error::eof;
  952|  4.77k|    }
  953|   467k|    return eof_error::good;
  954|   471k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   471k|{
  944|   471k|    return is_range_eof(r.begin(), r.end());
  945|   471k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   471k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   471k|    {
  937|   471k|        return begin == end;
  938|   471k|    }
  939|   471k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   292k|{
 1683|   292k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   292k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   292k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   292k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   292k|    }
 1688|   292k|    else {
 1689|   292k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   292k|    }
 1691|   292k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   292k|    {
 1490|   292k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  1.60M|    {
 1503|  1.60M|        return sv;
 1504|  1.60M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  4.28k|{
 1976|  4.28k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.28k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  4.28k|{
 1957|  4.28k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.28k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.28k|    }
 1960|  4.28k|    else {
 1961|  4.28k|        auto first = range.begin();
 1962|  4.28k|        for (; first != range.end(); ++first) {
 1963|  4.28k|            if (pred(*first)) {
 1964|  4.28k|                return first;
 1965|  4.28k|            }
 1966|  4.28k|        }
 1967|  4.28k|        return first;
 1968|  4.28k|    }
 1969|  4.28k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   294k|{
 2951|   294k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 294k, False: 0]
  ------------------
 2952|   294k|        auto it = read_while_classic_space(range);
 2953|   294k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   294k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.75k, False: 290k]
  |  |  ------------------
  ------------------
 2955|  3.75k|            return unexpected(e);
 2956|  3.75k|        }
 2957|       |
 2958|   290k|        return it;
 2959|   294k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   294k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   294k|{
 2117|   294k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   294k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   294k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   294k|        auto buf = make_contiguous_buffer(range);
 2121|   294k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   294k|        return ranges::next(range.begin(),
 2123|   294k|                            ranges::distance(buf.view().begin(), it));
 2124|   294k|    }
 2125|   294k|    else {
 2126|   294k|        auto it = range.begin();
 2127|       |
 2128|   294k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   294k|            auto seg = get_contiguous_beginning(range);
 2130|   294k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   294k|                seg_it != seg.end()) {
 2132|   294k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   294k|            }
 2134|   294k|            ranges::advance(it, seg.size());
 2135|   294k|        }
 2136|       |
 2137|   294k|        return read_while_code_point(
 2138|   294k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   294k|    }
 2140|   294k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   585k|{
 1683|   585k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   585k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   585k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   585k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   585k|    }
 1688|   585k|    else {
 1689|   585k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   585k|    }
 1691|   585k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   585k|    {
 1490|   585k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.11k|    {
  304|  3.11k|        ranges::advance(x, n);
  305|  3.11k|        return x;
  306|  3.11k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   295k|    {
  268|   295k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   295k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   295k|    {
  181|   561k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 265k, False: 295k]
  ------------------
  182|   265k|            ++i;
  183|   265k|        }
  184|   295k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|   149k|    {
 1587|   149k|        return m_storage.has_value();
 1588|   149k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  2.86k|    {
 1592|  2.86k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  2.86k|        return *m_storage;
 1594|  2.86k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6179|  63.1k|    {
 6180|  63.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  63.1k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|      0|                          basic_contiguous_scan_context<char_type>>) {
 6184|  63.1k|            auto rd = make_reader<T, char_type>();
 6185|  63.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6186|  63.1k|                return unexpected(e);
 6187|  63.1k|            }
 6188|       |
 6189|  63.1k|            return impl(rd, range, value);
 6190|  63.1k|        }
 6191|  63.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6191:28): [Folded - Ignored]
  ------------------
 6192|  63.1k|            auto rd = make_reader<T, char_type>();
 6193|  63.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 61.7k]
  |  |  ------------------
  ------------------
 6194|  1.38k|                return unexpected(e);
 6195|  1.38k|            }
 6196|       |
 6197|  61.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6197:17): [True: 61.7k, False: 0]
  |  Branch (6197:50): [True: 0, False: 0]
  ------------------
 6198|  61.7k|                specs.width != 0) {
  ------------------
  |  Branch (6198:17): [True: 0, False: 0]
  ------------------
 6199|  61.7k|                return impl(rd, range, value);
 6200|  61.7k|            }
 6201|       |
 6202|      0|            auto crange = get_as_contiguous(range);
 6203|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6204|      0|            return ranges::next(range.begin(),
 6205|      0|                                ranges::distance(crange.begin(), it));
 6206|      0|        }
 6207|  63.1k|        else {
 6208|  63.1k|            SCN_EXPECT(false);
 6209|  63.1k|            SCN_UNREACHABLE;
 6210|  63.1k|        }
 6211|  63.1k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5810|   304k|{
 5811|   304k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|   304k|        return reader_impl_for_bool<CharT>{};
 5813|   304k|    }
 5814|   304k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|   304k|        return reader_impl_for_char<CharT>{};
 5816|   304k|    }
 5817|   304k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|   304k|        return reader_impl_for_wchar<CharT>{};
 5819|   304k|    }
 5820|   304k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|   304k|        return reader_impl_for_code_point<CharT>{};
 5822|   304k|    }
 5823|   304k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|   304k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|   304k|        return reader_impl_for_string<CharT>{};
 5826|   304k|    }
 5827|   304k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|   304k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5828:24): [Folded - Ignored]
  ------------------
 5829|   304k|        return reader_impl_for_string<CharT>{};
 5830|   304k|    }
 5831|   304k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|   304k|                       std::is_same_v<T, wregex_matches>) {
 5833|   304k|        return reader_impl_for_regex_matches<CharT>{};
 5834|   304k|    }
 5835|   304k|    else if constexpr (std::is_same_v<T, void*>) {
 5836|   304k|        return reader_impl_for_voidptr<CharT>{};
 5837|   304k|    }
 5838|   304k|    else if constexpr (std::is_floating_point_v<T>) {
 5839|   304k|        return reader_impl_for_float<CharT>{};
 5840|   304k|    }
 5841|   304k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|   304k|                       !std::is_same_v<T, wchar_t> &&
 5843|   304k|                       !std::is_same_v<T, char32_t> &&
 5844|   304k|                       !std::is_same_v<T, bool>) {
 5845|   304k|        return reader_impl_for_int<CharT>{};
 5846|   304k|    }
 5847|   304k|    else {
 5848|   304k|        return reader_impl_for_monostate<CharT>{};
 5849|   304k|    }
 5850|   304k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5207|   455k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   188k|    {
 3040|   188k|        reader_error_handler eh{};
 3041|   188k|        get_derived().check_specs_impl(specs, eh);
 3042|   188k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.15k, False: 184k]
  |  |  ------------------
  ------------------
 3043|  4.15k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.15k|        }
 3045|   184k|        return {};
 3046|   188k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   188k|    {
 3051|   188k|        return static_cast<Derived&>(*this);
 3052|   188k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5211|   188k|    {
 5212|   188k|        detail::check_string_type_specs(specs, eh);
 5213|       |
 5214|   188k|        SCN_GCC_PUSH
 5215|   188k|        SCN_GCC_IGNORE("-Wswitch")
 5216|   188k|        SCN_GCC_IGNORE("-Wswitch-default")
 5217|       |
 5218|   188k|        SCN_CLANG_PUSH
 5219|   188k|        SCN_CLANG_IGNORE("-Wswitch")
 5220|   188k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5221|       |
 5222|   188k|        switch (specs.type) {
  ------------------
  |  Branch (5222:17): [True: 0, False: 188k]
  ------------------
 5223|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5223:13): [True: 0, False: 188k]
  ------------------
 5224|      0|                m_type = reader_type::word;
 5225|      0|                break;
 5226|       |
 5227|   177k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5227:13): [True: 177k, False: 10.5k]
  ------------------
 5228|   177k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5228:21): [True: 0, False: 177k]
  ------------------
 5229|   177k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5229:21): [True: 0, False: 177k]
  ------------------
 5230|      0|                    m_type = reader_type::custom_word;
 5231|      0|                }
 5232|   177k|                else {
 5233|   177k|                    m_type = reader_type::word;
 5234|   177k|                }
 5235|   177k|                break;
 5236|      0|            }
 5237|       |
 5238|  4.15k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5238:13): [True: 4.15k, False: 184k]
  ------------------
 5239|  4.15k|                m_type = reader_type::character;
 5240|  4.15k|                break;
 5241|       |
 5242|  6.42k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5242:13): [True: 6.42k, False: 181k]
  ------------------
 5243|  6.42k|                m_type = reader_type::character_set;
 5244|  6.42k|                break;
 5245|       |
 5246|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5246:13): [True: 0, False: 188k]
  ------------------
 5247|      0|                m_type = reader_type::regex;
 5248|      0|                break;
 5249|       |
 5250|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5250:13): [True: 0, False: 188k]
  ------------------
 5251|      0|                m_type = reader_type::regex_escaped;
 5252|      0|                break;
 5253|   188k|        }
 5254|       |
 5255|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5256|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5257|   188k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6121|  61.7k|    {
 6122|  61.7k|        const bool need_skipped_width =
 6123|  61.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 61.7k]
  |  Branch (6123:33): [True: 0, False: 61.7k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  61.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  61.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  61.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  61.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 984, False: 60.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    984|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    984|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    984|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    984|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    984|    }                                                  \
  |  |  |  | 3642|  61.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  60.7k|        auto [it, prefix_width] = prefix_result;
 6128|  60.7k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  60.7k|        std::ptrdiff_t value_width = 0;
 6132|  60.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 60.7k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  60.7k|        else {
 6148|  60.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  60.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  60.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.78k, False: 58.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  1.78k|    }                                                  \
  |  | 3642|  60.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  58.9k|                                             specs, value, loc));
 6150|       |
 6151|  58.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 58.9k]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  58.9k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  58.9k|        std::ptrdiff_t postfix_width = 0;
 6160|  58.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 58.6k, False: 370]
  ------------------
 6161|  58.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 58.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  58.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  58.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  58.6k|                                 value_width));
 6165|  58.6k|            std::tie(it, postfix_width) = postfix_result;
 6166|  58.6k|        }
 6167|       |
 6168|  58.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  58.9k|                                                 value_width, postfix_width);
 6170|  58.9k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 58.9k]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  58.9k|        return it;
 6175|  58.9k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5260|   626k|    {
 5261|   626k|        return m_type == reader_type::word;
 5262|   626k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   439k|{
 1132|   439k|    auto it = src.begin();
 1133|  3.39M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.96M, False: 436k]
  ------------------
 1134|  2.96M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.96M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.30k, False: 2.96M]
  ------------------
 1136|  1.30k|            return false;
 1137|  1.30k|        }
 1138|  2.96M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 224, False: 2.96M]
  ------------------
 1139|    224|            return false;
 1140|    224|        }
 1141|  2.96M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.96M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.96M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.66k, False: 2.95M]
  ------------------
 1144|  1.66k|            return false;
 1145|  1.66k|        }
 1146|  2.95M|        it += len;
 1147|  2.95M|    }
 1148|   436k|    return true;
 1149|   439k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   146k|{
 2993|   146k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|   146k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 2.86k, False: 143k]
  ------------------
 2995|  2.86k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.86k|    static_cast<    \
  |  |  929|  2.86k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  2.86k|        }
 2997|   143k|        else {
 2998|   143k|            dest.assign(source.view());
 2999|   143k|        }
 3000|   146k|    }
 3001|   146k|    else {
 3002|   146k|        return transcode_impl(source.view(), dest);
 3003|   146k|    }
 3004|       |
 3005|   146k|    return {};
 3006|   146k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5104|  6.42k|        {
 5105|  6.42k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5105:17): [True: 6.42k, False: 0]
  ------------------
 5106|  6.42k|                return {};
 5107|  6.42k|            }
 5108|       |
 5109|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5110|      0|            auto it = detail::to_address(charset_string.begin());
 5111|      0|            auto set = detail::parse_presentation_set(
 5112|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5113|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5114|      0|                return nonascii.err;
 5115|      0|            }
 5116|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5117|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|       |
 5119|      0|            std::sort(nonascii.extra_ranges.begin(),
 5120|      0|                      nonascii.extra_ranges.end());
 5121|      0|            return {};
 5122|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5077|  15.1k|        {
 5078|  15.1k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5079|  15.1k|            const auto val =
 5080|  15.1k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5081|  15.1k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5082|  15.1k|                    (val % 8)) &
 5083|  15.1k|                   1u;
 5084|  15.1k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5130|  16.1k|        {
 5131|  16.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5131:17): [True: 960, False: 15.1k]
  ------------------
 5132|    960|                return false;
 5133|    960|            }
 5134|       |
 5135|  15.1k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5136|  16.1k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5074|  6.42k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5278|  60.7k|    {
 5279|  60.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  60.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|  60.7k|        return read_impl(range, specs, value);
 5281|  60.7k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5296|  60.7k|    {
 5297|  60.7k|        SCN_CLANG_PUSH
 5298|  60.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|  60.7k|        switch (m_type) {
 5301|  58.6k|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 58.6k, False: 2.14k]
  ------------------
 5302|  58.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 60.7k]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 60.7k]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|  2.14k|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 2.14k, False: 58.6k]
  ------------------
 5312|  2.14k|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|  2.14k|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|      0|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 0, False: 60.7k]
  ------------------
 5317|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|      0|                    range, specs.charset_string<SourceCharT>(),
 5319|      0|                    specs.regexp_flags, value);
 5320|       |
 5321|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 0, False: 60.7k]
  ------------------
 5322|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|      0|                    range,
 5324|      0|                    get_unescaped_regex_pattern(
 5325|      0|                        specs.charset_string<SourceCharT>()),
 5326|      0|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 60.7k]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|  60.7k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|  60.7k|        }
 5333|       |
 5334|  60.7k|        SCN_CLANG_POP
 5335|  60.7k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4821|   146k|    {
 4822|   146k|        return read_string_impl(range, read_until_classic_space(range), value);
 4823|   146k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4753|   146k|{
 4754|   146k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|   146k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|   146k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 1.03k, False: 145k]
  ------------------
 4758|  1.03k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|  1.03k|                                     "Invalid encoding in scanned string");
 4760|  1.03k|    }
 4761|   145k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|   145k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 145k]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|   145k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|   145k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   146k|{
 2088|   146k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   146k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   146k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   146k|        auto buf = make_contiguous_buffer(range);
 2092|   146k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   146k|        return ranges::next(range.begin(),
 2094|   146k|                            ranges::distance(buf.view().begin(), it));
 2095|   146k|    }
 2096|   146k|    else {
 2097|   146k|        auto it = range.begin();
 2098|       |
 2099|   146k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   146k|            auto seg = get_contiguous_beginning(range);
 2101|   146k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   146k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 146k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|   146k|            ranges::advance(it, seg.size());
 2106|   146k|        }
 2107|       |
 2108|   146k|        return read_until_code_point(
 2109|   146k|            ranges::subrange{it, range.end()},
 2110|   146k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   146k|    }
 2112|   146k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   295k|{
 1039|   295k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   295k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   295k|        return r;
 1042|   295k|    }
 1043|   295k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   295k|                           ranges::const_iterator_t<Range>,
 1045|   295k|                           typename detail::basic_scan_buffer<
 1046|   295k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   295k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   295k|            auto seg = r.begin().contiguous_segment();
 1049|   295k|            auto dist =
 1050|   295k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   295k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   295k|        }
 1053|   295k|        else {
 1054|   295k|            return r.begin().contiguous_segment();
 1055|   295k|        }
 1056|   295k|    }
 1057|   295k|    else {
 1058|   295k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   295k|    }
 1060|   295k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   292k|{
 2061|   292k|    auto it = range.begin();
 2062|  1.62M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.62M, False: 3.31k]
  ------------------
 2063|  1.62M|        const auto val =
 2064|  1.62M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.62M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.61M, False: 6.76k]
  |  |  ------------------
  ------------------
 2066|  1.61M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.61M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.61M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 289k, False: 1.32M]
  ------------------
 2069|   289k|                return it;
 2070|   289k|            }
 2071|  1.61M|        }
 2072|  1.33M|        it = val.iterator;
 2073|  1.33M|    }
 2074|       |
 2075|  3.31k|    return it;
 2076|   292k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.62M|{
 1899|  1.62M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.62M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.62M|    auto it = range.begin();
 1903|  1.62M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.62M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.76k, False: 1.61M]
  |  |  ------------------
  ------------------
 1906|  6.76k|        ++it;
 1907|  6.76k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  6.76k|        return {it, {}};
 1909|  6.76k|    }
 1910|       |
 1911|  1.61M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.53M, False: 81.5k]
  ------------------
 1912|  1.53M|        ++it;
 1913|  1.53M|        return {it, string_type(1, *range.begin())};
 1914|  1.53M|    }
 1915|       |
 1916|  81.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  81.5k|    return {it, string_type{range.begin(), it}};
 1918|  1.61M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  6.76k|{
 1155|  6.76k|    auto it = input.begin();
 1156|  18.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 18.8k, False: 147]
  ------------------
 1157|  18.8k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 6.62k, False: 12.1k]
  ------------------
 1158|  6.62k|            break;
 1159|  6.62k|        }
 1160|  18.8k|    }
 1161|  6.76k|    return it;
 1162|  6.76k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  81.5k|    {
  283|  81.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  81.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  81.5k|    {
  252|  81.5k|        constexpr iter_difference_t<I> zero{0};
  253|  81.5k|        iter_difference_t<I> counter{0};
  254|       |
  255|   300k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 219k, False: 81.3k]
  |  Branch (255:30): [True: 219k, False: 185]
  ------------------
  256|   219k|            ++i;
  257|   219k|            ++counter;
  258|   219k|        }
  259|       |
  260|  81.5k|        return counter;
  261|  81.5k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  1.62M|    {
 1890|  1.62M|        return !codepoint.empty();
 1891|  1.62M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   146k|    {
  754|   146k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.01M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.01M|              cvref<T> obj = *get<T>(fn);
  745|  1.01M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.01M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.01M|              }
  748|  1.01M|              else {
  749|  1.01M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.01M|              }
  751|  1.01M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.01M|    {
  684|  1.01M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.01M|            return static_cast<T*>(s.m_cp);
  686|  1.01M|        }
  687|  1.01M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.01M|            return static_cast<T*>(s.m_p);
  689|  1.01M|        }
  690|  1.01M|        else {
  691|  1.01M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.01M|        }
  693|  1.01M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  1.01M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   146k|        {
  662|   146k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5049|  2.14k|    {
 5050|  2.14k|        auto it = read_source_impl(range, {specs});
 5051|  2.14k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 754]
  |  |  ------------------
  ------------------
 5052|  1.38k|            return unexpected(it.error());
 5053|  1.38k|        }
 5054|       |
 5055|    754|        return read_string_impl(range, *it, value);
 5056|  2.14k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5154|  2.14k|    {
 5155|  2.14k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5156|  2.14k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5157|       |
 5158|  2.14k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.14k]
  |  |  ------------------
  ------------------
 5159|      0|            return unexpected(e);
 5160|      0|        }
 5161|       |
 5162|  2.14k|        read_source_callback cb_wrapper{helper};
 5163|       |
 5164|  2.14k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5164:13): [True: 0, False: 2.14k]
  ------------------
 5165|      0|            const auto cb = [&](char32_t cp) {
 5166|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5167|      0|            };
 5168|       |
 5169|      0|            if (is_inverted) {
  ------------------
  |  Branch (5169:17): [True: 0, False: 0]
  ------------------
 5170|      0|                auto it = read_until_code_point(range, cb);
 5171|      0|                return check_nonempty(it, range);
 5172|      0|            }
 5173|      0|            auto it = read_while_code_point(range, cb);
 5174|      0|            return check_nonempty(it, range);
 5175|      0|        }
 5176|       |
 5177|  2.14k|        const auto cb = [&](SourceCharT ch) {
 5178|  2.14k|            return cb_wrapper.on_ascii_only(ch);
 5179|  2.14k|        };
 5180|       |
 5181|  2.14k|        if (is_inverted) {
  ------------------
  |  Branch (5181:13): [True: 0, False: 2.14k]
  ------------------
 5182|      0|            auto it = read_until_code_unit(range, cb);
 5183|      0|            return check_nonempty(it, range);
 5184|      0|        }
 5185|  2.14k|        auto it = read_while_code_unit(range, cb);
 5186|  2.14k|        return check_nonempty(it, range);
 5187|  2.14k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5192|  2.14k|    {
 5193|  2.14k|        if (it == range.begin()) {
  ------------------
  |  Branch (5193:13): [True: 1.38k, False: 754]
  ------------------
 5194|  1.38k|            return unexpected_scan_error(
 5195|  1.38k|                scan_error::invalid_scanned_value,
 5196|  1.38k|                "No characters matched in [character set]");
 5197|  1.38k|        }
 5198|       |
 5199|    754|        return it;
 5200|  2.14k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   145k|{
 2082|   145k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   145k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_:
  753|  2.14k|    {
  754|  2.14k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  5.37k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.37k|              cvref<T> obj = *get<T>(fn);
  745|  5.37k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.37k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.37k|              }
  748|  5.37k|              else {
  749|  5.37k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.37k|              }
  751|  5.37k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.37k|    {
  684|  5.37k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.37k|            return static_cast<T*>(s.m_cp);
  686|  5.37k|        }
  687|  5.37k|        else if constexpr (std::is_object_v<T>) {
  688|  5.37k|            return static_cast<T*>(s.m_p);
  689|  5.37k|        }
  690|  5.37k|        else {
  691|  5.37k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.37k|        }
  693|  5.37k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5177|  5.37k|        const auto cb = [&](SourceCharT ch) {
 5178|  5.37k|            return cb_wrapper.on_ascii_only(ch);
 5179|  5.37k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  666|  2.14k|        {
  667|  2.14k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4753|    754|{
 4754|    754|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|    754|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|    754|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 0, False: 754]
  ------------------
 4758|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|      0|                                     "Invalid encoding in scanned string");
 4760|      0|    }
 4761|    754|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    754|    static_cast<    \
  |  |  929|    754|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|    754|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    754|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 754]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|    754|    return SCN_MOVE(result);
  ------------------
  |  |  928|    754|    static_cast<    \
  |  |  929|    754|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|    754|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5278|  60.2k|    {
 5279|  60.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  60.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|  60.2k|        return read_impl(range, specs, value);
 5281|  60.2k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5296|  60.2k|    {
 5297|  60.2k|        SCN_CLANG_PUSH
 5298|  60.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|  60.2k|        switch (m_type) {
 5301|  58.1k|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 58.1k, False: 2.14k]
  ------------------
 5302|  58.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 60.2k]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 60.2k]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|  2.14k|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 2.14k, False: 58.1k]
  ------------------
 5312|  2.14k|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|  2.14k|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|      0|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 0, False: 60.2k]
  ------------------
 5317|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|      0|                    range, specs.charset_string<SourceCharT>(),
 5319|      0|                    specs.regexp_flags, value);
 5320|       |
 5321|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 0, False: 60.2k]
  ------------------
 5322|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|      0|                    range,
 5324|      0|                    get_unescaped_regex_pattern(
 5325|      0|                        specs.charset_string<SourceCharT>()),
 5326|      0|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 60.2k]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|  60.2k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|  60.2k|        }
 5333|       |
 5334|  60.2k|        SCN_CLANG_POP
 5335|  60.2k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4821|   145k|    {
 4822|   145k|        return read_string_impl(range, read_until_classic_space(range), value);
 4823|   145k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4753|   145k|{
 4754|   145k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|   145k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|   145k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 1.08k, False: 144k]
  ------------------
 4758|  1.08k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|  1.08k|                                     "Invalid encoding in scanned string");
 4760|  1.08k|    }
 4761|   144k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|   144k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|   144k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|   144k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   145k|{
 3012|   145k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|   145k|        dest.assign(source.view());
 3014|   145k|    }
 3015|   145k|    else {
 3016|   145k|        return transcode_impl(source.view(), dest);
 3017|   145k|    }
 3018|       |
 3019|   145k|    return {};
 3020|   145k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   290k|{
 2088|   290k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   290k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   290k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   290k|        auto buf = make_contiguous_buffer(range);
 2092|   290k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   290k|        return ranges::next(range.begin(),
 2094|   290k|                            ranges::distance(buf.view().begin(), it));
 2095|   290k|    }
 2096|   290k|    else {
 2097|   290k|        auto it = range.begin();
 2098|       |
 2099|   290k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   290k|            auto seg = get_contiguous_beginning(range);
 2101|   290k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   290k|                seg_it != seg.end()) {
 2103|   290k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   290k|            }
 2105|   290k|            ranges::advance(it, seg.size());
 2106|   290k|        }
 2107|       |
 2108|   290k|        return read_until_code_point(
 2109|   290k|            ranges::subrange{it, range.end()},
 2110|   290k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   290k|    }
 2112|   290k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5049|  2.14k|    {
 5050|  2.14k|        auto it = read_source_impl(range, {specs});
 5051|  2.14k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 754]
  |  |  ------------------
  ------------------
 5052|  1.38k|            return unexpected(it.error());
 5053|  1.38k|        }
 5054|       |
 5055|    754|        return read_string_impl(range, *it, value);
 5056|  2.14k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5154|  4.28k|    {
 5155|  4.28k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5156|  4.28k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5157|       |
 5158|  4.28k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.28k]
  |  |  ------------------
  ------------------
 5159|      0|            return unexpected(e);
 5160|      0|        }
 5161|       |
 5162|  4.28k|        read_source_callback cb_wrapper{helper};
 5163|       |
 5164|  4.28k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5164:13): [True: 0, False: 4.28k]
  ------------------
 5165|      0|            const auto cb = [&](char32_t cp) {
 5166|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5167|      0|            };
 5168|       |
 5169|      0|            if (is_inverted) {
  ------------------
  |  Branch (5169:17): [True: 0, False: 0]
  ------------------
 5170|      0|                auto it = read_until_code_point(range, cb);
 5171|      0|                return check_nonempty(it, range);
 5172|      0|            }
 5173|      0|            auto it = read_while_code_point(range, cb);
 5174|      0|            return check_nonempty(it, range);
 5175|      0|        }
 5176|       |
 5177|  4.28k|        const auto cb = [&](SourceCharT ch) {
 5178|  4.28k|            return cb_wrapper.on_ascii_only(ch);
 5179|  4.28k|        };
 5180|       |
 5181|  4.28k|        if (is_inverted) {
  ------------------
  |  Branch (5181:13): [True: 0, False: 4.28k]
  ------------------
 5182|      0|            auto it = read_until_code_unit(range, cb);
 5183|      0|            return check_nonempty(it, range);
 5184|      0|        }
 5185|  4.28k|        auto it = read_while_code_unit(range, cb);
 5186|  4.28k|        return check_nonempty(it, range);
 5187|  4.28k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5192|  4.28k|    {
 5193|  4.28k|        if (it == range.begin()) {
  ------------------
  |  Branch (5193:13): [True: 2.77k, False: 1.50k]
  ------------------
 5194|  2.77k|            return unexpected_scan_error(
 5195|  2.77k|                scan_error::invalid_scanned_value,
 5196|  2.77k|                "No characters matched in [character set]");
 5197|  2.77k|        }
 5198|       |
 5199|  1.50k|        return it;
 5200|  4.28k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|  4.28k|    {
  754|  4.28k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  10.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.7k|              cvref<T> obj = *get<T>(fn);
  745|  10.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.7k|              }
  748|  10.7k|              else {
  749|  10.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.7k|              }
  751|  10.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  10.7k|    {
  684|  10.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.7k|            return static_cast<T*>(s.m_cp);
  686|  10.7k|        }
  687|  10.7k|        else if constexpr (std::is_object_v<T>) {
  688|  10.7k|            return static_cast<T*>(s.m_p);
  689|  10.7k|        }
  690|  10.7k|        else {
  691|  10.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.7k|        }
  693|  10.7k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5177|  10.7k|        const auto cb = [&](SourceCharT ch) {
 5178|  10.7k|            return cb_wrapper.on_ascii_only(ch);
 5179|  10.7k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|  4.28k|        {
  667|  4.28k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4753|    754|{
 4754|    754|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|    754|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|    754|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 0, False: 754]
  ------------------
 4758|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|      0|                                     "Invalid encoding in scanned string");
 4760|      0|    }
 4761|    754|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    754|    static_cast<    \
  |  |  929|    754|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|    754|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    754|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 754]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|    754|    return SCN_MOVE(result);
  ------------------
  |  |  928|    754|    static_cast<    \
  |  |  929|    754|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|    754|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5810|   151k|{
 5811|   151k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|   151k|        return reader_impl_for_bool<CharT>{};
 5813|   151k|    }
 5814|   151k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|   151k|        return reader_impl_for_char<CharT>{};
 5816|   151k|    }
 5817|   151k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|   151k|        return reader_impl_for_wchar<CharT>{};
 5819|   151k|    }
 5820|   151k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|   151k|        return reader_impl_for_code_point<CharT>{};
 5822|   151k|    }
 5823|   151k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|   151k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|   151k|        return reader_impl_for_string<CharT>{};
 5826|   151k|    }
 5827|   151k|    else if constexpr (std::is_same_v<T, std::string> ||
 5828|   151k|                       std::is_same_v<T, std::wstring>) {
 5829|   151k|        return reader_impl_for_string<CharT>{};
 5830|   151k|    }
 5831|   151k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|   151k|                       std::is_same_v<T, wregex_matches>) {
 5833|   151k|        return reader_impl_for_regex_matches<CharT>{};
 5834|   151k|    }
 5835|   151k|    else if constexpr (std::is_same_v<T, void*>) {
 5836|   151k|        return reader_impl_for_voidptr<CharT>{};
 5837|   151k|    }
 5838|   151k|    else if constexpr (std::is_floating_point_v<T>) {
 5839|   151k|        return reader_impl_for_float<CharT>{};
 5840|   151k|    }
 5841|   151k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|   151k|                       !std::is_same_v<T, wchar_t> &&
 5843|   151k|                       !std::is_same_v<T, char32_t> &&
 5844|   151k|                       !std::is_same_v<T, bool>) {
 5845|   151k|        return reader_impl_for_int<CharT>{};
 5846|   151k|    }
 5847|   151k|    else {
 5848|   151k|        return reader_impl_for_monostate<CharT>{};
 5849|   151k|    }
 5850|   151k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5278|  60.2k|    {
 5279|  60.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  60.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|  60.2k|        return read_impl(range, specs, value);
 5281|  60.2k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5296|  60.2k|    {
 5297|  60.2k|        SCN_CLANG_PUSH
 5298|  60.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|  60.2k|        switch (m_type) {
 5301|  58.1k|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 58.1k, False: 2.14k]
  ------------------
 5302|  58.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 60.2k]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 60.2k]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|  2.14k|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 2.14k, False: 58.1k]
  ------------------
 5312|  2.14k|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|  2.14k|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|      0|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 0, False: 60.2k]
  ------------------
 5317|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|      0|                    range, specs.charset_string<SourceCharT>(),
 5319|      0|                    specs.regexp_flags, value);
 5320|       |
 5321|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 0, False: 60.2k]
  ------------------
 5322|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|      0|                    range,
 5324|      0|                    get_unescaped_regex_pattern(
 5325|      0|                        specs.charset_string<SourceCharT>()),
 5326|      0|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 60.2k]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|  60.2k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|  60.2k|        }
 5333|       |
 5334|  60.2k|        SCN_CLANG_POP
 5335|  60.2k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4828|   145k|    {
 4829|   145k|        return read_string_view_impl(range, read_until_classic_space(range),
 4830|   145k|                                     value);
 4831|   145k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4774|   145k|{
 4775|   145k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4776|       |
 4777|   145k|    auto src = [&]() {
 4778|   145k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4779|   145k|            return make_contiguous_buffer(
 4780|   145k|                ranges::subrange{range.begin().base(), result.base()});
 4781|   145k|        }
 4782|   145k|        else {
 4783|   145k|            return make_contiguous_buffer(
 4784|   145k|                ranges::subrange{range.begin(), result});
 4785|   145k|        }
 4786|   145k|    }();
 4787|   145k|    using src_type = decltype(src);
 4788|       |
 4789|   145k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4789:9): [Folded - Ignored]
  ------------------
 4790|      0|        return unexpected_scan_error(
 4791|      0|            scan_error::invalid_scanned_value,
 4792|      0|            "Cannot read a string_view from this source range (not "
 4793|      0|            "contiguous)");
 4794|      0|    }
 4795|   145k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4795:19): [Folded - Ignored]
  ------------------
 4796|   145k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4797|   145k|                                     "Cannot read a string_view from "
 4798|   145k|                                     "this source range (would require "
 4799|   145k|                                     "transcoding)");
 4800|   145k|    }
 4801|   145k|    else {
 4802|   145k|        const auto view = src.view();
 4803|   145k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4804|       |
 4805|   145k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4805:13): [True: 1.08k, False: 144k]
  ------------------
 4806|  1.08k|            return unexpected_scan_error(
 4807|  1.08k|                scan_error::invalid_scanned_value,
 4808|  1.08k|                "Invalid encoding in scanned string_view");
 4809|  1.08k|        }
 4810|       |
 4811|   144k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4812|   145k|    }
 4813|   145k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4777|   145k|    auto src = [&]() {
 4778|   145k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4778:23): [Folded - Ignored]
  ------------------
 4779|   145k|            return make_contiguous_buffer(
 4780|   145k|                ranges::subrange{range.begin().base(), result.base()});
 4781|   145k|        }
 4782|   145k|        else {
 4783|   145k|            return make_contiguous_buffer(
 4784|   145k|                ranges::subrange{range.begin(), result});
 4785|   145k|        }
 4786|   145k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5063|  2.14k|    {
 5064|  2.14k|        auto it = read_source_impl(range, {specs});
 5065|  2.14k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 754]
  |  |  ------------------
  ------------------
 5066|  1.38k|            return unexpected(it.error());
 5067|  1.38k|        }
 5068|       |
 5069|    754|        return read_string_view_impl(range, *it, value);
 5070|  2.14k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4774|    754|{
 4775|    754|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4776|       |
 4777|    754|    auto src = [&]() {
 4778|    754|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4779|    754|            return make_contiguous_buffer(
 4780|    754|                ranges::subrange{range.begin().base(), result.base()});
 4781|    754|        }
 4782|    754|        else {
 4783|    754|            return make_contiguous_buffer(
 4784|    754|                ranges::subrange{range.begin(), result});
 4785|    754|        }
 4786|    754|    }();
 4787|    754|    using src_type = decltype(src);
 4788|       |
 4789|    754|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4789:9): [Folded - Ignored]
  ------------------
 4790|      0|        return unexpected_scan_error(
 4791|      0|            scan_error::invalid_scanned_value,
 4792|      0|            "Cannot read a string_view from this source range (not "
 4793|      0|            "contiguous)");
 4794|      0|    }
 4795|    754|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4795:19): [Folded - Ignored]
  ------------------
 4796|    754|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4797|    754|                                     "Cannot read a string_view from "
 4798|    754|                                     "this source range (would require "
 4799|    754|                                     "transcoding)");
 4800|    754|    }
 4801|    754|    else {
 4802|    754|        const auto view = src.view();
 4803|    754|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4804|       |
 4805|    754|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4805:13): [True: 0, False: 754]
  ------------------
 4806|      0|            return unexpected_scan_error(
 4807|      0|                scan_error::invalid_scanned_value,
 4808|      0|                "Invalid encoding in scanned string_view");
 4809|      0|        }
 4810|       |
 4811|    754|        return SCN_MOVE(result);
  ------------------
  |  |  928|    754|    static_cast<    \
  |  |  929|    754|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4812|    754|    }
 4813|    754|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4777|    754|    auto src = [&]() {
 4778|    754|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4778:23): [Folded - Ignored]
  ------------------
 4779|    754|            return make_contiguous_buffer(
 4780|    754|                ranges::subrange{range.begin().base(), result.base()});
 4781|    754|        }
 4782|    754|        else {
 4783|    754|            return make_contiguous_buffer(
 4784|    754|                ranges::subrange{range.begin(), result});
 4785|    754|        }
 4786|    754|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   148k|{
 2951|   148k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 148k, False: 0]
  ------------------
 2952|   148k|        auto it = read_while_classic_space(range);
 2953|   148k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   148k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.89k, False: 146k]
  |  |  ------------------
  ------------------
 2955|  1.89k|            return unexpected(e);
 2956|  1.89k|        }
 2957|       |
 2958|   146k|        return it;
 2959|   148k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   148k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   148k|{
 2117|   148k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   148k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   148k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   148k|        auto buf = make_contiguous_buffer(range);
 2121|   148k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   148k|        return ranges::next(range.begin(),
 2123|   148k|                            ranges::distance(buf.view().begin(), it));
 2124|   148k|    }
 2125|   148k|    else {
 2126|   148k|        auto it = range.begin();
 2127|       |
 2128|   148k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   148k|            auto seg = get_contiguous_beginning(range);
 2130|   148k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   148k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 3.11k, False: 145k]
  ------------------
 2132|  3.11k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  3.11k|            }
 2134|   145k|            ranges::advance(it, seg.size());
 2135|   145k|        }
 2136|       |
 2137|   145k|        return read_while_code_point(
 2138|   145k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   148k|    }
 2140|   148k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   145k|    {
  754|   145k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   605k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   605k|              cvref<T> obj = *get<T>(fn);
  745|   605k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   605k|                  obj(static_cast<decltype(args)>(args)...);
  747|   605k|              }
  748|   605k|              else {
  749|   605k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   605k|              }
  751|   605k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   605k|    {
  684|   605k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   605k|            return static_cast<T*>(s.m_cp);
  686|   605k|        }
  687|   605k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   605k|            return static_cast<T*>(s.m_p);
  689|   605k|        }
  690|   605k|        else {
  691|   605k|            return reinterpret_cast<T*>(s.m_fp);
  692|   605k|        }
  693|   605k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   605k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   145k|        {
  662|   145k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  16.8M|{
  981|  16.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  16.8M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  16.8M|        return true;
  984|  16.8M|    }
  985|  16.8M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  16.8M|                           ranges::const_iterator_t<Range>,
  987|  16.8M|                           typename detail::basic_scan_buffer<
  988|  16.8M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  16.8M|        auto beg = r.begin();
  990|  16.8M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 16.8M, False: 0]
  ------------------
  991|  16.8M|            return false;
  992|  16.8M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  16.8M|    else {
 1006|  16.8M|        return false;
 1007|  16.8M|    }
 1008|  16.8M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6038|  6.74M|    {
 6039|  6.74M|        const bool need_skipped_width =
 6040|  6.74M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 0, False: 6.74M]
  |  Branch (6040:33): [True: 0, False: 6.74M]
  ------------------
 6041|  6.74M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|  6.74M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 0, False: 6.74M]
  ------------------
 6045|  6.74M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 0, False: 6.74M]
  ------------------
 6046|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6047|      0|                             need_skipped_width);
 6048|      0|        }
 6049|  6.74M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 6.74M, False: 0]
  |  Branch (6049:56): [True: 6.74M, False: 2.80k]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|  6.74M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 6.74M]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|  13.4M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  6.74M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.74M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.74M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 6.74M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.56k|    }                                                  \
  |  |  |  | 3642|  6.74M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|  13.4M|                            make_eof_scan_error));
 6060|       |
 6061|  13.4M|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 0, False: 6.74M]
  ------------------
 6062|      0|                return result_type{
 6063|      0|                    it,
 6064|      0|                    calculate_text_width(make_contiguous_buffer(
 6065|      0|                                             ranges::subrange{rng.begin(), it})
 6066|      0|                                             .view())};
 6067|      0|            }
 6068|  6.74M|            return result_type{it, 0};
 6069|  13.4M|        }
 6070|       |
 6071|  2.80k|        return result_type{rng.begin(), 0};
 6072|  6.74M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.80k|{
 1976|  2.80k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.80k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.80k|{
 1957|  2.80k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.80k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.80k|    }
 1960|  2.80k|    else {
 1961|  2.80k|        auto first = range.begin();
 1962|  2.83k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 2.81k, False: 20]
  ------------------
 1963|  2.81k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.78k, False: 30]
  ------------------
 1964|  2.78k|                return first;
 1965|  2.78k|            }
 1966|  2.81k|        }
 1967|     20|        return first;
 1968|  2.80k|    }
 1969|  2.80k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  16.8k|    {
  763|  16.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  16.8k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  8.40k|    {
  754|  8.40k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  8.43k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.43k|              cvref<T> obj = *get<T>(fn);
  745|  8.43k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  8.43k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.43k|              }
  748|  8.43k|              else {
  749|  8.43k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.43k|              }
  751|  8.43k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  8.43k|    {
  684|  8.43k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  8.43k|            return static_cast<T*>(s.m_cp);
  686|  8.43k|        }
  687|  8.43k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  8.43k|            return static_cast<T*>(s.m_p);
  689|  8.43k|        }
  690|  8.43k|        else {
  691|  8.43k|            return reinterpret_cast<T*>(s.m_fp);
  692|  8.43k|        }
  693|  8.43k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  8.40k|        {
  662|  8.40k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  6.73M|    {
  108|  6.73M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  6.73M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  6.73M|    {
   94|  6.73M|        iter_difference_t<I> counter{0};
   95|  70.0M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 63.3M, False: 6.73M]
  ------------------
   96|  63.3M|            ++i;
   97|  63.3M|            ++counter;
   98|  63.3M|        }
   99|  6.73M|        return counter;
  100|  6.73M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  26.9M|{
  950|  26.9M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  26.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.90k, False: 26.9M]
  |  |  ------------------
  ------------------
  951|  3.90k|        return eof_error::eof;
  952|  3.90k|    }
  953|  26.9M|    return eof_error::good;
  954|  26.9M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   219M|{
  944|   219M|    return is_range_eof(r.begin(), r.end());
  945|   219M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   219M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   219M|    {
  937|   219M|        return begin == end;
  938|   219M|    }
  939|   219M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  16.8M|{
 1683|  16.8M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  16.8M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  16.8M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  16.8M|        return string_view_wrapper{SCN_FWD(range)};
 1687|  16.8M|    }
 1688|  16.8M|    else {
 1689|  16.8M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  16.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  16.8M|    }
 1691|  16.8M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  16.8M|    {
 1537|  16.8M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  16.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  16.8M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  16.8M|    {
 1621|  16.8M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  16.8M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  16.8M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  16.8M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  16.8M|            m_storage.reset();
 1627|  16.8M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  16.8M|        }
 1629|  16.8M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  16.8M|                                          std::basic_string<CharT>>) {
 1631|  16.8M|            m_storage.emplace(SCN_FWD(range));
 1632|  16.8M|            m_view = string_view_type{*m_storage};
 1633|  16.8M|        }
 1634|  16.8M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  16.8M|                                          typename detail::basic_scan_buffer<
 1636|  16.8M|                                              value_t>::forward_iterator> &&
 1637|  16.8M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  16.8M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  16.8M|            auto end_seg = range.end().contiguous_segment();
 1640|  16.8M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  16.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.77k, False: 16.8M]
  |  |  ------------------
  ------------------
 1641|  16.8M|                             detail::to_address(end_seg.end()))) {
 1642|  5.77k|                auto& str = m_storage.emplace();
 1643|  5.77k|                str.reserve(range.end().position() - range.begin().position());
 1644|  5.77k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  5.77k|                m_view = string_view_type{str};
 1646|  5.77k|                return;
 1647|  5.77k|            }
 1648|       |
 1649|  16.8M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  16.8M|                                                            end_seg.data());
 1651|  16.8M|            m_storage.reset();
 1652|  16.8M|        }
 1653|  16.8M|        else {
 1654|  16.8M|            auto& str = m_storage.emplace();
 1655|  16.8M|            if constexpr (ranges::sized_range<Range>) {
 1656|  16.8M|                str.reserve(range.size());
 1657|  16.8M|            }
 1658|  16.8M|            if constexpr (ranges::common_range<Range>) {
 1659|  16.8M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  16.8M|                          std::back_inserter(str));
 1661|  16.8M|            }
 1662|  16.8M|            else {
 1663|  16.8M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  16.8M|                     ++it) {
 1665|  16.8M|                    str.push_back(*it);
 1666|  16.8M|                }
 1667|  16.8M|            }
 1668|  16.8M|            m_view = string_view_type{str};
 1669|  16.8M|        }
 1670|  16.8M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  33.6M|    {
 1582|  33.6M|        return m_view;
 1583|  33.6M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  16.8M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6080|  6.73M|    {
 6081|  6.73M|        const bool need_skipped_width =
 6082|  6.73M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6082:13): [True: 0, False: 6.73M]
  |  Branch (6082:33): [True: 0, False: 6.73M]
  ------------------
 6083|  6.73M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6084|       |
 6085|  6.73M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6085:13): [True: 0, False: 6.73M]
  ------------------
 6086|  6.73M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6086:13): [True: 0, False: 6.73M]
  ------------------
 6087|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6088|      0|                             specs.fill, need_skipped_width);
 6089|      0|        }
 6090|  6.73M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6090:13): [True: 6.73M, False: 0]
  ------------------
 6091|  6.73M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6091:13): [True: 20, False: 6.73M]
  ------------------
 6092|  6.73M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6092:15): [True: 0, False: 20]
  |  Branch (6092:35): [True: 0, False: 0]
  ------------------
 6093|     20|             (specs.precision != 0 &&
  ------------------
  |  Branch (6093:15): [True: 0, False: 20]
  ------------------
 6094|     20|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  ------------------
 6095|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6095:17): [True: 0, False: 0]
  ------------------
 6096|      0|                const auto initial_width =
 6097|      0|                    specs.precision - prefix_width - value_width;
 6098|      0|                auto max_width_view = take_width(rng, initial_width);
 6099|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6100|      0|                                  .transform_error(make_eof_scan_error));
 6101|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6102|      0|            }
 6103|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6104|      0|                            make_eof_scan_error));
 6105|       |
 6106|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6106:17): [True: 0, False: 0]
  ------------------
 6107|      0|                return result_type{
 6108|      0|                    it,
 6109|      0|                    calculate_text_width(make_contiguous_buffer(
 6110|      0|                                             ranges::subrange{rng.begin(), it})
 6111|      0|                                             .view())};
 6112|      0|            }
 6113|      0|            return result_type{it, 0};
 6114|      0|        }
 6115|  6.73M|        return result_type{rng.begin(), 0};
 6116|  6.73M|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   384M|{
 1899|   384M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   384M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   384M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   384M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   384M|    auto it = range.begin();
 1903|   384M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   384M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   384M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   384M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 384M, False: 0]
  ------------------
 1912|   384M|        ++it;
 1913|   384M|        return {it, string_type(1, *range.begin())};
 1914|   384M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   384M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   438M|{
  944|   438M|    return is_range_eof(r.begin(), r.end());
  945|   438M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   438M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   438M|    {
  937|   438M|        return begin == end;
  938|   438M|    }
  939|   438M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   384M|    {
 1890|   384M|        return !codepoint.empty();
 1891|   384M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  53.9M|{
  950|  53.9M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  53.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.81k, False: 53.9M]
  |  |  ------------------
  ------------------
  951|  7.81k|        return eof_error::eof;
  952|  7.81k|    }
  953|  53.9M|    return eof_error::good;
  954|  53.9M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  33.7M|{
 1683|  33.7M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  33.7M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  33.7M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  33.7M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  33.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  33.7M|    }
 1688|  33.7M|    else {
 1689|  33.7M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  33.7M|    }
 1691|  33.7M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  33.7M|    {
 1490|  33.7M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  50.5M|    {
 1503|  50.5M|        return sv;
 1504|  50.5M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  5.60k|{
 1976|  5.60k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  5.60k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  5.60k|{
 1957|  5.60k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.60k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.60k|    }
 1960|  5.60k|    else {
 1961|  5.60k|        auto first = range.begin();
 1962|  5.60k|        for (; first != range.end(); ++first) {
 1963|  5.60k|            if (pred(*first)) {
 1964|  5.60k|                return first;
 1965|  5.60k|            }
 1966|  5.60k|        }
 1967|  5.60k|        return first;
 1968|  5.60k|    }
 1969|  5.60k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  33.7M|{
 2951|  33.7M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 33.7M, False: 0]
  ------------------
 2952|  33.7M|        auto it = read_while_classic_space(range);
 2953|  33.7M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  33.7M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  33.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.47k, False: 33.7M]
  |  |  ------------------
  ------------------
 2955|  5.47k|            return unexpected(e);
 2956|  5.47k|        }
 2957|       |
 2958|  33.7M|        return it;
 2959|  33.7M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  33.7M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  33.7M|{
 2117|  33.7M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  33.7M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  33.7M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  33.7M|        auto buf = make_contiguous_buffer(range);
 2121|  33.7M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  33.7M|        return ranges::next(range.begin(),
 2123|  33.7M|                            ranges::distance(buf.view().begin(), it));
 2124|  33.7M|    }
 2125|  33.7M|    else {
 2126|  33.7M|        auto it = range.begin();
 2127|       |
 2128|  33.7M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  33.7M|            auto seg = get_contiguous_beginning(range);
 2130|  33.7M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  33.7M|                seg_it != seg.end()) {
 2132|  33.7M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  33.7M|            }
 2134|  33.7M|            ranges::advance(it, seg.size());
 2135|  33.7M|        }
 2136|       |
 2137|  33.7M|        return read_while_code_point(
 2138|  33.7M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  33.7M|    }
 2140|  33.7M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  33.7M|{
 2082|  33.7M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  33.7M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  67.4M|{
 2061|  67.4M|    auto it = range.begin();
 2062|   384M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 384M, False: 14.8k]
  ------------------
 2063|   384M|        const auto val =
 2064|   384M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   384M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   384M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 384M, False: 0]
  |  |  ------------------
  ------------------
 2066|   384M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   384M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   384M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 67.3M, False: 317M]
  ------------------
 2069|  67.3M|                return it;
 2070|  67.3M|            }
 2071|   384M|        }
 2072|   317M|        it = val.iterator;
 2073|   317M|    }
 2074|       |
 2075|  14.8k|    return it;
 2076|  67.4M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  33.7M|    {
  754|  33.7M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  98.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.7M|              cvref<T> obj = *get<T>(fn);
  745|  98.7M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  98.7M|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.7M|              }
  748|  98.7M|              else {
  749|  98.7M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.7M|              }
  751|  98.7M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  98.7M|    {
  684|  98.7M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  98.7M|            return static_cast<T*>(s.m_cp);
  686|  98.7M|        }
  687|  98.7M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  98.7M|            return static_cast<T*>(s.m_p);
  689|  98.7M|        }
  690|  98.7M|        else {
  691|  98.7M|            return reinterpret_cast<T*>(s.m_fp);
  692|  98.7M|        }
  693|  98.7M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  98.7M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  33.7M|        {
  662|  33.7M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  16.8M|    {
 1587|  16.8M|        return m_storage.has_value();
 1588|  16.8M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  3.26k|    {
 1592|  3.26k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.26k|        return *m_storage;
 1594|  3.26k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5207|  50.5M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  20.2M|    {
 3040|  20.2M|        reader_error_handler eh{};
 3041|  20.2M|        get_derived().check_specs_impl(specs, eh);
 3042|  20.2M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  20.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.31k, False: 20.2M]
  |  |  ------------------
  ------------------
 3043|  8.31k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  8.31k|        }
 3045|  20.2M|        return {};
 3046|  20.2M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  20.2M|    {
 3051|  20.2M|        return static_cast<Derived&>(*this);
 3052|  20.2M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5211|  20.2M|    {
 5212|  20.2M|        detail::check_string_type_specs(specs, eh);
 5213|       |
 5214|  20.2M|        SCN_GCC_PUSH
 5215|  20.2M|        SCN_GCC_IGNORE("-Wswitch")
 5216|  20.2M|        SCN_GCC_IGNORE("-Wswitch-default")
 5217|       |
 5218|  20.2M|        SCN_CLANG_PUSH
 5219|  20.2M|        SCN_CLANG_IGNORE("-Wswitch")
 5220|  20.2M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5221|       |
 5222|  20.2M|        switch (specs.type) {
  ------------------
  |  Branch (5222:17): [True: 0, False: 20.2M]
  ------------------
 5223|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5223:13): [True: 0, False: 20.2M]
  ------------------
 5224|      0|                m_type = reader_type::word;
 5225|      0|                break;
 5226|       |
 5227|  20.2M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5227:13): [True: 20.2M, False: 16.7k]
  ------------------
 5228|  20.2M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5228:21): [True: 0, False: 20.2M]
  ------------------
 5229|  20.2M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5229:21): [True: 0, False: 20.2M]
  ------------------
 5230|      0|                    m_type = reader_type::custom_word;
 5231|      0|                }
 5232|  20.2M|                else {
 5233|  20.2M|                    m_type = reader_type::word;
 5234|  20.2M|                }
 5235|  20.2M|                break;
 5236|      0|            }
 5237|       |
 5238|  8.31k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5238:13): [True: 8.31k, False: 20.2M]
  ------------------
 5239|  8.31k|                m_type = reader_type::character;
 5240|  8.31k|                break;
 5241|       |
 5242|  8.40k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5242:13): [True: 8.40k, False: 20.2M]
  ------------------
 5243|  8.40k|                m_type = reader_type::character_set;
 5244|  8.40k|                break;
 5245|       |
 5246|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5246:13): [True: 0, False: 20.2M]
  ------------------
 5247|      0|                m_type = reader_type::regex;
 5248|      0|                break;
 5249|       |
 5250|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5250:13): [True: 0, False: 20.2M]
  ------------------
 5251|      0|                m_type = reader_type::regex_escaped;
 5252|      0|                break;
 5253|  20.2M|        }
 5254|       |
 5255|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5256|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5257|  20.2M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5260|  70.7M|    {
 5261|  70.7M|        return m_type == reader_type::word;
 5262|  70.7M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  50.5M|{
 1132|  50.5M|    auto it = src.begin();
 1133|   427M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 377M, False: 50.5M]
  ------------------
 1134|   377M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   377M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 377M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   377M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 377M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   377M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   377M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   377M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 9.07k, False: 377M]
  ------------------
 1144|  9.07k|            return false;
 1145|  9.07k|        }
 1146|   377M|        it += len;
 1147|   377M|    }
 1148|  50.5M|    return true;
 1149|  50.5M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5104|  8.40k|        {
 5105|  8.40k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5105:17): [True: 8.40k, False: 0]
  ------------------
 5106|  8.40k|                return {};
 5107|  8.40k|            }
 5108|       |
 5109|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5110|      0|            auto it = detail::to_address(charset_string.begin());
 5111|      0|            auto set = detail::parse_presentation_set(
 5112|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5113|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5114|      0|                return nonascii.err;
 5115|      0|            }
 5116|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5117|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|       |
 5119|      0|            std::sort(nonascii.extra_ranges.begin(),
 5120|      0|                      nonascii.extra_ranges.end());
 5121|      0|            return {};
 5122|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5077|  4.68k|        {
 5078|  4.68k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  4.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5079|  4.68k|            const auto val =
 5080|  4.68k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5081|  4.68k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5082|  4.68k|                    (val % 8)) &
 5083|  4.68k|                   1u;
 5084|  4.68k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5130|  8.43k|        {
 5131|  8.43k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5131:17): [True: 3.75k, False: 4.68k]
  ------------------
 5132|  3.75k|                return false;
 5133|  3.75k|            }
 5134|       |
 5135|  4.68k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5136|  8.43k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5074|  8.40k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  16.8M|{
 2088|  16.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  16.8M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  16.8M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  16.8M|        auto buf = make_contiguous_buffer(range);
 2092|  16.8M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  16.8M|        return ranges::next(range.begin(),
 2094|  16.8M|                            ranges::distance(buf.view().begin(), it));
 2095|  16.8M|    }
 2096|  16.8M|    else {
 2097|  16.8M|        auto it = range.begin();
 2098|       |
 2099|  16.8M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  16.8M|            auto seg = get_contiguous_beginning(range);
 2101|  16.8M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  16.8M|                seg_it != seg.end()) {
 2103|  16.8M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  16.8M|            }
 2105|  16.8M|            ranges::advance(it, seg.size());
 2106|  16.8M|        }
 2107|       |
 2108|  16.8M|        return read_until_code_point(
 2109|  16.8M|            ranges::subrange{it, range.end()},
 2110|  16.8M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  16.8M|    }
 2112|  16.8M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  33.7M|{
 2061|  33.7M|    auto it = range.begin();
 2062|   192M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 192M, False: 7.41k]
  ------------------
 2063|   192M|        const auto val =
 2064|   192M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   192M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   192M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 192M, False: 0]
  |  |  ------------------
  ------------------
 2066|   192M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   192M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   192M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 33.6M, False: 158M]
  ------------------
 2069|  33.6M|                return it;
 2070|  33.6M|            }
 2071|   192M|        }
 2072|   158M|        it = val.iterator;
 2073|   158M|    }
 2074|       |
 2075|  7.41k|    return it;
 2076|  33.7M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   192M|{
 1899|   192M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   192M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   192M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   192M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   192M|    auto it = range.begin();
 1903|   192M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   192M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   192M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 192M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   192M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 192M, False: 0]
  ------------------
 1912|   192M|        ++it;
 1913|   192M|        return {it, string_type(1, *range.begin())};
 1914|   192M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   192M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   192M|    {
 1890|   192M|        return !codepoint.empty();
 1891|   192M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  16.8M|    {
  754|  16.8M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   143M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   143M|              cvref<T> obj = *get<T>(fn);
  745|   143M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   143M|                  obj(static_cast<decltype(args)>(args)...);
  747|   143M|              }
  748|   143M|              else {
  749|   143M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   143M|              }
  751|   143M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   143M|    {
  684|   143M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   143M|            return static_cast<T*>(s.m_cp);
  686|   143M|        }
  687|   143M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   143M|            return static_cast<T*>(s.m_p);
  689|   143M|        }
  690|   143M|        else {
  691|   143M|            return reinterpret_cast<T*>(s.m_fp);
  692|   143M|        }
  693|   143M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|   143M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  16.8M|        {
  662|  16.8M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5154|  2.80k|    {
 5155|  2.80k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5156|  2.80k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5157|       |
 5158|  2.80k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.80k]
  |  |  ------------------
  ------------------
 5159|      0|            return unexpected(e);
 5160|      0|        }
 5161|       |
 5162|  2.80k|        read_source_callback cb_wrapper{helper};
 5163|       |
 5164|  2.80k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5164:13): [True: 0, False: 2.80k]
  ------------------
 5165|      0|            const auto cb = [&](char32_t cp) {
 5166|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5167|      0|            };
 5168|       |
 5169|      0|            if (is_inverted) {
  ------------------
  |  Branch (5169:17): [True: 0, False: 0]
  ------------------
 5170|      0|                auto it = read_until_code_point(range, cb);
 5171|      0|                return check_nonempty(it, range);
 5172|      0|            }
 5173|      0|            auto it = read_while_code_point(range, cb);
 5174|      0|            return check_nonempty(it, range);
 5175|      0|        }
 5176|       |
 5177|  2.80k|        const auto cb = [&](SourceCharT ch) {
 5178|  2.80k|            return cb_wrapper.on_ascii_only(ch);
 5179|  2.80k|        };
 5180|       |
 5181|  2.80k|        if (is_inverted) {
  ------------------
  |  Branch (5181:13): [True: 0, False: 2.80k]
  ------------------
 5182|      0|            auto it = read_until_code_unit(range, cb);
 5183|      0|            return check_nonempty(it, range);
 5184|      0|        }
 5185|  2.80k|        auto it = read_while_code_unit(range, cb);
 5186|  2.80k|        return check_nonempty(it, range);
 5187|  2.80k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5192|  2.80k|    {
 5193|  2.80k|        if (it == range.begin()) {
  ------------------
  |  Branch (5193:13): [True: 2.77k, False: 30]
  ------------------
 5194|  2.77k|            return unexpected_scan_error(
 5195|  2.77k|                scan_error::invalid_scanned_value,
 5196|  2.77k|                "No characters matched in [character set]");
 5197|  2.77k|        }
 5198|       |
 5199|     30|        return it;
 5200|  2.80k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  16.8M|{
 2082|  16.8M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  16.8M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_:
  753|  2.80k|    {
  754|  2.80k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|  2.81k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.81k|              cvref<T> obj = *get<T>(fn);
  745|  2.81k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.81k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.81k|              }
  748|  2.81k|              else {
  749|  2.81k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.81k|              }
  751|  2.81k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.81k|    {
  684|  2.81k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.81k|            return static_cast<T*>(s.m_cp);
  686|  2.81k|        }
  687|  2.81k|        else if constexpr (std::is_object_v<T>) {
  688|  2.81k|            return static_cast<T*>(s.m_p);
  689|  2.81k|        }
  690|  2.81k|        else {
  691|  2.81k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.81k|        }
  693|  2.81k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5177|  2.81k|        const auto cb = [&](SourceCharT ch) {
 5178|  2.81k|            return cb_wrapper.on_ascii_only(ch);
 5179|  2.81k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  666|  2.80k|        {
  667|  2.80k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  33.7M|{
 2088|  33.7M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  33.7M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  33.7M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  33.7M|        auto buf = make_contiguous_buffer(range);
 2092|  33.7M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  33.7M|        return ranges::next(range.begin(),
 2094|  33.7M|                            ranges::distance(buf.view().begin(), it));
 2095|  33.7M|    }
 2096|  33.7M|    else {
 2097|  33.7M|        auto it = range.begin();
 2098|       |
 2099|  33.7M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  33.7M|            auto seg = get_contiguous_beginning(range);
 2101|  33.7M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  33.7M|                seg_it != seg.end()) {
 2103|  33.7M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  33.7M|            }
 2105|  33.7M|            ranges::advance(it, seg.size());
 2106|  33.7M|        }
 2107|       |
 2108|  33.7M|        return read_until_code_point(
 2109|  33.7M|            ranges::subrange{it, range.end()},
 2110|  33.7M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  33.7M|    }
 2112|  33.7M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  33.7M|    {
  754|  33.7M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   286M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   286M|              cvref<T> obj = *get<T>(fn);
  745|   286M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   286M|                  obj(static_cast<decltype(args)>(args)...);
  747|   286M|              }
  748|   286M|              else {
  749|   286M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   286M|              }
  751|   286M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   286M|    {
  684|   286M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   286M|            return static_cast<T*>(s.m_cp);
  686|   286M|        }
  687|   286M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   286M|            return static_cast<T*>(s.m_p);
  689|   286M|        }
  690|   286M|        else {
  691|   286M|            return reinterpret_cast<T*>(s.m_fp);
  692|   286M|        }
  693|   286M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   286M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  33.7M|        {
  662|  33.7M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5154|  5.60k|    {
 5155|  5.60k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5156|  5.60k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5157|       |
 5158|  5.60k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.60k]
  |  |  ------------------
  ------------------
 5159|      0|            return unexpected(e);
 5160|      0|        }
 5161|       |
 5162|  5.60k|        read_source_callback cb_wrapper{helper};
 5163|       |
 5164|  5.60k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5164:13): [True: 0, False: 5.60k]
  ------------------
 5165|      0|            const auto cb = [&](char32_t cp) {
 5166|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5167|      0|            };
 5168|       |
 5169|      0|            if (is_inverted) {
  ------------------
  |  Branch (5169:17): [True: 0, False: 0]
  ------------------
 5170|      0|                auto it = read_until_code_point(range, cb);
 5171|      0|                return check_nonempty(it, range);
 5172|      0|            }
 5173|      0|            auto it = read_while_code_point(range, cb);
 5174|      0|            return check_nonempty(it, range);
 5175|      0|        }
 5176|       |
 5177|  5.60k|        const auto cb = [&](SourceCharT ch) {
 5178|  5.60k|            return cb_wrapper.on_ascii_only(ch);
 5179|  5.60k|        };
 5180|       |
 5181|  5.60k|        if (is_inverted) {
  ------------------
  |  Branch (5181:13): [True: 0, False: 5.60k]
  ------------------
 5182|      0|            auto it = read_until_code_unit(range, cb);
 5183|      0|            return check_nonempty(it, range);
 5184|      0|        }
 5185|  5.60k|        auto it = read_while_code_unit(range, cb);
 5186|  5.60k|        return check_nonempty(it, range);
 5187|  5.60k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5192|  5.60k|    {
 5193|  5.60k|        if (it == range.begin()) {
  ------------------
  |  Branch (5193:13): [True: 5.54k, False: 60]
  ------------------
 5194|  5.54k|            return unexpected_scan_error(
 5195|  5.54k|                scan_error::invalid_scanned_value,
 5196|  5.54k|                "No characters matched in [character set]");
 5197|  5.54k|        }
 5198|       |
 5199|     60|        return it;
 5200|  5.60k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|  5.60k|    {
  754|  5.60k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  5.62k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.62k|              cvref<T> obj = *get<T>(fn);
  745|  5.62k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.62k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.62k|              }
  748|  5.62k|              else {
  749|  5.62k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.62k|              }
  751|  5.62k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  5.62k|    {
  684|  5.62k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.62k|            return static_cast<T*>(s.m_cp);
  686|  5.62k|        }
  687|  5.62k|        else if constexpr (std::is_object_v<T>) {
  688|  5.62k|            return static_cast<T*>(s.m_p);
  689|  5.62k|        }
  690|  5.62k|        else {
  691|  5.62k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.62k|        }
  693|  5.62k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5177|  5.62k|        const auto cb = [&](SourceCharT ch) {
 5178|  5.62k|            return cb_wrapper.on_ascii_only(ch);
 5179|  5.62k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|  5.60k|        {
  667|  5.60k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6179|  6.74M|    {
 6180|  6.74M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  6.74M|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|      0|                          basic_contiguous_scan_context<char_type>>) {
 6184|  6.74M|            auto rd = make_reader<T, char_type>();
 6185|  6.74M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6186|  6.74M|                return unexpected(e);
 6187|  6.74M|            }
 6188|       |
 6189|  6.74M|            return impl(rd, range, value);
 6190|  6.74M|        }
 6191|  6.74M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6191:28): [Folded - Ignored]
  ------------------
 6192|  6.74M|            auto rd = make_reader<T, char_type>();
 6193|  6.74M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 6.74M]
  |  |  ------------------
  ------------------
 6194|  2.77k|                return unexpected(e);
 6195|  2.77k|            }
 6196|       |
 6197|  6.74M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6197:17): [True: 6.74M, False: 0]
  |  Branch (6197:50): [True: 0, False: 0]
  ------------------
 6198|  6.74M|                specs.width != 0) {
  ------------------
  |  Branch (6198:17): [True: 0, False: 0]
  ------------------
 6199|  6.74M|                return impl(rd, range, value);
 6200|  6.74M|            }
 6201|       |
 6202|      0|            auto crange = get_as_contiguous(range);
 6203|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6204|      0|            return ranges::next(range.begin(),
 6205|      0|                                ranges::distance(crange.begin(), it));
 6206|      0|        }
 6207|  6.74M|        else {
 6208|  6.74M|            SCN_EXPECT(false);
 6209|  6.74M|            SCN_UNREACHABLE;
 6210|  6.74M|        }
 6211|  6.74M|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5810|  33.7M|{
 5811|  33.7M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|  33.7M|        return reader_impl_for_bool<CharT>{};
 5813|  33.7M|    }
 5814|  33.7M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|  33.7M|        return reader_impl_for_char<CharT>{};
 5816|  33.7M|    }
 5817|  33.7M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|  33.7M|        return reader_impl_for_wchar<CharT>{};
 5819|  33.7M|    }
 5820|  33.7M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|  33.7M|        return reader_impl_for_code_point<CharT>{};
 5822|  33.7M|    }
 5823|  33.7M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  33.7M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|  33.7M|        return reader_impl_for_string<CharT>{};
 5826|  33.7M|    }
 5827|  33.7M|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  33.7M|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5828:24): [Folded - Ignored]
  ------------------
 5829|  33.7M|        return reader_impl_for_string<CharT>{};
 5830|  33.7M|    }
 5831|  33.7M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|  33.7M|                       std::is_same_v<T, wregex_matches>) {
 5833|  33.7M|        return reader_impl_for_regex_matches<CharT>{};
 5834|  33.7M|    }
 5835|  33.7M|    else if constexpr (std::is_same_v<T, void*>) {
 5836|  33.7M|        return reader_impl_for_voidptr<CharT>{};
 5837|  33.7M|    }
 5838|  33.7M|    else if constexpr (std::is_floating_point_v<T>) {
 5839|  33.7M|        return reader_impl_for_float<CharT>{};
 5840|  33.7M|    }
 5841|  33.7M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|  33.7M|                       !std::is_same_v<T, wchar_t> &&
 5843|  33.7M|                       !std::is_same_v<T, char32_t> &&
 5844|  33.7M|                       !std::is_same_v<T, bool>) {
 5845|  33.7M|        return reader_impl_for_int<CharT>{};
 5846|  33.7M|    }
 5847|  33.7M|    else {
 5848|  33.7M|        return reader_impl_for_monostate<CharT>{};
 5849|  33.7M|    }
 5850|  33.7M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6121|  6.74M|    {
 6122|  6.74M|        const bool need_skipped_width =
 6123|  6.74M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 6.74M]
  |  Branch (6123:33): [True: 0, False: 6.74M]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  6.74M|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  6.74M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.74M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.74M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 6.74M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.56k|    }                                                  \
  |  |  |  | 3642|  6.74M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  6.74M|        auto [it, prefix_width] = prefix_result;
 6128|  6.74M|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  6.74M|        std::ptrdiff_t value_width = 0;
 6132|  6.74M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 6.74M]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  6.74M|        else {
 6148|  6.74M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  6.74M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  6.74M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.98k, False: 6.73M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  3.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  3.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  3.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  3.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  3.98k|    }                                                  \
  |  | 3642|  6.74M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  6.73M|                                             specs, value, loc));
 6150|       |
 6151|  6.73M|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 6.73M]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  6.73M|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  6.73M|        std::ptrdiff_t postfix_width = 0;
 6160|  6.73M|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 6.73M, False: 788]
  ------------------
 6161|  6.73M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  6.73M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.73M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.73M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.73M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.73M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  6.73M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  6.73M|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  6.73M|                                 value_width));
 6165|  6.73M|            std::tie(it, postfix_width) = postfix_result;
 6166|  6.73M|        }
 6167|       |
 6168|  6.73M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  6.73M|                                                 value_width, postfix_width);
 6170|  6.73M|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 6.73M]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  6.73M|        return it;
 6175|  6.73M|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  16.8M|{
 2993|  16.8M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|  16.8M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 3.26k, False: 16.8M]
  ------------------
 2995|  3.26k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.26k|    static_cast<    \
  |  |  929|  3.26k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  3.26k|        }
 2997|  16.8M|        else {
 2998|  16.8M|            dest.assign(source.view());
 2999|  16.8M|        }
 3000|  16.8M|    }
 3001|  16.8M|    else {
 3002|  16.8M|        return transcode_impl(source.view(), dest);
 3003|  16.8M|    }
 3004|       |
 3005|  16.8M|    return {};
 3006|  16.8M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5278|  6.74M|    {
 5279|  6.74M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.74M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|  6.74M|        return read_impl(range, specs, value);
 5281|  6.74M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5296|  6.74M|    {
 5297|  6.74M|        SCN_CLANG_PUSH
 5298|  6.74M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|  6.74M|        switch (m_type) {
 5301|  6.74M|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 6.74M, False: 2.80k]
  ------------------
 5302|  6.74M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 6.74M]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 6.74M]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|  2.80k|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 2.80k, False: 6.74M]
  ------------------
 5312|  2.80k|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|  2.80k|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|      0|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 0, False: 6.74M]
  ------------------
 5317|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|      0|                    range, specs.charset_string<SourceCharT>(),
 5319|      0|                    specs.regexp_flags, value);
 5320|       |
 5321|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 0, False: 6.74M]
  ------------------
 5322|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|      0|                    range,
 5324|      0|                    get_unescaped_regex_pattern(
 5325|      0|                        specs.charset_string<SourceCharT>()),
 5326|      0|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 6.74M]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|  6.74M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|  6.74M|        }
 5333|       |
 5334|  6.74M|        SCN_CLANG_POP
 5335|  6.74M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4821|  16.8M|    {
 4822|  16.8M|        return read_string_impl(range, read_until_classic_space(range), value);
 4823|  16.8M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4753|  16.8M|{
 4754|  16.8M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|  16.8M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|  16.8M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 3.02k, False: 16.8M]
  ------------------
 4758|  3.02k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|  3.02k|                                     "Invalid encoding in scanned string");
 4760|  3.02k|    }
 4761|  16.8M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  16.8M|    static_cast<    \
  |  |  929|  16.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|  16.8M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8M]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|  16.8M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  16.8M|    static_cast<    \
  |  |  929|  16.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|  16.8M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5049|  2.80k|    {
 5050|  2.80k|        auto it = read_source_impl(range, {specs});
 5051|  2.80k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 30]
  |  |  ------------------
  ------------------
 5052|  2.77k|            return unexpected(it.error());
 5053|  2.77k|        }
 5054|       |
 5055|     30|        return read_string_impl(range, *it, value);
 5056|  2.80k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4753|     30|{
 4754|     30|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|     30|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|     30|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 0, False: 30]
  ------------------
 4758|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|      0|                                     "Invalid encoding in scanned string");
 4760|      0|    }
 4761|     30|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     30|    static_cast<    \
  |  |  929|     30|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|     30|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|     30|    return SCN_MOVE(result);
  ------------------
  |  |  928|     30|    static_cast<    \
  |  |  929|     30|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|     30|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5278|  6.74M|    {
 5279|  6.74M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.74M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|  6.74M|        return read_impl(range, specs, value);
 5281|  6.74M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5296|  6.74M|    {
 5297|  6.74M|        SCN_CLANG_PUSH
 5298|  6.74M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|  6.74M|        switch (m_type) {
 5301|  6.74M|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 6.74M, False: 2.80k]
  ------------------
 5302|  6.74M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 6.74M]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 6.74M]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|  2.80k|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 2.80k, False: 6.74M]
  ------------------
 5312|  2.80k|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|  2.80k|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|      0|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 0, False: 6.74M]
  ------------------
 5317|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|      0|                    range, specs.charset_string<SourceCharT>(),
 5319|      0|                    specs.regexp_flags, value);
 5320|       |
 5321|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 0, False: 6.74M]
  ------------------
 5322|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|      0|                    range,
 5324|      0|                    get_unescaped_regex_pattern(
 5325|      0|                        specs.charset_string<SourceCharT>()),
 5326|      0|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 6.74M]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|  6.74M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|  6.74M|        }
 5333|       |
 5334|  6.74M|        SCN_CLANG_POP
 5335|  6.74M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4821|  16.8M|    {
 4822|  16.8M|        return read_string_impl(range, read_until_classic_space(range), value);
 4823|  16.8M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4753|  16.8M|{
 4754|  16.8M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|  16.8M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|  16.8M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 3.02k, False: 16.8M]
  ------------------
 4758|  3.02k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|  3.02k|                                     "Invalid encoding in scanned string");
 4760|  3.02k|    }
 4761|  16.8M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  16.8M|    static_cast<    \
  |  |  929|  16.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|  16.8M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.8M]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|  16.8M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  16.8M|    static_cast<    \
  |  |  929|  16.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|  16.8M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  16.8M|{
 3012|  16.8M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  16.8M|        dest.assign(source.view());
 3014|  16.8M|    }
 3015|  16.8M|    else {
 3016|  16.8M|        return transcode_impl(source.view(), dest);
 3017|  16.8M|    }
 3018|       |
 3019|  16.8M|    return {};
 3020|  16.8M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5049|  2.80k|    {
 5050|  2.80k|        auto it = read_source_impl(range, {specs});
 5051|  2.80k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 30]
  |  |  ------------------
  ------------------
 5052|  2.77k|            return unexpected(it.error());
 5053|  2.77k|        }
 5054|       |
 5055|     30|        return read_string_impl(range, *it, value);
 5056|  2.80k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4753|     30|{
 4754|     30|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|     30|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|     30|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 0, False: 30]
  ------------------
 4758|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|      0|                                     "Invalid encoding in scanned string");
 4760|      0|    }
 4761|     30|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     30|    static_cast<    \
  |  |  929|     30|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|     30|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|     30|    return SCN_MOVE(result);
  ------------------
  |  |  928|     30|    static_cast<    \
  |  |  929|     30|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|     30|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5810|  16.8M|{
 5811|  16.8M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|  16.8M|        return reader_impl_for_bool<CharT>{};
 5813|  16.8M|    }
 5814|  16.8M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|  16.8M|        return reader_impl_for_char<CharT>{};
 5816|  16.8M|    }
 5817|  16.8M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|  16.8M|        return reader_impl_for_wchar<CharT>{};
 5819|  16.8M|    }
 5820|  16.8M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|  16.8M|        return reader_impl_for_code_point<CharT>{};
 5822|  16.8M|    }
 5823|  16.8M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  16.8M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|  16.8M|        return reader_impl_for_string<CharT>{};
 5826|  16.8M|    }
 5827|  16.8M|    else if constexpr (std::is_same_v<T, std::string> ||
 5828|  16.8M|                       std::is_same_v<T, std::wstring>) {
 5829|  16.8M|        return reader_impl_for_string<CharT>{};
 5830|  16.8M|    }
 5831|  16.8M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|  16.8M|                       std::is_same_v<T, wregex_matches>) {
 5833|  16.8M|        return reader_impl_for_regex_matches<CharT>{};
 5834|  16.8M|    }
 5835|  16.8M|    else if constexpr (std::is_same_v<T, void*>) {
 5836|  16.8M|        return reader_impl_for_voidptr<CharT>{};
 5837|  16.8M|    }
 5838|  16.8M|    else if constexpr (std::is_floating_point_v<T>) {
 5839|  16.8M|        return reader_impl_for_float<CharT>{};
 5840|  16.8M|    }
 5841|  16.8M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|  16.8M|                       !std::is_same_v<T, wchar_t> &&
 5843|  16.8M|                       !std::is_same_v<T, char32_t> &&
 5844|  16.8M|                       !std::is_same_v<T, bool>) {
 5845|  16.8M|        return reader_impl_for_int<CharT>{};
 5846|  16.8M|    }
 5847|  16.8M|    else {
 5848|  16.8M|        return reader_impl_for_monostate<CharT>{};
 5849|  16.8M|    }
 5850|  16.8M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5278|  6.74M|    {
 5279|  6.74M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.74M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|  6.74M|        return read_impl(range, specs, value);
 5281|  6.74M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5296|  6.74M|    {
 5297|  6.74M|        SCN_CLANG_PUSH
 5298|  6.74M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|  6.74M|        switch (m_type) {
 5301|  6.74M|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 6.74M, False: 2.80k]
  ------------------
 5302|  6.74M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 6.74M]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 6.74M]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|  2.80k|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 2.80k, False: 6.74M]
  ------------------
 5312|  2.80k|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|  2.80k|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|      0|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 0, False: 6.74M]
  ------------------
 5317|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|      0|                    range, specs.charset_string<SourceCharT>(),
 5319|      0|                    specs.regexp_flags, value);
 5320|       |
 5321|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 0, False: 6.74M]
  ------------------
 5322|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|      0|                    range,
 5324|      0|                    get_unescaped_regex_pattern(
 5325|      0|                        specs.charset_string<SourceCharT>()),
 5326|      0|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 6.74M]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|  6.74M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|  6.74M|        }
 5333|       |
 5334|  6.74M|        SCN_CLANG_POP
 5335|  6.74M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4828|  16.8M|    {
 4829|  16.8M|        return read_string_view_impl(range, read_until_classic_space(range),
 4830|  16.8M|                                     value);
 4831|  16.8M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4774|  16.8M|{
 4775|  16.8M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4776|       |
 4777|  16.8M|    auto src = [&]() {
 4778|  16.8M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4779|  16.8M|            return make_contiguous_buffer(
 4780|  16.8M|                ranges::subrange{range.begin().base(), result.base()});
 4781|  16.8M|        }
 4782|  16.8M|        else {
 4783|  16.8M|            return make_contiguous_buffer(
 4784|  16.8M|                ranges::subrange{range.begin(), result});
 4785|  16.8M|        }
 4786|  16.8M|    }();
 4787|  16.8M|    using src_type = decltype(src);
 4788|       |
 4789|  16.8M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4789:9): [Folded - Ignored]
  ------------------
 4790|      0|        return unexpected_scan_error(
 4791|      0|            scan_error::invalid_scanned_value,
 4792|      0|            "Cannot read a string_view from this source range (not "
 4793|      0|            "contiguous)");
 4794|      0|    }
 4795|  16.8M|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4795:19): [Folded - Ignored]
  ------------------
 4796|  16.8M|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4797|  16.8M|                                     "Cannot read a string_view from "
 4798|  16.8M|                                     "this source range (would require "
 4799|  16.8M|                                     "transcoding)");
 4800|  16.8M|    }
 4801|  16.8M|    else {
 4802|  16.8M|        const auto view = src.view();
 4803|  16.8M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4804|       |
 4805|  16.8M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4805:13): [True: 3.02k, False: 16.8M]
  ------------------
 4806|  3.02k|            return unexpected_scan_error(
 4807|  3.02k|                scan_error::invalid_scanned_value,
 4808|  3.02k|                "Invalid encoding in scanned string_view");
 4809|  3.02k|        }
 4810|       |
 4811|  16.8M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  16.8M|    static_cast<    \
  |  |  929|  16.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4812|  16.8M|    }
 4813|  16.8M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4777|  16.8M|    auto src = [&]() {
 4778|  16.8M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4778:23): [Folded - Ignored]
  ------------------
 4779|  16.8M|            return make_contiguous_buffer(
 4780|  16.8M|                ranges::subrange{range.begin().base(), result.base()});
 4781|  16.8M|        }
 4782|  16.8M|        else {
 4783|  16.8M|            return make_contiguous_buffer(
 4784|  16.8M|                ranges::subrange{range.begin(), result});
 4785|  16.8M|        }
 4786|  16.8M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5063|  2.80k|    {
 5064|  2.80k|        auto it = read_source_impl(range, {specs});
 5065|  2.80k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 30]
  |  |  ------------------
  ------------------
 5066|  2.77k|            return unexpected(it.error());
 5067|  2.77k|        }
 5068|       |
 5069|     30|        return read_string_view_impl(range, *it, value);
 5070|  2.80k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4774|     30|{
 4775|     30|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4776|       |
 4777|     30|    auto src = [&]() {
 4778|     30|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4779|     30|            return make_contiguous_buffer(
 4780|     30|                ranges::subrange{range.begin().base(), result.base()});
 4781|     30|        }
 4782|     30|        else {
 4783|     30|            return make_contiguous_buffer(
 4784|     30|                ranges::subrange{range.begin(), result});
 4785|     30|        }
 4786|     30|    }();
 4787|     30|    using src_type = decltype(src);
 4788|       |
 4789|     30|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4789:9): [Folded - Ignored]
  ------------------
 4790|      0|        return unexpected_scan_error(
 4791|      0|            scan_error::invalid_scanned_value,
 4792|      0|            "Cannot read a string_view from this source range (not "
 4793|      0|            "contiguous)");
 4794|      0|    }
 4795|     30|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4795:19): [Folded - Ignored]
  ------------------
 4796|     30|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4797|     30|                                     "Cannot read a string_view from "
 4798|     30|                                     "this source range (would require "
 4799|     30|                                     "transcoding)");
 4800|     30|    }
 4801|     30|    else {
 4802|     30|        const auto view = src.view();
 4803|     30|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4804|       |
 4805|     30|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4805:13): [True: 0, False: 30]
  ------------------
 4806|      0|            return unexpected_scan_error(
 4807|      0|                scan_error::invalid_scanned_value,
 4808|      0|                "Invalid encoding in scanned string_view");
 4809|      0|        }
 4810|       |
 4811|     30|        return SCN_MOVE(result);
  ------------------
  |  |  928|     30|    static_cast<    \
  |  |  929|     30|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4812|     30|    }
 4813|     30|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4777|     30|    auto src = [&]() {
 4778|     30|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4778:23): [Folded - Ignored]
  ------------------
 4779|     30|            return make_contiguous_buffer(
 4780|     30|                ranges::subrange{range.begin().base(), result.base()});
 4781|     30|        }
 4782|     30|        else {
 4783|     30|            return make_contiguous_buffer(
 4784|     30|                ranges::subrange{range.begin(), result});
 4785|     30|        }
 4786|     30|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  16.8M|{
 2951|  16.8M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 16.8M, False: 0]
  ------------------
 2952|  16.8M|        auto it = read_while_classic_space(range);
 2953|  16.8M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  16.8M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  16.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 16.8M]
  |  |  ------------------
  ------------------
 2955|  2.73k|            return unexpected(e);
 2956|  2.73k|        }
 2957|       |
 2958|  16.8M|        return it;
 2959|  16.8M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  16.8M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  16.8M|{
 2117|  16.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  16.8M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  16.8M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  16.8M|        auto buf = make_contiguous_buffer(range);
 2121|  16.8M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  16.8M|        return ranges::next(range.begin(),
 2123|  16.8M|                            ranges::distance(buf.view().begin(), it));
 2124|  16.8M|    }
 2125|  16.8M|    else {
 2126|  16.8M|        auto it = range.begin();
 2127|       |
 2128|  16.8M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  16.8M|            auto seg = get_contiguous_beginning(range);
 2130|  16.8M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  16.8M|                seg_it != seg.end()) {
 2132|  16.8M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  16.8M|            }
 2134|  16.8M|            ranges::advance(it, seg.size());
 2135|  16.8M|        }
 2136|       |
 2137|  16.8M|        return read_while_code_point(
 2138|  16.8M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  16.8M|    }
 2140|  16.8M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  16.8M|    {
  754|  16.8M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  49.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.3M|              cvref<T> obj = *get<T>(fn);
  745|  49.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  49.3M|                  obj(static_cast<decltype(args)>(args)...);
  747|  49.3M|              }
  748|  49.3M|              else {
  749|  49.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.3M|              }
  751|  49.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  49.3M|    {
  684|  49.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  49.3M|            return static_cast<T*>(s.m_cp);
  686|  49.3M|        }
  687|  49.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  49.3M|            return static_cast<T*>(s.m_p);
  689|  49.3M|        }
  690|  49.3M|        else {
  691|  49.3M|            return reinterpret_cast<T*>(s.m_fp);
  692|  49.3M|        }
  693|  49.3M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  49.3M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  16.8M|        {
  662|  16.8M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5796|   177k|{
 5797|   177k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.02k, False: 176k]
  |  |  ------------------
  ------------------
 5798|  1.02k|        return unexpected(e);
 5799|  1.02k|    }
 5800|       |
 5801|   176k|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 0, False: 176k]
  ------------------
 5802|      0|        return range.begin();
 5803|      0|    }
 5804|       |
 5805|   176k|    return skip_classic_whitespace(range);
 5806|   176k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5872|  88.6k|    {
 5873|  88.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  88.6k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  88.6k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  88.6k|            auto rd = make_reader<T, char_type>();
 5878|  88.6k|            return impl(rd, range, value);
 5879|  88.6k|        }
 5880|  88.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  88.6k|            auto rd = make_reader<T, char_type>();
 5882|  88.6k|            if (!is_segment_contiguous(range)) {
 5883|  88.6k|                return impl(rd, range, value);
 5884|  88.6k|            }
 5885|  88.6k|            auto crange = get_as_contiguous(range);
 5886|  88.6k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  88.6k|            return ranges::next(range.begin(),
 5888|  88.6k|                                ranges::distance(crange.begin(), it));
 5889|  88.6k|        }
 5890|  88.6k|        else {
 5891|  88.6k|            SCN_EXPECT(false);
 5892|  88.6k|            SCN_UNREACHABLE;
 5893|  88.6k|        }
 5894|  88.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5864|  88.6k|    {
 5865|  88.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  88.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  88.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  88.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 87.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.43k|    }                                                  \
  |  |  |  | 3642|  88.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  87.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  87.2k|                        .transform_error(make_eof_scan_error));
 5867|  87.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  88.6k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5267|  87.2k|    {
 5268|  87.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  87.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|  87.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|  87.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5872|  88.6k|    {
 5873|  88.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  88.6k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  88.6k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  88.6k|            auto rd = make_reader<T, char_type>();
 5878|  88.6k|            return impl(rd, range, value);
 5879|  88.6k|        }
 5880|  88.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  88.6k|            auto rd = make_reader<T, char_type>();
 5882|  88.6k|            if (!is_segment_contiguous(range)) {
 5883|  88.6k|                return impl(rd, range, value);
 5884|  88.6k|            }
 5885|  88.6k|            auto crange = get_as_contiguous(range);
 5886|  88.6k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  88.6k|            return ranges::next(range.begin(),
 5888|  88.6k|                                ranges::distance(crange.begin(), it));
 5889|  88.6k|        }
 5890|  88.6k|        else {
 5891|  88.6k|            SCN_EXPECT(false);
 5892|  88.6k|            SCN_UNREACHABLE;
 5893|  88.6k|        }
 5894|  88.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5864|  88.6k|    {
 5865|  88.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  88.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  88.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  88.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 87.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.43k|    }                                                  \
  |  |  |  | 3642|  88.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  87.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  87.2k|                        .transform_error(make_eof_scan_error));
 5867|  87.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  88.6k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5267|  87.2k|    {
 5268|  87.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  87.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|  87.2k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|  87.2k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5796|  89.8k|{
 5797|  89.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 537, False: 89.2k]
  |  |  ------------------
  ------------------
 5798|    537|        return unexpected(e);
 5799|    537|    }
 5800|       |
 5801|  89.2k|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 0, False: 89.2k]
  ------------------
 5802|      0|        return range.begin();
 5803|      0|    }
 5804|       |
 5805|  89.2k|    return skip_classic_whitespace(range);
 5806|  89.2k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5872|  89.8k|    {
 5873|  89.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  89.8k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|      0|                          basic_contiguous_scan_context<char_type>>) {
 5877|  89.8k|            auto rd = make_reader<T, char_type>();
 5878|  89.8k|            return impl(rd, range, value);
 5879|  89.8k|        }
 5880|  89.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5880:28): [Folded - Ignored]
  ------------------
 5881|  89.8k|            auto rd = make_reader<T, char_type>();
 5882|  89.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5882:17): [True: 89.8k, False: 0]
  ------------------
 5883|  89.8k|                return impl(rd, range, value);
 5884|  89.8k|            }
 5885|      0|            auto crange = get_as_contiguous(range);
 5886|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5887|      0|            return ranges::next(range.begin(),
 5888|      0|                                ranges::distance(crange.begin(), it));
 5889|      0|        }
 5890|  89.8k|        else {
 5891|  89.8k|            SCN_EXPECT(false);
 5892|  89.8k|            SCN_UNREACHABLE;
 5893|  89.8k|        }
 5894|  89.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5864|  89.8k|    {
 5865|  89.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  89.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  89.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  89.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.44k, False: 88.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.44k|    }                                                  \
  |  |  |  | 3642|  89.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  88.3k|                        .transform_error(make_eof_scan_error));
 5867|  88.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  89.8k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5267|  88.3k|    {
 5268|  88.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  88.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|  88.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|  88.3k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   130k|    {
 2879|   130k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   373k|    {
 2883|   373k|        return m_current;
 2884|   373k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   242k|    {
 2888|   242k|        return m_range.end();
 2889|   242k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   116k|    {
 2903|   116k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   116k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   116k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 116k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   116k|        }
 2909|   116k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   116k|    static_cast<    \
  |  |  929|   116k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   116k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   125k|    {
 2893|   125k|        return ranges::subrange{begin(), end()};
 2894|   125k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6038|   122k|    {
 6039|   122k|        const bool need_skipped_width =
 6040|   122k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 0, False: 122k]
  |  Branch (6040:33): [True: 0, False: 122k]
  ------------------
 6041|   122k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|   122k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 0, False: 122k]
  ------------------
 6045|   122k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 0, False: 122k]
  ------------------
 6046|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6047|      0|                             need_skipped_width);
 6048|      0|        }
 6049|   122k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 122k, False: 0]
  |  Branch (6049:56): [True: 118k, False: 4.28k]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|   118k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 118k]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|   234k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.90k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.90k|    }                                                  \
  |  |  |  | 3642|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|   234k|                            make_eof_scan_error));
 6060|       |
 6061|   234k|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 0, False: 116k]
  ------------------
 6062|      0|                return result_type{
 6063|      0|                    it,
 6064|      0|                    calculate_text_width(make_contiguous_buffer(
 6065|      0|                                             ranges::subrange{rng.begin(), it})
 6066|      0|                                             .view())};
 6067|      0|            }
 6068|   116k|            return result_type{it, 0};
 6069|   234k|        }
 6070|       |
 6071|  4.28k|        return result_type{rng.begin(), 0};
 6072|   122k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6080|   116k|    {
 6081|   116k|        const bool need_skipped_width =
 6082|   116k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6082:13): [True: 0, False: 116k]
  |  Branch (6082:33): [True: 0, False: 116k]
  ------------------
 6083|   116k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6084|       |
 6085|   116k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6085:13): [True: 0, False: 116k]
  ------------------
 6086|   116k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6086:13): [True: 0, False: 116k]
  ------------------
 6087|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6088|      0|                             specs.fill, need_skipped_width);
 6089|      0|        }
 6090|   116k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6090:13): [True: 116k, False: 0]
  ------------------
 6091|   116k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6091:13): [True: 1.47k, False: 114k]
  ------------------
 6092|   116k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6092:15): [True: 0, False: 1.47k]
  |  Branch (6092:35): [True: 0, False: 0]
  ------------------
 6093|  1.47k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6093:15): [True: 0, False: 1.47k]
  ------------------
 6094|  1.47k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  ------------------
 6095|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6095:17): [True: 0, False: 0]
  ------------------
 6096|      0|                const auto initial_width =
 6097|      0|                    specs.precision - prefix_width - value_width;
 6098|      0|                auto max_width_view = take_width(rng, initial_width);
 6099|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6100|      0|                                  .transform_error(make_eof_scan_error));
 6101|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6102|      0|            }
 6103|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6104|      0|                            make_eof_scan_error));
 6105|       |
 6106|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6106:17): [True: 0, False: 0]
  ------------------
 6107|      0|                return result_type{
 6108|      0|                    it,
 6109|      0|                    calculate_text_width(make_contiguous_buffer(
 6110|      0|                                             ranges::subrange{rng.begin(), it})
 6111|      0|                                             .view())};
 6112|      0|            }
 6113|      0|            return result_type{it, 0};
 6114|      0|        }
 6115|   116k|        return result_type{rng.begin(), 0};
 6116|   116k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6179|  62.6k|    {
 6180|  62.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  62.6k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  62.6k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  62.6k|            auto rd = make_reader<T, char_type>();
 6185|  62.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  62.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 61.2k]
  |  |  ------------------
  ------------------
 6186|  1.38k|                return unexpected(e);
 6187|  1.38k|            }
 6188|       |
 6189|  61.2k|            return impl(rd, range, value);
 6190|  62.6k|        }
 6191|  62.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  62.6k|            auto rd = make_reader<T, char_type>();
 6193|  62.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  62.6k|                return unexpected(e);
 6195|  62.6k|            }
 6196|       |
 6197|  62.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  62.6k|                specs.width != 0) {
 6199|  62.6k|                return impl(rd, range, value);
 6200|  62.6k|            }
 6201|       |
 6202|  62.6k|            auto crange = get_as_contiguous(range);
 6203|  62.6k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  62.6k|            return ranges::next(range.begin(),
 6205|  62.6k|                                ranges::distance(crange.begin(), it));
 6206|  62.6k|        }
 6207|  62.6k|        else {
 6208|  62.6k|            SCN_EXPECT(false);
 6209|  62.6k|            SCN_UNREACHABLE;
 6210|  62.6k|        }
 6211|  62.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6121|  61.2k|    {
 6122|  61.2k|        const bool need_skipped_width =
 6123|  61.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 61.2k]
  |  Branch (6123:33): [True: 0, False: 61.2k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  61.2k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 954, False: 60.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    954|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    954|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    954|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    954|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    954|    }                                                  \
  |  |  |  | 3642|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  60.2k|        auto [it, prefix_width] = prefix_result;
 6128|  60.2k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  60.2k|        std::ptrdiff_t value_width = 0;
 6132|  60.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 60.2k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  60.2k|        else {
 6148|  60.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  60.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  60.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.81k, False: 58.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  1.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  1.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  1.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  1.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  1.81k|    }                                                  \
  |  | 3642|  60.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  58.4k|                                             specs, value, loc));
 6150|       |
 6151|  58.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 58.4k]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  58.4k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  58.4k|        std::ptrdiff_t postfix_width = 0;
 6160|  58.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 58.1k, False: 356]
  ------------------
 6161|  58.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  58.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  58.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  58.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 58.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  58.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  58.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  58.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  58.1k|                                 value_width));
 6165|  58.1k|            std::tie(it, postfix_width) = postfix_result;
 6166|  58.1k|        }
 6167|       |
 6168|  58.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  58.4k|                                                 value_width, postfix_width);
 6170|  58.4k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 58.4k]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  58.4k|        return it;
 6175|  58.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6179|  62.6k|    {
 6180|  62.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  62.6k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  62.6k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  62.6k|            auto rd = make_reader<T, char_type>();
 6185|  62.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  62.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 61.2k]
  |  |  ------------------
  ------------------
 6186|  1.38k|                return unexpected(e);
 6187|  1.38k|            }
 6188|       |
 6189|  61.2k|            return impl(rd, range, value);
 6190|  62.6k|        }
 6191|  62.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  62.6k|            auto rd = make_reader<T, char_type>();
 6193|  62.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  62.6k|                return unexpected(e);
 6195|  62.6k|            }
 6196|       |
 6197|  62.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  62.6k|                specs.width != 0) {
 6199|  62.6k|                return impl(rd, range, value);
 6200|  62.6k|            }
 6201|       |
 6202|  62.6k|            auto crange = get_as_contiguous(range);
 6203|  62.6k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  62.6k|            return ranges::next(range.begin(),
 6205|  62.6k|                                ranges::distance(crange.begin(), it));
 6206|  62.6k|        }
 6207|  62.6k|        else {
 6208|  62.6k|            SCN_EXPECT(false);
 6209|  62.6k|            SCN_UNREACHABLE;
 6210|  62.6k|        }
 6211|  62.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6121|  61.2k|    {
 6122|  61.2k|        const bool need_skipped_width =
 6123|  61.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 61.2k]
  |  Branch (6123:33): [True: 0, False: 61.2k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  61.2k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 954, False: 60.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    954|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    954|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    954|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    954|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    954|    }                                                  \
  |  |  |  | 3642|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  60.2k|        auto [it, prefix_width] = prefix_result;
 6128|  60.2k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  60.2k|        std::ptrdiff_t value_width = 0;
 6132|  60.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 60.2k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  60.2k|        else {
 6148|  60.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  60.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  60.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.81k, False: 58.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  1.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  1.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  1.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  1.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  1.81k|    }                                                  \
  |  | 3642|  60.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  58.4k|                                             specs, value, loc));
 6150|       |
 6151|  58.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 58.4k]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  58.4k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  58.4k|        std::ptrdiff_t postfix_width = 0;
 6160|  58.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 58.1k, False: 356]
  ------------------
 6161|  58.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  58.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  58.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  58.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 58.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  58.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  58.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  58.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  58.1k|                                 value_width));
 6165|  58.1k|            std::tie(it, postfix_width) = postfix_result;
 6166|  58.1k|        }
 6167|       |
 6168|  58.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  58.4k|                                                 value_width, postfix_width);
 6170|  58.4k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 58.4k]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  58.4k|        return it;
 6175|  58.4k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5796|  20.2M|{
 5797|  20.2M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  20.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.33k, False: 20.2M]
  |  |  ------------------
  ------------------
 5798|  2.33k|        return unexpected(e);
 5799|  2.33k|    }
 5800|       |
 5801|  20.2M|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 0, False: 20.2M]
  ------------------
 5802|      0|        return range.begin();
 5803|      0|    }
 5804|       |
 5805|  20.2M|    return skip_classic_whitespace(range);
 5806|  20.2M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5872|  10.1M|    {
 5873|  10.1M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  10.1M|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  10.1M|                          basic_contiguous_scan_context<char_type>>) {
 5877|  10.1M|            auto rd = make_reader<T, char_type>();
 5878|  10.1M|            return impl(rd, range, value);
 5879|  10.1M|        }
 5880|  10.1M|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  10.1M|            auto rd = make_reader<T, char_type>();
 5882|  10.1M|            if (!is_segment_contiguous(range)) {
 5883|  10.1M|                return impl(rd, range, value);
 5884|  10.1M|            }
 5885|  10.1M|            auto crange = get_as_contiguous(range);
 5886|  10.1M|            SCN_TRY(it, impl(rd, crange, value));
 5887|  10.1M|            return ranges::next(range.begin(),
 5888|  10.1M|                                ranges::distance(crange.begin(), it));
 5889|  10.1M|        }
 5890|  10.1M|        else {
 5891|  10.1M|            SCN_EXPECT(false);
 5892|  10.1M|            SCN_UNREACHABLE;
 5893|  10.1M|        }
 5894|  10.1M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5864|  10.1M|    {
 5865|  10.1M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  10.1M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.1M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.1M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.34k, False: 10.1M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.34k|    }                                                  \
  |  |  |  | 3642|  10.1M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  10.1M|                        .transform_error(make_eof_scan_error));
 5867|  10.1M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  10.1M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5267|  10.1M|    {
 5268|  10.1M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  10.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|  10.1M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|  10.1M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5872|  10.1M|    {
 5873|  10.1M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  10.1M|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  10.1M|                          basic_contiguous_scan_context<char_type>>) {
 5877|  10.1M|            auto rd = make_reader<T, char_type>();
 5878|  10.1M|            return impl(rd, range, value);
 5879|  10.1M|        }
 5880|  10.1M|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  10.1M|            auto rd = make_reader<T, char_type>();
 5882|  10.1M|            if (!is_segment_contiguous(range)) {
 5883|  10.1M|                return impl(rd, range, value);
 5884|  10.1M|            }
 5885|  10.1M|            auto crange = get_as_contiguous(range);
 5886|  10.1M|            SCN_TRY(it, impl(rd, crange, value));
 5887|  10.1M|            return ranges::next(range.begin(),
 5888|  10.1M|                                ranges::distance(crange.begin(), it));
 5889|  10.1M|        }
 5890|  10.1M|        else {
 5891|  10.1M|            SCN_EXPECT(false);
 5892|  10.1M|            SCN_UNREACHABLE;
 5893|  10.1M|        }
 5894|  10.1M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5864|  10.1M|    {
 5865|  10.1M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  10.1M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.1M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.1M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.34k, False: 10.1M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.34k|    }                                                  \
  |  |  |  | 3642|  10.1M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  10.1M|                        .transform_error(make_eof_scan_error));
 5867|  10.1M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  10.1M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5267|  10.1M|    {
 5268|  10.1M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  10.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|  10.1M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|  10.1M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|  13.5M|    {
 2879|  13.5M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  40.4M|    {
 2883|  40.4M|        return m_current;
 2884|  40.4M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  26.9M|    {
 2888|  26.9M|        return m_range.end();
 2889|  26.9M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  13.4M|    {
 2903|  13.4M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  13.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  13.4M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  13.4M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 13.4M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  13.4M|        }
 2909|  13.4M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  13.4M|    static_cast<    \
  |  |  929|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  13.4M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  13.4M|    {
 2893|  13.4M|        return ranges::subrange{begin(), end()};
 2894|  13.4M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6038|  13.4M|    {
 6039|  13.4M|        const bool need_skipped_width =
 6040|  13.4M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 0, False: 13.4M]
  |  Branch (6040:33): [True: 0, False: 13.4M]
  ------------------
 6041|  13.4M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|  13.4M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 0, False: 13.4M]
  ------------------
 6045|  13.4M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 0, False: 13.4M]
  ------------------
 6046|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6047|      0|                             need_skipped_width);
 6048|      0|        }
 6049|  13.4M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 13.4M, False: 0]
  |  Branch (6049:56): [True: 13.4M, False: 5.60k]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|  13.4M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 13.4M]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|  26.9M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  13.4M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  13.4M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  13.4M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.12k, False: 13.4M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  3.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  3.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  3.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  3.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  3.12k|    }                                                  \
  |  |  |  | 3642|  13.4M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|  26.9M|                            make_eof_scan_error));
 6060|       |
 6061|  26.9M|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 0, False: 13.4M]
  ------------------
 6062|      0|                return result_type{
 6063|      0|                    it,
 6064|      0|                    calculate_text_width(make_contiguous_buffer(
 6065|      0|                                             ranges::subrange{rng.begin(), it})
 6066|      0|                                             .view())};
 6067|      0|            }
 6068|  13.4M|            return result_type{it, 0};
 6069|  26.9M|        }
 6070|       |
 6071|  5.60k|        return result_type{rng.begin(), 0};
 6072|  13.4M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6080|  13.4M|    {
 6081|  13.4M|        const bool need_skipped_width =
 6082|  13.4M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6082:13): [True: 0, False: 13.4M]
  |  Branch (6082:33): [True: 0, False: 13.4M]
  ------------------
 6083|  13.4M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6084|       |
 6085|  13.4M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6085:13): [True: 0, False: 13.4M]
  ------------------
 6086|  13.4M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6086:13): [True: 0, False: 13.4M]
  ------------------
 6087|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6088|      0|                             specs.fill, need_skipped_width);
 6089|      0|        }
 6090|  13.4M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6090:13): [True: 13.4M, False: 0]
  ------------------
 6091|  13.4M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6091:13): [True: 40, False: 13.4M]
  ------------------
 6092|  13.4M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6092:15): [True: 0, False: 40]
  |  Branch (6092:35): [True: 0, False: 0]
  ------------------
 6093|     40|             (specs.precision != 0 &&
  ------------------
  |  Branch (6093:15): [True: 0, False: 40]
  ------------------
 6094|     40|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  ------------------
 6095|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6095:17): [True: 0, False: 0]
  ------------------
 6096|      0|                const auto initial_width =
 6097|      0|                    specs.precision - prefix_width - value_width;
 6098|      0|                auto max_width_view = take_width(rng, initial_width);
 6099|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6100|      0|                                  .transform_error(make_eof_scan_error));
 6101|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6102|      0|            }
 6103|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6104|      0|                            make_eof_scan_error));
 6105|       |
 6106|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6106:17): [True: 0, False: 0]
  ------------------
 6107|      0|                return result_type{
 6108|      0|                    it,
 6109|      0|                    calculate_text_width(make_contiguous_buffer(
 6110|      0|                                             ranges::subrange{rng.begin(), it})
 6111|      0|                                             .view())};
 6112|      0|            }
 6113|      0|            return result_type{it, 0};
 6114|      0|        }
 6115|  13.4M|        return result_type{rng.begin(), 0};
 6116|  13.4M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6179|  6.74M|    {
 6180|  6.74M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  6.74M|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  6.74M|                          basic_contiguous_scan_context<char_type>>) {
 6184|  6.74M|            auto rd = make_reader<T, char_type>();
 6185|  6.74M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 6.74M]
  |  |  ------------------
  ------------------
 6186|  2.77k|                return unexpected(e);
 6187|  2.77k|            }
 6188|       |
 6189|  6.74M|            return impl(rd, range, value);
 6190|  6.74M|        }
 6191|  6.74M|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  6.74M|            auto rd = make_reader<T, char_type>();
 6193|  6.74M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  6.74M|                return unexpected(e);
 6195|  6.74M|            }
 6196|       |
 6197|  6.74M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  6.74M|                specs.width != 0) {
 6199|  6.74M|                return impl(rd, range, value);
 6200|  6.74M|            }
 6201|       |
 6202|  6.74M|            auto crange = get_as_contiguous(range);
 6203|  6.74M|            SCN_TRY(it, impl(rd, crange, value));
 6204|  6.74M|            return ranges::next(range.begin(),
 6205|  6.74M|                                ranges::distance(crange.begin(), it));
 6206|  6.74M|        }
 6207|  6.74M|        else {
 6208|  6.74M|            SCN_EXPECT(false);
 6209|  6.74M|            SCN_UNREACHABLE;
 6210|  6.74M|        }
 6211|  6.74M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6121|  6.74M|    {
 6122|  6.74M|        const bool need_skipped_width =
 6123|  6.74M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 6.74M]
  |  Branch (6123:33): [True: 0, False: 6.74M]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  6.74M|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  6.74M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.74M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.74M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 6.74M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.56k|    }                                                  \
  |  |  |  | 3642|  6.74M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  6.74M|        auto [it, prefix_width] = prefix_result;
 6128|  6.74M|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  6.74M|        std::ptrdiff_t value_width = 0;
 6132|  6.74M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 6.74M]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  6.74M|        else {
 6148|  6.74M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  6.74M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  6.74M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.98k, False: 6.73M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  3.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  3.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  3.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  3.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  3.98k|    }                                                  \
  |  | 3642|  6.74M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  6.73M|                                             specs, value, loc));
 6150|       |
 6151|  6.73M|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 6.73M]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  6.73M|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  6.73M|        std::ptrdiff_t postfix_width = 0;
 6160|  6.73M|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 6.73M, False: 788]
  ------------------
 6161|  6.73M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  6.73M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.73M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.73M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.73M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.73M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  6.73M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  6.73M|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  6.73M|                                 value_width));
 6165|  6.73M|            std::tie(it, postfix_width) = postfix_result;
 6166|  6.73M|        }
 6167|       |
 6168|  6.73M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  6.73M|                                                 value_width, postfix_width);
 6170|  6.73M|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 6.73M]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  6.73M|        return it;
 6175|  6.73M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6179|  6.74M|    {
 6180|  6.74M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  6.74M|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  6.74M|                          basic_contiguous_scan_context<char_type>>) {
 6184|  6.74M|            auto rd = make_reader<T, char_type>();
 6185|  6.74M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 6.74M]
  |  |  ------------------
  ------------------
 6186|  2.77k|                return unexpected(e);
 6187|  2.77k|            }
 6188|       |
 6189|  6.74M|            return impl(rd, range, value);
 6190|  6.74M|        }
 6191|  6.74M|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  6.74M|            auto rd = make_reader<T, char_type>();
 6193|  6.74M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  6.74M|                return unexpected(e);
 6195|  6.74M|            }
 6196|       |
 6197|  6.74M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  6.74M|                specs.width != 0) {
 6199|  6.74M|                return impl(rd, range, value);
 6200|  6.74M|            }
 6201|       |
 6202|  6.74M|            auto crange = get_as_contiguous(range);
 6203|  6.74M|            SCN_TRY(it, impl(rd, crange, value));
 6204|  6.74M|            return ranges::next(range.begin(),
 6205|  6.74M|                                ranges::distance(crange.begin(), it));
 6206|  6.74M|        }
 6207|  6.74M|        else {
 6208|  6.74M|            SCN_EXPECT(false);
 6209|  6.74M|            SCN_UNREACHABLE;
 6210|  6.74M|        }
 6211|  6.74M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6121|  6.74M|    {
 6122|  6.74M|        const bool need_skipped_width =
 6123|  6.74M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 6.74M]
  |  Branch (6123:33): [True: 0, False: 6.74M]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  6.74M|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  6.74M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.74M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.74M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 6.74M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.56k|    }                                                  \
  |  |  |  | 3642|  6.74M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  6.74M|        auto [it, prefix_width] = prefix_result;
 6128|  6.74M|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  6.74M|        std::ptrdiff_t value_width = 0;
 6132|  6.74M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 6.74M]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  6.74M|        else {
 6148|  6.74M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  6.74M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  6.74M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.98k, False: 6.73M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  3.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  3.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  3.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  3.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  3.98k|    }                                                  \
  |  | 3642|  6.74M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  6.73M|                                             specs, value, loc));
 6150|       |
 6151|  6.73M|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 6.73M]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  6.73M|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  6.73M|        std::ptrdiff_t postfix_width = 0;
 6160|  6.73M|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 6.73M, False: 788]
  ------------------
 6161|  6.73M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  6.73M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.73M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.73M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.73M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.73M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  6.73M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  6.73M|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  6.73M|                                 value_width));
 6165|  6.73M|            std::tie(it, postfix_width) = postfix_result;
 6166|  6.73M|        }
 6167|       |
 6168|  6.73M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  6.73M|                                                 value_width, postfix_width);
 6170|  6.73M|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 6.73M]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  6.73M|        return it;
 6175|  6.73M|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5796|  10.1M|{
 5797|  10.1M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.16k, False: 10.1M]
  |  |  ------------------
  ------------------
 5798|  1.16k|        return unexpected(e);
 5799|  1.16k|    }
 5800|       |
 5801|  10.1M|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 0, False: 10.1M]
  ------------------
 5802|      0|        return range.begin();
 5803|      0|    }
 5804|       |
 5805|  10.1M|    return skip_classic_whitespace(range);
 5806|  10.1M|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5872|  10.1M|    {
 5873|  10.1M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  10.1M|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|      0|                          basic_contiguous_scan_context<char_type>>) {
 5877|  10.1M|            auto rd = make_reader<T, char_type>();
 5878|  10.1M|            return impl(rd, range, value);
 5879|  10.1M|        }
 5880|  10.1M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5880:28): [Folded - Ignored]
  ------------------
 5881|  10.1M|            auto rd = make_reader<T, char_type>();
 5882|  10.1M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5882:17): [True: 10.1M, False: 0]
  ------------------
 5883|  10.1M|                return impl(rd, range, value);
 5884|  10.1M|            }
 5885|      0|            auto crange = get_as_contiguous(range);
 5886|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5887|      0|            return ranges::next(range.begin(),
 5888|      0|                                ranges::distance(crange.begin(), it));
 5889|      0|        }
 5890|  10.1M|        else {
 5891|  10.1M|            SCN_EXPECT(false);
 5892|  10.1M|            SCN_UNREACHABLE;
 5893|  10.1M|        }
 5894|  10.1M|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5864|  10.1M|    {
 5865|  10.1M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  10.1M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.1M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.1M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.34k, False: 10.1M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.34k|    }                                                  \
  |  |  |  | 3642|  10.1M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  10.1M|                        .transform_error(make_eof_scan_error));
 5867|  10.1M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  10.1M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5267|  10.1M|    {
 5268|  10.1M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  10.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|  10.1M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|  10.1M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    693|{
   52|    693|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    693|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    693|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    693|    string_buffer.resize(size);
   56|    693|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    693|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    693|    const auto wsv_reinterpret_size =
   61|    693|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 71, False: 622]
  ------------------
   62|    693|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    693|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    693|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    693|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    693|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    693|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    693|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    693|{
  122|    693|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    693|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    693|    buf.resize(sizeof...(Args));
  125|    693|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    693|    return buf;
  127|    693|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    693|{
  108|    693|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    693|        return format_string_view_buffer;
  110|    693|    }
  111|    693|    else {
  112|    693|        return wformat_string_view_buffer;
  113|    693|    }
  114|    693|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|    693|{
  182|    693|    do_basic_run_for_source<CharT>(data, format_strings);
  183|    693|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|    693|                                   format_strings);
  185|    693|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|    693|{
  133|       |    // Regular scan
  134|  4.15k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.15k, False: 693]
  ------------------
  135|  4.15k|        auto it = scn::ranges::begin(source);
  136|  62.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  62.2k|            auto result = scn::scan<T>(
  138|  62.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  62.2k|                scn::runtime_format(f));
  140|  62.2k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 4.15k, False: 58.0k]
  ------------------
  141|  4.15k|                break;
  142|  4.15k|            }
  143|  58.0k|            it = result->begin();
  144|  58.0k|        }
  145|  4.15k|    }
  146|       |
  147|       |    // scan localized
  148|  4.15k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 4.15k, False: 693]
  ------------------
  149|  4.15k|        auto it = scn::ranges::begin(source);
  150|  62.2k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  62.2k|            auto result = scn::scan<T>(
  152|  62.2k|                global_locale,
  153|  62.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  62.2k|                scn::runtime_format(f));
  155|  62.2k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 4.15k, False: 58.0k]
  ------------------
  156|  4.15k|                break;
  157|  4.15k|            }
  158|  58.0k|            it = result->begin();
  159|  58.0k|        }
  160|  4.15k|    }
  161|       |
  162|       |    // scan_value
  163|    693|    {
  164|    693|        auto it = scn::ranges::begin(source);
  165|  29.5k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  29.5k|            auto result = scn::scan_value<T>(
  167|  29.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  29.5k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 693, False: 28.8k]
  ------------------
  169|    693|                break;
  170|    693|            }
  171|  28.8k|            it = result->begin();
  172|  28.8k|        }
  173|    693|    }
  174|    693|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    693|{
  133|       |    // Regular scan
  134|  4.15k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.15k, False: 693]
  ------------------
  135|  4.15k|        auto it = scn::ranges::begin(source);
  136|  62.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  62.2k|            auto result = scn::scan<T>(
  138|  62.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  62.2k|                scn::runtime_format(f));
  140|  62.2k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 4.15k, False: 58.0k]
  ------------------
  141|  4.15k|                break;
  142|  4.15k|            }
  143|  58.0k|            it = result->begin();
  144|  58.0k|        }
  145|  4.15k|    }
  146|       |
  147|       |    // scan localized
  148|  4.15k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 4.15k, False: 693]
  ------------------
  149|  4.15k|        auto it = scn::ranges::begin(source);
  150|  62.2k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  62.2k|            auto result = scn::scan<T>(
  152|  62.2k|                global_locale,
  153|  62.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  62.2k|                scn::runtime_format(f));
  155|  62.2k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 4.15k, False: 58.0k]
  ------------------
  156|  4.15k|                break;
  157|  4.15k|            }
  158|  58.0k|            it = result->begin();
  159|  58.0k|        }
  160|  4.15k|    }
  161|       |
  162|       |    // scan_value
  163|    693|    {
  164|    693|        auto it = scn::ranges::begin(source);
  165|  29.5k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  29.5k|            auto result = scn::scan_value<T>(
  167|  29.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  29.5k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 693, False: 28.8k]
  ------------------
  169|    693|                break;
  170|    693|            }
  171|  28.8k|            it = result->begin();
  172|  28.8k|        }
  173|    693|    }
  174|    693|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|    693|{
  133|       |    // Regular scan
  134|  4.15k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.15k, False: 693]
  ------------------
  135|  4.15k|        auto it = scn::ranges::begin(source);
  136|  62.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  62.8k|            auto result = scn::scan<T>(
  138|  62.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  62.8k|                scn::runtime_format(f));
  140|  62.8k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 4.15k, False: 58.7k]
  ------------------
  141|  4.15k|                break;
  142|  4.15k|            }
  143|  58.7k|            it = result->begin();
  144|  58.7k|        }
  145|  4.15k|    }
  146|       |
  147|       |    // scan localized
  148|  4.15k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 4.15k, False: 693]
  ------------------
  149|  4.15k|        auto it = scn::ranges::begin(source);
  150|  62.8k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  62.8k|            auto result = scn::scan<T>(
  152|  62.8k|                global_locale,
  153|  62.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  62.8k|                scn::runtime_format(f));
  155|  62.8k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 4.15k, False: 58.7k]
  ------------------
  156|  4.15k|                break;
  157|  4.15k|            }
  158|  58.7k|            it = result->begin();
  159|  58.7k|        }
  160|  4.15k|    }
  161|       |
  162|       |    // scan_value
  163|    693|    {
  164|    693|        auto it = scn::ranges::begin(source);
  165|  29.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  29.9k|            auto result = scn::scan_value<T>(
  167|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  29.9k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 693, False: 29.2k]
  ------------------
  169|    693|                break;
  170|    693|            }
  171|  29.2k|            it = result->begin();
  172|  29.2k|        }
  173|    693|    }
  174|    693|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    693|{
   90|    693|    using char_type = ranges::range_value_t<Source>;
   91|    693|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    693|    deque.clear();
   93|    693|    std::copy(ranges::begin(source), ranges::end(source),
   94|    693|              std::back_inserter(deque));
   95|    693|    return deque;
   96|    693|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    693|{
   79|    693|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|    693|        return noncontiguous_buffer;
   81|    693|    }
   82|    693|    else {
   83|    693|        return wnoncontiguous_buffer;
   84|    693|    }
   85|    693|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    693|{
  122|    693|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    693|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    693|    buf.resize(sizeof...(Args));
  125|    693|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    693|    return buf;
  127|    693|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    693|{
  108|    693|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    693|        return format_string_view_buffer;
  110|    693|    }
  111|    693|    else {
  112|    693|        return wformat_string_view_buffer;
  113|    693|    }
  114|    693|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|  1.38k|{
  182|  1.38k|    do_basic_run_for_source<CharT>(data, format_strings);
  183|  1.38k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|  1.38k|                                   format_strings);
  185|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.38k|{
  133|       |    // Regular scan
  134|  8.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.31k, False: 1.38k]
  ------------------
  135|  8.31k|        auto it = scn::ranges::begin(source);
  136|  6.74M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  6.74M|            auto result = scn::scan<T>(
  138|  6.74M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  6.74M|                scn::runtime_format(f));
  140|  6.74M|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 8.31k, False: 6.73M]
  ------------------
  141|  8.31k|                break;
  142|  8.31k|            }
  143|  6.73M|            it = result->begin();
  144|  6.73M|        }
  145|  8.31k|    }
  146|       |
  147|       |    // scan localized
  148|  8.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 8.31k, False: 1.38k]
  ------------------
  149|  8.31k|        auto it = scn::ranges::begin(source);
  150|  6.74M|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  6.74M|            auto result = scn::scan<T>(
  152|  6.74M|                global_locale,
  153|  6.74M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  6.74M|                scn::runtime_format(f));
  155|  6.74M|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 8.31k, False: 6.73M]
  ------------------
  156|  8.31k|                break;
  157|  8.31k|            }
  158|  6.73M|            it = result->begin();
  159|  6.73M|        }
  160|  8.31k|    }
  161|       |
  162|       |    // scan_value
  163|  1.38k|    {
  164|  1.38k|        auto it = scn::ranges::begin(source);
  165|  3.37M|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  3.37M|            auto result = scn::scan_value<T>(
  167|  3.37M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  3.37M|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 1.38k, False: 3.36M]
  ------------------
  169|  1.38k|                break;
  170|  1.38k|            }
  171|  3.36M|            it = result->begin();
  172|  3.36M|        }
  173|  1.38k|    }
  174|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.38k|{
  133|       |    // Regular scan
  134|  8.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.31k, False: 1.38k]
  ------------------
  135|  8.31k|        auto it = scn::ranges::begin(source);
  136|  6.74M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  6.74M|            auto result = scn::scan<T>(
  138|  6.74M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  6.74M|                scn::runtime_format(f));
  140|  6.74M|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 8.31k, False: 6.73M]
  ------------------
  141|  8.31k|                break;
  142|  8.31k|            }
  143|  6.73M|            it = result->begin();
  144|  6.73M|        }
  145|  8.31k|    }
  146|       |
  147|       |    // scan localized
  148|  8.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 8.31k, False: 1.38k]
  ------------------
  149|  8.31k|        auto it = scn::ranges::begin(source);
  150|  6.74M|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  6.74M|            auto result = scn::scan<T>(
  152|  6.74M|                global_locale,
  153|  6.74M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  6.74M|                scn::runtime_format(f));
  155|  6.74M|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 8.31k, False: 6.73M]
  ------------------
  156|  8.31k|                break;
  157|  8.31k|            }
  158|  6.73M|            it = result->begin();
  159|  6.73M|        }
  160|  8.31k|    }
  161|       |
  162|       |    // scan_value
  163|  1.38k|    {
  164|  1.38k|        auto it = scn::ranges::begin(source);
  165|  3.37M|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  3.37M|            auto result = scn::scan_value<T>(
  167|  3.37M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  3.37M|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 1.38k, False: 3.36M]
  ------------------
  169|  1.38k|                break;
  170|  1.38k|            }
  171|  3.36M|            it = result->begin();
  172|  3.36M|        }
  173|  1.38k|    }
  174|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.38k|{
  133|       |    // Regular scan
  134|  8.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.31k, False: 1.38k]
  ------------------
  135|  8.31k|        auto it = scn::ranges::begin(source);
  136|  6.74M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  6.74M|            auto result = scn::scan<T>(
  138|  6.74M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  6.74M|                scn::runtime_format(f));
  140|  6.74M|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 8.31k, False: 6.73M]
  ------------------
  141|  8.31k|                break;
  142|  8.31k|            }
  143|  6.73M|            it = result->begin();
  144|  6.73M|        }
  145|  8.31k|    }
  146|       |
  147|       |    // scan localized
  148|  8.31k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 8.31k, False: 1.38k]
  ------------------
  149|  8.31k|        auto it = scn::ranges::begin(source);
  150|  6.74M|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  6.74M|            auto result = scn::scan<T>(
  152|  6.74M|                global_locale,
  153|  6.74M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  6.74M|                scn::runtime_format(f));
  155|  6.74M|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 8.31k, False: 6.73M]
  ------------------
  156|  8.31k|                break;
  157|  8.31k|            }
  158|  6.73M|            it = result->begin();
  159|  6.73M|        }
  160|  8.31k|    }
  161|       |
  162|       |    // scan_value
  163|  1.38k|    {
  164|  1.38k|        auto it = scn::ranges::begin(source);
  165|  3.37M|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  3.37M|            auto result = scn::scan_value<T>(
  167|  3.37M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  3.37M|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 1.38k, False: 3.36M]
  ------------------
  169|  1.38k|                break;
  170|  1.38k|            }
  171|  3.36M|            it = result->begin();
  172|  3.36M|        }
  173|  1.38k|    }
  174|  1.38k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.38k|{
   90|  1.38k|    using char_type = ranges::range_value_t<Source>;
   91|  1.38k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.38k|    deque.clear();
   93|  1.38k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.38k|              std::back_inserter(deque));
   95|  1.38k|    return deque;
   96|  1.38k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.38k|{
   79|  1.38k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  1.38k|        return noncontiguous_buffer;
   81|  1.38k|    }
   82|  1.38k|    else {
   83|  1.38k|        return wnoncontiguous_buffer;
   84|  1.38k|    }
   85|  1.38k|}

LLVMFuzzerTestOneInput:
   57|    694|{
   58|    694|    scn::fuzz::run(data, size);
   59|    694|    return 0;
   60|    694|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    694|{
   36|    694|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 693]
  |  Branch (36:35): [True: 0, False: 693]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    693|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    693|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    693|                                             "{:64U}", "{:[A-Za-z]}");
   44|    693|    do_basic_run(sv, f);
   45|       |
   46|    693|    const auto& wf = get_format_strings<wchar_t>(
   47|    693|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    693|    do_basic_run(wsv_reinterpret, wf);
   49|    693|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 693, False: 0]
  ------------------
   50|    693|        do_basic_run(wsv_transcode, wf);
   51|    693|    }
   52|    693|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    693|{
   25|    693|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    693|                                                           format_strings);
   27|    693|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    693|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    693|            source, format_strings);
   30|    693|    }
   31|    693|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    693|{
   25|    693|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    693|                                                           format_strings);
   27|    693|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    693|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    693|            source, format_strings);
   30|    693|    }
   31|    693|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.38k|{
   25|  1.38k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.38k|                                                           format_strings);
   27|  1.38k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.38k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.38k|            source, format_strings);
   30|  1.38k|    }
   31|  1.38k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.38k|{
   25|  1.38k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.38k|                                                           format_strings);
   27|  1.38k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.38k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.38k|            source, format_strings);
   30|  1.38k|    }
   31|  1.38k|}

