_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  4.26M|{
 4068|  4.26M|    if constexpr (sizeof(U) == 1) {
 4069|  4.26M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  4.26M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  4.26M|{
 4032|  4.26M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  4.26M|    SCN_GCC_COMPAT_PUSH
 4035|  4.26M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  4.26M|    constexpr char lengths[] =
 4037|  4.26M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  4.26M|        "\1\1\1\1\1\1\1\1"
 4039|  4.26M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  4.26M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  4.26M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  4.26M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  4.26M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  4.26M|    SCN_GCC_COMPAT_POP
 4046|  4.26M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  4.04M|{
 4274|  4.04M|    if constexpr (sizeof(CharT) == 1) {
 4275|  4.04M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  4.04M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  4.04M|{
 4087|  4.04M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  4.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  4.04M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  4.04M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  4.04M|    };
 4092|       |
 4093|  4.04M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 3.64M, False: 403k]
  ------------------
 4094|  3.64M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 278, False: 3.64M]
  ------------------
 4095|    278|            SCN_UNLIKELY_ATTR
 4096|    278|            return invalid_code_point;
 4097|    278|        }
 4098|  3.64M|        return static_cast<char32_t>(input[0]);
 4099|  3.64M|    }
 4100|       |
 4101|   403k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 111k, False: 292k]
  ------------------
 4102|   111k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 189, False: 111k]
  ------------------
 4103|    189|            SCN_UNLIKELY_ATTR
 4104|    189|            return invalid_code_point;
 4105|    189|        }
 4106|   111k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 13.2k, False: 98.0k]
  ------------------
 4107|  13.2k|            SCN_UNLIKELY_ATTR
 4108|  13.2k|            return invalid_code_point;
 4109|  13.2k|        }
 4110|       |
 4111|  98.0k|        char32_t cp{};
 4112|  98.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  98.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  98.0k|        return cp;
 4115|   111k|    }
 4116|       |
 4117|   292k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 274k, False: 18.0k]
  ------------------
 4118|   274k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 25, False: 274k]
  ------------------
 4119|     25|            SCN_UNLIKELY_ATTR
 4120|     25|            return invalid_code_point;
 4121|     25|        }
 4122|   274k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 2.72k, False: 271k]
  ------------------
 4123|   274k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 1.57k, False: 270k]
  ------------------
 4124|  4.29k|            SCN_UNLIKELY_ATTR
 4125|  4.29k|            return invalid_code_point;
 4126|  4.29k|        }
 4127|       |
 4128|   270k|        char32_t cp{};
 4129|   270k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|   270k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|   270k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|   270k|        return cp;
 4133|   274k|    }
 4134|       |
 4135|  18.0k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 18.0k, False: 0]
  ------------------
 4136|  18.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 18.0k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  18.0k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 11.4k, False: 6.58k]
  ------------------
 4141|  11.4k|            SCN_UNLIKELY_ATTR
 4142|  11.4k|            return invalid_code_point;
 4143|  11.4k|        }
 4144|  6.58k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 2.43k, False: 4.14k]
  ------------------
 4145|  6.58k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 160, False: 3.98k]
  ------------------
 4146|  6.58k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 154, False: 3.83k]
  ------------------
 4147|  2.75k|            SCN_UNLIKELY_ATTR
 4148|  2.75k|            return invalid_code_point;
 4149|  2.75k|        }
 4150|       |
 4151|  3.83k|        char32_t cp{};
 4152|  3.83k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  3.83k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  3.83k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  3.83k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  3.83k|        return cp;
 4157|  6.58k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   672k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   672k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   672k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  3.56M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  3.56M|    else {
 3966|  3.56M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  3.56M|                                       to_address(first), to_address(last)))};
 3968|  3.56M|    }
 3969|  3.56M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  11.0M|{
  316|  11.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  11.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  11.0M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  12.3M|{
  294|  12.3M|    return p;
  295|  12.3M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.76M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.76M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.76M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.76M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.76M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.76M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  27.0k|    {
 2869|  27.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  27.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  27.0k|    {
 2850|  27.0k|        return decay_copy(t.begin());
 2851|  27.0k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  2.06M|{
 2094|  2.06M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.06M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   441k|    {
 2926|   441k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   441k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   441k|    {
 2908|   441k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   441k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9680|  44.9k|{
 9681|  44.9k|    auto result = make_scan_result<Source, Args...>();
 9682|  44.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  44.9k|                                   make_scan_args(result->values())));
 9684|  44.9k|    return result;
 9685|  44.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9636|   110k|{
 9637|   110k|    return scan_result_type<Source, Args...>();
 9638|   110k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   110k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   110k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   110k|    {
  613|   110k|        construct();
  614|   110k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   110k|    {
  694|   110k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   110k|        m_has_value = true;
  696|   110k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|   110k|{
  396|   110k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   110k|        T(std::forward<Args>(args)...);
  398|   110k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6570|   110k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|   220k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   220k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6344|   248k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   524k|    {
  718|   524k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   524k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   524k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|   110k|{
 9622|   110k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.0k, False: 97.1k]
  |  |  ------------------
  ------------------
 9623|  13.0k|        out = unexpected(in.error());
 9624|  13.0k|    }
 9625|  97.1k|    else {
 9626|  97.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  97.1k|    static_cast<    \
  |  |  935|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  97.1k|    }
 9628|   110k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   220k|    {
 1740|   220k|        return has_value();
 1741|   220k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   440k|    {
  490|   440k|        return m_has_value;
  491|   440k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  26.0k|    {
 1746|  26.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  26.0k|        return this->get_unexpected().error();
 1748|  26.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  26.0k|    {
  473|  26.0k|        return m_unexpected;
  474|  26.0k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  1.12M|    {
  365|  1.12M|        return m_unexpected;
  366|  1.12M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   490k|        : m_unexpected(std::forward<Err>(e))
  350|   490k|    {
  351|   490k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   490k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   490k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  13.0k|        : base(unexpect, std::move(e.error())),
 1616|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  13.0k|    {
 1618|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  13.0k|        : m_has_value(false)
  637|  13.0k|    {
  638|  13.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  13.0k|    {
  701|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.0k|                                  std::forward<Args>(args)...);
  703|  13.0k|        m_has_value = false;
  704|  13.0k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  78.0k|{
  396|  78.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  78.0k|        T(std::forward<Args>(args)...);
  398|  78.0k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   643k|        : m_unexpected(std::forward<Args>(args)...)
  359|   643k|    {
  360|   643k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   643k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   643k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  65.0k|    {
  730|  65.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  65.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  65.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  65.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  13.0k|    {
 1316|  13.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  13.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  13.0k|    {
  903|  13.0k|        assign_common(std::move(other));
  904|  13.0k|        return *this;
  905|  13.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  13.0k|    {
  950|  13.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 13.0k, False: 0]
  ------------------
  951|  13.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 13.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  13.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  13.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   563k|    {
  687|   563k|        return m_has_value;
  688|   563k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   304k|    {
  653|   304k|        return *value_ptr();
  654|   304k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  13.0k|    {
 1046|  13.0k|        this->destroy_value();
 1047|  13.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   110k|    {
  708|   110k|        scn::detail::destroy_at(value_ptr());
  709|   110k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|   110k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   110k|    else {
  408|   110k|        p->~T();
  409|   110k|    }
  410|   110k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6577|   110k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  13.0k|    {
  701|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.0k|                                  std::forward<Args>(args)...);
  703|  13.0k|        m_has_value = false;
  704|  13.0k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   117k|{
  396|   117k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   117k|        T(std::forward<Args>(args)...);
  398|   117k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  13.0k|    {
  678|  13.0k|        return std::move(*unexpected_ptr());
  679|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  26.0k|    {
  712|  26.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  26.0k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   156k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   156k|    else {
  408|   156k|        p->~T();
  409|   156k|    }
  410|   156k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|   194k|    {
 6445|   194k|        m_range = std::forward<Other>(r);
 6446|   194k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   194k|    {
 1795|   194k|        return value();
 1796|   194k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   194k|    {
 1769|   194k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   194k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   194k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   194k|        return this->get_value();
 1771|   194k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   194k|    {
  456|   194k|        return m_value;
  457|   194k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|  89.8k|{
 9461|  89.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  89.8k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  89.8k|{
 9398|  89.8k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  89.8k|    auto result = vscan_impl(buffer, format, args);
 9401|  89.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 77.8k]
  |  |  ------------------
  ------------------
 9402|  12.0k|        return unexpected(result.error());
 9403|  12.0k|    }
 9404|  77.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  89.8k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   220k|{
 5381|   220k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   220k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   220k|                  "\n"
 5385|   220k|                  "Unsupported range type given as input to a scanning "
 5386|   220k|                  "function.\n"
 5387|   220k|                  "A range needs to have a character type (value type) "
 5388|   220k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   220k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   220k|                  "to be included.\n"
 5391|   220k|                  "See the scnlib documentation for more details.");
 5392|   220k|    static_assert(
 5393|   220k|        !std::is_same_v<T, custom_char_traits>,
 5394|   220k|        "\n"
 5395|   220k|        "Unsupported range type given as input to a scanning "
 5396|   220k|        "function.\n"
 5397|   220k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   220k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   220k|        "not supported.");
 5400|   220k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   220k|                  "\n"
 5402|   220k|                  "Unsupported range type given as input to a scanning "
 5403|   220k|                  "function.\n"
 5404|   220k|                  "file_marker_found cannot be used as an "
 5405|   220k|                  "source range type to scn::scan.\n"
 5406|   220k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   220k|                  "and do not provide an explicit source range, "
 5408|   220k|                  "or use scn::scan with a FILE* directly.");
 5409|   220k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   220k|                  "\n"
 5411|   220k|                  "Unsupported range type given as input to a scanning "
 5412|   220k|                  "function.\n"
 5413|   220k|                  "In order to be scannable, a range needs to satisfy "
 5414|   220k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   220k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   220k|                  "\n"
 5417|   220k|                  "Unsupported range type given as input to a scanning "
 5418|   220k|                  "function.\n"
 5419|   220k|                  "A range needs to model forward_range and have a valid "
 5420|   220k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   220k|                  "Examples of scannable ranges are std::string, "
 5422|   220k|                  "std::string_view, "
 5423|   220k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   220k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   220k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   220k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   220k|{
 5320|   220k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   220k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   220k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   220k|    {
 3000|   220k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   220k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   220k|    {
 2981|   220k|        return t.data();
 2982|   220k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   220k|    {
 3383|   220k|        return detail::to_address(ranges::begin(derived()));
 3384|   220k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.27M|{
  316|  1.27M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.27M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   414k|    {
 2869|   414k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   414k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   414k|    {
 2850|   414k|        return decay_copy(t.begin());
 2851|   414k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  2.61M|    {
 3480|  2.61M|        return m_iterator;
 3481|  2.61M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   220k|    {
 3339|   220k|        return static_cast<const D&>(*this);
 3340|   220k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   220k|    {
 3075|   220k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   220k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   220k|    {
 3041|   220k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   220k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  2.59M|{
 2094|  2.59M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.59M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   919k|    {
 3496|   919k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   919k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  3.72M|    {
 1740|  3.72M|        return has_value();
 1741|  3.72M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  7.40M|    {
  490|  7.40M|        return m_has_value;
  491|  7.40M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   117k|    {
 1746|   117k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   117k|        return this->get_unexpected().error();
 1748|   117k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   117k|    {
  473|   117k|        return m_unexpected;
  474|   117k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  26.0k|        : base(unexpect, std::move(e.error())),
 1616|  26.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.0k|    {
 1618|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  26.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  26.0k|          m_has_value(false)
  451|  26.0k|    {
  452|  26.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   220k|    {
 1316|   220k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|   194k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   194k|                      ranges::iterator_t<SourceRange>>) {
 6677|   194k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   194k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   992k|    {
 2869|   992k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   992k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   992k|    {
 2850|   992k|        return decay_copy(t.begin());
 2851|   992k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|   194k|{
 6662|   194k|    return ranges::end(source);
 6663|   194k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   194k|    {
 2926|   194k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   194k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   194k|    {
 2908|   194k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   194k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  1.25M|    {
 3484|  1.25M|        return m_sentinel;
 3485|  1.25M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  3.56M|    {
 1795|  3.56M|        return value();
 1796|  3.56M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  3.56M|    {
 1769|  3.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.56M|        return this->get_value();
 1771|  3.56M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.56M|    {
  456|  3.56M|        return m_value;
  457|  3.56M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   194k|        : base(std::in_place, std::forward<U>(val)),
 1570|   194k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   194k|    {
 1572|   194k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   194k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   194k|    {
  442|   194k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8767|  89.8k|    {
 8768|  89.8k|        return m_str;
 8769|  89.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|   202k|{
 6110|   202k|    detail::check_scan_arg_types<Args...>();
 6111|   202k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   202k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5824|   248k|{
 5825|   248k|    constexpr bool default_constructible_constraint =
 5826|   248k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   248k|    static_assert(default_constructible_constraint,
 5828|   248k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   248k|    constexpr bool destructible_constraint =
 5831|   248k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   248k|    static_assert(destructible_constraint,
 5833|   248k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   248k|    constexpr bool non_reference_constraint =
 5836|   248k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   248k|    static_assert(non_reference_constraint,
 5838|   248k|                  "Scan argument types must not be references");
 5839|       |
 5840|   248k|    constexpr bool movable_constraint =
 5841|   248k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   248k|    static_assert(movable_constraint,
 5843|   248k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   248k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   248k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   248k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|   202k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   202k|    {
 6087|   202k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|   202k|    {
 6095|   202k|        return {detail::make_arg<
 6096|   202k|            kind, Context,
 6097|   202k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   202k|                                 typename Context::char_type>::value>(args)...};
 6099|   202k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5874|   202k|{
 5875|   202k|    return make_value<Context>(value).ref_value;
 5876|   202k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5809|   248k|{
 5810|   248k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   248k|                                  needs_context_tag>) {
 5814|   248k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   248k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5648|   248k|    {                                                                        \
 5649|   248k|        return val;                                                          \
 5650|   248k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5778|   248k|{
 5779|   248k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   248k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   248k|    constexpr bool scannable_char =
 5783|   248k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   248k|    static_assert(scannable_char,
 5785|   248k|                  "Cannot scan an argument of an unsupported character "
 5786|   248k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   248k|    constexpr bool scannable_const =
 5789|   248k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   248k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   248k|    constexpr bool scannable_disabled =
 5793|   248k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   248k|    static_assert(scannable_disabled,
 5795|   248k|                  "Cannot scan an argument that has been disabled by "
 5796|   248k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   248k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   248k|    static_assert(
 5800|   248k|        scannable,
 5801|   248k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   248k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   248k|    return arg_value{arg};
 5805|   248k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5562|   248k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   248k|    {
 5564|   248k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6353|   202k|    {
 6354|   202k|        return m_values;
 6355|   202k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   202k|        : basic_scan_args(store.desc, store.args.data())
 6136|   202k|    {
 6137|   202k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|   292k|        : m_desc(desc), m_builtin_values(data)
 6188|   292k|    {
 6189|   292k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.50M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.50M|    static_cast<    \
  |  |  935|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.50M|    static_cast<    \
  |  |  935|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.50M|    {
 3466|  1.50M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|   292k|{
 8441|   292k|    return s;
 8442|   292k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|   292k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  89.8k|        : m_str(r.str)
 8763|  89.8k|    {
 8764|  89.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   110k|    {
 1740|   110k|        return has_value();
 1741|   110k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   304k|    {
 1815|   304k|        return &value();
 1816|   304k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|   304k|    {
 1769|   304k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   304k|        return this->get_value();
 1771|   304k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|   194k|    {
 6434|   194k|        return ranges::begin(m_range);
 6435|   194k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   123k|    {
  643|   123k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 97.1k, False: 26.0k]
  ------------------
  644|  97.1k|            destroy_value();
  645|  97.1k|        }
  646|  26.0k|        else {
  647|  26.0k|            destroy_unexpected();
  648|  26.0k|        }
  649|   123k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9749|  44.9k|{
 9750|  44.9k|    auto result = make_scan_result<Source, Args...>();
 9751|  44.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  44.9k|                                   make_scan_args(result->values())));
 9753|  44.9k|    return result;
 9754|  44.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|  89.8k|{
 9479|  89.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  89.8k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  89.8k|{
 9414|  89.8k|#if !SCN_DISABLE_LOCALE
 9415|  89.8k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  89.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  89.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  89.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  89.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 77.8k]
  |  |  ------------------
  ------------------
 9422|  12.0k|        return unexpected(result.error());
 9423|  12.0k|    }
 9424|  77.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  89.8k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9790|  20.2k|{
 9791|  20.2k|    auto result = make_scan_result<Source, T>();
 9792|  20.2k|    fill_scan_result(
 9793|  20.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  20.2k|                            detail::make_arg<scan_context>(result->value())));
 9795|  20.2k|    return result;
 9796|  20.2k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|  40.5k|{
 9492|  40.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  40.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  40.5k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  40.5k|{
 9438|  40.5k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  40.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  40.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.00k, False: 38.5k]
  |  |  ------------------
  ------------------
 9442|  2.00k|        return unexpected(result.error());
 9443|  2.00k|    }
 9444|  38.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  40.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5859|  45.8k|{
 5860|  45.8k|    check_scan_arg_types<T>();
 5861|       |
 5862|  45.8k|    basic_scan_arg<Context> arg;
 5863|  45.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  45.8k|    arg.m_value = make_value<Context>(value);
 5865|  45.8k|    return arg;
 5866|  45.8k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|   358k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  2.77M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  45.8k|    {
 6376|  45.8k|        return std::get<0>(m_values);
 6377|  45.8k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9680|  44.9k|{
 9681|  44.9k|    auto result = make_scan_result<Source, Args...>();
 9682|  44.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  44.9k|                                   make_scan_args(result->values())));
 9684|  44.9k|    return result;
 9685|  44.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9636|   110k|{
 9637|   110k|    return scan_result_type<Source, Args...>();
 9638|   110k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   110k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   110k|        : m_value(T{}), m_has_value(true)
  427|   110k|    {
  428|   110k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6570|   110k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6344|   110k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|   110k|{
 9622|   110k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.0k, False: 97.1k]
  |  |  ------------------
  ------------------
 9623|  13.0k|        out = unexpected(in.error());
 9624|  13.0k|    }
 9625|  97.1k|    else {
 9626|  97.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  97.1k|    static_cast<    \
  |  |  935|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  97.1k|    }
 9628|   110k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  13.0k|        : base(unexpect, std::move(e.error())),
 1616|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  13.0k|    {
 1618|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  13.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.0k|          m_has_value(false)
  451|  13.0k|    {
  452|  13.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  13.0k|    {
 1316|  13.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  13.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  13.0k|    {
  903|  13.0k|        assign_common(std::move(other));
  904|  13.0k|        return *this;
  905|  13.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  13.0k|    {
  950|  13.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 13.0k, False: 0]
  ------------------
  951|  13.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 13.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  13.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  13.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   440k|    {
  490|   440k|        return m_has_value;
  491|   440k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   304k|    {
  456|   304k|        return m_value;
  457|   304k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  13.0k|    {
 1046|  13.0k|        this->destroy_value();
 1047|  13.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  13.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  13.0k|    {
  504|  13.0k|        scn::detail::construct_at(&get_unexpected(),
  505|  13.0k|                                  std::forward<Args>(args)...);
  506|  13.0k|        m_has_value = false;
  507|  13.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.0k|    {
  473|  13.0k|        return m_unexpected;
  474|  13.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  13.0k|    {
  481|  13.0k|        return std::move(m_unexpected);
  482|  13.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8767|  89.8k|    {
 8768|  89.8k|        return m_str;
 8769|  89.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  89.8k|{
 6110|  89.8k|    detail::check_scan_arg_types<Args...>();
 6111|  89.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  89.8k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5824|   110k|{
 5825|   110k|    constexpr bool default_constructible_constraint =
 5826|   110k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   110k|    static_assert(default_constructible_constraint,
 5828|   110k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   110k|    constexpr bool destructible_constraint =
 5831|   110k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   110k|    static_assert(destructible_constraint,
 5833|   110k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   110k|    constexpr bool non_reference_constraint =
 5836|   110k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   110k|    static_assert(non_reference_constraint,
 5838|   110k|                  "Scan argument types must not be references");
 5839|       |
 5840|   110k|    constexpr bool movable_constraint =
 5841|   110k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   110k|    static_assert(movable_constraint,
 5843|   110k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   110k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   110k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   110k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|  89.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  89.8k|    {
 6087|  89.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  89.8k|    {
 6095|  89.8k|        return {detail::make_arg<
 6096|  89.8k|            kind, Context,
 6097|  89.8k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  89.8k|                                 typename Context::char_type>::value>(args)...};
 6099|  89.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5874|  89.8k|{
 5875|  89.8k|    return make_value<Context>(value).ref_value;
 5876|  89.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5809|   110k|{
 5810|   110k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   110k|                                  needs_context_tag>) {
 5814|   110k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   110k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5648|   110k|    {                                                                        \
 5649|   110k|        return val;                                                          \
 5650|   110k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5778|   110k|{
 5779|   110k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   110k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   110k|    constexpr bool scannable_char =
 5783|   110k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   110k|    static_assert(scannable_char,
 5785|   110k|                  "Cannot scan an argument of an unsupported character "
 5786|   110k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   110k|    constexpr bool scannable_const =
 5789|   110k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   110k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   110k|    constexpr bool scannable_disabled =
 5793|   110k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   110k|    static_assert(scannable_disabled,
 5795|   110k|                  "Cannot scan an argument that has been disabled by "
 5796|   110k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   110k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   110k|    static_assert(
 5800|   110k|        scannable,
 5801|   110k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   110k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   110k|    return arg_value{arg};
 5805|   110k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5562|   110k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   110k|    {
 5564|   110k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6353|  89.8k|    {
 6354|  89.8k|        return m_values;
 6355|  89.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  89.8k|        : basic_scan_args(store.desc, store.args.data())
 6136|  89.8k|    {
 6137|  89.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  89.8k|        : m_str(r.str)
 8763|  89.8k|    {
 8764|  89.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   110k|    {
 1740|   110k|        return has_value();
 1741|   110k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   304k|    {
 1815|   304k|        return &value();
 1816|   304k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|   304k|    {
 1769|   304k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   304k|        return this->get_value();
 1771|   304k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9749|  44.9k|{
 9750|  44.9k|    auto result = make_scan_result<Source, Args...>();
 9751|  44.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  44.9k|                                   make_scan_args(result->values())));
 9753|  44.9k|    return result;
 9754|  44.9k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 9790|  20.2k|{
 9791|  20.2k|    auto result = make_scan_result<Source, T>();
 9792|  20.2k|    fill_scan_result(
 9793|  20.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  20.2k|                            detail::make_arg<scan_context>(result->value())));
 9795|  20.2k|    return result;
 9796|  20.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5859|  20.2k|{
 5860|  20.2k|    check_scan_arg_types<T>();
 5861|       |
 5862|  20.2k|    basic_scan_arg<Context> arg;
 5863|  20.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  20.2k|    arg.m_value = make_value<Context>(value);
 5865|  20.2k|    return arg;
 5866|  20.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  20.2k|    {
 6376|  20.2k|        return std::get<0>(m_values);
 6377|  20.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  13.0k|    {
 2869|  13.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  13.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  13.0k|    {
 2850|  13.0k|        return decay_copy(t.begin());
 2851|  13.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  5.60M|{
 2094|  5.60M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.60M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   276k|    {
 2926|   276k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   276k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   276k|    {
 2908|   276k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   276k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9680|  56.2k|{
 9681|  56.2k|    auto result = make_scan_result<Source, Args...>();
 9682|  56.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  56.2k|                                   make_scan_args(result->values())));
 9684|  56.2k|    return result;
 9685|  56.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9636|   138k|{
 9637|   138k|    return scan_result_type<Source, Args...>();
 9638|   138k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   138k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   138k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   138k|    {
  613|   138k|        construct();
  614|   138k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   138k|    {
  694|   138k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   138k|        m_has_value = true;
  696|   138k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  395|   138k|{
  396|   138k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   138k|        T(std::forward<Args>(args)...);
  398|   138k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6570|   138k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|   138k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   138k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   664k|    {
  718|   664k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   664k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   664k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9621|   138k|{
 9622|   138k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.0k, False: 125k]
  |  |  ------------------
  ------------------
 9623|  13.0k|        out = unexpected(in.error());
 9624|  13.0k|    }
 9625|   125k|    else {
 9626|   125k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   125k|    static_cast<    \
  |  |  935|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   125k|    }
 9628|   138k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   138k|    {
 1740|   138k|        return has_value();
 1741|   138k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   276k|    {
  490|   276k|        return m_has_value;
  491|   276k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  13.0k|    {
 1746|  13.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  13.0k|        return this->get_unexpected().error();
 1748|  13.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  13.0k|    {
  473|  13.0k|        return m_unexpected;
  474|  13.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  13.0k|        : base(unexpect, std::move(e.error())),
 1616|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  13.0k|    {
 1618|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  13.0k|        : m_has_value(false)
  637|  13.0k|    {
  638|  13.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  13.0k|    {
  701|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.0k|                                  std::forward<Args>(args)...);
  703|  13.0k|        m_has_value = false;
  704|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  65.0k|    {
  730|  65.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  65.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  65.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  65.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  13.0k|    {
 1316|  13.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  13.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  13.0k|    {
  903|  13.0k|        assign_common(std::move(other));
  904|  13.0k|        return *this;
  905|  13.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  13.0k|    {
  950|  13.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 13.0k, False: 0]
  ------------------
  951|  13.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 13.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  13.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  13.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   703k|    {
  687|   703k|        return m_has_value;
  688|   703k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   388k|    {
  653|   388k|        return *value_ptr();
  654|   388k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  13.0k|    {
 1046|  13.0k|        this->destroy_value();
 1047|  13.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   138k|    {
  708|   138k|        scn::detail::destroy_at(value_ptr());
  709|   138k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  401|   138k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   138k|    else {
  408|   138k|        p->~T();
  409|   138k|    }
  410|   138k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6577|   138k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  13.0k|    {
  701|  13.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  13.0k|                                  std::forward<Args>(args)...);
  703|  13.0k|        m_has_value = false;
  704|  13.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  13.0k|    {
  678|  13.0k|        return std::move(*unexpected_ptr());
  679|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  26.0k|    {
  712|  26.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  26.0k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|   125k|    {
 6445|   125k|        m_range = std::forward<Other>(r);
 6446|   125k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   125k|    {
 1795|   125k|        return value();
 1796|   125k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   125k|    {
 1769|   125k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   125k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   125k|        return this->get_value();
 1771|   125k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   125k|    {
  456|   125k|        return m_value;
  457|   125k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|  56.2k|{
 9461|  56.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|  56.2k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  56.2k|{
 9398|  56.2k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  56.2k|    auto result = vscan_impl(buffer, format, args);
 9401|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 50.2k]
  |  |  ------------------
  ------------------
 9402|  6.00k|        return unexpected(result.error());
 9403|  6.00k|    }
 9404|  50.2k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  56.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   138k|{
 5381|   138k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   138k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   138k|                  "\n"
 5385|   138k|                  "Unsupported range type given as input to a scanning "
 5386|   138k|                  "function.\n"
 5387|   138k|                  "A range needs to have a character type (value type) "
 5388|   138k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   138k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   138k|                  "to be included.\n"
 5391|   138k|                  "See the scnlib documentation for more details.");
 5392|   138k|    static_assert(
 5393|   138k|        !std::is_same_v<T, custom_char_traits>,
 5394|   138k|        "\n"
 5395|   138k|        "Unsupported range type given as input to a scanning "
 5396|   138k|        "function.\n"
 5397|   138k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   138k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   138k|        "not supported.");
 5400|   138k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   138k|                  "\n"
 5402|   138k|                  "Unsupported range type given as input to a scanning "
 5403|   138k|                  "function.\n"
 5404|   138k|                  "file_marker_found cannot be used as an "
 5405|   138k|                  "source range type to scn::scan.\n"
 5406|   138k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   138k|                  "and do not provide an explicit source range, "
 5408|   138k|                  "or use scn::scan with a FILE* directly.");
 5409|   138k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   138k|                  "\n"
 5411|   138k|                  "Unsupported range type given as input to a scanning "
 5412|   138k|                  "function.\n"
 5413|   138k|                  "In order to be scannable, a range needs to satisfy "
 5414|   138k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   138k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   138k|                  "\n"
 5417|   138k|                  "Unsupported range type given as input to a scanning "
 5418|   138k|                  "function.\n"
 5419|   138k|                  "A range needs to model forward_range and have a valid "
 5420|   138k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   138k|                  "Examples of scannable ranges are std::string, "
 5422|   138k|                  "std::string_view, "
 5423|   138k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   138k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   138k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   138k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   138k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   138k|    else {
 5366|   138k|        return make_forward_scan_buffer(r);
 5367|   138k|    }
 5368|   138k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   138k|{
 5185|   138k|    return basic_scan_forward_buffer_impl(range);
 5186|   138k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   138k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   138k|          m_cursor(ranges::begin(*m_range))
 4766|   138k|    {
 4767|   138k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   138k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   138k|    {
 4738|   138k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   138k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   138k|    {
 4429|   138k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   138k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   263k|    {
 2869|   263k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   263k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   263k|    {
 2850|   263k|        return decay_copy(t.begin());
 2851|   263k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   388k|    {
 3480|   388k|        return m_iterator;
 3481|   388k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  1.61M|    {
 4771|  1.61M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 18.2k, False: 1.59M]
  ------------------
 4772|  18.2k|            return false;
 4773|  18.2k|        }
 4774|  1.59M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  1.59M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  1.59M|        }
 4777|  1.59M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 1.46M, False: 130k]
  ------------------
 4778|  1.46M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  1.46M|                                          this->m_current_view.begin(),
 4780|  1.46M|                                          this->m_current_view.end());
 4781|  1.46M|        }
 4782|  1.59M|        m_latest = *m_cursor;
 4783|  1.59M|        ++m_cursor;
 4784|  1.59M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  1.59M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  1.59M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  1.59M|        }
 4788|  1.59M|        return true;
 4789|  1.61M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  4.79M|    {
 2926|  4.79M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  4.79M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  4.79M|    {
 2908|  4.79M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  4.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  4.79M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  4.92M|    {
 3484|  4.92M|        return m_sentinel;
 3485|  4.92M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   138k|    {
 4346|   138k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   138k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   138k|        return true;
 4348|   138k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  13.0k|        : base(unexpect, std::move(e.error())),
 1616|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  13.0k|    {
 1618|  13.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  13.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  13.0k|          m_has_value(false)
  451|  13.0k|    {
  452|  13.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   138k|    {
 1316|   138k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|   125k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   125k|                      ranges::iterator_t<SourceRange>>) {
 6677|   125k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   125k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   125k|    {
 2869|   125k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   125k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   125k|    {
 2850|   125k|        return decay_copy(t.begin());
 2851|   125k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|   125k|{
 6662|   125k|    return ranges::end(source);
 6663|   125k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   125k|    {
 2926|   125k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   125k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   125k|    {
 2908|   125k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   125k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   125k|        : base(std::in_place, std::forward<U>(val)),
 1570|   125k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   125k|    {
 1572|   125k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   125k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   125k|    {
  442|   125k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8767|   112k|    {
 8768|   112k|        return m_str;
 8769|   112k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   263k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   263k|    static_cast<    \
  |  |  935|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   263k|    static_cast<    \
  |  |  935|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   263k|    {
 3466|   263k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   112k|        : m_str(r.str)
 8763|   112k|    {
 8764|   112k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   138k|    {
 1740|   138k|        return has_value();
 1741|   138k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   388k|    {
 1815|   388k|        return &value();
 1816|   388k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|   388k|    {
 1769|   388k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   388k|        return this->get_value();
 1771|   388k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|   125k|    {
 6434|   125k|        return ranges::begin(m_range);
 6435|   125k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   151k|    {
  643|   151k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 125k, False: 26.0k]
  ------------------
  644|   125k|            destroy_value();
  645|   125k|        }
  646|  26.0k|        else {
  647|  26.0k|            destroy_unexpected();
  648|  26.0k|        }
  649|   151k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9749|  56.2k|{
 9750|  56.2k|    auto result = make_scan_result<Source, Args...>();
 9751|  56.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  56.2k|                                   make_scan_args(result->values())));
 9753|  56.2k|    return result;
 9754|  56.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|  56.2k|{
 9479|  56.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|  56.2k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  56.2k|{
 9414|  56.2k|#if !SCN_DISABLE_LOCALE
 9415|  56.2k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  56.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  56.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  56.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 50.2k]
  |  |  ------------------
  ------------------
 9422|  6.00k|        return unexpected(result.error());
 9423|  6.00k|    }
 9424|  50.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  56.2k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 9790|  25.5k|{
 9791|  25.5k|    auto result = make_scan_result<Source, T>();
 9792|  25.5k|    fill_scan_result(
 9793|  25.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  25.5k|                            detail::make_arg<scan_context>(result->value())));
 9795|  25.5k|    return result;
 9796|  25.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|  25.5k|{
 9492|  25.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  25.5k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  25.5k|{
 9438|  25.5k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  25.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  25.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.00k, False: 24.5k]
  |  |  ------------------
  ------------------
 9442|  1.00k|        return unexpected(result.error());
 9443|  1.00k|    }
 9444|  24.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  25.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  54.0k|    {
 2869|  54.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  54.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  54.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  54.0k|    {
 2850|  54.0k|        return decay_copy(t.begin());
 2851|  54.0k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  12.4M|{
 2094|  12.4M|    return SCN_FWD(t);
  ------------------
  |  |  936|  12.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  12.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.22M|    {
 2926|  3.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.22M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.22M|    {
 2908|  3.22M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.22M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9636|   806k|{
 9637|   806k|    return scan_result_type<Source, Args...>();
 9638|   806k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   806k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   806k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   806k|    {
  613|   806k|        construct();
  614|   806k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   806k|    {
  694|   806k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   806k|        m_has_value = true;
  696|   806k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|   806k|{
  396|   806k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   806k|        T(std::forward<Args>(args)...);
  398|   806k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6570|   806k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|  1.61M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  1.61M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6344|  1.61M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.97M|    {
  718|  3.97M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  3.97M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.97M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9621|   806k|{
 9622|   806k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   806k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.0k, False: 780k]
  |  |  ------------------
  ------------------
 9623|  26.0k|        out = unexpected(in.error());
 9624|  26.0k|    }
 9625|   780k|    else {
 9626|   780k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   780k|    static_cast<    \
  |  |  935|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   780k|    }
 9628|   806k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  1.61M|    {
 1740|  1.61M|        return has_value();
 1741|  1.61M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.22M|    {
  490|  3.22M|        return m_has_value;
  491|  3.22M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  52.0k|    {
 1746|  52.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  52.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  52.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  52.0k|        return this->get_unexpected().error();
 1748|  52.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  52.0k|    {
  473|  52.0k|        return m_unexpected;
  474|  52.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  26.0k|        : base(unexpect, std::move(e.error())),
 1616|  26.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.0k|    {
 1618|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  26.0k|        : m_has_value(false)
  637|  26.0k|    {
  638|  26.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  26.0k|    {
  701|  26.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  26.0k|                                  std::forward<Args>(args)...);
  703|  26.0k|        m_has_value = false;
  704|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   130k|    {
  730|   130k|        return reinterpret_cast<unexpected<E>*>(
  731|   130k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   130k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   130k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  26.0k|    {
 1316|  26.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  26.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  26.0k|    {
  903|  26.0k|        assign_common(std::move(other));
  904|  26.0k|        return *this;
  905|  26.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  26.0k|    {
  950|  26.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 26.0k, False: 0]
  ------------------
  951|  26.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 26.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  26.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  26.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  4.05M|    {
  687|  4.05M|        return m_has_value;
  688|  4.05M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.36M|    {
  653|  2.36M|        return *value_ptr();
  654|  2.36M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  26.0k|    {
 1046|  26.0k|        this->destroy_value();
 1047|  26.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   806k|    {
  708|   806k|        scn::detail::destroy_at(value_ptr());
  709|   806k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|   806k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   806k|    else {
  408|   806k|        p->~T();
  409|   806k|    }
  410|   806k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6577|   806k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  26.0k|    {
  701|  26.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  26.0k|                                  std::forward<Args>(args)...);
  703|  26.0k|        m_has_value = false;
  704|  26.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  26.0k|    {
  678|  26.0k|        return std::move(*unexpected_ptr());
  679|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  52.0k|    {
  712|  52.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  52.0k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  1.56M|    {
 6445|  1.56M|        m_range = std::forward<Other>(r);
 6446|  1.56M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.56M|    {
 1795|  1.56M|        return value();
 1796|  1.56M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.56M|    {
 1769|  1.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.56M|        return this->get_value();
 1771|  1.56M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.56M|    {
  456|  1.56M|        return m_value;
  457|  1.56M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|   648k|{
 9398|   648k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   648k|    auto result = vscan_impl(buffer, format, args);
 9401|   648k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.0k, False: 624k]
  |  |  ------------------
  ------------------
 9402|  24.0k|        return unexpected(result.error());
 9403|  24.0k|    }
 9404|   624k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   648k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  1.61M|{
 5381|  1.61M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.61M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.61M|                  "\n"
 5385|  1.61M|                  "Unsupported range type given as input to a scanning "
 5386|  1.61M|                  "function.\n"
 5387|  1.61M|                  "A range needs to have a character type (value type) "
 5388|  1.61M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.61M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.61M|                  "to be included.\n"
 5391|  1.61M|                  "See the scnlib documentation for more details.");
 5392|  1.61M|    static_assert(
 5393|  1.61M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.61M|        "\n"
 5395|  1.61M|        "Unsupported range type given as input to a scanning "
 5396|  1.61M|        "function.\n"
 5397|  1.61M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.61M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.61M|        "not supported.");
 5400|  1.61M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.61M|                  "\n"
 5402|  1.61M|                  "Unsupported range type given as input to a scanning "
 5403|  1.61M|                  "function.\n"
 5404|  1.61M|                  "file_marker_found cannot be used as an "
 5405|  1.61M|                  "source range type to scn::scan.\n"
 5406|  1.61M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.61M|                  "and do not provide an explicit source range, "
 5408|  1.61M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.61M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.61M|                  "\n"
 5411|  1.61M|                  "Unsupported range type given as input to a scanning "
 5412|  1.61M|                  "function.\n"
 5413|  1.61M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.61M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.61M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.61M|                  "\n"
 5417|  1.61M|                  "Unsupported range type given as input to a scanning "
 5418|  1.61M|                  "function.\n"
 5419|  1.61M|                  "A range needs to model forward_range and have a valid "
 5420|  1.61M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.61M|                  "Examples of scannable ranges are std::string, "
 5422|  1.61M|                  "std::string_view, "
 5423|  1.61M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.61M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.61M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.61M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  1.61M|{
 5320|  1.61M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  1.61M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  1.61M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.61M|    {
 3000|  1.61M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.61M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.61M|    {
 2981|  1.61M|        return t.data();
 2982|  1.61M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  1.61M|    {
 3383|  1.61M|        return detail::to_address(ranges::begin(derived()));
 3384|  1.61M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  6.09M|{
  316|  6.09M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  6.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  6.09M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   213M|{
  294|   213M|    return p;
  295|   213M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.17M|    {
 2869|  3.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.17M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.17M|    {
 2850|  3.17M|        return decay_copy(t.begin());
 2851|  3.17M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   175M|    {
 3480|   175M|        return m_iterator;
 3481|   175M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  1.61M|    {
 3339|  1.61M|        return static_cast<const D&>(*this);
 3340|  1.61M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  1.61M|    {
 3075|  1.61M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.61M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  1.61M|    {
 3041|  1.61M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.61M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  3.85M|    {
 3496|  3.85M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  3.85M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  52.0k|        : base(unexpect, std::move(e.error())),
 1616|  52.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  52.0k|    {
 1618|  52.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  52.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  52.0k|          m_has_value(false)
  451|  52.0k|    {
  452|  52.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.61M|    {
 1316|  1.61M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  1.56M|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  1.56M|                      ranges::iterator_t<SourceRange>>) {
 6677|  1.56M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  1.56M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  4.46M|    {
 2869|  4.46M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  4.46M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  4.46M|    {
 2850|  4.46M|        return decay_copy(t.begin());
 2851|  4.46M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|  1.56M|{
 6662|  1.56M|    return ranges::end(source);
 6663|  1.56M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.56M|    {
 2926|  1.56M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.56M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.56M|    {
 2908|  1.56M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.56M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   167M|    {
 3484|   167M|        return m_sentinel;
 3485|   167M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.56M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.56M|    {
 1572|  1.56M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.56M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.56M|    {
  442|  1.56M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8767|   648k|    {
 8768|   648k|        return m_str;
 8769|   648k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|  1.29M|{
 6110|  1.29M|    detail::check_scan_arg_types<Args...>();
 6111|  1.29M|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  1.29M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5824|  1.61M|{
 5825|  1.61M|    constexpr bool default_constructible_constraint =
 5826|  1.61M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.61M|    static_assert(default_constructible_constraint,
 5828|  1.61M|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.61M|    constexpr bool destructible_constraint =
 5831|  1.61M|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.61M|    static_assert(destructible_constraint,
 5833|  1.61M|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.61M|    constexpr bool non_reference_constraint =
 5836|  1.61M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.61M|    static_assert(non_reference_constraint,
 5838|  1.61M|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.61M|    constexpr bool movable_constraint =
 5841|  1.61M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.61M|    static_assert(movable_constraint,
 5843|  1.61M|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.61M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.61M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.61M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6085|  1.29M|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  1.29M|    {
 6087|  1.29M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|  1.29M|    {
 6095|  1.29M|        return {detail::make_arg<
 6096|  1.29M|            kind, Context,
 6097|  1.29M|            mapped_type_constant<remove_cvref_t<A>,
 6098|  1.29M|                                 typename Context::char_type>::value>(args)...};
 6099|  1.29M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5874|  1.29M|{
 5875|  1.29M|    return make_value<Context>(value).ref_value;
 5876|  1.29M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5809|  1.61M|{
 5810|  1.61M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  1.61M|                                  needs_context_tag>) {
 5814|  1.61M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  1.61M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5648|  1.61M|    {                                                                        \
 5649|  1.61M|        return val;                                                          \
 5650|  1.61M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5778|  1.61M|{
 5779|  1.61M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.61M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.61M|    constexpr bool scannable_char =
 5783|  1.61M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.61M|    static_assert(scannable_char,
 5785|  1.61M|                  "Cannot scan an argument of an unsupported character "
 5786|  1.61M|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.61M|    constexpr bool scannable_const =
 5789|  1.61M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.61M|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.61M|    constexpr bool scannable_disabled =
 5793|  1.61M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.61M|    static_assert(scannable_disabled,
 5795|  1.61M|                  "Cannot scan an argument that has been disabled by "
 5796|  1.61M|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.61M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.61M|    static_assert(
 5800|  1.61M|        scannable,
 5801|  1.61M|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.61M|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.61M|    return arg_value{arg};
 5805|  1.61M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5562|  1.61M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.61M|    {
 5564|  1.61M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6353|  1.29M|    {
 6354|  1.29M|        return m_values;
 6355|  1.29M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  1.29M|        : basic_scan_args(store.desc, store.args.data())
 6136|  1.29M|    {
 6137|  1.29M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|  1.94M|        : m_desc(desc), m_builtin_values(data)
 6188|  1.94M|    {
 6189|  1.94M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  64.9M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  64.9M|    static_cast<    \
  |  |  935|  64.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  64.9M|    static_cast<    \
  |  |  935|  64.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  64.9M|    {
 3466|  64.9M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|  1.94M|{
 8446|  1.94M|    return s;
 8447|  1.94M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|  1.94M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   648k|        : m_str(r.str)
 8763|   648k|    {
 8764|   648k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   806k|    {
 1740|   806k|        return has_value();
 1741|   806k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.36M|    {
 1815|  2.36M|        return &value();
 1816|  2.36M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  2.36M|    {
 1769|  2.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.36M|        return this->get_value();
 1771|  2.36M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|  1.56M|    {
 6434|  1.56M|        return ranges::begin(m_range);
 6435|  1.56M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   832k|    {
  643|   832k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 780k, False: 52.0k]
  ------------------
  644|   780k|            destroy_value();
  645|   780k|        }
  646|  52.0k|        else {
  647|  52.0k|            destroy_unexpected();
  648|  52.0k|        }
  649|   832k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|   648k|{
 9414|   648k|#if !SCN_DISABLE_LOCALE
 9415|   648k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   648k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   648k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   648k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   648k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.0k, False: 624k]
  |  |  ------------------
  ------------------
 9422|  24.0k|        return unexpected(result.error());
 9423|  24.0k|    }
 9424|   624k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   648k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|   316k|{
 9438|   316k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|   316k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|   316k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.00k, False: 312k]
  |  |  ------------------
  ------------------
 9442|  4.00k|        return unexpected(result.error());
 9443|  4.00k|    }
 9444|   312k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|   316k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5859|   316k|{
 5860|   316k|    check_scan_arg_types<T>();
 5861|       |
 5862|   316k|    basic_scan_arg<Context> arg;
 5863|   316k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|   316k|    arg.m_value = make_value<Context>(value);
 5865|   316k|    return arg;
 5866|   316k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|  2.41M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|   316k|    {
 6376|   316k|        return std::get<0>(m_values);
 6377|   316k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9636|   806k|{
 9637|   806k|    return scan_result_type<Source, Args...>();
 9638|   806k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   806k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   806k|        : m_value(T{}), m_has_value(true)
  427|   806k|    {
  428|   806k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6570|   806k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6344|   806k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9621|   806k|{
 9622|   806k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   806k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.0k, False: 780k]
  |  |  ------------------
  ------------------
 9623|  26.0k|        out = unexpected(in.error());
 9624|  26.0k|    }
 9625|   780k|    else {
 9626|   780k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   780k|    static_cast<    \
  |  |  935|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   780k|    }
 9628|   806k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  26.0k|        : base(unexpect, std::move(e.error())),
 1616|  26.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.0k|    {
 1618|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  26.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  26.0k|          m_has_value(false)
  451|  26.0k|    {
  452|  26.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  26.0k|    {
 1316|  26.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  26.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  26.0k|    {
  903|  26.0k|        assign_common(std::move(other));
  904|  26.0k|        return *this;
  905|  26.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  26.0k|    {
  950|  26.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 26.0k, False: 0]
  ------------------
  951|  26.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 26.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  26.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  26.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.22M|    {
  490|  3.22M|        return m_has_value;
  491|  3.22M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.36M|    {
  456|  2.36M|        return m_value;
  457|  2.36M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  26.0k|    {
 1046|  26.0k|        this->destroy_value();
 1047|  26.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  26.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  26.0k|    {
  504|  26.0k|        scn::detail::construct_at(&get_unexpected(),
  505|  26.0k|                                  std::forward<Args>(args)...);
  506|  26.0k|        m_has_value = false;
  507|  26.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  26.0k|    {
  473|  26.0k|        return m_unexpected;
  474|  26.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  26.0k|    {
  481|  26.0k|        return std::move(m_unexpected);
  482|  26.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8767|   648k|    {
 8768|   648k|        return m_str;
 8769|   648k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6109|   648k|{
 6110|   648k|    detail::check_scan_arg_types<Args...>();
 6111|   648k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   648k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5824|   806k|{
 5825|   806k|    constexpr bool default_constructible_constraint =
 5826|   806k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   806k|    static_assert(default_constructible_constraint,
 5828|   806k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   806k|    constexpr bool destructible_constraint =
 5831|   806k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   806k|    static_assert(destructible_constraint,
 5833|   806k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   806k|    constexpr bool non_reference_constraint =
 5836|   806k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   806k|    static_assert(non_reference_constraint,
 5838|   806k|                  "Scan argument types must not be references");
 5839|       |
 5840|   806k|    constexpr bool movable_constraint =
 5841|   806k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   806k|    static_assert(movable_constraint,
 5843|   806k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   806k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   806k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   806k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6085|   648k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   648k|    {
 6087|   648k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6094|   648k|    {
 6095|   648k|        return {detail::make_arg<
 6096|   648k|            kind, Context,
 6097|   648k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   648k|                                 typename Context::char_type>::value>(args)...};
 6099|   648k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5874|   648k|{
 5875|   648k|    return make_value<Context>(value).ref_value;
 5876|   648k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5809|   806k|{
 5810|   806k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   806k|                                  needs_context_tag>) {
 5814|   806k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   806k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   806k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5648|   806k|    {                                                                        \
 5649|   806k|        return val;                                                          \
 5650|   806k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5778|   806k|{
 5779|   806k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   806k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   806k|    constexpr bool scannable_char =
 5783|   806k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   806k|    static_assert(scannable_char,
 5785|   806k|                  "Cannot scan an argument of an unsupported character "
 5786|   806k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   806k|    constexpr bool scannable_const =
 5789|   806k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   806k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   806k|    constexpr bool scannable_disabled =
 5793|   806k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   806k|    static_assert(scannable_disabled,
 5795|   806k|                  "Cannot scan an argument that has been disabled by "
 5796|   806k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   806k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   806k|    static_assert(
 5800|   806k|        scannable,
 5801|   806k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   806k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   806k|    return arg_value{arg};
 5805|   806k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5562|   806k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   806k|    {
 5564|   806k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6353|   648k|    {
 6354|   648k|        return m_values;
 6355|   648k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   648k|        : basic_scan_args(store.desc, store.args.data())
 6136|   648k|    {
 6137|   648k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   648k|        : m_str(r.str)
 8763|   648k|    {
 8764|   648k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   806k|    {
 1740|   806k|        return has_value();
 1741|   806k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.36M|    {
 1815|  2.36M|        return &value();
 1816|  2.36M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  2.36M|    {
 1769|  2.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.36M|        return this->get_value();
 1771|  2.36M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5859|   158k|{
 5860|   158k|    check_scan_arg_types<T>();
 5861|       |
 5862|   158k|    basic_scan_arg<Context> arg;
 5863|   158k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|   158k|    arg.m_value = make_value<Context>(value);
 5865|   158k|    return arg;
 5866|   158k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|   158k|    {
 6376|   158k|        return std::get<0>(m_values);
 6377|   158k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  26.0k|    {
 2869|  26.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  26.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  26.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  26.0k|    {
 2850|  26.0k|        return decay_copy(t.begin());
 2851|  26.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  82.7M|{
 2094|  82.7M|    return SCN_FWD(t);
  ------------------
  |  |  936|  82.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  82.7M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.61M|    {
 2926|  1.61M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.61M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.61M|    {
 2908|  1.61M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.61M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9636|   806k|{
 9637|   806k|    return scan_result_type<Source, Args...>();
 9638|   806k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   806k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   806k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   806k|    {
  613|   806k|        construct();
  614|   806k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   806k|    {
  694|   806k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   806k|        m_has_value = true;
  696|   806k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  395|   806k|{
  396|   806k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   806k|        T(std::forward<Args>(args)...);
  398|   806k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6570|   806k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|   806k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   806k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.97M|    {
  718|  3.97M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  3.97M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.97M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9621|   806k|{
 9622|   806k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   806k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.0k, False: 780k]
  |  |  ------------------
  ------------------
 9623|  26.0k|        out = unexpected(in.error());
 9624|  26.0k|    }
 9625|   780k|    else {
 9626|   780k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   780k|    static_cast<    \
  |  |  935|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   780k|    }
 9628|   806k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   806k|    {
 1740|   806k|        return has_value();
 1741|   806k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.61M|    {
  490|  1.61M|        return m_has_value;
  491|  1.61M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  26.0k|    {
 1746|  26.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  26.0k|        return this->get_unexpected().error();
 1748|  26.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  26.0k|    {
  473|  26.0k|        return m_unexpected;
  474|  26.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  26.0k|        : base(unexpect, std::move(e.error())),
 1616|  26.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.0k|    {
 1618|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  26.0k|        : m_has_value(false)
  637|  26.0k|    {
  638|  26.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  26.0k|    {
  701|  26.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  26.0k|                                  std::forward<Args>(args)...);
  703|  26.0k|        m_has_value = false;
  704|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   130k|    {
  730|   130k|        return reinterpret_cast<unexpected<E>*>(
  731|   130k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   130k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   130k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  26.0k|    {
 1316|  26.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  26.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  26.0k|    {
  903|  26.0k|        assign_common(std::move(other));
  904|  26.0k|        return *this;
  905|  26.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  26.0k|    {
  950|  26.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 26.0k, False: 0]
  ------------------
  951|  26.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 26.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  26.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  26.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  4.05M|    {
  687|  4.05M|        return m_has_value;
  688|  4.05M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  2.36M|    {
  653|  2.36M|        return *value_ptr();
  654|  2.36M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  26.0k|    {
 1046|  26.0k|        this->destroy_value();
 1047|  26.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   806k|    {
  708|   806k|        scn::detail::destroy_at(value_ptr());
  709|   806k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  401|   806k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   806k|    else {
  408|   806k|        p->~T();
  409|   806k|    }
  410|   806k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6577|   806k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  26.0k|    {
  701|  26.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  26.0k|                                  std::forward<Args>(args)...);
  703|  26.0k|        m_has_value = false;
  704|  26.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  26.0k|    {
  678|  26.0k|        return std::move(*unexpected_ptr());
  679|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  52.0k|    {
  712|  52.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  52.0k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|   780k|    {
 6445|   780k|        m_range = std::forward<Other>(r);
 6446|   780k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   780k|    {
 1795|   780k|        return value();
 1796|   780k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   780k|    {
 1769|   780k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   780k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   780k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   780k|        return this->get_value();
 1771|   780k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   780k|    {
  456|   780k|        return m_value;
  457|   780k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|   324k|{
 9398|   324k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   324k|    auto result = vscan_impl(buffer, format, args);
 9401|   324k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 312k]
  |  |  ------------------
  ------------------
 9402|  12.0k|        return unexpected(result.error());
 9403|  12.0k|    }
 9404|   312k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   324k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   806k|{
 5381|   806k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   806k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   806k|                  "\n"
 5385|   806k|                  "Unsupported range type given as input to a scanning "
 5386|   806k|                  "function.\n"
 5387|   806k|                  "A range needs to have a character type (value type) "
 5388|   806k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   806k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   806k|                  "to be included.\n"
 5391|   806k|                  "See the scnlib documentation for more details.");
 5392|   806k|    static_assert(
 5393|   806k|        !std::is_same_v<T, custom_char_traits>,
 5394|   806k|        "\n"
 5395|   806k|        "Unsupported range type given as input to a scanning "
 5396|   806k|        "function.\n"
 5397|   806k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   806k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   806k|        "not supported.");
 5400|   806k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   806k|                  "\n"
 5402|   806k|                  "Unsupported range type given as input to a scanning "
 5403|   806k|                  "function.\n"
 5404|   806k|                  "file_marker_found cannot be used as an "
 5405|   806k|                  "source range type to scn::scan.\n"
 5406|   806k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   806k|                  "and do not provide an explicit source range, "
 5408|   806k|                  "or use scn::scan with a FILE* directly.");
 5409|   806k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   806k|                  "\n"
 5411|   806k|                  "Unsupported range type given as input to a scanning "
 5412|   806k|                  "function.\n"
 5413|   806k|                  "In order to be scannable, a range needs to satisfy "
 5414|   806k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   806k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   806k|                  "\n"
 5417|   806k|                  "Unsupported range type given as input to a scanning "
 5418|   806k|                  "function.\n"
 5419|   806k|                  "A range needs to model forward_range and have a valid "
 5420|   806k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   806k|                  "Examples of scannable ranges are std::string, "
 5422|   806k|                  "std::string_view, "
 5423|   806k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   806k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   806k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   806k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   806k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   806k|    else {
 5366|   806k|        return make_forward_scan_buffer(r);
 5367|   806k|    }
 5368|   806k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   806k|{
 5185|   806k|    return basic_scan_forward_buffer_impl(range);
 5186|   806k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   806k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   806k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   806k|          m_cursor(ranges::begin(*m_range))
 4766|   806k|    {
 4767|   806k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   806k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   806k|    {
 4738|   806k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   806k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   806k|    {
 4429|   806k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   806k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.58M|    {
 2869|  1.58M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.58M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.58M|    {
 2850|  1.58M|        return decay_copy(t.begin());
 2851|  1.58M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  2.36M|    {
 3480|  2.36M|        return m_iterator;
 3481|  2.36M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  25.9M|    {
 4771|  25.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 24.1k, False: 25.9M]
  ------------------
 4772|  24.1k|            return false;
 4773|  24.1k|        }
 4774|  25.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  25.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  25.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  25.9M|        }
 4777|  25.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 25.1M, False: 791k]
  ------------------
 4778|  25.1M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  25.1M|                                          this->m_current_view.begin(),
 4780|  25.1M|                                          this->m_current_view.end());
 4781|  25.1M|        }
 4782|  25.9M|        m_latest = *m_cursor;
 4783|  25.9M|        ++m_cursor;
 4784|  25.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  25.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  25.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  25.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  25.9M|        }
 4788|  25.9M|        return true;
 4789|  25.9M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  77.9M|    {
 2926|  77.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  77.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  77.9M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  77.9M|    {
 2908|  77.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  77.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  77.9M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  78.7M|    {
 3484|  78.7M|        return m_sentinel;
 3485|  78.7M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   806k|    {
 4346|   806k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   806k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   806k|        return true;
 4348|   806k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  26.0k|        : base(unexpect, std::move(e.error())),
 1616|  26.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  26.0k|    {
 1618|  26.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  26.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  26.0k|          m_has_value(false)
  451|  26.0k|    {
  452|  26.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   806k|    {
 1316|   806k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|   780k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   780k|                      ranges::iterator_t<SourceRange>>) {
 6677|   780k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   780k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   780k|    {
 2869|   780k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   780k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   780k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   780k|    {
 2850|   780k|        return decay_copy(t.begin());
 2851|   780k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|   780k|{
 6662|   780k|    return ranges::end(source);
 6663|   780k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   780k|    {
 2926|   780k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   780k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   780k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   780k|    {
 2908|   780k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   780k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   780k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   780k|        : base(std::in_place, std::forward<U>(val)),
 1570|   780k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   780k|    {
 1572|   780k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   780k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   780k|    {
  442|   780k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8767|   648k|    {
 8768|   648k|        return m_str;
 8769|   648k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.58M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.58M|    static_cast<    \
  |  |  935|  1.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.58M|    static_cast<    \
  |  |  935|  1.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.58M|    {
 3466|  1.58M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   648k|        : m_str(r.str)
 8763|   648k|    {
 8764|   648k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   806k|    {
 1740|   806k|        return has_value();
 1741|   806k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  2.36M|    {
 1815|  2.36M|        return &value();
 1816|  2.36M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|  2.36M|    {
 1769|  2.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.36M|        return this->get_value();
 1771|  2.36M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|   780k|    {
 6434|   780k|        return ranges::begin(m_range);
 6435|   780k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   832k|    {
  643|   832k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 780k, False: 52.0k]
  ------------------
  644|   780k|            destroy_value();
  645|   780k|        }
  646|  52.0k|        else {
  647|  52.0k|            destroy_unexpected();
  648|  52.0k|        }
  649|   832k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|   324k|{
 9414|   324k|#if !SCN_DISABLE_LOCALE
 9415|   324k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   324k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   324k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   324k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   324k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 312k]
  |  |  ------------------
  ------------------
 9422|  12.0k|        return unexpected(result.error());
 9423|  12.0k|    }
 9424|   312k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   324k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|   158k|{
 9438|   158k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|   158k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|   158k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.00k, False: 156k]
  |  |  ------------------
  ------------------
 9442|  2.00k|        return unexpected(result.error());
 9443|  2.00k|    }
 9444|   156k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|   158k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   153k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   153k|    {
 3742|   153k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   153k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   124k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   124k|    else {
 3981|   124k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   124k|    }
 3983|   124k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  5.28M|    {
 3480|  5.28M|        return m_iterator;
 3481|  5.28M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  84.8M|    {
 3480|  84.8M|        return m_iterator;
 3481|  84.8M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  8.75M|    {
  572|  8.75M|        return m_has_value;
  573|  8.75M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   108k|    {
  555|   108k|        return m_unexpected;
  556|   108k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   108k|    {
 1746|   108k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   108k|        return this->get_unexpected().error();
 1748|   108k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  1.15M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7034|  36.0k|    {
 7035|  36.0k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7035:13): [True: 0, False: 36.0k]
  |  Branch (7035:39): [True: 0, False: 0]
  ------------------
 7036|       |            // clang-format off
 7037|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7038|       |            // clang-format on
 7039|      0|        }
 7040|       |
 7041|  36.0k|        m_specs.width = width;
 7042|  36.0k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|  1.12M|    {
 7056|  1.12M|        m_specs.type = type;
 7057|  1.12M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7072|  41.7k|    {
 7073|  41.7k|        const auto begin_value = static_cast<unsigned>(begin);
 7074|  41.7k|        const auto end_value = static_cast<unsigned>(end);
 7075|  41.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  41.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7076|       |
 7077|  41.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  41.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.7k, False: 0]
  |  |  ------------------
  ------------------
 7078|       |            // No need to bit-twiddle with a mask, because with the
 7079|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7080|  41.7k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  41.7k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7081|  1.12M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7081:40): [True: 1.08M, False: 41.7k]
  ------------------
 7082|  1.08M|                m_specs.charset_literals[v / 8] |=
 7083|  1.08M|                    static_cast<unsigned char>(1ul << (v % 8));
 7084|  1.08M|            }
 7085|  41.7k|        }
 7086|      0|        else {
 7087|      0|            m_specs.charset_has_nonascii = true;
 7088|      0|        }
 7089|  41.7k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7117|  36.0k|    {
 7118|  36.0k|        SCN_UNLIKELY_ATTR
 7119|  36.0k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7120|  36.0k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|  1.21M|    {
 7129|  1.21M|        return m_error;
 7130|  1.21M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   139k|{
 3918|   139k|    return unexpected(scan_error{c, m});
 3919|   139k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  79.6M|{
 4308|       |    // Pattern_White_Space property
 4309|  79.6M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 15.4M, False: 64.2M]
  |  Branch (4309:27): [True: 2.46M, False: 13.0M]
  ------------------
 4310|  79.6M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 2.53M, False: 74.6M]
  ------------------
 4311|  79.6M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 424k, False: 74.2M]
  ------------------
 4312|  79.6M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 234k, False: 74.0M]
  ------------------
 4313|  79.6M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 241k, False: 73.7M]
  ------------------
 4314|  79.6M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 111k, False: 73.6M]
  ------------------
 4315|  79.6M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 45, False: 73.6M]
  ------------------
 4316|  79.6M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|  18.0k|{
 7812|  18.0k|    switch (type) {
 7813|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 0, False: 18.0k]
  ------------------
 7814|      0|            return arg_type_category::none;
 7815|       |
 7816|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 18.0k]
  ------------------
 7817|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 18.0k]
  ------------------
 7818|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 0, False: 18.0k]
  ------------------
 7819|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 18.0k]
  ------------------
 7820|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 18.0k]
  ------------------
 7821|      0|            return arg_type_category::integer;
 7822|       |
 7823|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 18.0k]
  ------------------
 7824|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 18.0k]
  ------------------
 7825|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 0, False: 18.0k]
  ------------------
 7826|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 18.0k]
  ------------------
 7827|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 18.0k]
  ------------------
 7828|      0|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 18.0k]
  ------------------
 7831|      0|            return arg_type_category::pointer;
 7832|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 18.0k]
  ------------------
 7833|      0|            return arg_type_category::boolean;
 7834|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 0, False: 18.0k]
  ------------------
 7835|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 18.0k]
  ------------------
 7836|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 18.0k]
  ------------------
 7837|      0|            return arg_type_category::character;
 7838|       |
 7839|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 18.0k]
  ------------------
 7840|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 0, False: 18.0k]
  ------------------
 7841|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 18.0k]
  ------------------
 7842|      0|            return arg_type_category::floating;
 7843|       |
 7844|  2.00k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 2.00k, False: 16.0k]
  ------------------
 7845|  6.00k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 4.00k, False: 14.0k]
  ------------------
 7846|  10.0k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 4.00k, False: 14.0k]
  ------------------
 7847|  18.0k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 8.00k, False: 10.0k]
  ------------------
 7848|  18.0k|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 18.0k]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 18.0k]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|  18.0k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|  18.0k|            SCN_CLANG_POP
 7859|  18.0k|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|  18.0k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  8.64M|    {
 1740|  8.64M|        return has_value();
 1741|  8.64M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7953|  1.12M|{
 7954|  1.12M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7954:9): [True: 0, False: 1.12M]
  ------------------
 7955|  1.12M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7955:9): [True: 1.08M, False: 38.8k]
  ------------------
 7956|  1.12M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7956:9): [True: 20.8k, False: 18.0k]
  ------------------
 7957|  1.12M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7957:9): [True: 0, False: 18.0k]
  ------------------
 7958|  1.12M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7958:9): [True: 0, False: 18.0k]
  ------------------
 7959|  1.10M|        return;
 7960|  1.10M|    }
 7961|  18.0k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7961:9): [True: 18.0k, False: 0]
  ------------------
 7962|  18.0k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.0k, False: 0]
  |  |  ------------------
  ------------------
 7963|       |            // clang-format off
 7964|  18.0k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7965|       |            // clang-format on
 7966|  18.0k|        }
 7967|      0|        return;
 7968|  18.0k|    }
 7969|      0|    SCN_UNLIKELY_ATTR
 7970|      0|    handler.on_error("Invalid type specifier for string");
 7971|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  29.0M|    {
 4473|  29.0M|        assert(m_begin);
 4474|  29.0M|        return m_end == nullptr;
 4475|  29.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   642k|    {
 4490|   642k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 642k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   642k|        return parent()->get_segment_starting_at(position());
 4496|   642k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  16.9M|    {
 4484|  16.9M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  16.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  16.9M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  16.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|   642k|    {
 4377|   642k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 365k, False: 276k]
  |  |  ------------------
  ------------------
 4378|   642k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   365k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   365k|        }
 4381|   276k|        const auto start = pos - m_putback_buffer.size();
 4382|   276k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   276k|        return m_current_view.substr(start);
 4384|   276k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   723k|    {
 4468|   723k|        return m_position;
 4469|   723k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   414k|    {
 4399|   414k|        return m_is_contiguous;
 4400|   414k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   471M|    {
 4473|   471M|        assert(m_begin);
 4474|   471M|        return m_end == nullptr;
 4475|   471M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   783k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   783k|    else {
 3981|   783k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   783k|    }
 3983|   783k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  2.36M|    {
 4490|  2.36M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 2.36M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  2.36M|        return parent()->get_segment_starting_at(position());
 4496|  2.36M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|   274M|    {
 4484|   274M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   274M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   274M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   274M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   274M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  2.36M|    {
 4377|  2.36M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56M, False: 802k]
  |  |  ------------------
  ------------------
 4378|  2.36M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.56M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.56M|        }
 4381|   802k|        const auto start = pos - m_putback_buffer.size();
 4382|   802k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   802k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   802k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   802k|        return m_current_view.substr(start);
 4384|   802k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  2.84M|    {
 4468|  2.84M|        return m_position;
 4469|  2.84M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  2.41M|    {
 4399|  2.41M|        return m_is_contiguous;
 4400|  2.41M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   798k|    {
 3334|   798k|        return static_cast<D&>(*this);
 3335|   798k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   798k|    {
 3375|   798k|        return detail::to_address(ranges::begin(derived()));
 3376|   798k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  2.90M|    {
 3334|  2.90M|        return static_cast<D&>(*this);
 3335|  2.90M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  2.90M|    {
 3375|  2.90M|        return detail::to_address(ranges::begin(derived()));
 3376|  2.90M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|  57.4k|    {
 8965|  57.4k|        return ranges::subrange{begin(), end()};
 8966|  57.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|  57.4k|    {
 8957|  57.4k|        return ranges::default_sentinel;
 8958|  57.4k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  1.94M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.94M|    static_cast<    \
  |  |  935|  1.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.94M|    static_cast<    \
  |  |  935|  1.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.94M|    {
 3466|  1.94M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|  2.75M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   129k|    {
 1979|   129k|        return detail::transform_error_impl(std::move(*this),
 1980|   129k|                                            std::forward<F>(f));
 1981|   129k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   129k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   129k|    else {
 1472|   129k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   129k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   129k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 126k, False: 2.27k]
  |  |  ------------------
  ------------------
 1474|   129k|                   ? result(*std::forward<Exp>(exp))
 1475|   129k|                   : result(unexpect,
 1476|  2.27k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.27k|                                           std::forward<Exp>(exp).error()));
 1478|   129k|    }
 1479|   129k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   258k|    {
  490|   258k|        return m_has_value;
  491|   258k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   126k|    {
 1805|   126k|        return std::move(value());
 1806|   126k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   126k|    {
 1769|   126k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   126k|        return this->get_value();
 1771|   126k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   126k|    {
  456|   126k|        return m_value;
  457|   126k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   303k|        : base(std::in_place, std::forward<U>(val)),
 1570|   303k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   303k|    {
 1572|   303k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   303k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   303k|    {
  442|   303k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   320k|    {
 1316|   320k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  13.9k|{
 1350|  13.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  13.9k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.27k|    {
 1756|  2.27k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.27k|        return std::move(this->get_unexpected().error());
 1758|  2.27k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.27k|    {
  473|  2.27k|        return m_unexpected;
  474|  2.27k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  27.9k|    {
  365|  27.9k|        return m_unexpected;
  366|  27.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.27k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.27k|    {
 1628|  2.27k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  16.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  16.2k|          m_has_value(false)
  451|  16.2k|    {
  452|  16.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   324k|    {
 8965|   324k|        return ranges::subrange{begin(), end()};
 8966|   324k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   324k|    {
 8957|   324k|        return ranges::default_sentinel;
 8958|   324k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  29.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  29.7M|    static_cast<    \
  |  |  935|  29.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  29.7M|    static_cast<    \
  |  |  935|  29.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  29.7M|    {
 3466|  29.7M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   790k|    {
 1979|   790k|        return detail::transform_error_impl(std::move(*this),
 1980|   790k|                                            std::forward<F>(f));
 1981|   790k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   790k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   790k|    else {
 1472|   790k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   790k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   790k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 787k, False: 2.72k]
  |  |  ------------------
  ------------------
 1474|   790k|                   ? result(*std::forward<Exp>(exp))
 1475|   790k|                   : result(unexpect,
 1476|  2.72k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.72k|                                           std::forward<Exp>(exp).error()));
 1478|   790k|    }
 1479|   790k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.58M|    {
  490|  1.58M|        return m_has_value;
  491|  1.58M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   787k|    {
 1805|   787k|        return std::move(value());
 1806|   787k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   787k|    {
 1769|   787k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   787k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   787k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   787k|        return this->get_value();
 1771|   787k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   787k|    {
  456|   787k|        return m_value;
  457|   787k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  1.87M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.87M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.87M|    {
 1572|  1.87M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.87M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.87M|    {
  442|  1.87M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.91M|    {
 1316|  1.91M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.72k|    {
 1756|  2.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.72k|        return std::move(this->get_unexpected().error());
 1758|  2.72k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.72k|    {
  473|  2.72k|        return m_unexpected;
  474|  2.72k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.72k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.72k|    {
 1628|  2.72k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  31.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  31.6k|          m_has_value(false)
  451|  31.6k|    {
  452|  31.6k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   139k|        : m_unexpected(std::forward<Err>(e))
  350|   139k|    {
  351|   139k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   139k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   139k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   117k|        : base(unexpect, std::move(e.error())),
 1616|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   117k|    {
 1618|   117k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   117k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   117k|          m_has_value(false)
  451|   117k|    {
  452|   117k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.77M|    {
 1316|  2.77M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  28.5k|        : base(unexpect, std::move(e.error())),
 1616|  28.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.5k|    {
 1618|  28.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  32.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  32.1k|          m_has_value(false)
  451|  32.1k|    {
  452|  32.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   505k|    {
 1316|   505k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   471k|        : base(std::in_place, std::forward<U>(val)),
 1570|   471k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   471k|    {
 1572|   471k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   471k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   471k|    {
  442|   471k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   505k|    {
 1740|   505k|        return has_value();
 1741|   505k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.01M|    {
  490|  1.01M|        return m_has_value;
  491|  1.01M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  32.1k|    {
 1746|  32.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  32.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  32.1k|        return this->get_unexpected().error();
 1748|  32.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  32.1k|    {
  473|  32.1k|        return m_unexpected;
  474|  32.1k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   393k|    {
 1805|   393k|        return std::move(value());
 1806|   393k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   473k|    {
 1769|   473k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   473k|        return this->get_value();
 1771|   473k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   473k|    {
  456|   473k|        return m_value;
  457|   473k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  57.8k|        : base(unexpect, std::move(e.error())),
 1616|  57.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  57.8k|    {
 1618|  57.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  63.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  63.2k|          m_has_value(false)
  451|  63.2k|    {
  452|  63.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.82M|    {
 1316|  3.82M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  3.75M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.75M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.75M|    {
 1572|  3.75M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.75M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.75M|    {
  442|  3.75M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  3.82M|    {
 1740|  3.82M|        return has_value();
 1741|  3.82M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  7.64M|    {
  490|  7.64M|        return m_has_value;
  491|  7.64M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  63.2k|    {
 1746|  63.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  63.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  63.2k|        return this->get_unexpected().error();
 1748|  63.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  63.2k|    {
  473|  63.2k|        return m_unexpected;
  474|  63.2k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  3.13M|    {
 1805|  3.13M|        return std::move(value());
 1806|  3.13M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  3.75M|    {
 1769|  3.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.75M|        return this->get_value();
 1771|  3.75M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.75M|    {
  456|  3.75M|        return m_value;
  457|  3.75M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   202k|    {
 1979|   202k|        return detail::transform_error_impl(std::move(*this),
 1980|   202k|                                            std::forward<F>(f));
 1981|   202k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   202k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   202k|    else {
 1472|   202k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   202k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   202k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 199k, False: 3.56k]
  |  |  ------------------
  ------------------
 1474|   202k|                   ? result(*std::forward<Exp>(exp))
 1475|   202k|                   : result(unexpect,
 1476|  3.56k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.56k|                                           std::forward<Exp>(exp).error()));
 1478|   202k|    }
 1479|   202k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   405k|    {
  490|   405k|        return m_has_value;
  491|   405k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   199k|    {
 1805|   199k|        return std::move(value());
 1806|   199k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   199k|    {
 1769|   199k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   199k|        return this->get_value();
 1771|   199k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   199k|    {
  456|   199k|        return m_value;
  457|   199k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  3.56k|    {
 1756|  3.56k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.56k|        return std::move(this->get_unexpected().error());
 1758|  3.56k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  3.56k|    {
  473|  3.56k|        return m_unexpected;
  474|  3.56k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  3.56k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  3.56k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  3.56k|    {
 1628|  3.56k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|   170k|    {
 8949|   170k|        return m_current;
 8950|   170k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|   148k|    {
 8842|   148k|        return m_locale;
 8843|   148k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|   160k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   160k|    static_cast<    \
  |  |  935|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   160k|    static_cast<    \
  |  |  935|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   160k|    {
 8849|   160k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  14.0k|        : base(unexpect, std::move(e.error())),
 1616|  14.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.0k|    {
 1618|  14.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|   968k|    {
 8949|   968k|        return m_current;
 8950|   968k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   972k|    {
 8842|   972k|        return m_locale;
 8843|   972k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   996k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   996k|    static_cast<    \
  |  |  935|   996k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   996k|    static_cast<    \
  |  |  935|   996k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   996k|    {
 8849|   996k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  28.9k|        : base(unexpect, std::move(e.error())),
 1616|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  28.9k|    {
 1618|  28.9k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   144k|        : base(unexpect, std::move(e.error())),
 1616|   144k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   144k|    {
 1618|   144k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   144k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   144k|          m_has_value(false)
  550|   144k|    {
  551|   144k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   144k|    {
 1316|   144k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  7.46M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  7.46M|        : m_deferred_init(), m_has_value(true)
  529|  7.46M|    {
  530|  7.46M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  1.50M|    {
 4559|  1.50M|        return x.is_at_end();
 4560|  1.50M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  3.10M|    {
 4603|  3.10M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 3.10M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  3.10M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 3.10M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  3.10M|        return !read_at_position();
 4610|  3.10M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  8.64M|    {
 4583|  8.64M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  8.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  8.64M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 8.64M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  8.64M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  8.64M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 7.02M, False: 1.61M]
  |  |  ------------------
  ------------------
 4590|  7.02M|            return true;
 4591|  7.02M|        }
 4592|       |
 4593|  3.20M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 1.61M, False: 1.59M]
  ------------------
 4594|  1.61M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 18.2k, False: 1.59M]
  ------------------
 4595|  18.2k|                return false;
 4596|  18.2k|            }
 4597|  1.61M|        }
 4598|  1.59M|        return true;
 4599|  1.61M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  2.85M|    {
 4518|  2.85M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  2.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  2.85M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 2.85M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  2.85M|        auto res = read_at_position();
 4527|  2.85M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  2.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  2.85M|        return parent()->get_character_at(m_position);
 4529|  2.85M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  2.85M|    {
 4388|  2.85M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  2.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.56M, False: 1.28M]
  |  |  ------------------
  ------------------
 4389|  2.85M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  1.56M|            return m_putback_buffer[pos];
 4391|  1.56M|        }
 4392|  1.28M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.28M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.28M|        return m_current_view[start];
 4395|  1.28M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   126k|        : base(std::in_place, std::forward<U>(val)),
 1570|   126k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   126k|    {
 1572|   126k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   126k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   126k|    {
  442|   126k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   129k|    {
 1316|   129k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.27k|        : base(unexpect, std::move(e.error())),
 1616|  2.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.27k|    {
 1618|  2.27k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.27k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.27k|          m_has_value(false)
  451|  2.27k|    {
  452|  2.27k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  13.9k|        : m_unexpected(std::forward<Args>(args)...)
  359|  13.9k|    {
  360|  13.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  13.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  13.9k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  1.20M|    {
 4553|  1.20M|        return !(lhs == rhs);
 4554|  1.20M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  1.21M|    {
 4548|  1.21M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 1.21M, False: 0]
  |  Branch (4548:46): [True: 204k, False: 1.00M]
  ------------------
 4549|  1.21M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  2.67M|    {
 4504|  2.67M|        ++m_position;
 4505|  2.67M|        (void)read_at_position();
 4506|  2.67M|        return *this;
 4507|  2.67M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  13.9k|        : m_unexpected(std::forward<Err>(e))
  350|  13.9k|    {
  351|  13.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  13.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  13.9k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    988|        : base(unexpect, std::move(e.error())),
 1616|    988|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    988|    {
 1618|    988|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    988|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    988|          m_has_value(false)
  451|    988|    {
  452|    988|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   106k|    {
 1316|   106k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   105k|        : base(std::in_place, std::forward<U>(val)),
 1570|   105k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   105k|    {
 1572|   105k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   105k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   105k|    {
  442|   105k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   106k|    {
 1740|   106k|        return has_value();
 1741|   106k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   212k|    {
  490|   212k|        return m_has_value;
  491|   212k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    988|    {
 1746|    988|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    988|        return this->get_unexpected().error();
 1748|    988|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    988|    {
  473|    988|        return m_unexpected;
  474|    988|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   105k|    {
 1805|   105k|        return std::move(value());
 1806|   105k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   105k|    {
 1769|   105k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   105k|        return this->get_value();
 1771|   105k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   105k|    {
  456|   105k|        return m_value;
  457|   105k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  4.73M|    {
 3484|  4.73M|        return m_sentinel;
 3485|  4.73M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   320k|    {
 1740|   320k|        return has_value();
 1741|   320k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   641k|    {
  490|   641k|        return m_has_value;
  491|   641k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  16.2k|    {
 1746|  16.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  16.2k|        return this->get_unexpected().error();
 1748|  16.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  16.2k|    {
  473|  16.2k|        return m_unexpected;
  474|  16.2k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   252k|    {
 1805|   252k|        return std::move(value());
 1806|   252k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   304k|    {
 1769|   304k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   304k|        return this->get_value();
 1771|   304k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   304k|    {
  456|   304k|        return m_value;
  457|   304k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   134k|    {
 3480|   134k|        return m_iterator;
 3481|   134k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   134k|    {
 3484|   134k|        return m_sentinel;
 3485|   134k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   127k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   127k|    static_cast<    \
  |  |  935|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   127k|    static_cast<    \
  |  |  935|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   127k|    {
 3466|   127k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  1.60M|    {
 4570|  1.60M|        return !x.is_at_end();
 4571|  1.60M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  3.56k|        : base(unexpect, std::move(e.error())),
 1616|  3.56k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.56k|    {
 1618|  3.56k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  3.56k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.56k|          m_has_value(false)
  451|  3.56k|    {
  452|  3.56k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   202k|    {
 1316|   202k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   199k|        : base(std::in_place, std::forward<U>(val)),
 1570|   199k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   199k|    {
 1572|   199k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   199k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   199k|    {
  442|   199k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.42k|        : base(unexpect, std::move(e.error())),
 1616|  1.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.42k|    {
 1618|  1.42k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.42k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.42k|          m_has_value(false)
  451|  1.42k|    {
  452|  1.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   164k|    {
 1316|   164k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   162k|        : base(std::in_place, std::forward<U>(val)),
 1570|   162k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   162k|    {
 1572|   162k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   162k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   162k|    {
  442|   162k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   164k|    {
 1740|   164k|        return has_value();
 1741|   164k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|   328k|    {
  490|   328k|        return m_has_value;
  491|   328k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  1.42k|    {
 1746|  1.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.42k|        return this->get_unexpected().error();
 1748|  1.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.42k|    {
  473|  1.42k|        return m_unexpected;
  474|  1.42k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   162k|    {
 1805|   162k|        return std::move(value());
 1806|   162k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   162k|    {
 1769|   162k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   162k|        return this->get_value();
 1771|   162k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   162k|    {
  456|   162k|        return m_value;
  457|   162k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   798k|    {
 3000|   798k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   798k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   798k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   798k|    {
 2981|   798k|        return t.data();
 2982|   798k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  2.66M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.66M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.66M|    {
 1572|  2.66M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  2.66M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.66M|    {
  442|  2.66M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  52.2k|    {
 1795|  52.2k|        return value();
 1796|  52.2k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  80.3k|    {
 1795|  80.3k|        return value();
 1796|  80.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    836|        : base(std::in_place, std::forward<U>(val)),
 1570|    836|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    836|    {
 1572|    836|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    836|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    836|    {
  442|    836|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.67k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.67k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.67k|    {
 1572|  1.67k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.67k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.67k|    {
  442|  1.67k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  27.2M|    {
 4559|  27.2M|        return x.is_at_end();
 4560|  27.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  53.5M|    {
 4603|  53.5M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 53.5M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  53.5M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 53.5M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  53.5M|        return !read_at_position();
 4610|  53.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|   141M|    {
 4583|   141M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   141M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   141M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 141M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   141M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   141M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 115M, False: 25.9M]
  |  |  ------------------
  ------------------
 4590|   115M|            return true;
 4591|   115M|        }
 4592|       |
 4593|  51.9M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 25.9M, False: 25.9M]
  ------------------
 4594|  25.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 24.1k, False: 25.9M]
  ------------------
 4595|  24.1k|                return false;
 4596|  24.1k|            }
 4597|  25.9M|        }
 4598|  25.9M|        return true;
 4599|  25.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|   193M|    {
 4357|   193M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   193M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  52.3M|    {
 4518|  52.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  52.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  52.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  52.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 52.3M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  52.3M|        auto res = read_at_position();
 4527|  52.3M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  52.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  52.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  52.3M|        return parent()->get_character_at(m_position);
 4529|  52.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  52.3M|    {
 4388|  52.3M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  52.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.1M, False: 25.2M]
  |  |  ------------------
  ------------------
 4389|  52.3M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  27.1M|            return m_putback_buffer[pos];
 4391|  27.1M|        }
 4392|  25.2M|        const auto start = pos - m_putback_buffer.size();
 4393|  25.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  25.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  25.2M|        return m_current_view[start];
 4395|  25.2M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   147M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   147M|    else {
 4075|       |        // utf-32
 4076|   147M|        static_assert(sizeof(U) == 4);
 4077|   147M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   147M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   147M|        return 1;
 4079|   147M|    }
 4080|   147M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   787k|        : base(std::in_place, std::forward<U>(val)),
 1570|   787k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   787k|    {
 1572|   787k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   787k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   787k|    {
  442|   787k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   790k|    {
 1316|   790k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.72k|        : base(unexpect, std::move(e.error())),
 1616|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.72k|    {
 1618|  2.72k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.72k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.72k|          m_has_value(false)
  451|  2.72k|    {
  452|  2.72k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  10.3M|    {
 4553|  10.3M|        return !(lhs == rhs);
 4554|  10.3M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  10.3M|    {
 4548|  10.3M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 10.3M, False: 0]
  |  Branch (4548:46): [True: 320k, False: 10.0M]
  ------------------
 4549|  10.3M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  36.0M|    {
 4504|  36.0M|        ++m_position;
 4505|  36.0M|        (void)read_at_position();
 4506|  36.0M|        return *this;
 4507|  36.0M|    }
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   147M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   147M|    else {
 4281|   147M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   147M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   147M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   147M|        auto cp = static_cast<char32_t>(input.front());
 4283|   147M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   147M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 879k, False: 146M]
  |  |  ------------------
  ------------------
 4284|   879k|            return invalid_code_point;
 4285|   879k|        }
 4286|   146M|        return cp;
 4287|   147M|    }
 4288|   147M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.08k|        : base(unexpect, std::move(e.error())),
 1616|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.08k|    {
 1618|  1.08k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.08k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.08k|          m_has_value(false)
  451|  1.08k|    {
  452|  1.08k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   631k|    {
 1316|   631k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   630k|        : base(std::in_place, std::forward<U>(val)),
 1570|   630k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   630k|    {
 1572|   630k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   630k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   630k|    {
  442|   630k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   631k|    {
 1740|   631k|        return has_value();
 1741|   631k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.26M|    {
  490|  1.26M|        return m_has_value;
  491|  1.26M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  1.08k|    {
 1746|  1.08k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.08k|        return this->get_unexpected().error();
 1748|  1.08k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.08k|    {
  473|  1.08k|        return m_unexpected;
  474|  1.08k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   630k|    {
 1805|   630k|        return std::move(value());
 1806|   630k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   630k|    {
 1769|   630k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   630k|        return this->get_value();
 1771|   630k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   630k|    {
  456|   630k|        return m_value;
  457|   630k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  82.1M|    {
 3484|  82.1M|        return m_sentinel;
 3485|  82.1M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.91M|    {
 1740|  1.91M|        return has_value();
 1741|  1.91M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.82M|    {
  490|  3.82M|        return m_has_value;
  491|  3.82M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  31.6k|    {
 1746|  31.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  31.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  31.6k|        return this->get_unexpected().error();
 1748|  31.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  31.6k|    {
  473|  31.6k|        return m_unexpected;
  474|  31.6k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.56M|    {
 1805|  1.56M|        return std::move(value());
 1806|  1.56M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.87M|    {
 1769|  1.87M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.87M|        return this->get_value();
 1771|  1.87M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.87M|    {
  456|  1.87M|        return m_value;
  457|  1.87M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  69.1M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  69.1M|    else {
 3966|  69.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  69.1M|                                       to_address(first), to_address(last)))};
 3968|  69.1M|    }
 3969|  69.1M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   207M|{
  316|   207M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   207M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   207M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   795k|    {
 3480|   795k|        return m_iterator;
 3481|   795k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   795k|    {
 3484|   795k|        return m_sentinel;
 3485|   795k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   787k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   787k|    static_cast<    \
  |  |  935|   787k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   787k|    static_cast<    \
  |  |  935|   787k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   787k|    {
 3466|   787k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  26.2M|    {
 4570|  26.2M|        return !x.is_at_end();
 4571|  26.2M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  5.44k|        : base(unexpect, std::move(e.error())),
 1616|  5.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.44k|    {
 1618|  5.44k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  5.44k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.44k|          m_has_value(false)
  451|  5.44k|    {
  452|  5.44k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.58M|    {
 1316|  1.58M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  1.57M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.57M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.57M|    {
 1572|  1.57M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.57M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.57M|    {
  442|  1.57M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.16M|    {
  490|  3.16M|        return m_has_value;
  491|  3.16M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.57M|    {
 1769|  1.57M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.57M|        return this->get_value();
 1771|  1.57M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.57M|    {
  456|  1.57M|        return m_value;
  457|  1.57M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  2.17k|        : base(unexpect, std::move(e.error())),
 1616|  2.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.17k|    {
 1618|  2.17k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  2.17k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.17k|          m_has_value(false)
  451|  2.17k|    {
  452|  2.17k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.26M|    {
 1316|  1.26M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.26M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.26M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.26M|    {
 1572|  1.26M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.26M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.26M|    {
  442|  1.26M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.58M|    {
 1979|  1.58M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.58M|                                            std::forward<F>(f));
 1981|  1.58M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.58M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.58M|    else {
 1472|  1.58M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.58M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.58M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.57M, False: 5.44k]
  |  |  ------------------
  ------------------
 1474|  1.58M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.58M|                   : result(unexpect,
 1476|  5.44k|                            trivial_invoke(std::forward<F>(f),
 1477|  5.44k|                                           std::forward<Exp>(exp).error()));
 1478|  1.58M|    }
 1479|  1.58M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.57M|    {
 1805|  1.57M|        return std::move(value());
 1806|  1.57M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  5.44k|    {
 1756|  5.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  5.44k|        return std::move(this->get_unexpected().error());
 1758|  5.44k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  5.44k|    {
  473|  5.44k|        return m_unexpected;
  474|  5.44k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  5.44k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  5.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  5.44k|    {
 1628|  5.44k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  1.26M|    {
 1740|  1.26M|        return has_value();
 1741|  1.26M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.52M|    {
  490|  2.52M|        return m_has_value;
  491|  2.52M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  2.17k|    {
 1746|  2.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.17k|        return this->get_unexpected().error();
 1748|  2.17k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  2.17k|    {
  473|  2.17k|        return m_unexpected;
  474|  2.17k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.26M|    {
 1805|  1.26M|        return std::move(value());
 1806|  1.26M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.26M|    {
 1769|  1.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.26M|        return this->get_value();
 1771|  1.26M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.26M|    {
  456|  1.26M|        return m_value;
  457|  1.26M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  2.90M|    {
 3000|  2.90M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  2.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  2.90M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  2.90M|    {
 2981|  2.90M|        return t.data();
 2982|  2.90M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   312k|    {
 1795|   312k|        return value();
 1796|   312k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   624k|    {
 1795|   624k|        return value();
 1796|   624k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    124|        : base(std::in_place, std::forward<U>(val)),
 1570|    124|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    124|    {
 1572|    124|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    124|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    124|    {
  442|    124|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    248|        : base(std::in_place, std::forward<U>(val)),
 1570|    248|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    248|    {
 1572|    248|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    248|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    248|    {
  442|    248|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  11.8M|    {
 4357|  11.8M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  11.8M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|   292k|    {
 6177|   292k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   292k|        return static_cast<std::size_t>(m_desc &
 6182|   292k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   292k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|   584k|    {
 6203|   584k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   584k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|   292k|    {
 6145|   292k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   292k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   292k|        const auto t = type(id);
 6157|   292k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   292k|        basic_scan_arg<Context> arg;
 6162|   292k|        arg.m_type = t;
 6163|   292k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 292k, False: 0]
  ------------------
 6164|   292k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|   292k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|   292k|        return arg;
 6170|   292k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|   292k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   292k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   292k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   292k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   292k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|   292k|    {
 6207|   292k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   292k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|   506k|    {
 5961|   506k|        return m_type != detail::arg_type::none_type;
 5962|   506k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|   121k|{
 9300|   121k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   121k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   121k|{
 9201|   121k|#define SCN_VISIT(Type)                                                \
 9202|   121k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   121k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   121k|    }                                                                  \
 9205|   121k|    else {                                                             \
 9206|   121k|        return vis(monostate_val);                                     \
 9207|   121k|    }
 9208|       |
 9209|   121k|    monostate monostate_val{};
 9210|       |
 9211|   121k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 121k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 121k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 121k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 121k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 121k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 121k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 121k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 121k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 121k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 121k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 121k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 121k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 121k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 121k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 121k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 121k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 121k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 121k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|  60.7k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 60.7k, False: 60.7k]
  ------------------
 9249|  60.7k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  60.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  60.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  60.7k|    }                                                                  \
  |  | 9205|  60.7k|    else {                                                             \
  |  | 9206|  60.7k|        return vis(monostate_val);                                     \
  |  | 9207|  60.7k|    }
  ------------------
 9250|   121k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 60.7k, False: 60.7k]
  ------------------
 9251|   121k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   121k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   121k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   121k|    }                                                                  \
  |  | 9205|   121k|    else {                                                             \
  |  | 9206|   121k|        return vis(monostate_val);                                     \
  |  | 9207|   121k|    }
  ------------------
 9252|   121k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 121k]
  ------------------
 9253|   121k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   121k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   121k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   121k|    }                                                                  \
  |  | 9205|   121k|    else {                                                             \
  |  | 9206|   121k|        return vis(monostate_val);                                     \
  |  | 9207|   121k|    }
  ------------------
 9254|   121k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 121k]
  ------------------
 9255|   121k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   121k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   121k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   121k|    }                                                                  \
  |  | 9205|   121k|    else {                                                             \
  |  | 9206|   121k|        return vis(monostate_val);                                     \
  |  | 9207|   121k|    }
  ------------------
 9256|   121k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 121k]
  ------------------
 9257|   121k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   121k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   121k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   121k|    }                                                                  \
  |  | 9205|   121k|    else {                                                             \
  |  | 9206|   121k|        return vis(monostate_val);                                     \
  |  | 9207|   121k|    }
  ------------------
 9258|   121k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 121k]
  ------------------
 9259|   121k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   121k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   121k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   121k|    }                                                                  \
  |  | 9205|   121k|    else {                                                             \
  |  | 9206|   121k|        return vis(monostate_val);                                     \
  |  | 9207|   121k|    }
  ------------------
 9260|       |
 9261|   121k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 121k]
  ------------------
 9262|   121k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   121k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   121k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 121k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 121k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   121k|            SCN_CLANG_POP
 9279|   121k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   666k|{
 6006|   666k|    return arg.m_type;
 6007|   666k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   346k|{
 6018|   346k|    return arg.m_value;
 6019|   346k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|   160k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   160k|    {
 6258|   160k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|  61.4k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|  61.4k|    static_cast<    \
  |  |  935|  61.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  61.4k|    {
 8934|  61.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   138k|{
 4691|   138k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 138k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   138k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   138k|                            ranges::default_sentinel};
 4697|   138k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   138k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   138k|    {
 4455|   138k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   138k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   138k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  76.6k|{
 9300|  76.6k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  76.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  76.6k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  76.6k|{
 9201|  76.6k|#define SCN_VISIT(Type)                                                \
 9202|  76.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  76.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  76.6k|    }                                                                  \
 9205|  76.6k|    else {                                                             \
 9206|  76.6k|        return vis(monostate_val);                                     \
 9207|  76.6k|    }
 9208|       |
 9209|  76.6k|    monostate monostate_val{};
 9210|       |
 9211|  76.6k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 76.6k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 76.6k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 76.6k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 76.6k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 76.6k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 76.6k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 76.6k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 76.6k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 76.6k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 76.6k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 76.6k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 76.6k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 76.6k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 76.6k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 76.6k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 76.6k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 76.6k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 76.6k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 76.6k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|  76.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 76.6k, False: 0]
  ------------------
 9251|  76.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  76.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  76.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  76.6k|    }                                                                  \
  |  | 9205|  76.6k|    else {                                                             \
  |  | 9206|  76.6k|        return vis(monostate_val);                                     \
  |  | 9207|  76.6k|    }
  ------------------
 9252|  76.6k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 76.6k]
  ------------------
 9253|  76.6k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  76.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  76.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  76.6k|    }                                                                  \
  |  | 9205|  76.6k|    else {                                                             \
  |  | 9206|  76.6k|        return vis(monostate_val);                                     \
  |  | 9207|  76.6k|    }
  ------------------
 9254|  76.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 76.6k]
  ------------------
 9255|  76.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  76.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  76.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  76.6k|    }                                                                  \
  |  | 9205|  76.6k|    else {                                                             \
  |  | 9206|  76.6k|        return vis(monostate_val);                                     \
  |  | 9207|  76.6k|    }
  ------------------
 9256|  76.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 76.6k]
  ------------------
 9257|  76.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  76.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  76.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  76.6k|    }                                                                  \
  |  | 9205|  76.6k|    else {                                                             \
  |  | 9206|  76.6k|        return vis(monostate_val);                                     \
  |  | 9207|  76.6k|    }
  ------------------
 9258|  76.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 76.6k]
  ------------------
 9259|  76.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  76.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  76.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  76.6k|    }                                                                  \
  |  | 9205|  76.6k|    else {                                                             \
  |  | 9206|  76.6k|        return vis(monostate_val);                                     \
  |  | 9207|  76.6k|    }
  ------------------
 9260|       |
 9261|  76.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 76.6k]
  ------------------
 9262|  76.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  76.6k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  76.6k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 76.6k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 76.6k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  76.6k|            SCN_CLANG_POP
 9279|  76.6k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  98.7k|    {
 3075|  98.7k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  98.7k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  98.7k|    {
 3041|  98.7k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  98.7k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  98.7k|{
 7793|  98.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  98.7k|    handler.check_args_exhausted();
 7795|  98.7k|    return handler.get_error();
 7796|  98.7k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  98.7k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  98.7k|    auto begin = format.data();
 7761|  98.7k|    auto it = begin;
 7762|  98.7k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   177k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 98.7k, False: 78.7k]
  ------------------
 7765|  98.7k|        const auto ch = *it++;
 7766|  98.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 98.7k, False: 0]
  ------------------
 7767|  98.7k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  98.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  98.7k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 20.0k, False: 78.7k]
  ------------------
 7771|  20.0k|                return;
 7772|  20.0k|            }
 7773|  98.7k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  98.7k|    }
 7784|       |
 7785|  78.7k|    handler.on_literal_text(begin, end);
 7786|  78.7k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|  98.7k|{
 7690|  98.7k|    struct id_adapter {
 7691|  98.7k|        constexpr void operator()()
 7692|  98.7k|        {
 7693|  98.7k|            arg_id = handler.on_arg_id();
 7694|  98.7k|        }
 7695|  98.7k|        constexpr void operator()(std::size_t id)
 7696|  98.7k|        {
 7697|  98.7k|            arg_id = handler.on_arg_id(id);
 7698|  98.7k|        }
 7699|       |
 7700|  98.7k|        constexpr void on_error(const char* msg)
 7701|  98.7k|        {
 7702|  98.7k|            SCN_UNLIKELY_ATTR
 7703|  98.7k|            handler.on_error(msg);
 7704|  98.7k|        }
 7705|       |
 7706|  98.7k|        Handler& handler;
 7707|  98.7k|        std::size_t arg_id;
 7708|  98.7k|    };
 7709|       |
 7710|  98.7k|    ++begin;
 7711|  98.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98.7k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  98.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 98.7k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  98.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 98.7k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  98.7k|    else {
 7723|  98.7k|        auto adapter = id_adapter{handler, 0};
 7724|  98.7k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  98.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98.7k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  98.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 98.7k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  98.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 98.7k, False: 0]
  ------------------
 7735|  98.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98.7k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  98.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  98.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.00k, False: 90.7k]
  |  |  |  Branch (865:45): [True: 0, False: 98.7k]
  |  |  |  Branch (865:45): [True: 8.00k, False: 90.7k]
  |  |  ------------------
  ------------------
 7741|  8.00k|                handler.on_error("Unknown format specifier");
 7742|  8.00k|                return begin;
 7743|  8.00k|            }
 7744|  98.7k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  98.7k|    }
 7751|  90.7k|    return begin + 1;
 7752|  98.7k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|   160k|    {
 8832|   160k|        return m_args.get(id);
 8833|   160k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|   160k|    {
 6286|   160k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   160k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   160k|        do_check_arg_id(id);
 6294|   160k|        return id;
 6295|   160k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|   160k|{
 6806|   160k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   160k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   160k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  98.7k|{
 7191|  98.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  98.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  98.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 98.7k, False: 0]
  |  Branch (7192:26): [True: 0, False: 98.7k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  98.7k|    handler();
 7197|  98.7k|    return begin;
 7198|  98.7k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7139|  12.0k|{
 7140|  12.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  12.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  12.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  12.0k|    unsigned long long value = 0;
 7144|  24.0k|    do {
 7145|  24.0k|        value *= 10;
 7146|  24.0k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  24.0k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 0, False: 24.0k]
  ------------------
 7148|  24.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|      0|            return -1;
 7150|      0|        }
 7151|  24.0k|        ++begin;
 7152|  24.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 24.0k, False: 0]
  |  Branch (7152:30): [True: 24.0k, False: 0]
  |  Branch (7152:47): [True: 12.0k, False: 12.0k]
  ------------------
 7153|  12.0k|    return static_cast<int>(value);
 7154|  12.0k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  98.7k|        {
 7693|  98.7k|            arg_id = handler.on_arg_id();
 7694|  98.7k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|   148k|    {
 6281|   148k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   148k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|   308k|    {
 6270|   308k|        return m_format.data();
 6271|   308k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|  98.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  98.7k|    {
 7871|  98.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  98.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  98.7k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|  98.7k|{
 7606|  98.7k|    auto do_presentation = [&]() -> const CharT* {
 7607|  98.7k|        if (*begin == CharT{'['}) {
 7608|  98.7k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  98.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  98.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  98.7k|                return begin;
 7614|  98.7k|            }
 7615|  98.7k|            handler.on_character_set_string(set);
 7616|  98.7k|            return begin;
 7617|  98.7k|        }
 7618|  98.7k|        if (*begin == CharT{'/'}) {
 7619|  98.7k|            return parse_presentation_regex(begin, end, handler);
 7620|  98.7k|        }
 7621|  98.7k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  98.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  98.7k|            handler.on_error("Invalid type specifier in format string");
 7624|  98.7k|            return begin;
 7625|  98.7k|        }
 7626|  98.7k|        handler.on_type(type);
 7627|  98.7k|        return begin;
 7628|  98.7k|    };
 7629|       |
 7630|  98.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 98.7k, False: 0]
  |  Branch (7630:28): [True: 85.0k, False: 13.6k]
  ------------------
 7631|  98.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 85.0k, False: 0]
  |  Branch (7631:36): [True: 81.0k, False: 4.00k]
  ------------------
 7632|  81.0k|        return do_presentation();
 7633|  81.0k|    }
 7634|       |
 7635|  17.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  17.6k|    begin = parse_align(begin, end, handler);
 7641|  17.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  17.6k|    begin = parse_width(begin, end, handler);
 7647|  17.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  17.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 17.6k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  17.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 4.00k, False: 13.6k]
  ------------------
 7666|  4.00k|        handler.on_localized();
 7667|  4.00k|        ++begin;
 7668|  4.00k|    }
 7669|  17.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  17.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 17.6k, False: 0]
  |  Branch (7674:25): [True: 13.6k, False: 4.00k]
  ------------------
 7675|  13.6k|        do_presentation();
 7676|  13.6k|    }
 7677|  17.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  17.6k|    return begin;
 7683|  17.6k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|   139k|{
 7255|   139k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 133k, False: 6.00k]
  |  Branch (7255:33): [True: 133k, False: 0]
  ------------------
 7256|   139k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 6.00k, False: 0]
  |  Branch (7256:33): [True: 6.00k, False: 0]
  ------------------
 7257|   139k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|  94.7k|    auto do_presentation = [&]() -> const CharT* {
 7607|  94.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 5.67k, False: 89.0k]
  ------------------
 7608|  5.67k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  5.67k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|  5.67k|            handler.on_character_set_string(set);
 7616|  5.67k|            return begin;
 7617|  5.67k|        }
 7618|  89.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 89.0k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|  89.0k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  89.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  89.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.00k, False: 85.0k]
  |  |  ------------------
  ------------------
 7623|  4.00k|            handler.on_error("Invalid type specifier in format string");
 7624|  4.00k|            return begin;
 7625|  4.00k|        }
 7626|  85.0k|        handler.on_type(type);
 7627|  85.0k|        return begin;
 7628|  89.0k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  5.67k|{
 7445|  5.67k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  5.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  5.67k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  5.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  5.67k|    auto start = begin;
 7449|  5.67k|    ++begin;
 7450|       |
 7451|  5.67k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  5.67k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 5.67k]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|  5.67k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 5.67k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  17.0k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 17.0k, False: 0]
  ------------------
 7476|  17.0k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  17.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 5.67k, False: 11.3k]
  ------------------
 7481|  5.67k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  5.67k|        }
 7483|       |
 7484|  11.3k|        parse_presentation_set_literal(begin, end, handler);
 7485|  11.3k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  5.67k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7408|  11.3k|{
 7409|  11.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  11.3k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  11.3k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  11.3k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 11.3k, False: 0]
  |  Branch (7416:25): [True: 11.3k, False: 0]
  |  Branch (7416:49): [True: 11.3k, False: 0]
  ------------------
 7417|  11.3k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 11.3k, False: 0]
  ------------------
 7418|  11.3k|        ++begin;
 7419|       |
 7420|  11.3k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  11.3k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  11.3k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  11.3k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  11.3k|        return;
 7434|  11.3k|    }
 7435|       |
 7436|      0|    handler.on_charset_single(cp_first);
 7437|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7384|  22.6k|{
 7385|  22.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  22.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  22.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  22.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  22.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 22.6k]
  |  |  |  Branch (865:45): [True: 0, False: 22.6k]
  |  |  |  Branch (865:45): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  22.6k|    const auto cp =
 7394|  22.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  22.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  22.6k|    begin += len;
 7401|  22.6k|    return cp;
 7402|  22.6k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  8.50k|    {
 7099|  8.50k|        m_specs.charset_string_data = fmt.data();
 7100|  8.50k|        m_specs.charset_string_size = fmt.size();
 7101|  8.50k|        on_type(presentation_type::string_set);
 7102|  8.50k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|   145k|{
 7203|   145k|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 145k]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 145k]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 145k]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 145k]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 145k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 145k]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 145k]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 145k]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 145k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 145k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 145k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 145k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 145k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 145k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 145k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 145k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 145k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 145k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|   133k|        case 's':
  ------------------
  |  Branch (7233:9): [True: 133k, False: 12.0k]
  ------------------
 7234|   133k|            return presentation_type::string;
 7235|  6.00k|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 6.00k, False: 139k]
  ------------------
 7236|  6.00k|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 145k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 145k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 145k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 145k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  6.00k|        default:
  ------------------
  |  Branch (7247:9): [True: 6.00k, False: 139k]
  ------------------
 7248|  6.00k|            return presentation_type::none;
 7249|   145k|    }
 7250|   145k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|  17.6k|{
 7280|  17.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  17.6k|    auto check_align = [](wchar_t ch) {
 7283|  17.6k|        switch (ch) {
 7284|  17.6k|            case L'<':
 7285|  17.6k|                return align_type::left;
 7286|  17.6k|            case L'>':
 7287|  17.6k|                return align_type::right;
 7288|  17.6k|            case L'^':
 7289|  17.6k|                return align_type::center;
 7290|  17.6k|            default:
 7291|  17.6k|                return align_type::none;
 7292|  17.6k|        }
 7293|  17.6k|    };
 7294|       |
 7295|  17.6k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  17.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  35.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.6k]
  |  |  |  Branch (865:45): [True: 0, False: 17.6k]
  |  |  |  Branch (865:45): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 7297|  17.6k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  17.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  17.6k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  17.6k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  17.6k|    const auto begin_before_fill = begin;
 7307|  17.6k|    begin += potential_fill_len;
 7308|       |
 7309|  17.6k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 17.6k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  17.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  17.6k|    const auto begin_after_fill = begin;
 7315|  17.6k|    ++begin;
 7316|       |
 7317|  17.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 17.6k, False: 0]
  ------------------
 7318|  17.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  17.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 5.67k, False: 12.0k]
  ------------------
 7323|  5.67k|            return begin_before_fill;
 7324|  5.67k|        }
 7325|  17.6k|    }
 7326|       |
 7327|  12.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 12.0k, False: 0]
  ------------------
 7328|  12.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 12.0k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  12.0k|        return begin_before_fill;
 7333|  12.0k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  12.0k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|  26.5k|{
 7262|  26.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|  26.5k|    else {
 7267|  26.5k|        const auto lengths =
 7268|  26.5k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|  26.5k|            "\3\4";
 7270|  26.5k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|  26.5k|        return len;
 7272|  26.5k|    }
 7273|  26.5k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  35.3k|    auto check_align = [](wchar_t ch) {
 7283|  35.3k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 35.3k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 35.3k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 35.3k]
  ------------------
 7289|      0|                return align_type::center;
 7290|  35.3k|            default:
  ------------------
  |  Branch (7290:13): [True: 35.3k, False: 0]
  ------------------
 7291|  35.3k|                return align_type::none;
 7292|  35.3k|        }
 7293|  35.3k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|  17.6k|{
 7345|  17.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  17.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 17.6k, False: 0]
  |  Branch (7347:33): [True: 8.00k, False: 9.67k]
  ------------------
 7348|  8.00k|        int width = parse_simple_int(begin, end);
 7349|  8.00k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  8.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.00k, False: 0]
  |  |  ------------------
  ------------------
 7350|  8.00k|            handler.on_width(width);
 7351|  8.00k|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|  8.00k|    }
 7357|  17.6k|    return begin;
 7358|  17.6k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|  4.00k|    {
 7876|  4.00k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  4.00k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 4.00k, False: 0]
  ------------------
 7878|  4.00k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 4.00k, False: 0]
  ------------------
 7879|  4.00k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 4.00k, False: 0]
  ------------------
 7880|  4.00k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 4.00k, False: 0]
  ------------------
 7881|  4.00k|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|  4.00k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|  4.00k|        }
 7886|       |
 7887|      0|        Handler::on_localized();
 7888|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  90.7k|{
 9300|  90.7k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  90.7k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  90.7k|{
 9201|  90.7k|#define SCN_VISIT(Type)                                                \
 9202|  90.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  90.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  90.7k|    }                                                                  \
 9205|  90.7k|    else {                                                             \
 9206|  90.7k|        return vis(monostate_val);                                     \
 9207|  90.7k|    }
 9208|       |
 9209|  90.7k|    monostate monostate_val{};
 9210|       |
 9211|  90.7k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 90.7k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 90.7k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 90.7k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 90.7k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 90.7k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 90.7k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 90.7k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 90.7k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 90.7k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 90.7k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 90.7k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 90.7k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 90.7k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 90.7k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 90.7k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 90.7k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 90.7k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 90.7k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|  45.3k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 45.3k, False: 45.3k]
  ------------------
 9249|  45.3k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  45.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  45.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  45.3k|    }                                                                  \
  |  | 9205|  45.3k|    else {                                                             \
  |  | 9206|  45.3k|        return vis(monostate_val);                                     \
  |  | 9207|  45.3k|    }
  ------------------
 9250|  90.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 45.3k, False: 45.3k]
  ------------------
 9251|  90.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  90.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.7k|    }                                                                  \
  |  | 9205|  90.7k|    else {                                                             \
  |  | 9206|  90.7k|        return vis(monostate_val);                                     \
  |  | 9207|  90.7k|    }
  ------------------
 9252|  90.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 90.7k]
  ------------------
 9253|  90.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  90.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.7k|    }                                                                  \
  |  | 9205|  90.7k|    else {                                                             \
  |  | 9206|  90.7k|        return vis(monostate_val);                                     \
  |  | 9207|  90.7k|    }
  ------------------
 9254|  90.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 90.7k]
  ------------------
 9255|  90.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  90.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.7k|    }                                                                  \
  |  | 9205|  90.7k|    else {                                                             \
  |  | 9206|  90.7k|        return vis(monostate_val);                                     \
  |  | 9207|  90.7k|    }
  ------------------
 9256|  90.7k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 90.7k]
  ------------------
 9257|  90.7k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  90.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.7k|    }                                                                  \
  |  | 9205|  90.7k|    else {                                                             \
  |  | 9206|  90.7k|        return vis(monostate_val);                                     \
  |  | 9207|  90.7k|    }
  ------------------
 9258|  90.7k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 90.7k]
  ------------------
 9259|  90.7k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  90.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.7k|    }                                                                  \
  |  | 9205|  90.7k|    else {                                                             \
  |  | 9206|  90.7k|        return vis(monostate_val);                                     \
  |  | 9207|  90.7k|    }
  ------------------
 9260|       |
 9261|  90.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 90.7k]
  ------------------
 9262|  90.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  90.7k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  90.7k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 90.7k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 90.7k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  90.7k|            SCN_CLANG_POP
 9279|  90.7k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|  61.4k|{
 7793|  61.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|  61.4k|    handler.check_args_exhausted();
 7795|  61.4k|    return handler.get_error();
 7796|  61.4k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|  61.4k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|  61.4k|    auto begin = format.data();
 7761|  61.4k|    auto it = begin;
 7762|  61.4k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   112k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 61.4k, False: 51.4k]
  ------------------
 7765|  61.4k|        const auto ch = *it++;
 7766|  61.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 61.4k, False: 0]
  ------------------
 7767|  61.4k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|  61.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|  61.4k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 10.0k, False: 51.4k]
  ------------------
 7771|  10.0k|                return;
 7772|  10.0k|            }
 7773|  61.4k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|  61.4k|    }
 7784|       |
 7785|  51.4k|    handler.on_literal_text(begin, end);
 7786|  51.4k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|  51.4k|    {
 8971|  51.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  51.4k|    static_cast<    \
  |  |  935|  51.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|  51.4k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|  61.4k|{
 7690|  61.4k|    struct id_adapter {
 7691|  61.4k|        constexpr void operator()()
 7692|  61.4k|        {
 7693|  61.4k|            arg_id = handler.on_arg_id();
 7694|  61.4k|        }
 7695|  61.4k|        constexpr void operator()(std::size_t id)
 7696|  61.4k|        {
 7697|  61.4k|            arg_id = handler.on_arg_id(id);
 7698|  61.4k|        }
 7699|       |
 7700|  61.4k|        constexpr void on_error(const char* msg)
 7701|  61.4k|        {
 7702|  61.4k|            SCN_UNLIKELY_ATTR
 7703|  61.4k|            handler.on_error(msg);
 7704|  61.4k|        }
 7705|       |
 7706|  61.4k|        Handler& handler;
 7707|  61.4k|        std::size_t arg_id;
 7708|  61.4k|    };
 7709|       |
 7710|  61.4k|    ++begin;
 7711|  61.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 61.4k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|  61.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 61.4k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|  61.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 61.4k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|  61.4k|    else {
 7723|  61.4k|        auto adapter = id_adapter{handler, 0};
 7724|  61.4k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|  61.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 61.4k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|  61.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 61.4k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|  61.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 61.4k, False: 0]
  ------------------
 7735|  61.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 61.4k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|  61.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|  61.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.00k, False: 57.4k]
  |  |  |  Branch (865:45): [True: 0, False: 61.4k]
  |  |  |  Branch (865:45): [True: 4.00k, False: 57.4k]
  |  |  ------------------
  ------------------
 7741|  4.00k|                handler.on_error("Unknown format specifier");
 7742|  4.00k|                return begin;
 7743|  4.00k|            }
 7744|  61.4k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|  61.4k|    }
 7751|  57.4k|    return begin + 1;
 7752|  61.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|  61.4k|{
 7191|  61.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  61.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  61.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|  61.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 61.4k, False: 0]
  |  Branch (7192:26): [True: 0, False: 61.4k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|  61.4k|    handler();
 7197|  61.4k|    return begin;
 7198|  61.4k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|  61.4k|        {
 7693|  61.4k|            arg_id = handler.on_arg_id();
 7694|  61.4k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|  61.4k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|  61.4k|    {
 7871|  61.4k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  61.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  61.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|  61.4k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7605|  61.4k|{
 7606|  61.4k|    auto do_presentation = [&]() -> const CharT* {
 7607|  61.4k|        if (*begin == CharT{'['}) {
 7608|  61.4k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  61.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|  61.4k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|  61.4k|                return begin;
 7614|  61.4k|            }
 7615|  61.4k|            handler.on_character_set_string(set);
 7616|  61.4k|            return begin;
 7617|  61.4k|        }
 7618|  61.4k|        if (*begin == CharT{'/'}) {
 7619|  61.4k|            return parse_presentation_regex(begin, end, handler);
 7620|  61.4k|        }
 7621|  61.4k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  61.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|  61.4k|            handler.on_error("Invalid type specifier in format string");
 7624|  61.4k|            return begin;
 7625|  61.4k|        }
 7626|  61.4k|        handler.on_type(type);
 7627|  61.4k|        return begin;
 7628|  61.4k|    };
 7629|       |
 7630|  61.4k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 61.4k, False: 0]
  |  Branch (7630:28): [True: 54.5k, False: 6.83k]
  ------------------
 7631|  61.4k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 54.5k, False: 0]
  |  Branch (7631:36): [True: 52.5k, False: 2.00k]
  ------------------
 7632|  52.5k|        return do_presentation();
 7633|  52.5k|    }
 7634|       |
 7635|  8.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  8.83k|    begin = parse_align(begin, end, handler);
 7641|  8.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  8.83k|    begin = parse_width(begin, end, handler);
 7647|  8.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  8.83k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 8.83k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  8.83k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 2.00k, False: 6.83k]
  ------------------
 7666|  2.00k|        handler.on_localized();
 7667|  2.00k|        ++begin;
 7668|  2.00k|    }
 7669|  8.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  8.83k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 8.83k, False: 0]
  |  Branch (7674:25): [True: 6.83k, False: 2.00k]
  ------------------
 7675|  6.83k|        do_presentation();
 7676|  6.83k|    }
 7677|  8.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  8.83k|    return begin;
 7683|  8.83k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|  59.4k|    auto do_presentation = [&]() -> const CharT* {
 7607|  59.4k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 2.83k, False: 56.5k]
  ------------------
 7608|  2.83k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  2.83k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.83k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|  2.83k|            handler.on_character_set_string(set);
 7616|  2.83k|            return begin;
 7617|  2.83k|        }
 7618|  56.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 56.5k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|  56.5k|        presentation_type type = parse_presentation_type(*begin++);
 7622|  56.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.00k, False: 54.5k]
  |  |  ------------------
  ------------------
 7623|  2.00k|            handler.on_error("Invalid type specifier in format string");
 7624|  2.00k|            return begin;
 7625|  2.00k|        }
 7626|  54.5k|        handler.on_type(type);
 7627|  54.5k|        return begin;
 7628|  56.5k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7444|  2.83k|{
 7445|  2.83k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  2.83k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  2.83k|    auto start = begin;
 7449|  2.83k|    ++begin;
 7450|       |
 7451|  2.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.83k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  2.83k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 2.83k]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|  2.83k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 2.83k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  8.50k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 8.50k, False: 0]
  ------------------
 7476|  8.50k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  8.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.50k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  8.50k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 2.83k, False: 5.67k]
  ------------------
 7481|  2.83k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  2.83k|        }
 7483|       |
 7484|  5.67k|        parse_presentation_set_literal(begin, end, handler);
 7485|  5.67k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  2.83k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7408|  5.67k|{
 7409|  5.67k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  5.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  5.67k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  5.67k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  5.67k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 5.67k, False: 0]
  |  Branch (7416:25): [True: 5.67k, False: 0]
  |  Branch (7416:49): [True: 5.67k, False: 0]
  ------------------
 7417|  5.67k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 5.67k, False: 0]
  ------------------
 7418|  5.67k|        ++begin;
 7419|       |
 7420|  5.67k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  5.67k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  5.67k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  5.67k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  5.67k|        return;
 7434|  5.67k|    }
 7435|       |
 7436|      0|    handler.on_charset_single(cp_first);
 7437|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7384|  11.3k|{
 7385|  11.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  11.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  11.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  |  Branch (865:45): [True: 0, False: 11.3k]
  |  |  |  Branch (865:45): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  11.3k|    const auto cp =
 7394|  11.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  11.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  11.3k|    begin += len;
 7401|  11.3k|    return cp;
 7402|  11.3k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7279|  8.83k|{
 7280|  8.83k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  8.83k|    auto check_align = [](wchar_t ch) {
 7283|  8.83k|        switch (ch) {
 7284|  8.83k|            case L'<':
 7285|  8.83k|                return align_type::left;
 7286|  8.83k|            case L'>':
 7287|  8.83k|                return align_type::right;
 7288|  8.83k|            case L'^':
 7289|  8.83k|                return align_type::center;
 7290|  8.83k|            default:
 7291|  8.83k|                return align_type::none;
 7292|  8.83k|        }
 7293|  8.83k|    };
 7294|       |
 7295|  8.83k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  8.83k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.83k]
  |  |  |  Branch (865:45): [True: 0, False: 8.83k]
  |  |  |  Branch (865:45): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
 7297|  8.83k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  8.83k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  8.83k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  8.83k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  8.83k|    const auto begin_before_fill = begin;
 7307|  8.83k|    begin += potential_fill_len;
 7308|       |
 7309|  8.83k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 8.83k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  8.83k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  8.83k|    const auto begin_after_fill = begin;
 7315|  8.83k|    ++begin;
 7316|       |
 7317|  8.83k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 8.83k, False: 0]
  ------------------
 7318|  8.83k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.83k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  8.83k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 2.83k, False: 6.00k]
  ------------------
 7323|  2.83k|            return begin_before_fill;
 7324|  2.83k|        }
 7325|  8.83k|    }
 7326|       |
 7327|  6.00k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 6.00k, False: 0]
  ------------------
 7328|  6.00k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 6.00k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  6.00k|        return begin_before_fill;
 7333|  6.00k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  6.00k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|  17.6k|    auto check_align = [](wchar_t ch) {
 7283|  17.6k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 17.6k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 17.6k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 17.6k]
  ------------------
 7289|      0|                return align_type::center;
 7290|  17.6k|            default:
  ------------------
  |  Branch (7290:13): [True: 17.6k, False: 0]
  ------------------
 7291|  17.6k|                return align_type::none;
 7292|  17.6k|        }
 7293|  17.6k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7344|  8.83k|{
 7345|  8.83k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  8.83k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 8.83k, False: 0]
  |  Branch (7347:33): [True: 4.00k, False: 4.83k]
  ------------------
 7348|  4.00k|        int width = parse_simple_int(begin, end);
 7349|  4.00k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  4.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.00k, False: 0]
  |  |  ------------------
  ------------------
 7350|  4.00k|            handler.on_width(width);
 7351|  4.00k|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|  4.00k|    }
 7357|  8.83k|    return begin;
 7358|  8.83k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7875|  2.00k|    {
 7876|  2.00k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  2.00k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 2.00k, False: 0]
  ------------------
 7878|  2.00k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 2.00k, False: 0]
  ------------------
 7879|  2.00k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 2.00k, False: 0]
  ------------------
 7880|  2.00k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 2.00k, False: 0]
  ------------------
 7881|  2.00k|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|  2.00k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|  2.00k|        }
 7886|       |
 7887|      0|        Handler::on_localized();
 7888|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|  57.4k|{
 9300|  57.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  57.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  57.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  57.4k|{
 9201|  57.4k|#define SCN_VISIT(Type)                                                \
 9202|  57.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  57.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  57.4k|    }                                                                  \
 9205|  57.4k|    else {                                                             \
 9206|  57.4k|        return vis(monostate_val);                                     \
 9207|  57.4k|    }
 9208|       |
 9209|  57.4k|    monostate monostate_val{};
 9210|       |
 9211|  57.4k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 57.4k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 57.4k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 57.4k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 57.4k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 57.4k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 57.4k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 57.4k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 57.4k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 57.4k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 57.4k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 57.4k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 57.4k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 57.4k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 57.4k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 57.4k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 57.4k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 57.4k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 57.4k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 57.4k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|  57.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 57.4k, False: 0]
  ------------------
 9251|  57.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  57.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  57.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  57.4k|    }                                                                  \
  |  | 9205|  57.4k|    else {                                                             \
  |  | 9206|  57.4k|        return vis(monostate_val);                                     \
  |  | 9207|  57.4k|    }
  ------------------
 9252|  57.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 57.4k]
  ------------------
 9253|  57.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  57.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  57.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  57.4k|    }                                                                  \
  |  | 9205|  57.4k|    else {                                                             \
  |  | 9206|  57.4k|        return vis(monostate_val);                                     \
  |  | 9207|  57.4k|    }
  ------------------
 9254|  57.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 57.4k]
  ------------------
 9255|  57.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  57.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  57.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  57.4k|    }                                                                  \
  |  | 9205|  57.4k|    else {                                                             \
  |  | 9206|  57.4k|        return vis(monostate_val);                                     \
  |  | 9207|  57.4k|    }
  ------------------
 9256|  57.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 57.4k]
  ------------------
 9257|  57.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  57.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  57.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  57.4k|    }                                                                  \
  |  | 9205|  57.4k|    else {                                                             \
  |  | 9206|  57.4k|        return vis(monostate_val);                                     \
  |  | 9207|  57.4k|    }
  ------------------
 9258|  57.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 57.4k]
  ------------------
 9259|  57.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  57.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  57.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  57.4k|    }                                                                  \
  |  | 9205|  57.4k|    else {                                                             \
  |  | 9206|  57.4k|        return vis(monostate_val);                                     \
  |  | 9207|  57.4k|    }
  ------------------
 9260|       |
 9261|  57.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 57.4k]
  ------------------
 9262|  57.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  57.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  57.4k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 57.4k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 57.4k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  57.4k|            SCN_CLANG_POP
 9279|  57.4k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  13.0k|    {
 4352|  13.0k|        return sync(0);
 4353|  13.0k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|  1.94M|    {
 6177|  1.94M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.94M]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  1.94M|        return static_cast<std::size_t>(m_desc &
 6182|  1.94M|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  1.94M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|  3.88M|    {
 6203|  3.88M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  3.88M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|  1.94M|    {
 6145|  1.94M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.94M]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  1.94M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.94M]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|  1.94M|        const auto t = type(id);
 6157|  1.94M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.94M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.94M|        basic_scan_arg<Context> arg;
 6162|  1.94M|        arg.m_type = t;
 6163|  1.94M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 1.94M, False: 0]
  ------------------
 6164|  1.94M|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  1.94M|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  1.94M|        return arg;
 6170|  1.94M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|  1.94M|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  1.94M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  1.94M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  1.94M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  1.94M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|  1.94M|    {
 6207|  1.94M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  1.94M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|  3.39M|    {
 5961|  3.39M|        return m_type != detail::arg_type::none_type;
 5962|  3.39M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   948k|{
 9300|   948k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   948k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   948k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   948k|{
 9201|   948k|#define SCN_VISIT(Type)                                                \
 9202|   948k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   948k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   948k|    }                                                                  \
 9205|   948k|    else {                                                             \
 9206|   948k|        return vis(monostate_val);                                     \
 9207|   948k|    }
 9208|       |
 9209|   948k|    monostate monostate_val{};
 9210|       |
 9211|   948k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 948k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 948k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 948k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 948k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 948k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 948k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 948k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 948k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 948k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 948k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 948k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 948k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 948k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 948k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 948k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 948k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 948k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 948k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 948k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 948k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|   474k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 474k, False: 474k]
  ------------------
 9253|   474k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   474k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   474k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   474k|    }                                                                  \
  |  | 9205|   474k|    else {                                                             \
  |  | 9206|   474k|        return vis(monostate_val);                                     \
  |  | 9207|   474k|    }
  ------------------
 9254|   948k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 474k, False: 474k]
  ------------------
 9255|   948k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   948k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   948k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   948k|    }                                                                  \
  |  | 9205|   948k|    else {                                                             \
  |  | 9206|   948k|        return vis(monostate_val);                                     \
  |  | 9207|   948k|    }
  ------------------
 9256|   948k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 948k]
  ------------------
 9257|   948k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   948k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   948k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   948k|    }                                                                  \
  |  | 9205|   948k|    else {                                                             \
  |  | 9206|   948k|        return vis(monostate_val);                                     \
  |  | 9207|   948k|    }
  ------------------
 9258|   948k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 948k]
  ------------------
 9259|   948k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   948k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   948k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   948k|    }                                                                  \
  |  | 9205|   948k|    else {                                                             \
  |  | 9206|   948k|        return vis(monostate_val);                                     \
  |  | 9207|   948k|    }
  ------------------
 9260|       |
 9261|   948k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 948k]
  ------------------
 9262|   948k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   948k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   948k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 948k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 948k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   948k|            SCN_CLANG_POP
 9279|   948k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  4.38M|{
 6006|  4.38M|    return arg.m_type;
 6007|  4.38M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  2.39M|{
 6018|  2.39M|    return arg.m_value;
 6019|  2.39M|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   996k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   996k|    {
 6258|   996k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   332k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   332k|    static_cast<    \
  |  |  935|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   332k|    {
 8934|   332k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   664k|    {
 3075|   664k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   664k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   664k|    {
 3041|   664k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   664k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   664k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   664k|{
 7793|   664k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   664k|    handler.check_args_exhausted();
 7795|   664k|    return handler.get_error();
 7796|   664k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   664k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   664k|    auto begin = format.data();
 7761|   664k|    auto it = begin;
 7762|   664k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  1.28M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 664k, False: 624k]
  ------------------
 7765|   664k|        const auto ch = *it++;
 7766|   664k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 664k, False: 0]
  ------------------
 7767|   664k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   664k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   664k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 40.0k, False: 624k]
  ------------------
 7771|  40.0k|                return;
 7772|  40.0k|            }
 7773|   664k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   664k|    }
 7784|       |
 7785|   624k|    handler.on_literal_text(begin, end);
 7786|   624k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|   664k|{
 7690|   664k|    struct id_adapter {
 7691|   664k|        constexpr void operator()()
 7692|   664k|        {
 7693|   664k|            arg_id = handler.on_arg_id();
 7694|   664k|        }
 7695|   664k|        constexpr void operator()(std::size_t id)
 7696|   664k|        {
 7697|   664k|            arg_id = handler.on_arg_id(id);
 7698|   664k|        }
 7699|       |
 7700|   664k|        constexpr void on_error(const char* msg)
 7701|   664k|        {
 7702|   664k|            SCN_UNLIKELY_ATTR
 7703|   664k|            handler.on_error(msg);
 7704|   664k|        }
 7705|       |
 7706|   664k|        Handler& handler;
 7707|   664k|        std::size_t arg_id;
 7708|   664k|    };
 7709|       |
 7710|   664k|    ++begin;
 7711|   664k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 664k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   664k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 664k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   664k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 664k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   664k|    else {
 7723|   664k|        auto adapter = id_adapter{handler, 0};
 7724|   664k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   664k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 664k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   664k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 664k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   664k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 664k, False: 0]
  ------------------
 7735|   664k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 664k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   664k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   664k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.0k, False: 648k]
  |  |  |  Branch (865:45): [True: 0, False: 664k]
  |  |  |  Branch (865:45): [True: 16.0k, False: 648k]
  |  |  ------------------
  ------------------
 7741|  16.0k|                handler.on_error("Unknown format specifier");
 7742|  16.0k|                return begin;
 7743|  16.0k|            }
 7744|   664k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   664k|    }
 7751|   648k|    return begin + 1;
 7752|   664k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   996k|    {
 8832|   996k|        return m_args.get(id);
 8833|   996k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   996k|    {
 6286|   996k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   996k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 996k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   996k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   996k|        do_check_arg_id(id);
 6294|   996k|        return id;
 6295|   996k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   996k|{
 6806|   996k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   996k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   996k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   664k|{
 7191|   664k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   664k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   664k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   664k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 664k, False: 0]
  |  Branch (7192:26): [True: 0, False: 664k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   664k|    handler();
 7197|   664k|    return begin;
 7198|   664k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7139|  24.0k|{
 7140|  24.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|  24.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7142|       |
 7143|  24.0k|    unsigned long long value = 0;
 7144|  48.0k|    do {
 7145|  48.0k|        value *= 10;
 7146|  48.0k|        value += static_cast<unsigned long long>(*begin - '0');
 7147|  48.0k|        if (value >
  ------------------
  |  Branch (7147:13): [True: 0, False: 48.0k]
  ------------------
 7148|  48.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7149|      0|            return -1;
 7150|      0|        }
 7151|  48.0k|        ++begin;
 7152|  48.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7152:14): [True: 48.0k, False: 0]
  |  Branch (7152:30): [True: 48.0k, False: 0]
  |  Branch (7152:47): [True: 24.0k, False: 24.0k]
  ------------------
 7153|  24.0k|    return static_cast<int>(value);
 7154|  24.0k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   664k|        {
 7693|   664k|            arg_id = handler.on_arg_id();
 7694|   664k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   972k|    {
 6281|   972k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   972k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   806k|{
 4691|   806k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 806k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   806k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   806k|                            ranges::default_sentinel};
 4697|   806k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   806k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   806k|    {
 4455|   806k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   806k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   806k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   806k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   806k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   806k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   806k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|  1.96M|    {
 6270|  1.96M|        return m_format.data();
 6271|  1.96M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   664k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   664k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   664k|    {
 7871|   664k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   664k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   664k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   664k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|   664k|{
 7606|   664k|    auto do_presentation = [&]() -> const CharT* {
 7607|   664k|        if (*begin == CharT{'['}) {
 7608|   664k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   664k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   664k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   664k|                return begin;
 7614|   664k|            }
 7615|   664k|            handler.on_character_set_string(set);
 7616|   664k|            return begin;
 7617|   664k|        }
 7618|   664k|        if (*begin == CharT{'/'}) {
 7619|   664k|            return parse_presentation_regex(begin, end, handler);
 7620|   664k|        }
 7621|   664k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   664k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   664k|            handler.on_error("Invalid type specifier in format string");
 7624|   664k|            return begin;
 7625|   664k|        }
 7626|   664k|        handler.on_type(type);
 7627|   664k|        return begin;
 7628|   664k|    };
 7629|       |
 7630|   664k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 664k, False: 0]
  |  Branch (7630:28): [True: 640k, False: 24.2k]
  ------------------
 7631|   664k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 640k, False: 0]
  |  Branch (7631:36): [True: 632k, False: 8.00k]
  ------------------
 7632|   632k|        return do_presentation();
 7633|   632k|    }
 7634|       |
 7635|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  32.2k|    begin = parse_align(begin, end, handler);
 7641|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  32.2k|    begin = parse_width(begin, end, handler);
 7647|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  32.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 32.2k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  32.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 8.00k, False: 24.2k]
  ------------------
 7666|  8.00k|        handler.on_localized();
 7667|  8.00k|        ++begin;
 7668|  8.00k|    }
 7669|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  32.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 32.2k, False: 0]
  |  Branch (7674:25): [True: 24.2k, False: 8.00k]
  ------------------
 7675|  24.2k|        do_presentation();
 7676|  24.2k|    }
 7677|  32.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  32.2k|    return begin;
 7683|  32.2k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|   960k|{
 7255|   960k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 948k, False: 12.0k]
  |  Branch (7255:33): [True: 948k, False: 0]
  ------------------
 7256|   960k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 12.0k, False: 0]
  |  Branch (7256:33): [True: 12.0k, False: 0]
  ------------------
 7257|   960k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   656k|    auto do_presentation = [&]() -> const CharT* {
 7607|   656k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 8.24k, False: 648k]
  ------------------
 7608|  8.24k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  8.24k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  8.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.24k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|  8.24k|            handler.on_character_set_string(set);
 7616|  8.24k|            return begin;
 7617|  8.24k|        }
 7618|   648k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 648k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   648k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   648k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.00k, False: 640k]
  |  |  ------------------
  ------------------
 7623|  8.00k|            handler.on_error("Invalid type specifier in format string");
 7624|  8.00k|            return begin;
 7625|  8.00k|        }
 7626|   640k|        handler.on_type(type);
 7627|   640k|        return begin;
 7628|   648k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7444|  8.24k|{
 7445|  8.24k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  8.24k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  8.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  8.24k|    auto start = begin;
 7449|  8.24k|    ++begin;
 7450|       |
 7451|  8.24k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  8.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.24k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  8.24k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 8.24k]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|  8.24k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 8.24k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  24.7k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 24.7k, False: 0]
  ------------------
 7476|  24.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.7k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  24.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 8.24k, False: 16.4k]
  ------------------
 7481|  8.24k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  8.24k|        }
 7483|       |
 7484|  16.4k|        parse_presentation_set_literal(begin, end, handler);
 7485|  16.4k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  8.24k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7408|  16.4k|{
 7409|  16.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  16.4k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  16.4k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.4k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  16.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 16.4k, False: 0]
  |  Branch (7416:25): [True: 16.4k, False: 0]
  |  Branch (7416:49): [True: 16.4k, False: 0]
  ------------------
 7417|  16.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 16.4k, False: 0]
  ------------------
 7418|  16.4k|        ++begin;
 7419|       |
 7420|  16.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  16.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.4k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  16.4k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.4k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  16.4k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  16.4k|        return;
 7434|  16.4k|    }
 7435|       |
 7436|      0|    handler.on_charset_single(cp_first);
 7437|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7384|  32.9k|{
 7385|  32.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  32.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  32.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  32.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.9k]
  |  |  |  Branch (865:45): [True: 0, False: 32.9k]
  |  |  |  Branch (865:45): [True: 0, False: 32.9k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  32.9k|    const auto cp =
 7394|  32.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  32.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.9k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  32.9k|    begin += len;
 7401|  32.9k|    return cp;
 7402|  32.9k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7098|  12.3k|    {
 7099|  12.3k|        m_specs.charset_string_data = fmt.data();
 7100|  12.3k|        m_specs.charset_string_size = fmt.size();
 7101|  12.3k|        on_type(presentation_type::string_set);
 7102|  12.3k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|   972k|{
 7203|   972k|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 972k]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 972k]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 972k]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 972k]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 972k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 972k]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 972k]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 972k]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 972k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 972k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 972k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 972k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 972k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 972k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 972k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 972k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 972k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 972k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|   948k|        case 's':
  ------------------
  |  Branch (7233:9): [True: 948k, False: 24.0k]
  ------------------
 7234|   948k|            return presentation_type::string;
 7235|  12.0k|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 12.0k, False: 960k]
  ------------------
 7236|  12.0k|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 972k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 972k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 972k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 972k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  12.0k|        default:
  ------------------
  |  Branch (7247:9): [True: 12.0k, False: 960k]
  ------------------
 7248|  12.0k|            return presentation_type::none;
 7249|   972k|    }
 7250|   972k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|  32.2k|{
 7280|  32.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  32.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  32.2k|    auto check_align = [](wchar_t ch) {
 7283|  32.2k|        switch (ch) {
 7284|  32.2k|            case L'<':
 7285|  32.2k|                return align_type::left;
 7286|  32.2k|            case L'>':
 7287|  32.2k|                return align_type::right;
 7288|  32.2k|            case L'^':
 7289|  32.2k|                return align_type::center;
 7290|  32.2k|            default:
 7291|  32.2k|                return align_type::none;
 7292|  32.2k|        }
 7293|  32.2k|    };
 7294|       |
 7295|  32.2k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  32.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.2k]
  |  |  |  Branch (865:45): [True: 0, False: 32.2k]
  |  |  |  Branch (865:45): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 7297|  32.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  32.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  32.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  32.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  32.2k|    const auto begin_before_fill = begin;
 7307|  32.2k|    begin += potential_fill_len;
 7308|       |
 7309|  32.2k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 32.2k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  32.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  32.2k|    const auto begin_after_fill = begin;
 7315|  32.2k|    ++begin;
 7316|       |
 7317|  32.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 32.2k, False: 0]
  ------------------
 7318|  32.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 32.2k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  32.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 8.24k, False: 24.0k]
  ------------------
 7323|  8.24k|            return begin_before_fill;
 7324|  8.24k|        }
 7325|  32.2k|    }
 7326|       |
 7327|  24.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 24.0k, False: 0]
  ------------------
 7328|  24.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 24.0k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  24.0k|        return begin_before_fill;
 7333|  24.0k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  24.0k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|  48.3k|{
 7262|  48.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  48.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|  48.3k|    if constexpr (sizeof(CharT) != 1) {
 7264|  48.3k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|  48.3k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|  64.4k|    auto check_align = [](wchar_t ch) {
 7283|  64.4k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 64.4k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 64.4k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 64.4k]
  ------------------
 7289|      0|                return align_type::center;
 7290|  64.4k|            default:
  ------------------
  |  Branch (7290:13): [True: 64.4k, False: 0]
  ------------------
 7291|  64.4k|                return align_type::none;
 7292|  64.4k|        }
 7293|  64.4k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|  32.2k|{
 7345|  32.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  32.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  32.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 32.2k, False: 0]
  |  Branch (7347:33): [True: 16.0k, False: 16.2k]
  ------------------
 7348|  16.0k|        int width = parse_simple_int(begin, end);
 7349|  16.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  16.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 7350|  16.0k|            handler.on_width(width);
 7351|  16.0k|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|  16.0k|    }
 7357|  32.2k|    return begin;
 7358|  32.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|  8.00k|    {
 7876|  8.00k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  8.00k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 8.00k, False: 0]
  ------------------
 7878|  8.00k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 8.00k, False: 0]
  ------------------
 7879|  8.00k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 8.00k, False: 0]
  ------------------
 7880|  8.00k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 8.00k, False: 0]
  ------------------
 7881|  8.00k|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|  8.00k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|  8.00k|        }
 7886|       |
 7887|      0|        Handler::on_localized();
 7888|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   648k|{
 9300|   648k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   648k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   648k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   648k|{
 9201|   648k|#define SCN_VISIT(Type)                                                \
 9202|   648k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   648k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   648k|    }                                                                  \
 9205|   648k|    else {                                                             \
 9206|   648k|        return vis(monostate_val);                                     \
 9207|   648k|    }
 9208|       |
 9209|   648k|    monostate monostate_val{};
 9210|       |
 9211|   648k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 648k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 648k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 648k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 648k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 648k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 648k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 648k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 648k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 648k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 648k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 648k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 648k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 648k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 648k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 648k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 648k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 648k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 648k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 648k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 648k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|   324k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 324k, False: 324k]
  ------------------
 9253|   324k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   324k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   324k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   324k|    }                                                                  \
  |  | 9205|   324k|    else {                                                             \
  |  | 9206|   324k|        return vis(monostate_val);                                     \
  |  | 9207|   324k|    }
  ------------------
 9254|   648k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 324k, False: 324k]
  ------------------
 9255|   648k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   648k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   648k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   648k|    }                                                                  \
  |  | 9205|   648k|    else {                                                             \
  |  | 9206|   648k|        return vis(monostate_val);                                     \
  |  | 9207|   648k|    }
  ------------------
 9256|   648k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 648k]
  ------------------
 9257|   648k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   648k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   648k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   648k|    }                                                                  \
  |  | 9205|   648k|    else {                                                             \
  |  | 9206|   648k|        return vis(monostate_val);                                     \
  |  | 9207|   648k|    }
  ------------------
 9258|   648k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 648k]
  ------------------
 9259|   648k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   648k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   648k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   648k|    }                                                                  \
  |  | 9205|   648k|    else {                                                             \
  |  | 9206|   648k|        return vis(monostate_val);                                     \
  |  | 9207|   648k|    }
  ------------------
 9260|       |
 9261|   648k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 648k]
  ------------------
 9262|   648k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   648k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   648k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 648k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 648k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   648k|            SCN_CLANG_POP
 9279|   648k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|   474k|{
 9300|   474k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   474k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   474k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   474k|{
 9201|   474k|#define SCN_VISIT(Type)                                                \
 9202|   474k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   474k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   474k|    }                                                                  \
 9205|   474k|    else {                                                             \
 9206|   474k|        return vis(monostate_val);                                     \
 9207|   474k|    }
 9208|       |
 9209|   474k|    monostate monostate_val{};
 9210|       |
 9211|   474k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 474k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 474k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 474k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 474k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 474k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 474k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 474k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 474k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 474k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 474k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 474k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 474k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 474k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 474k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 474k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 474k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 474k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 474k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 474k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 474k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 474k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|   474k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 474k, False: 0]
  ------------------
 9255|   474k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   474k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   474k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   474k|    }                                                                  \
  |  | 9205|   474k|    else {                                                             \
  |  | 9206|   474k|        return vis(monostate_val);                                     \
  |  | 9207|   474k|    }
  ------------------
 9256|   474k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 474k]
  ------------------
 9257|   474k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   474k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   474k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   474k|    }                                                                  \
  |  | 9205|   474k|    else {                                                             \
  |  | 9206|   474k|        return vis(monostate_val);                                     \
  |  | 9207|   474k|    }
  ------------------
 9258|   474k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 474k]
  ------------------
 9259|   474k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   474k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   474k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   474k|    }                                                                  \
  |  | 9205|   474k|    else {                                                             \
  |  | 9206|   474k|        return vis(monostate_val);                                     \
  |  | 9207|   474k|    }
  ------------------
 9260|       |
 9261|   474k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 474k]
  ------------------
 9262|   474k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   474k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   474k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 474k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 474k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   474k|            SCN_CLANG_POP
 9279|   474k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   332k|{
 7793|   332k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   332k|    handler.check_args_exhausted();
 7795|   332k|    return handler.get_error();
 7796|   332k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   332k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   332k|    auto begin = format.data();
 7761|   332k|    auto it = begin;
 7762|   332k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   644k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 332k, False: 312k]
  ------------------
 7765|   332k|        const auto ch = *it++;
 7766|   332k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 332k, False: 0]
  ------------------
 7767|   332k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   332k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   332k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 20.0k, False: 312k]
  ------------------
 7771|  20.0k|                return;
 7772|  20.0k|            }
 7773|   332k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   332k|    }
 7784|       |
 7785|   312k|    handler.on_literal_text(begin, end);
 7786|   312k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|   312k|    {
 8971|   312k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   312k|    static_cast<    \
  |  |  935|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   312k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|   332k|{
 7690|   332k|    struct id_adapter {
 7691|   332k|        constexpr void operator()()
 7692|   332k|        {
 7693|   332k|            arg_id = handler.on_arg_id();
 7694|   332k|        }
 7695|   332k|        constexpr void operator()(std::size_t id)
 7696|   332k|        {
 7697|   332k|            arg_id = handler.on_arg_id(id);
 7698|   332k|        }
 7699|       |
 7700|   332k|        constexpr void on_error(const char* msg)
 7701|   332k|        {
 7702|   332k|            SCN_UNLIKELY_ATTR
 7703|   332k|            handler.on_error(msg);
 7704|   332k|        }
 7705|       |
 7706|   332k|        Handler& handler;
 7707|   332k|        std::size_t arg_id;
 7708|   332k|    };
 7709|       |
 7710|   332k|    ++begin;
 7711|   332k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   332k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 332k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   332k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 332k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   332k|    else {
 7723|   332k|        auto adapter = id_adapter{handler, 0};
 7724|   332k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   332k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   332k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 332k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   332k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 332k, False: 0]
  ------------------
 7735|   332k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   332k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   332k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.00k, False: 324k]
  |  |  |  Branch (865:45): [True: 0, False: 332k]
  |  |  |  Branch (865:45): [True: 8.00k, False: 324k]
  |  |  ------------------
  ------------------
 7741|  8.00k|                handler.on_error("Unknown format specifier");
 7742|  8.00k|                return begin;
 7743|  8.00k|            }
 7744|   332k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   332k|    }
 7751|   324k|    return begin + 1;
 7752|   332k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   332k|{
 7191|   332k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   332k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 332k, False: 0]
  |  Branch (7192:26): [True: 0, False: 332k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   332k|    handler();
 7197|   332k|    return begin;
 7198|   332k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   332k|        {
 7693|   332k|            arg_id = handler.on_arg_id();
 7694|   332k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   332k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   332k|    {
 7871|   332k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   332k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7605|   332k|{
 7606|   332k|    auto do_presentation = [&]() -> const CharT* {
 7607|   332k|        if (*begin == CharT{'['}) {
 7608|   332k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   332k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   332k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   332k|                return begin;
 7614|   332k|            }
 7615|   332k|            handler.on_character_set_string(set);
 7616|   332k|            return begin;
 7617|   332k|        }
 7618|   332k|        if (*begin == CharT{'/'}) {
 7619|   332k|            return parse_presentation_regex(begin, end, handler);
 7620|   332k|        }
 7621|   332k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   332k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   332k|            handler.on_error("Invalid type specifier in format string");
 7624|   332k|            return begin;
 7625|   332k|        }
 7626|   332k|        handler.on_type(type);
 7627|   332k|        return begin;
 7628|   332k|    };
 7629|       |
 7630|   332k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 332k, False: 0]
  |  Branch (7630:28): [True: 320k, False: 12.1k]
  ------------------
 7631|   332k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 320k, False: 0]
  |  Branch (7631:36): [True: 316k, False: 4.00k]
  ------------------
 7632|   316k|        return do_presentation();
 7633|   316k|    }
 7634|       |
 7635|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  16.1k|    begin = parse_align(begin, end, handler);
 7641|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  16.1k|    begin = parse_width(begin, end, handler);
 7647|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  16.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 16.1k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  16.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 4.00k, False: 12.1k]
  ------------------
 7666|  4.00k|        handler.on_localized();
 7667|  4.00k|        ++begin;
 7668|  4.00k|    }
 7669|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  16.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 16.1k, False: 0]
  |  Branch (7674:25): [True: 12.1k, False: 4.00k]
  ------------------
 7675|  12.1k|        do_presentation();
 7676|  12.1k|    }
 7677|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  16.1k|    return begin;
 7683|  16.1k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   328k|    auto do_presentation = [&]() -> const CharT* {
 7607|   328k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 4.12k, False: 324k]
  ------------------
 7608|  4.12k|            auto set = parse_presentation_set(begin, end, handler);
 7609|  4.12k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  4.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.12k]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|  4.12k|            handler.on_character_set_string(set);
 7616|  4.12k|            return begin;
 7617|  4.12k|        }
 7618|   324k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 324k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   324k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   324k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.00k, False: 320k]
  |  |  ------------------
  ------------------
 7623|  4.00k|            handler.on_error("Invalid type specifier in format string");
 7624|  4.00k|            return begin;
 7625|  4.00k|        }
 7626|   320k|        handler.on_type(type);
 7627|   320k|        return begin;
 7628|   324k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7444|  4.12k|{
 7445|  4.12k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  4.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7446|  4.12k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  4.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7447|       |
 7448|  4.12k|    auto start = begin;
 7449|  4.12k|    ++begin;
 7450|       |
 7451|  4.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  4.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.12k]
  |  |  ------------------
  ------------------
 7452|       |        // clang-format off
 7453|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7454|       |        // clang-format on
 7455|      0|        return {};
 7456|      0|    }
 7457|  4.12k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7457:9): [True: 0, False: 4.12k]
  ------------------
 7458|      0|        handler.on_charset_inverted();
 7459|      0|        ++begin;
 7460|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7461|       |            // clang-format off
 7462|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7463|       |            // clang-format on
 7464|      0|            return {};
 7465|      0|        }
 7466|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7466:13): [True: 0, False: 0]
  ------------------
 7467|      0|            handler.on_charset_single(char32_t{']'});
 7468|      0|            ++begin;
 7469|      0|        }
 7470|      0|    }
 7471|  4.12k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7471:14): [True: 0, False: 4.12k]
  ------------------
 7472|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7473|      0|    }
 7474|       |
 7475|  12.3k|    while (begin != end) {
  ------------------
  |  Branch (7475:12): [True: 12.3k, False: 0]
  ------------------
 7476|  12.3k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
 7477|      0|            break;
 7478|      0|        }
 7479|       |
 7480|  12.3k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7480:13): [True: 4.12k, False: 8.24k]
  ------------------
 7481|  4.12k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7482|  4.12k|        }
 7483|       |
 7484|  8.24k|        parse_presentation_set_literal(begin, end, handler);
 7485|  8.24k|    }
 7486|       |
 7487|      0|    SCN_UNLIKELY_ATTR
 7488|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7489|      0|    return {};
 7490|  4.12k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7408|  8.24k|{
 7409|  8.24k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7410|       |
 7411|  8.24k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7412|  8.24k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  8.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.24k]
  |  |  ------------------
  ------------------
 7413|      0|        return;
 7414|      0|    }
 7415|       |
 7416|  8.24k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7416:9): [True: 8.24k, False: 0]
  |  Branch (7416:25): [True: 8.24k, False: 0]
  |  Branch (7416:49): [True: 8.24k, False: 0]
  ------------------
 7417|  8.24k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7417:9): [True: 8.24k, False: 0]
  ------------------
 7418|  8.24k|        ++begin;
 7419|       |
 7420|  8.24k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7421|  8.24k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  8.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.24k]
  |  |  ------------------
  ------------------
 7422|      0|            return;
 7423|      0|        }
 7424|       |
 7425|  8.24k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  8.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.24k]
  |  |  ------------------
  ------------------
 7426|       |            // clang-format off
 7427|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7428|       |            // clang-format on
 7429|      0|            return;
 7430|      0|        }
 7431|       |
 7432|  8.24k|        handler.on_charset_range(cp_first, cp_second + 1);
 7433|  8.24k|        return;
 7434|  8.24k|    }
 7435|       |
 7436|      0|    handler.on_charset_single(cp_first);
 7437|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7384|  16.4k|{
 7385|  16.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7386|       |
 7387|  16.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7388|  16.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.4k]
  |  |  |  Branch (865:45): [True: 0, False: 16.4k]
  |  |  |  Branch (865:45): [True: 0, False: 16.4k]
  |  |  ------------------
  ------------------
 7389|      0|        handler.on_error("Invalid encoding in format string");
 7390|      0|        return invalid_code_point;
 7391|      0|    }
 7392|       |
 7393|  16.4k|    const auto cp =
 7394|  16.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7395|  16.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.4k]
  |  |  ------------------
  ------------------
 7396|      0|        handler.on_error("Invalid encoding in format string");
 7397|      0|        return invalid_code_point;
 7398|      0|    }
 7399|       |
 7400|  16.4k|    begin += len;
 7401|  16.4k|    return cp;
 7402|  16.4k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7279|  16.1k|{
 7280|  16.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  16.1k|    auto check_align = [](wchar_t ch) {
 7283|  16.1k|        switch (ch) {
 7284|  16.1k|            case L'<':
 7285|  16.1k|                return align_type::left;
 7286|  16.1k|            case L'>':
 7287|  16.1k|                return align_type::right;
 7288|  16.1k|            case L'^':
 7289|  16.1k|                return align_type::center;
 7290|  16.1k|            default:
 7291|  16.1k|                return align_type::none;
 7292|  16.1k|        }
 7293|  16.1k|    };
 7294|       |
 7295|  16.1k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  16.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.1k]
  |  |  |  Branch (865:45): [True: 0, False: 16.1k]
  |  |  |  Branch (865:45): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 7297|  16.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  16.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  16.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  16.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  16.1k|    const auto begin_before_fill = begin;
 7307|  16.1k|    begin += potential_fill_len;
 7308|       |
 7309|  16.1k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 16.1k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  16.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  16.1k|    const auto begin_after_fill = begin;
 7315|  16.1k|    ++begin;
 7316|       |
 7317|  16.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 16.1k, False: 0]
  ------------------
 7318|  16.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.1k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  16.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 4.12k, False: 12.0k]
  ------------------
 7323|  4.12k|            return begin_before_fill;
 7324|  4.12k|        }
 7325|  16.1k|    }
 7326|       |
 7327|  12.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 12.0k, False: 0]
  ------------------
 7328|  12.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 12.0k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  12.0k|        return begin_before_fill;
 7333|  12.0k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  12.0k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|  32.2k|    auto check_align = [](wchar_t ch) {
 7283|  32.2k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 32.2k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 32.2k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 32.2k]
  ------------------
 7289|      0|                return align_type::center;
 7290|  32.2k|            default:
  ------------------
  |  Branch (7290:13): [True: 32.2k, False: 0]
  ------------------
 7291|  32.2k|                return align_type::none;
 7292|  32.2k|        }
 7293|  32.2k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7344|  16.1k|{
 7345|  16.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  16.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 16.1k, False: 0]
  |  Branch (7347:33): [True: 8.00k, False: 8.12k]
  ------------------
 7348|  8.00k|        int width = parse_simple_int(begin, end);
 7349|  8.00k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  8.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 8.00k, False: 0]
  |  |  ------------------
  ------------------
 7350|  8.00k|            handler.on_width(width);
 7351|  8.00k|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|  8.00k|    }
 7357|  16.1k|    return begin;
 7358|  16.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7875|  4.00k|    {
 7876|  4.00k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  4.00k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 4.00k, False: 0]
  ------------------
 7878|  4.00k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 4.00k, False: 0]
  ------------------
 7879|  4.00k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 4.00k, False: 0]
  ------------------
 7880|  4.00k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 4.00k, False: 0]
  ------------------
 7881|  4.00k|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|  4.00k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|  4.00k|        }
 7886|       |
 7887|      0|        Handler::on_localized();
 7888|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   324k|{
 9300|   324k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   324k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   324k|{
 9201|   324k|#define SCN_VISIT(Type)                                                \
 9202|   324k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   324k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   324k|    }                                                                  \
 9205|   324k|    else {                                                             \
 9206|   324k|        return vis(monostate_val);                                     \
 9207|   324k|    }
 9208|       |
 9209|   324k|    monostate monostate_val{};
 9210|       |
 9211|   324k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 324k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 324k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 324k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 324k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 324k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 324k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 324k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 324k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 324k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 324k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 324k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 324k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 324k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 324k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 324k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 324k]
  ------------------
 9243|      0|            SCN_VISIT(float);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 324k]
  ------------------
 9245|      0|            SCN_VISIT(double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 324k]
  ------------------
 9247|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 324k]
  ------------------
 9249|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 324k]
  ------------------
 9251|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 324k]
  ------------------
 9253|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9254|   324k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 324k, False: 0]
  ------------------
 9255|   324k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   324k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   324k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   324k|    }                                                                  \
  |  | 9205|   324k|    else {                                                             \
  |  | 9206|   324k|        return vis(monostate_val);                                     \
  |  | 9207|   324k|    }
  ------------------
 9256|   324k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 324k]
  ------------------
 9257|   324k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   324k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   324k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   324k|    }                                                                  \
  |  | 9205|   324k|    else {                                                             \
  |  | 9206|   324k|        return vis(monostate_val);                                     \
  |  | 9207|   324k|    }
  ------------------
 9258|   324k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 324k]
  ------------------
 9259|   324k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   324k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   324k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   324k|    }                                                                  \
  |  | 9205|   324k|    else {                                                             \
  |  | 9206|   324k|        return vis(monostate_val);                                     \
  |  | 9207|   324k|    }
  ------------------
 9260|       |
 9261|   324k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 324k]
  ------------------
 9262|   324k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   324k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   324k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 324k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 324k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   324k|            SCN_CLANG_POP
 9279|   324k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  26.0k|    {
 4352|  26.0k|        return sync(0);
 4353|  26.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|  66.0k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|   474k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   324k|{
   89|   324k|    auto result = make_scan_result<Source, Args...>();
   90|   324k|    fill_scan_result(result,
   91|   324k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   324k|                           make_scan_args<wscan_context>(result->values())));
   93|   324k|    return result;
   94|   324k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   648k|{
   44|   648k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   648k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   648k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   324k|{
  131|   324k|    auto result = make_scan_result<Source, Args...>();
  132|   324k|    fill_scan_result(result,
  133|   324k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   324k|                           make_scan_args<wscan_context>(result->values())));
  135|   324k|    return result;
  136|   324k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   648k|{
   60|   648k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   648k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   648k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   158k|{
  171|   158k|    auto result = make_scan_result<Source, T>();
  172|   158k|    fill_scan_result(
  173|   158k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   158k|                            detail::make_arg<wscan_context>(result->value())));
  175|   158k|    return result;
  176|   158k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   316k|{
   72|   316k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   316k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   324k|{
   89|   324k|    auto result = make_scan_result<Source, Args...>();
   90|   324k|    fill_scan_result(result,
   91|   324k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   324k|                           make_scan_args<wscan_context>(result->values())));
   93|   324k|    return result;
   94|   324k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   324k|{
  131|   324k|    auto result = make_scan_result<Source, Args...>();
  132|   324k|    fill_scan_result(result,
  133|   324k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   324k|                           make_scan_args<wscan_context>(result->values())));
  135|   324k|    return result;
  136|   324k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   158k|{
  171|   158k|    auto result = make_scan_result<Source, T>();
  172|   158k|    fill_scan_result(
  173|   158k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   158k|                            detail::make_arg<wscan_context>(result->value())));
  175|   158k|    return result;
  176|   158k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   324k|{
   89|   324k|    auto result = make_scan_result<Source, Args...>();
   90|   324k|    fill_scan_result(result,
   91|   324k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   324k|                           make_scan_args<wscan_context>(result->values())));
   93|   324k|    return result;
   94|   324k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   324k|{
   44|   324k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   324k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   324k|{
  131|   324k|    auto result = make_scan_result<Source, Args...>();
  132|   324k|    fill_scan_result(result,
  133|   324k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   324k|                           make_scan_args<wscan_context>(result->values())));
  135|   324k|    return result;
  136|   324k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   324k|{
   60|   324k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   324k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   158k|{
  171|   158k|    auto result = make_scan_result<Source, T>();
  172|   158k|    fill_scan_result(
  173|   158k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   158k|                            detail::make_arg<wscan_context>(result->value())));
  175|   158k|    return result;
  176|   158k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   158k|{
   72|   158k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   158k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.11M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.11M|{
  309|  1.11M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.11M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  89.8k|{
 1903|  89.8k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  89.8k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  56.2k|{
 1911|  56.2k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  56.2k|    return sync_after_vscan(source, n);
 1913|  56.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|   648k|{
 1921|   648k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|   648k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|   324k|{
 1929|   324k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|   324k|    return sync_after_vscan(source, n);
 1931|   324k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   325k|{
  207|   325k|    return find_classic_impl(
  208|   325k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   325k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   325k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   329k|{
  215|   329k|    return find_classic_impl(
  216|   329k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   329k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   329k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  89.8k|{
 1872|  89.8k|    return vscan_internal(source, format, args);
 1873|  89.8k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  56.2k|{
 1878|  56.2k|    auto n = vscan_internal(source, format, args);
 1879|  56.2k|    return sync_after_vscan(source, n);
 1880|  56.2k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|   648k|{
 1886|   648k|    return vscan_internal(source, format, args);
 1887|   648k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|   324k|{
 1892|   324k|    auto n = vscan_internal(source, format, args);
 1893|   324k|    return sync_after_vscan(source, n);
 1894|   324k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  40.5k|{
 1958|  40.5k|    return vscan_value_internal(source, arg);
 1959|  40.5k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  25.5k|{
 1963|  25.5k|    auto n = vscan_value_internal(source, arg);
 1964|  25.5k|    return sync_after_vscan(source, n);
 1965|  25.5k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|   316k|{
 1971|   316k|    return vscan_value_internal(source, arg);
 1972|   316k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|   158k|{
 1977|   158k|    auto n = vscan_value_internal(source, arg);
 1978|   158k|    return sync_after_vscan(source, n);
 1979|   158k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   325k|{
  131|   325k|    auto it = source.begin();
  132|       |
  133|   603k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 471k, False: 132k]
  ------------------
  134|   471k|        auto sv =
  135|   471k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   471k|                .substr(0, 8);
  137|       |
  138|   471k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 327k, False: 143k]
  ------------------
  139|   327k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   327k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   327k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 136k, False: 190k]
  ------------------
  142|   136k|                break;
  143|   136k|            }
  144|   190k|            continue;
  145|   327k|        }
  146|       |
  147|   434k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 347k, False: 86.8k]
  ------------------
  148|   347k|            auto tmp =
  149|   347k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   347k|            auto res = get_next_code_point(tmp);
  151|   347k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 56.9k, False: 290k]
  ------------------
  152|  56.9k|                return it;
  153|  56.9k|            }
  154|   290k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   290k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   290k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   290k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   290k|        }
  158|   143k|    }
  159|       |
  160|   269k|    return detail::make_string_view_iterator(source, it);
  161|   325k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   781k|{
  118|   781k|    static_assert(sizeof(*source.data()) == 1);
  119|   781k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|   781k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   781k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   781k|    uint64_t word{};
  121|   781k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   781k|    return has_byte_greater(word, 127) != 0;
  124|   781k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  1.29M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   347k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   329k|{
  131|   329k|    auto it = source.begin();
  132|       |
  133|   430k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 310k, False: 119k]
  ------------------
  134|   310k|        auto sv =
  135|   310k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   310k|                .substr(0, 8);
  137|       |
  138|   310k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 239k, False: 71.1k]
  ------------------
  139|   239k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   239k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   239k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 141k, False: 98.4k]
  ------------------
  142|   141k|                break;
  143|   141k|            }
  144|  98.4k|            continue;
  145|   239k|        }
  146|       |
  147|   136k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 134k, False: 2.27k]
  ------------------
  148|   134k|            auto tmp =
  149|   134k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   134k|            auto res = get_next_code_point(tmp);
  151|   134k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 68.8k, False: 65.6k]
  ------------------
  152|  68.8k|                return it;
  153|  68.8k|            }
  154|  65.6k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  65.6k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  65.6k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  65.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  65.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  65.6k|        }
  158|  71.1k|    }
  159|       |
  160|   260k|    return detail::make_string_view_iterator(source, it);
  161|   329k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   665k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   134k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   112k|{
 1769|   112k|    const auto argcount = args.size();
 1770|   112k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 51.0k, False: 61.4k]
  |  Branch (1770:60): [True: 51.0k, False: 0]
  ------------------
 1771|  51.0k|        auto arg = args.get(0);
 1772|  51.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  51.0k|    static_cast<    \
  |  |  935|  51.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  51.0k|    }
 1774|       |
 1775|  61.4k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 61.4k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  61.4k|    SCN_UNLIKELY_ATTR
 1783|  61.4k|    {
 1784|  61.4k|        auto handler = format_handler<false, CharT>{
 1785|  61.4k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  61.4k|    static_cast<    \
  |  |  935|  61.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  61.4k|    static_cast<    \
  |  |  935|  61.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  61.4k|        return vscan_parse_format_string(format, handler);
 1787|  61.4k|    }
 1788|  61.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   292k|{
 1317|   292k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 160k, False: 132k]
  ------------------
 1318|   160k|        return false;
 1319|   160k|    }
 1320|   132k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 132k, False: 0]
  |  Branch (1320:39): [True: 132k, False: 0]
  ------------------
 1321|   292k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  76.6k|{
 1350|  76.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  76.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  76.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 76.6k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  76.6k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  76.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  76.6k|    static_cast<    \
  |  |  935|  76.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  76.6k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  76.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  76.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  76.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.00k, False: 73.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.00k|    }                                                  \
  |  |  |  | 3939|  76.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  73.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|  73.6k|    return it.position();
 1367|  76.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  98.7k|        : format_handler_base{argcount},
 1593|  98.7k|          parse_ctx{format},
 1594|  98.7k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  98.7k|    static_cast<    \
  |  |  935|  98.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  98.7k|    static_cast<    \
  |  |  935|  98.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  98.7k|    {
 1596|  98.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  1.15M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  1.15M|    {
 1412|  1.15M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  1.15M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  98.7k|        : contiguous_ctx(source, args, loc)
 1544|  98.7k|    {
 1545|  98.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  98.7k|{
 1734|  98.7k|    const auto beg = handler.get_ctx().begin();
 1735|  98.7k|    detail::parse_format_string<false>(format, handler);
 1736|  98.7k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.0k, False: 78.7k]
  |  |  ------------------
  ------------------
 1737|  20.0k|        return unexpected(err.error());
 1738|  20.0k|    }
 1739|  78.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  98.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   634k|    {
 1718|   634k|        return ctx.get();
 1719|   634k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   634k|    {
 1549|   634k|        return contiguous_ctx;
 1550|   634k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   177k|    {
 1600|   177k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 177k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   177k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|  54.0k|    {
 1460|  54.0k|        error = unexpected(err);
 1461|  54.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  98.7k|{
 1372|  98.7k|    auto arg = ctx.arg(id);
 1373|  98.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 98.7k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  98.7k|    return arg;
 1377|  98.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  1.15M|    {
 1486|  1.15M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  1.15M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  1.15M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.15M, False: 0]
  |  |  ------------------
  ------------------
 1498|  1.15M|            visited_args_lower64 |= (1ull << id);
 1499|  1.15M|            return;
 1500|  1.15M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  1.15M|    {
 1470|  1.15M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  1.15M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.15M, False: 0]
  |  |  ------------------
  ------------------
 1477|  1.15M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  1.15M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  1.15M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  98.7k|    {
 1640|  98.7k|        return parse_ctx.next_arg_id();
 1641|  98.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  98.7k|    {
 1680|  98.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  98.7k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  98.7k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 98.7k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  98.7k|        auto specs = detail::format_specs{};
 1693|  98.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  98.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  98.7k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  98.7k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  98.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 98.7k]
  |  Branch (1698:29): [True: 0, False: 98.7k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|  98.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.00k, False: 90.7k]
  |  |  ------------------
  ------------------
 1705|  8.00k|            return parse_ctx.begin();
 1706|  8.00k|        }
 1707|  90.7k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  90.7k|        on_visit_scan_arg(
 1710|  90.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  90.7k|                                           get_ctx().locale()},
 1712|  90.7k|            arg);
 1713|  90.7k|        return parse_ctx.begin();
 1714|  98.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|  98.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  98.7k|    {
 1391|  98.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  90.7k|    {
 1651|  90.7k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 90.7k]
  |  Branch (1651:13): [True: 0, False: 90.7k]
  |  Branch (1651:29): [True: 0, False: 90.7k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  90.7k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  90.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 78.7k]
  |  |  ------------------
  ------------------
 1658|  12.0k|            on_error(r.error());
 1659|  12.0k|        }
 1660|  78.7k|        else {
 1661|  78.7k|            get_ctx().advance_to(*r);
 1662|  78.7k|        }
 1663|  90.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|  36.0k|    {
 1454|  36.0k|        SCN_UNLIKELY_ATTR
 1455|  36.0k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|  36.0k|                                              msg);
 1457|  36.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  1.15M|    {
 1419|  1.15M|        {
 1420|  1.15M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 1.15M]
  ------------------
 1421|  1.15M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 1.15M]
  ------------------
 1422|  1.15M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  1.15M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  1.15M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 1.15M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  1.15M|        }
 1430|       |
 1431|  1.15M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 1.15M, False: 0]
  ------------------
 1432|  1.15M|            return;
 1433|  1.15M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  4.59M|    {
 1465|  4.59M|        return error;
 1466|  4.59M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  61.4k|        : format_handler_base{argcount},
 1593|  61.4k|          parse_ctx{format},
 1594|  61.4k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  61.4k|    static_cast<    \
  |  |  935|  61.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  61.4k|    static_cast<    \
  |  |  935|  61.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  61.4k|    {
 1596|  61.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  61.4k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  61.4k|    static_cast<    \
  |  |  935|  61.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  61.4k|    {
 1521|  61.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  61.4k|{
 1734|  61.4k|    const auto beg = handler.get_ctx().begin();
 1735|  61.4k|    detail::parse_format_string<false>(format, handler);
 1736|  61.4k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.0k, False: 51.4k]
  |  |  ------------------
  ------------------
 1737|  10.0k|        return unexpected(err.error());
 1738|  10.0k|    }
 1739|  51.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  61.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   402k|    {
 1718|   402k|        return ctx.get();
 1719|   402k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   402k|    {
 1525|   402k|        return ctx;
 1526|   402k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   112k|    {
 1600|   112k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 112k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   112k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  61.4k|{
 1372|  61.4k|    auto arg = ctx.arg(id);
 1373|  61.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 61.4k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  61.4k|    return arg;
 1377|  61.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  61.4k|    {
 1640|  61.4k|        return parse_ctx.next_arg_id();
 1641|  61.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  61.4k|    {
 1680|  61.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  61.4k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  61.4k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 61.4k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  61.4k|        auto specs = detail::format_specs{};
 1693|  61.4k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  61.4k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  61.4k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  61.4k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  61.4k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 61.4k]
  |  Branch (1698:29): [True: 0, False: 61.4k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|  61.4k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.00k, False: 57.4k]
  |  |  ------------------
  ------------------
 1705|  4.00k|            return parse_ctx.begin();
 1706|  4.00k|        }
 1707|  57.4k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  57.4k|        on_visit_scan_arg(
 1710|  57.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  57.4k|                                           get_ctx().locale()},
 1712|  57.4k|            arg);
 1713|  57.4k|        return parse_ctx.begin();
 1714|  61.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|  61.4k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  61.4k|    {
 1391|  61.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  57.4k|    {
 1651|  57.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 57.4k]
  |  Branch (1651:13): [True: 0, False: 57.4k]
  |  Branch (1651:29): [True: 0, False: 57.4k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  57.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  57.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  57.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 51.4k]
  |  |  ------------------
  ------------------
 1658|  6.00k|            on_error(r.error());
 1659|  6.00k|        }
 1660|  51.4k|        else {
 1661|  51.4k|            get_ctx().advance_to(*r);
 1662|  51.4k|        }
 1663|  57.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   179k|{
 1749|   179k|    const auto argcount = args.size();
 1750|   179k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 81.0k, False: 98.7k]
  |  Branch (1750:60): [True: 81.0k, False: 0]
  ------------------
 1751|  81.0k|        auto arg = args.get(0);
 1752|  81.0k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  81.0k|    static_cast<    \
  |  |  935|  81.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  81.0k|    }
 1754|       |
 1755|  98.7k|    auto handler = format_handler<true, CharT>{
 1756|  98.7k|        ranges::subrange<const CharT*>{source.data(),
 1757|  98.7k|                                       source.data() + source.size()},
 1758|  98.7k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  98.7k|    static_cast<    \
  |  |  935|  98.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  98.7k|    static_cast<    \
  |  |  935|  98.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  98.7k|    return vscan_parse_format_string(format, handler);
 1760|   179k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   121k|{
 1330|   121k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   121k|    auto reader =
 1336|   121k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   121k|            ranges::subrange<const CharT*>{source.data(),
 1338|   121k|                                           source.data() + source.size()},
 1339|   121k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   121k|    static_cast<    \
  |  |  935|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   121k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6.00k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  6.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  6.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  6.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  6.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  6.00k|    }                                                  \
  |  |  |  | 3939|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   115k|    return ranges::distance(source.data(), it);
 1342|   121k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   138k|{
 1849|   138k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   138k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 125k, False: 13.0k]
  |  |  ------------------
  ------------------
 1850|   125k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   125k|    }
 1856|  13.0k|    else {
 1857|  13.0k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.0k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  13.0k|    }
 1863|   138k|    return result;
 1864|   138k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  1.29M|{
 1749|  1.29M|    const auto argcount = args.size();
 1750|  1.29M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 632k, False: 664k]
  |  Branch (1750:60): [True: 632k, False: 0]
  ------------------
 1751|   632k|        auto arg = args.get(0);
 1752|   632k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   632k|    static_cast<    \
  |  |  935|   632k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   632k|    }
 1754|       |
 1755|   664k|    auto handler = format_handler<true, CharT>{
 1756|   664k|        ranges::subrange<const CharT*>{source.data(),
 1757|   664k|                                       source.data() + source.size()},
 1758|   664k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   664k|    static_cast<    \
  |  |  935|   664k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   664k|    static_cast<    \
  |  |  935|   664k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   664k|    return vscan_parse_format_string(format, handler);
 1760|  1.29M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.94M|{
 1317|  1.94M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 996k, False: 948k]
  ------------------
 1318|   996k|        return false;
 1319|   996k|    }
 1320|   948k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 948k, False: 0]
  |  Branch (1320:39): [True: 948k, False: 0]
  ------------------
 1321|  1.94M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   948k|{
 1330|   948k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 948k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   948k|    auto reader =
 1336|   948k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   948k|            ranges::subrange<const CharT*>{source.data(),
 1338|   948k|                                           source.data() + source.size()},
 1339|   948k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   948k|    static_cast<    \
  |  |  935|   948k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   948k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   948k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   948k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   948k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.0k, False: 936k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.0k|    }                                                  \
  |  |  |  | 3939|   948k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   936k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   936k|    return ranges::distance(source.data(), it);
 1342|   948k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   664k|        : format_handler_base{argcount},
 1593|   664k|          parse_ctx{format},
 1594|   664k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   664k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   664k|    static_cast<    \
  |  |  935|   664k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   664k|    static_cast<    \
  |  |  935|   664k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   664k|    {
 1596|   664k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   664k|        : contiguous_ctx(source, args, loc)
 1544|   664k|    {
 1545|   664k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   664k|{
 1734|   664k|    const auto beg = handler.get_ctx().begin();
 1735|   664k|    detail::parse_format_string<false>(format, handler);
 1736|   664k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 40.0k, False: 624k]
  |  |  ------------------
  ------------------
 1737|  40.0k|        return unexpected(err.error());
 1738|  40.0k|    }
 1739|   624k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   664k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|  4.53M|    {
 1718|  4.53M|        return ctx.get();
 1719|  4.53M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|  4.53M|    {
 1549|  4.53M|        return contiguous_ctx;
 1550|  4.53M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|  1.28M|    {
 1600|  1.28M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.28M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   664k|{
 1372|   664k|    auto arg = ctx.arg(id);
 1373|   664k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 664k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   664k|    return arg;
 1377|   664k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   664k|    {
 1640|   664k|        return parse_ctx.next_arg_id();
 1641|   664k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   664k|    {
 1680|   664k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   664k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   664k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 664k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   664k|        auto specs = detail::format_specs{};
 1693|   664k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   664k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   664k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   664k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   664k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 664k]
  |  Branch (1698:29): [True: 0, False: 664k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   664k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   664k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.0k, False: 648k]
  |  |  ------------------
  ------------------
 1705|  16.0k|            return parse_ctx.begin();
 1706|  16.0k|        }
 1707|   648k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   648k|        on_visit_scan_arg(
 1710|   648k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   648k|                                           get_ctx().locale()},
 1712|   648k|            arg);
 1713|   648k|        return parse_ctx.begin();
 1714|   664k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   664k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   664k|    {
 1391|   664k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   648k|    {
 1651|   648k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 648k]
  |  Branch (1651:13): [True: 0, False: 648k]
  |  Branch (1651:29): [True: 0, False: 648k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   648k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   648k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   648k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 24.0k, False: 624k]
  |  |  ------------------
  ------------------
 1658|  24.0k|            on_error(r.error());
 1659|  24.0k|        }
 1660|   624k|        else {
 1661|   624k|            get_ctx().advance_to(*r);
 1662|   624k|        }
 1663|   648k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   648k|{
 1769|   648k|    const auto argcount = args.size();
 1770|   648k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 316k, False: 332k]
  |  Branch (1770:60): [True: 316k, False: 0]
  ------------------
 1771|   316k|        auto arg = args.get(0);
 1772|   316k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   316k|    static_cast<    \
  |  |  935|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   316k|    }
 1774|       |
 1775|   332k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 332k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   332k|    SCN_UNLIKELY_ATTR
 1783|   332k|    {
 1784|   332k|        auto handler = format_handler<false, CharT>{
 1785|   332k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   332k|    static_cast<    \
  |  |  935|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   332k|    static_cast<    \
  |  |  935|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   332k|        return vscan_parse_format_string(format, handler);
 1787|   332k|    }
 1788|   332k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   474k|{
 1350|   474k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   474k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   474k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   474k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   474k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   474k|    static_cast<    \
  |  |  935|   474k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   474k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   474k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   474k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   474k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6.00k, False: 468k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  6.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  6.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  6.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  6.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  6.00k|    }                                                  \
  |  |  |  | 3939|   474k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   468k|    return it.position();
 1367|   474k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   332k|        : format_handler_base{argcount},
 1593|   332k|          parse_ctx{format},
 1594|   332k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   332k|    static_cast<    \
  |  |  935|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   332k|    static_cast<    \
  |  |  935|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   332k|    {
 1596|   332k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   332k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   332k|    static_cast<    \
  |  |  935|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   332k|    {
 1521|   332k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   332k|{
 1734|   332k|    const auto beg = handler.get_ctx().begin();
 1735|   332k|    detail::parse_format_string<false>(format, handler);
 1736|   332k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.0k, False: 312k]
  |  |  ------------------
  ------------------
 1737|  20.0k|        return unexpected(err.error());
 1738|  20.0k|    }
 1739|   312k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   332k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|  2.26M|    {
 1718|  2.26M|        return ctx.get();
 1719|  2.26M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|  2.26M|    {
 1525|  2.26M|        return ctx;
 1526|  2.26M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   644k|    {
 1600|   644k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 644k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   644k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   332k|{
 1372|   332k|    auto arg = ctx.arg(id);
 1373|   332k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   332k|    return arg;
 1377|   332k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   332k|    {
 1640|   332k|        return parse_ctx.next_arg_id();
 1641|   332k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   332k|    {
 1680|   332k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   332k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   332k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 332k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   332k|        auto specs = detail::format_specs{};
 1693|   332k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   332k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   332k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   332k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   332k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 332k]
  |  Branch (1698:29): [True: 0, False: 332k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   332k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.00k, False: 324k]
  |  |  ------------------
  ------------------
 1705|  8.00k|            return parse_ctx.begin();
 1706|  8.00k|        }
 1707|   324k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   324k|        on_visit_scan_arg(
 1710|   324k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   324k|                                           get_ctx().locale()},
 1712|   324k|            arg);
 1713|   324k|        return parse_ctx.begin();
 1714|   332k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   332k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   332k|    {
 1391|   332k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   324k|    {
 1651|   324k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 324k]
  |  Branch (1651:13): [True: 0, False: 324k]
  |  Branch (1651:29): [True: 0, False: 324k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   324k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   324k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 312k]
  |  |  ------------------
  ------------------
 1658|  12.0k|            on_error(r.error());
 1659|  12.0k|        }
 1660|   312k|        else {
 1661|   312k|            get_ctx().advance_to(*r);
 1662|   312k|        }
 1663|   324k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   806k|{
 1849|   806k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   806k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 780k, False: 26.0k]
  |  |  ------------------
  ------------------
 1850|   780k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 780k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   780k|    }
 1856|  26.0k|    else {
 1857|  26.0k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 26.0k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  26.0k|    }
 1863|   806k|    return result;
 1864|   806k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  40.5k|{
 1795|  40.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  40.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  40.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  25.5k|{
 1795|  25.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  25.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|   316k|{
 1795|   316k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   316k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|   158k|{
 1795|   158k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   158k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  1.00k|{
 1462|  1.00k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  1.00k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  1.00k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  1.00k|            return transcode_to_string_impl_to32(src, dest);
 1473|  1.00k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  1.00k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  1.00k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  1.00k|{
 1355|  1.00k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  1.00k|    auto it = src.begin();
 1358|   315k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 314k, False: 1.00k]
  ------------------
 1359|   314k|        auto res = get_next_code_point(
 1360|   314k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   314k|                                                                 src.end()));
 1362|   314k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.72k, False: 309k]
  |  |  ------------------
  ------------------
 1363|  4.72k|            dest.push_back(DestCharT{0xfffd});
 1364|  4.72k|        }
 1365|   309k|        else {
 1366|   309k|            dest.push_back(res.value);
 1367|   309k|        }
 1368|   314k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   314k|    }
 1370|  1.00k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   796k|{
 1279|   796k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   796k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   796k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   796k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   796k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   796k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.4k, False: 771k]
  |  |  ------------------
  ------------------
 1283|  25.4k|        return {get_start_for_next_code_point(input),
 1284|  25.4k|                detail::invalid_code_point};
 1285|  25.4k|    }
 1286|   771k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.9k, False: 752k]
  |  |  ------------------
  ------------------
 1287|  18.9k|        return {input.end(), detail::invalid_code_point};
 1288|  18.9k|    }
 1289|       |
 1290|   752k|    return {input.begin() + len,
 1291|   752k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   771k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  25.4k|{
 1265|  25.4k|    auto it = input.begin();
 1266|   105k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 103k, False: 2.22k]
  ------------------
 1267|   103k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 23.1k, False: 80.2k]
  ------------------
 1268|  23.1k|            break;
 1269|  23.1k|        }
 1270|   103k|    }
 1271|  25.4k|    return it;
 1272|  25.4k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3034|  18.0k|    {
 3035|  18.0k|        SCN_UNLIKELY_ATTR
 3036|  18.0k|        m_msg = msg;
 3037|  18.0k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3039|  1.12M|    {
 3040|  1.12M|        return m_msg == nullptr;
 3041|  1.12M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.95M|{
  458|  1.95M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.95M|        static_cast<unsigned char>(ch))];
  460|  1.95M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  46.1k|{
  469|  46.1k|    return static_cast<unsigned char>(ch) <= 127;
  470|  46.1k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  13.2k|{
  474|  13.2k|#if WCHAR_MIN < 0
  475|  13.2k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 11.9k, False: 1.36k]
  |  Branch (475:23): [True: 7.68k, False: 4.22k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  13.2k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   781k|{
  539|   781k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   781k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  4.31M|{
  784|  4.31M|    return e != eof_error::good;
  785|  4.31M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  13.9k|{
  798|  13.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  13.9k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  13.9k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6034|  1.06M|{
 6035|  1.06M|    if (specs.width != 0) {
  ------------------
  |  Branch (6035:9): [True: 0, False: 1.06M]
  ------------------
 6036|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6036:13): [True: 0, False: 0]
  ------------------
 6037|      0|            return detail::unexpected_scan_error(
 6038|      0|                scan_error::length_too_short,
 6039|      0|                "Scanned value too narrow, width did not exceed what "
 6040|      0|                "was specified in the format string");
 6041|      0|        }
 6042|      0|    }
 6043|  1.06M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6043:9): [True: 0, False: 1.06M]
  ------------------
 6044|       |        // Ensured by take_width_view
 6045|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6046|      0|                   specs.precision);
 6047|      0|    }
 6048|  1.06M|    return {};
 6049|  1.06M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   400k|    {
  304|   400k|        ranges::advance(x, n);
  305|   400k|        return x;
  306|   400k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   400k|    {
  268|   400k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   400k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   400k|    {
  151|   400k|        i += n;
  152|   400k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   961k|    {
  108|   961k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   961k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   961k|    {
   87|   961k|        return s - i;
   88|   961k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.56M|    {
  108|  1.56M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.56M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.56M|    {
   87|  1.56M|        return s - i;
   88|  1.56M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2981|   268k|    {
 2982|   268k|        return m_current;
 2983|   268k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2981|  1.93M|    {
 2982|  1.93M|        return m_current;
 2983|  1.93M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   132k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   132k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   132k|        auto beg = r.begin();
  991|   132k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 132k, False: 0]
  ------------------
  992|   132k|            return false;
  993|   132k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   132k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  40.2k|    {
  763|  40.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  40.2k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  8.50k|        : m_fptr([](storage fn,
  743|  8.50k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.50k|              cvref<T> obj = *get<T>(fn);
  745|  8.50k|              if constexpr (std::is_void_v<R>) {
  746|  8.50k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.50k|              }
  748|  8.50k|              else {
  749|  8.50k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.50k|              }
  751|  8.50k|          }),
  752|  8.50k|          m_storage(std::addressof(f))
  753|  8.50k|    {
  754|  8.50k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  20.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  20.1k|              else {
  749|  20.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.1k|              }
  751|  20.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  20.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  20.1k|        else if constexpr (std::is_object_v<T>) {
  688|  20.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  20.1k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  8.50k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  8.50k|        {
  662|  8.50k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  85.0M|    {
  763|  85.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  85.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  85.0M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.48M|        : m_fptr([](storage fn,
  743|  2.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.48M|              cvref<T> obj = *get<T>(fn);
  745|  2.48M|              if constexpr (std::is_void_v<R>) {
  746|  2.48M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.48M|              }
  748|  2.48M|              else {
  749|  2.48M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.48M|              }
  751|  2.48M|          }),
  752|  2.48M|          m_storage(std::addressof(f))
  753|  2.48M|    {
  754|  2.48M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.89M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.89M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.89M|              else {
  749|  5.89M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.89M|              }
  751|  5.89M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.89M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.89M|        else if constexpr (std::is_object_v<T>) {
  688|  5.89M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.89M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.48M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.48M|        {
  662|  2.48M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6062|  55.4k|    {
 6063|  55.4k|        const bool need_skipped_width =
 6064|  55.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 55.4k]
  |  Branch (6064:33): [True: 0, False: 55.4k]
  ------------------
 6065|  55.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|  55.4k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 55.4k]
  ------------------
 6069|  55.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 55.4k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|  55.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 55.4k, False: 0]
  |  Branch (6073:56): [True: 52.5k, False: 2.83k]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|  52.5k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 52.5k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   104k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  52.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 988, False: 51.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    988|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    988|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    988|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    988|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    988|    }                                                  \
  |  |  |  | 3939|  52.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   104k|                            make_eof_scan_error));
 6084|       |
 6085|   104k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 51.6k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|  51.6k|            return result_type{it, 0};
 6093|   104k|        }
 6094|       |
 6095|  2.83k|        return result_type{rng.begin(), 0};
 6096|  55.4k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.83k|{
 2075|  2.83k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.83k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.83k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.83k|    else {
 2060|  2.83k|        auto first = range.begin();
 2061|  6.78k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 6.70k, False: 84]
  ------------------
 2062|  6.70k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.75k, False: 3.95k]
  ------------------
 2063|  2.75k|                return first;
 2064|  2.75k|            }
 2065|  6.70k|        }
 2066|     84|        return first;
 2067|  2.83k|    }
 2068|  2.83k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  51.4k|    {
  108|  51.4k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  51.4k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  51.4k|    {
   94|  51.4k|        iter_difference_t<I> counter{0};
   95|   549k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 498k, False: 51.4k]
  ------------------
   96|   498k|            ++i;
   97|   498k|            ++counter;
   98|   498k|        }
   99|  51.4k|        return counter;
  100|  51.4k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   205k|{
  951|   205k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.27k, False: 202k]
  |  |  ------------------
  ------------------
  952|  2.27k|        return eof_error::eof;
  953|  2.27k|    }
  954|   202k|    return eof_error::good;
  955|   205k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.50M|{
  945|  1.50M|    return is_range_eof(r.begin(), r.end());
  946|  1.50M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.50M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.50M|    {
  938|  1.50M|        return begin == end;
  939|  1.50M|    }
  940|  1.50M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   127k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   127k|    else {
 1788|   127k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   127k|    }
 1790|   127k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   127k|    {
 1636|   127k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   127k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   127k|    {
 1720|   127k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   127k|                           ranges::common_range<Range>) {
 1737|   127k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   127k|            auto end_seg = range.end().contiguous_segment();
 1739|   127k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.38k, False: 124k]
  |  |  ------------------
  ------------------
 1740|   127k|                             detail::to_address(end_seg.end()))) {
 1741|  3.38k|                auto& str = m_storage.emplace();
 1742|  3.38k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.38k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.38k|                m_view = string_view_type{str};
 1745|  3.38k|                return;
 1746|  3.38k|            }
 1747|       |
 1748|   124k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   124k|                                                            end_seg.data());
 1750|   124k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   127k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   250k|    {
 1681|   250k|        return m_view;
 1682|   250k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   127k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6104|  50.8k|    {
 6105|  50.8k|        const bool need_skipped_width =
 6106|  50.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 50.8k]
  |  Branch (6106:33): [True: 0, False: 50.8k]
  ------------------
 6107|  50.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|  50.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 50.8k]
  ------------------
 6110|  50.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 50.8k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|  50.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 50.8k, False: 0]
  ------------------
 6119|  50.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 794, False: 50.0k]
  ------------------
 6120|  50.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 794]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|    794|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 794]
  ------------------
 6122|    794|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|  50.8k|        return result_type{rng.begin(), 0};
 6144|  50.8k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   322k|{
  951|   322k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.56k, False: 319k]
  |  |  ------------------
  ------------------
  952|  3.56k|        return eof_error::eof;
  953|  3.56k|    }
  954|   319k|    return eof_error::good;
  955|   322k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   322k|{
  945|   322k|    return is_range_eof(r.begin(), r.end());
  946|   322k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   322k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   322k|    {
  938|   322k|        return begin == end;
  939|   322k|    }
  940|   322k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   200k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   200k|                  ranges::sized_range<Range>) {
 1785|   200k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   200k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   200k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   200k|    {
 1589|   200k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.09M|    {
 1602|  1.09M|        return sv;
 1603|  1.09M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  5.67k|{
 2075|  5.67k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  5.67k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  5.67k|{
 2056|  5.67k|    if constexpr (ranges::common_range<Range>) {
 2057|  5.67k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  5.67k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|   201k|{
 3055|   201k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 201k, False: 0]
  ------------------
 3056|   201k|        auto it = read_while_classic_space(range);
 3057|   201k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   201k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.12k, False: 199k]
  |  |  ------------------
  ------------------
 3059|  2.12k|            return unexpected(e);
 3060|  2.12k|        }
 3061|       |
 3062|   199k|        return it;
 3063|   201k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   201k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   201k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   201k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   201k|        auto buf = make_contiguous_buffer(range);
 2220|   201k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   201k|        return ranges::next(range.begin(),
 2222|   201k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   201k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   400k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   400k|                  ranges::sized_range<Range>) {
 1785|   400k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   400k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   400k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   400k|    {
 1589|   400k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  11.0k|    {
  304|  11.0k|        ranges::advance(x, n);
  305|  11.0k|        return x;
  306|  11.0k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   255k|    {
  268|   255k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   255k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   255k|    {
  181|   469k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 213k, False: 255k]
  ------------------
  182|   213k|            ++i;
  183|   213k|        }
  184|   255k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|   127k|    {
 1686|   127k|        return m_storage.has_value();
 1687|   127k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  2.06k|    {
 1691|  2.06k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  2.06k|        return *m_storage;
 1693|  2.06k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  57.4k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  57.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  57.4k|            auto rd = make_reader<T, char_type>();
 6225|  57.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  57.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.00k, False: 55.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.00k|    }
  ------------------
 6226|       |
 6227|  55.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 55.4k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  55.4k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  55.4k|                return impl(rd, range, value);
 6230|  55.4k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  57.4k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5837|   240k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|   240k|                       std::is_same_v<T, std::wstring>) {
 5856|   240k|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|   240k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5231|   346k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|   148k|    {
 3145|   148k|        reader_error_handler eh{};
 3146|   148k|        get_derived().check_specs_impl(specs, eh);
 3147|   148k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.00k, False: 142k]
  |  |  ------------------
  ------------------
 3148|  6.00k|            return detail::unexpected_scan_error(
 3149|  6.00k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  6.00k|        }
 3151|   142k|        return {};
 3152|   148k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3156|   148k|    {
 3157|   148k|        return static_cast<Derived&>(*this);
 3158|   148k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5235|   148k|    {
 5236|   148k|        detail::check_string_type_specs(specs, eh);
 5237|       |
 5238|   148k|        SCN_GCC_PUSH
 5239|   148k|        SCN_GCC_IGNORE("-Wswitch")
 5240|   148k|        SCN_GCC_IGNORE("-Wswitch-default")
 5241|       |
 5242|   148k|        SCN_CLANG_PUSH
 5243|   148k|        SCN_CLANG_IGNORE("-Wswitch")
 5244|   148k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5245|       |
 5246|   148k|        switch (specs.type) {
  ------------------
  |  Branch (5246:17): [True: 0, False: 148k]
  ------------------
 5247|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5247:13): [True: 0, False: 148k]
  ------------------
 5248|      0|                m_type = reader_type::word;
 5249|      0|                break;
 5250|       |
 5251|   133k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5251:13): [True: 133k, False: 14.5k]
  ------------------
 5252|   133k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5252:21): [True: 0, False: 133k]
  ------------------
 5253|   133k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5253:21): [True: 0, False: 133k]
  ------------------
 5254|      0|                    m_type = reader_type::custom_word;
 5255|      0|                }
 5256|   133k|                else {
 5257|   133k|                    m_type = reader_type::word;
 5258|   133k|                }
 5259|   133k|                break;
 5260|      0|            }
 5261|       |
 5262|  6.00k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5262:13): [True: 6.00k, False: 142k]
  ------------------
 5263|  6.00k|                m_type = reader_type::character;
 5264|  6.00k|                break;
 5265|       |
 5266|  8.50k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5266:13): [True: 8.50k, False: 139k]
  ------------------
 5267|  8.50k|                m_type = reader_type::character_set;
 5268|  8.50k|                break;
 5269|       |
 5270|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5270:13): [True: 0, False: 148k]
  ------------------
 5271|      0|                m_type = reader_type::regex;
 5272|      0|                break;
 5273|       |
 5274|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5274:13): [True: 0, False: 148k]
  ------------------
 5275|      0|                m_type = reader_type::regex_escaped;
 5276|      0|                break;
 5277|   148k|        }
 5278|       |
 5279|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5280|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5281|   148k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6149|  55.4k|    {
 6150|  55.4k|        const bool need_skipped_width =
 6151|  55.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 55.4k]
  |  Branch (6151:33): [True: 0, False: 55.4k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  55.4k|        auto it = rng.begin();
 6155|  55.4k|        std::ptrdiff_t prefix_width = 0;
 6156|  55.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 55.4k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  55.4k|        else {
 6164|  55.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  55.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 988, False: 54.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    988|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    988|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    988|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    988|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    988|    }                                                  \
  |  |  |  | 3939|  55.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  54.4k|            std::tie(it, prefix_width) = prefix_result;
 6166|  54.4k|        }
 6167|  54.4k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  54.4k|        std::ptrdiff_t value_width = 0;
 6171|  54.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 54.4k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  54.4k|        else {
 6187|  54.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  54.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  54.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  54.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.01k, False: 51.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  3.01k|    }                                                  \
  |  | 3939|  54.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  54.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  51.4k|                                             specs, value, loc));
 6189|       |
 6190|  51.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 51.4k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  51.4k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  51.4k|        std::ptrdiff_t postfix_width = 0;
 6199|  51.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 50.8k, False: 590]
  ------------------
 6200|  50.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  50.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  50.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  50.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  50.8k|                                 value_width));
 6204|  50.8k|            std::tie(it, postfix_width) = postfix_result;
 6205|  50.8k|        }
 6206|       |
 6207|  51.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  51.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  51.4k|            specs, prefix_width, value_width, postfix_width));
 6209|  51.4k|        return it;
 6210|  51.4k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5284|   468k|    {
 5285|   468k|        return m_type == reader_type::word;
 5286|   468k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|   328k|{
 1242|   328k|    auto it = src.begin();
 1243|  2.31M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 1.99M, False: 319k]
  ------------------
 1244|  1.99M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  1.99M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 5.76k, False: 1.98M]
  ------------------
 1246|  5.76k|            return false;
 1247|  5.76k|        }
 1248|  1.98M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 710, False: 1.98M]
  ------------------
 1249|    710|            return false;
 1250|    710|        }
 1251|  1.98M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  1.98M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  1.98M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 2.68k, False: 1.98M]
  ------------------
 1254|  2.68k|            return false;
 1255|  2.68k|        }
 1256|  1.98M|        it += len;
 1257|  1.98M|    }
 1258|   319k|    return true;
 1259|   328k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|   125k|{
 3097|   125k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|   125k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3098:13): [True: 2.06k, False: 122k]
  ------------------
 3099|  2.06k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  2.06k|    static_cast<    \
  |  |  935|  2.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3100|  2.06k|        }
 3101|   122k|        else {
 3102|   122k|            dest.assign(source.view());
 3103|   122k|        }
 3104|       |    }
 3105|       |    else {
 3106|       |        return transcode_impl(source.view(), dest);
 3107|       |    }
 3108|       |
 3109|   125k|    return {};
 3110|   125k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5132|  8.50k|        {
 5133|  8.50k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5133:17): [True: 8.50k, False: 0]
  ------------------
 5134|  8.50k|                return {};
 5135|  8.50k|            }
 5136|       |
 5137|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5138|      0|            auto it = detail::to_address(charset_string.begin());
 5139|      0|            auto set = detail::parse_presentation_set(
 5140|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5141|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5142|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5143|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5144|       |
 5145|      0|            std::sort(nonascii.extra_ranges.begin(),
 5146|      0|                      nonascii.extra_ranges.end());
 5147|      0|            return {};
 5148|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5105|  18.3k|        {
 5106|  18.3k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5107|  18.3k|            const auto val =
 5108|  18.3k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5109|  18.3k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5110|  18.3k|                    (val % 8)) &
 5111|  18.3k|                   1u;
 5112|  18.3k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5156|  20.1k|        {
 5157|  20.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5157:17): [True: 1.78k, False: 18.3k]
  ------------------
 5158|  1.78k|                return false;
 5159|  1.78k|            }
 5160|       |
 5161|  18.3k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5162|  20.1k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5102|  8.50k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5302|  54.4k|    {
 5303|  54.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  54.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  54.4k|        return read_impl(range, specs, value);
 5305|  54.4k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5320|  54.4k|    {
 5321|  54.4k|        SCN_CLANG_PUSH
 5322|  54.4k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  54.4k|        switch (m_type) {
 5325|  51.6k|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 51.6k, False: 2.83k]
  ------------------
 5326|  51.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 54.4k]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 54.4k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|  2.83k|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 2.83k, False: 51.6k]
  ------------------
 5336|  2.83k|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|  2.83k|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 54.4k]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 0, False: 54.4k]
  ------------------
 5346|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      0|                    range,
 5348|      0|                    get_unescaped_regex_pattern(
 5349|      0|                        specs.charset_string<SourceCharT>()),
 5350|      0|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 54.4k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  54.4k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  54.4k|        }
 5357|       |
 5358|  54.4k|        SCN_CLANG_POP
 5359|  54.4k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4849|   126k|    {
 4850|   126k|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|   126k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4783|   126k|{
 4784|   126k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|   126k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|   126k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 2.72k, False: 124k]
  ------------------
 4788|  2.72k|        return detail::unexpected_scan_error(
 4789|  2.72k|            scan_error::invalid_scanned_value,
 4790|  2.72k|            "Invalid encoding in scanned string");
 4791|  2.72k|    }
 4792|       |
 4793|   124k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   124k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 124k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|   124k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   124k|    static_cast<    \
  |  |  935|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|   124k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   126k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   126k|    else {
 2196|   126k|        auto it = range.begin();
 2197|       |
 2198|   126k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|   126k|            auto seg = get_contiguous_beginning(range);
 2200|   126k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|   126k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 126k]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|   126k|            ranges::advance(it, seg.size());
 2205|   126k|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|   126k|            ranges::subrange{it, range.end()},
 2209|   126k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   126k|    }
 2211|   126k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   255k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   255k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   255k|        else {
 1055|   255k|            return r.begin().contiguous_segment();
 1056|   255k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   255k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   244k|{
 2160|   244k|    auto it = range.begin();
 2161|  1.30M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.29M, False: 4.19k]
  ------------------
 2162|  1.29M|        const auto val =
 2163|  1.29M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.29M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.27M, False: 18.6k]
  |  |  ------------------
  ------------------
 2165|  1.27M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.27M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.27M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 240k, False: 1.03M]
  ------------------
 2168|   240k|                return it;
 2169|   240k|            }
 2170|  1.27M|        }
 2171|  1.05M|        it = val.iterator;
 2172|  1.05M|    }
 2173|       |
 2174|  4.19k|    return it;
 2175|   244k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.29M|{
 1998|  1.29M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.29M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.29M|    auto it = range.begin();
 2002|  1.29M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.29M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.6k, False: 1.27M]
  |  |  ------------------
  ------------------
 2005|  18.6k|        ++it;
 2006|  18.6k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  18.6k|        return {it, {}};
 2008|  18.6k|    }
 2009|       |
 2010|  1.27M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.20M, False: 73.8k]
  ------------------
 2011|  1.20M|        ++it;
 2012|  1.20M|        return {it, string_type(1, *range.begin())};
 2013|  1.20M|    }
 2014|       |
 2015|  73.8k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  73.8k|    return {it, string_type{range.begin(), it}};
 2017|  1.27M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  18.6k|{
 1265|  18.6k|    auto it = input.begin();
 1266|  44.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 44.1k, False: 588]
  ------------------
 1267|  44.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 18.0k, False: 26.0k]
  ------------------
 1268|  18.0k|            break;
 1269|  18.0k|        }
 1270|  44.1k|    }
 1271|  18.6k|    return it;
 1272|  18.6k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  73.8k|    {
  283|  73.8k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  73.8k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  73.8k|    {
  252|  73.8k|        constexpr iter_difference_t<I> zero{0};
  253|  73.8k|        iter_difference_t<I> counter{0};
  254|       |
  255|   277k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 204k, False: 73.3k]
  |  Branch (255:30): [True: 203k, False: 492]
  ------------------
  256|   203k|            ++i;
  257|   203k|            ++counter;
  258|   203k|        }
  259|       |
  260|  73.8k|        return counter;
  261|  73.8k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.29M|    {
 1989|  1.29M|        return !codepoint.empty();
 1990|  1.29M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   126k|        : m_fptr([](storage fn,
  743|   126k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   126k|              cvref<T> obj = *get<T>(fn);
  745|   126k|              if constexpr (std::is_void_v<R>) {
  746|   126k|                  obj(static_cast<decltype(args)>(args)...);
  747|   126k|              }
  748|   126k|              else {
  749|   126k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   126k|              }
  751|   126k|          }),
  752|   126k|          m_storage(std::addressof(f))
  753|   126k|    {
  754|   126k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   795k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   795k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   795k|              else {
  749|   795k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   795k|              }
  751|   795k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   795k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   795k|        else if constexpr (std::is_object_v<T>) {
  688|   795k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   795k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|   795k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   126k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   126k|        {
  662|   126k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5077|  2.83k|    {
 5078|  2.83k|        auto it = read_source_impl(range, {specs});
 5079|  2.83k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.00k, False: 836]
  |  |  ------------------
  ------------------
 5080|  2.00k|            return unexpected(it.error());
 5081|  2.00k|        }
 5082|       |
 5083|    836|        return read_string_impl(range, *it, value);
 5084|  2.83k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5180|  2.83k|    {
 5181|  2.83k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|  2.83k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|  2.83k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.83k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.83k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|  2.83k|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|  2.83k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 0, False: 2.83k]
  ------------------
 5189|      0|            const auto cb = [&](char32_t cp) {
 5190|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|      0|            };
 5192|       |
 5193|      0|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 0, False: 0]
  ------------------
 5194|      0|                auto it = read_until_code_point(range, cb);
 5195|      0|                return check_nonempty(it, range);
 5196|      0|            }
 5197|      0|            auto it = read_while_code_point(range, cb);
 5198|      0|            return check_nonempty(it, range);
 5199|      0|        }
 5200|       |
 5201|  2.83k|        const auto cb = [&](SourceCharT ch) {
 5202|  2.83k|            return cb_wrapper.on_ascii_only(ch);
 5203|  2.83k|        };
 5204|       |
 5205|  2.83k|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 0, False: 2.83k]
  ------------------
 5206|      0|            auto it = read_until_code_unit(range, cb);
 5207|      0|            return check_nonempty(it, range);
 5208|      0|        }
 5209|  2.83k|        auto it = read_while_code_unit(range, cb);
 5210|  2.83k|        return check_nonempty(it, range);
 5211|  2.83k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5216|  2.83k|    {
 5217|  2.83k|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 2.00k, False: 836]
  ------------------
 5218|  2.00k|            return detail::unexpected_scan_error(
 5219|  2.00k|                scan_error::invalid_scanned_value,
 5220|  2.00k|                "No characters matched in [character set]");
 5221|  2.00k|        }
 5222|       |
 5223|    836|        return it;
 5224|  2.83k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   117k|{
 2181|   117k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   117k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.83k|        : m_fptr([](storage fn,
  743|  2.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.83k|              cvref<T> obj = *get<T>(fn);
  745|  2.83k|              if constexpr (std::is_void_v<R>) {
  746|  2.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.83k|              }
  748|  2.83k|              else {
  749|  2.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.83k|              }
  751|  2.83k|          }),
  752|  2.83k|          m_storage(std::addressof(f))
  753|  2.83k|    {
  754|  2.83k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  6.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.70k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.70k|              else {
  749|  6.70k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.70k|              }
  751|  6.70k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  6.70k|    {
  684|  6.70k|        if constexpr (std::is_const_v<T>) {
  685|  6.70k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.70k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5201|  6.70k|        const auto cb = [&](SourceCharT ch) {
 5202|  6.70k|            return cb_wrapper.on_ascii_only(ch);
 5203|  6.70k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.83k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.83k|        {
  667|  2.83k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4783|    836|{
 4784|    836|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    836|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    836|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 0, False: 836]
  ------------------
 4788|      0|        return detail::unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Invalid encoding in scanned string");
 4791|      0|    }
 4792|       |
 4793|    836|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 836]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    836|    return SCN_MOVE(result);
  ------------------
  |  |  934|    836|    static_cast<    \
  |  |  935|    836|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    836|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|  42.6k|    {
 5303|  42.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  42.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  42.6k|        return read_impl(range, specs, value);
 5305|  42.6k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|  42.6k|    {
 5321|  42.6k|        SCN_CLANG_PUSH
 5322|  42.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  42.6k|        switch (m_type) {
 5325|  39.8k|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 39.8k, False: 2.83k]
  ------------------
 5326|  39.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 42.6k]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 42.6k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|  2.83k|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 2.83k, False: 39.8k]
  ------------------
 5336|  2.83k|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|  2.83k|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 42.6k]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 0, False: 42.6k]
  ------------------
 5346|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      0|                    range,
 5348|      0|                    get_unescaped_regex_pattern(
 5349|      0|                        specs.charset_string<SourceCharT>()),
 5350|      0|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 42.6k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  42.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  42.6k|        }
 5357|       |
 5358|  42.6k|        SCN_CLANG_POP
 5359|  42.6k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|  99.5k|    {
 4850|  99.5k|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|  99.5k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|  99.5k|{
 4784|  99.5k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|  99.5k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|  99.5k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 3.22k, False: 96.2k]
  ------------------
 4788|  3.22k|        return detail::unexpected_scan_error(
 4789|  3.22k|            scan_error::invalid_scanned_value,
 4790|  3.22k|            "Invalid encoding in scanned string");
 4791|  3.22k|    }
 4792|       |
 4793|  96.2k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  96.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 96.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|  96.2k|    return SCN_MOVE(result);
  ------------------
  |  |  934|  96.2k|    static_cast<    \
  |  |  935|  96.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|  96.2k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|  97.1k|{
 3117|  97.1k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|  97.1k|        dest.assign(source.view());
 3119|       |    }
 3120|       |    else {
 3121|       |        return transcode_impl(source.view(), dest);
 3122|       |    }
 3123|       |
 3124|  97.1k|    return {};
 3125|  97.1k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|   199k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   199k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   199k|        auto buf = make_contiguous_buffer(range);
 2191|   199k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   199k|        return ranges::next(range.begin(),
 2193|   199k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   199k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|  2.83k|    {
 5078|  2.83k|        auto it = read_source_impl(range, {specs});
 5079|  2.83k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.00k, False: 836]
  |  |  ------------------
  ------------------
 5080|  2.00k|            return unexpected(it.error());
 5081|  2.00k|        }
 5082|       |
 5083|    836|        return read_string_impl(range, *it, value);
 5084|  2.83k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5180|  5.67k|    {
 5181|  5.67k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|  5.67k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|  5.67k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  5.67k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 5.67k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|  5.67k|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|  5.67k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 0, False: 5.67k]
  ------------------
 5189|      0|            const auto cb = [&](char32_t cp) {
 5190|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|      0|            };
 5192|       |
 5193|      0|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 0, False: 0]
  ------------------
 5194|      0|                auto it = read_until_code_point(range, cb);
 5195|      0|                return check_nonempty(it, range);
 5196|      0|            }
 5197|      0|            auto it = read_while_code_point(range, cb);
 5198|      0|            return check_nonempty(it, range);
 5199|      0|        }
 5200|       |
 5201|  5.67k|        const auto cb = [&](SourceCharT ch) {
 5202|  5.67k|            return cb_wrapper.on_ascii_only(ch);
 5203|  5.67k|        };
 5204|       |
 5205|  5.67k|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 0, False: 5.67k]
  ------------------
 5206|      0|            auto it = read_until_code_unit(range, cb);
 5207|      0|            return check_nonempty(it, range);
 5208|      0|        }
 5209|  5.67k|        auto it = read_while_code_unit(range, cb);
 5210|  5.67k|        return check_nonempty(it, range);
 5211|  5.67k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5216|  5.67k|    {
 5217|  5.67k|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 4.00k, False: 1.67k]
  ------------------
 5218|  4.00k|            return detail::unexpected_scan_error(
 5219|  4.00k|                scan_error::invalid_scanned_value,
 5220|  4.00k|                "No characters matched in [character set]");
 5221|  4.00k|        }
 5222|       |
 5223|  1.67k|        return it;
 5224|  5.67k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  5.67k|        : m_fptr([](storage fn,
  743|  5.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.67k|              cvref<T> obj = *get<T>(fn);
  745|  5.67k|              if constexpr (std::is_void_v<R>) {
  746|  5.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.67k|              }
  748|  5.67k|              else {
  749|  5.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.67k|              }
  751|  5.67k|          }),
  752|  5.67k|          m_storage(std::addressof(f))
  753|  5.67k|    {
  754|  5.67k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  13.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.4k|              else {
  749|  13.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.4k|              }
  751|  13.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  13.4k|    {
  684|  13.4k|        if constexpr (std::is_const_v<T>) {
  685|  13.4k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.4k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5201|  13.4k|        const auto cb = [&](SourceCharT ch) {
 5202|  13.4k|            return cb_wrapper.on_ascii_only(ch);
 5203|  13.4k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  5.67k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  5.67k|        {
  667|  5.67k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    836|{
 4784|    836|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    836|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    836|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 0, False: 836]
  ------------------
 4788|      0|        return detail::unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Invalid encoding in scanned string");
 4791|      0|    }
 4792|       |
 4793|    836|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    836|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 836]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    836|    return SCN_MOVE(result);
  ------------------
  |  |  934|    836|    static_cast<    \
  |  |  935|    836|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    836|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5837|   106k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|   106k|                       std::is_same_v<T, std::wstring_view>) {
 5852|   106k|        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|       |                       std::is_same_v<T, std::wstring>) {
 5856|       |        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|   106k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5302|  42.6k|    {
 5303|  42.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  42.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  42.6k|        return read_impl(range, specs, value);
 5305|  42.6k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5320|  42.6k|    {
 5321|  42.6k|        SCN_CLANG_PUSH
 5322|  42.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|  42.6k|        switch (m_type) {
 5325|  39.8k|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 39.8k, False: 2.83k]
  ------------------
 5326|  39.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 42.6k]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 42.6k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|  2.83k|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 2.83k, False: 39.8k]
  ------------------
 5336|  2.83k|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|  2.83k|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 42.6k]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 0, False: 42.6k]
  ------------------
 5346|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      0|                    range,
 5348|      0|                    get_unescaped_regex_pattern(
 5349|      0|                        specs.charset_string<SourceCharT>()),
 5350|      0|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 42.6k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|  42.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|  42.6k|        }
 5357|       |
 5358|  42.6k|        SCN_CLANG_POP
 5359|  42.6k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4856|  99.5k|    {
 4857|  99.5k|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|  99.5k|                                     value);
 4859|  99.5k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4802|  99.5k|{
 4803|  99.5k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|  99.5k|    auto src = [&]() {
 4806|  99.5k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|  99.5k|            return make_contiguous_buffer(
 4808|  99.5k|                ranges::subrange{range.begin().base(), result.base()});
 4809|  99.5k|        }
 4810|  99.5k|        else {
 4811|  99.5k|            return make_contiguous_buffer(
 4812|  99.5k|                ranges::subrange{range.begin(), result});
 4813|  99.5k|        }
 4814|  99.5k|    }();
 4815|  99.5k|    using src_type = decltype(src);
 4816|       |
 4817|  99.5k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|  99.5k|    else {
 4830|  99.5k|        const auto view = src.view();
 4831|  99.5k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|  99.5k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 3.22k, False: 96.2k]
  ------------------
 4834|  3.22k|            return detail::unexpected_scan_error(
 4835|  3.22k|                scan_error::invalid_scanned_value,
 4836|  3.22k|                "Invalid encoding in scanned string_view");
 4837|  3.22k|        }
 4838|       |
 4839|  96.2k|        return SCN_MOVE(result);
  ------------------
  |  |  934|  96.2k|    static_cast<    \
  |  |  935|  96.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|  99.5k|    }
 4841|  99.5k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4805|  99.5k|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|  99.5k|        else {
 4811|  99.5k|            return make_contiguous_buffer(
 4812|  99.5k|                ranges::subrange{range.begin(), result});
 4813|  99.5k|        }
 4814|  99.5k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5091|  2.83k|    {
 5092|  2.83k|        auto it = read_source_impl(range, {specs});
 5093|  2.83k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.00k, False: 836]
  |  |  ------------------
  ------------------
 5094|  2.00k|            return unexpected(it.error());
 5095|  2.00k|        }
 5096|       |
 5097|    836|        return read_string_view_impl(range, *it, value);
 5098|  2.83k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4802|    836|{
 4803|    836|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    836|    auto src = [&]() {
 4806|    836|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    836|            return make_contiguous_buffer(
 4808|    836|                ranges::subrange{range.begin().base(), result.base()});
 4809|    836|        }
 4810|    836|        else {
 4811|    836|            return make_contiguous_buffer(
 4812|    836|                ranges::subrange{range.begin(), result});
 4813|    836|        }
 4814|    836|    }();
 4815|    836|    using src_type = decltype(src);
 4816|       |
 4817|    836|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    836|    else {
 4830|    836|        const auto view = src.view();
 4831|    836|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    836|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 0, False: 836]
  ------------------
 4834|      0|            return detail::unexpected_scan_error(
 4835|      0|                scan_error::invalid_scanned_value,
 4836|      0|                "Invalid encoding in scanned string_view");
 4837|      0|        }
 4838|       |
 4839|    836|        return SCN_MOVE(result);
  ------------------
  |  |  934|    836|    static_cast<    \
  |  |  935|    836|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    836|    }
 4841|    836|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4805|    836|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|    836|        else {
 4811|    836|            return make_contiguous_buffer(
 4812|    836|                ranges::subrange{range.begin(), result});
 4813|    836|        }
 4814|    836|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|   128k|{
 3055|   128k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 128k, False: 0]
  ------------------
 3056|   128k|        auto it = read_while_classic_space(range);
 3057|   128k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   128k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.43k, False: 126k]
  |  |  ------------------
  ------------------
 3059|  1.43k|            return unexpected(e);
 3060|  1.43k|        }
 3061|       |
 3062|   126k|        return it;
 3063|   128k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   128k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   128k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   128k|    else {
 2225|   128k|        auto it = range.begin();
 2226|       |
 2227|   128k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   128k|            auto seg = get_contiguous_beginning(range);
 2229|   128k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   128k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 11.0k, False: 117k]
  ------------------
 2231|  11.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  11.0k|            }
 2233|   117k|            ranges::advance(it, seg.size());
 2234|   117k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   128k|            return detail::is_cp_space(cp);
 2238|   128k|        });
 2239|   128k|    }
 2240|   128k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   117k|        : m_fptr([](storage fn,
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|   117k|              if constexpr (std::is_void_v<R>) {
  746|   117k|                  obj(static_cast<decltype(args)>(args)...);
  747|   117k|              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
  752|   117k|          m_storage(std::addressof(f))
  753|   117k|    {
  754|   117k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   482k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   482k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   482k|              else {
  749|   482k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   482k|              }
  751|   482k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   482k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   482k|        else if constexpr (std::is_object_v<T>) {
  688|   482k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   482k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   482k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   482k|            return detail::is_cp_space(cp);
 2238|   482k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   117k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   117k|        {
  662|   117k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   794k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   794k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   794k|        auto beg = r.begin();
  991|   794k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 794k, False: 0]
  ------------------
  992|   794k|            return false;
  993|   794k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   794k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  26.5k|    {
  763|  26.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  26.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  26.5k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  12.3k|        : m_fptr([](storage fn,
  743|  12.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.3k|              cvref<T> obj = *get<T>(fn);
  745|  12.3k|              if constexpr (std::is_void_v<R>) {
  746|  12.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.3k|              }
  748|  12.3k|              else {
  749|  12.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.3k|              }
  751|  12.3k|          }),
  752|  12.3k|          m_storage(std::addressof(f))
  753|  12.3k|    {
  754|  12.3k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  13.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.2k|              else {
  749|  13.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.2k|              }
  751|  13.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  13.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  13.2k|        else if constexpr (std::is_object_v<T>) {
  688|  13.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.2k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  12.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  12.3k|        {
  662|  12.3k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6062|   320k|    {
 6063|   320k|        const bool need_skipped_width =
 6064|   320k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 320k]
  |  Branch (6064:33): [True: 0, False: 320k]
  ------------------
 6065|   320k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   320k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 320k]
  ------------------
 6069|   320k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 320k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   320k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 320k, False: 0]
  |  Branch (6073:56): [True: 316k, False: 4.12k]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   316k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 316k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   631k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.08k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.08k|    }                                                  \
  |  |  |  | 3939|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   631k|                            make_eof_scan_error));
 6084|       |
 6085|   631k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 314k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   314k|            return result_type{it, 0};
 6093|   631k|        }
 6094|       |
 6095|  4.12k|        return result_type{rng.begin(), 0};
 6096|   320k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  4.12k|{
 2075|  4.12k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  4.12k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  4.12k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  4.12k|    else {
 2060|  4.12k|        auto first = range.begin();
 2061|  4.49k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 4.42k, False: 68]
  ------------------
 2062|  4.42k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 4.05k, False: 370]
  ------------------
 2063|  4.05k|                return first;
 2064|  4.05k|            }
 2065|  4.42k|        }
 2066|     68|        return first;
 2067|  4.12k|    }
 2068|  4.12k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   312k|    {
  108|   312k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   312k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   312k|    {
   94|   312k|        iter_difference_t<I> counter{0};
   95|  9.93M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 9.61M, False: 312k]
  ------------------
   96|  9.61M|            ++i;
   97|  9.61M|            ++counter;
   98|  9.61M|        }
   99|   312k|        return counter;
  100|   312k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.26M|{
  951|  1.26M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.72k, False: 1.26M]
  |  |  ------------------
  ------------------
  952|  2.72k|        return eof_error::eof;
  953|  2.72k|    }
  954|  1.26M|    return eof_error::good;
  955|  1.26M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  27.2M|{
  945|  27.2M|    return is_range_eof(r.begin(), r.end());
  946|  27.2M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  27.2M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  27.2M|    {
  938|  27.2M|        return begin == end;
  939|  27.2M|    }
  940|  27.2M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|   787k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   787k|    else {
 1788|   787k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   787k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   787k|    }
 1790|   787k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   787k|    {
 1636|   787k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   787k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   787k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   787k|    {
 1720|   787k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   787k|                           ranges::common_range<Range>) {
 1737|   787k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   787k|            auto end_seg = range.end().contiguous_segment();
 1739|   787k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   787k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.00k, False: 783k]
  |  |  ------------------
  ------------------
 1740|   787k|                             detail::to_address(end_seg.end()))) {
 1741|  4.00k|                auto& str = m_storage.emplace();
 1742|  4.00k|                str.reserve(range.end().position() - range.begin().position());
 1743|  4.00k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  4.00k|                m_view = string_view_type{str};
 1745|  4.00k|                return;
 1746|  4.00k|            }
 1747|       |
 1748|   783k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   783k|                                                            end_seg.data());
 1750|   783k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   787k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  1.56M|    {
 1681|  1.56M|        return m_view;
 1682|  1.56M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|   787k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6104|   311k|    {
 6105|   311k|        const bool need_skipped_width =
 6106|   311k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 311k]
  |  Branch (6106:33): [True: 0, False: 311k]
  ------------------
 6107|   311k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   311k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 311k]
  ------------------
 6110|   311k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 311k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   311k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 311k, False: 0]
  ------------------
 6119|   311k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 90, False: 311k]
  ------------------
 6120|   311k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 90]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|     90|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 90]
  ------------------
 6122|     90|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   311k|        return result_type{rng.begin(), 0};
 6144|   311k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  51.9M|{
 1998|  51.9M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  51.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  51.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  51.9M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  51.9M|    auto it = range.begin();
 2002|  51.9M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  51.9M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  51.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 51.9M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  51.9M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 51.9M, False: 0]
  ------------------
 2011|  51.9M|        ++it;
 2012|  51.9M|        return {it, string_type(1, *range.begin())};
 2013|  51.9M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  51.9M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  54.4M|{
  945|  54.4M|    return is_range_eof(r.begin(), r.end());
  946|  54.4M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  54.4M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  54.4M|    {
  938|  54.4M|        return begin == end;
  939|  54.4M|    }
  940|  54.4M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  51.9M|    {
 1989|  51.9M|        return !codepoint.empty();
 1990|  51.9M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.52M|{
  951|  2.52M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.44k, False: 2.52M]
  |  |  ------------------
  ------------------
  952|  5.44k|        return eof_error::eof;
  953|  5.44k|    }
  954|  2.52M|    return eof_error::good;
  955|  2.52M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  1.57M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.57M|                  ranges::sized_range<Range>) {
 1785|  1.57M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.57M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.57M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.57M|    {
 1589|  1.57M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  2.35M|    {
 1602|  2.35M|        return sv;
 1603|  2.35M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  8.24k|{
 2075|  8.24k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  8.24k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  8.24k|{
 2056|  8.24k|    if constexpr (ranges::common_range<Range>) {
 2057|  8.24k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  8.24k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|  1.57M|{
 3055|  1.57M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 1.57M, False: 0]
  ------------------
 3056|  1.57M|        auto it = read_while_classic_space(range);
 3057|  1.57M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|  1.57M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.71k, False: 1.57M]
  |  |  ------------------
  ------------------
 3059|  2.71k|            return unexpected(e);
 3060|  2.71k|        }
 3061|       |
 3062|  1.57M|        return it;
 3063|  1.57M|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|  1.57M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  1.57M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.57M|    else {
 2225|  1.57M|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.57M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.57M|            return detail::is_cp_space(cp);
 2238|  1.57M|        });
 2239|  1.57M|    }
 2240|  1.57M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  1.57M|{
 2181|  1.57M|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.57M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  3.15M|{
 2160|  3.15M|    auto it = range.begin();
 2161|  51.9M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 51.9M, False: 14.2k]
  ------------------
 2162|  51.9M|        const auto val =
 2163|  51.9M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  51.9M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  51.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 51.9M, False: 0]
  |  |  ------------------
  ------------------
 2165|  51.9M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  51.9M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  51.9M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 3.13M, False: 48.8M]
  ------------------
 2168|  3.13M|                return it;
 2169|  3.13M|            }
 2170|  51.9M|        }
 2171|  48.8M|        it = val.iterator;
 2172|  48.8M|    }
 2173|       |
 2174|  14.2k|    return it;
 2175|  3.15M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.57M|        : m_fptr([](storage fn,
  743|  1.57M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.57M|              cvref<T> obj = *get<T>(fn);
  745|  1.57M|              if constexpr (std::is_void_v<R>) {
  746|  1.57M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.57M|              }
  748|  1.57M|              else {
  749|  1.57M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.57M|              }
  751|  1.57M|          }),
  752|  1.57M|          m_storage(std::addressof(f))
  753|  1.57M|    {
  754|  1.57M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.61M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.61M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.61M|              else {
  749|  3.61M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.61M|              }
  751|  3.61M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.61M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.61M|        else if constexpr (std::is_object_v<T>) {
  688|  3.61M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.61M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  3.61M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  3.61M|            return detail::is_cp_space(cp);
 2238|  3.61M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.57M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.57M|        {
  662|  1.57M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   781k|    {
 1686|   781k|        return m_storage.has_value();
 1687|   781k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|  1.36k|    {
 1691|  1.36k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.36k|        return *m_storage;
 1693|  1.36k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5231|  2.39M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|   972k|    {
 3145|   972k|        reader_error_handler eh{};
 3146|   972k|        get_derived().check_specs_impl(specs, eh);
 3147|   972k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   972k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 960k]
  |  |  ------------------
  ------------------
 3148|  12.0k|            return detail::unexpected_scan_error(
 3149|  12.0k|                scan_error::invalid_format_string, eh.m_msg);
 3150|  12.0k|        }
 3151|   960k|        return {};
 3152|   972k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3156|   972k|    {
 3157|   972k|        return static_cast<Derived&>(*this);
 3158|   972k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5235|   972k|    {
 5236|   972k|        detail::check_string_type_specs(specs, eh);
 5237|       |
 5238|   972k|        SCN_GCC_PUSH
 5239|   972k|        SCN_GCC_IGNORE("-Wswitch")
 5240|   972k|        SCN_GCC_IGNORE("-Wswitch-default")
 5241|       |
 5242|   972k|        SCN_CLANG_PUSH
 5243|   972k|        SCN_CLANG_IGNORE("-Wswitch")
 5244|   972k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5245|       |
 5246|   972k|        switch (specs.type) {
  ------------------
  |  Branch (5246:17): [True: 0, False: 972k]
  ------------------
 5247|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5247:13): [True: 0, False: 972k]
  ------------------
 5248|      0|                m_type = reader_type::word;
 5249|      0|                break;
 5250|       |
 5251|   948k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5251:13): [True: 948k, False: 24.3k]
  ------------------
 5252|   948k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5252:21): [True: 0, False: 948k]
  ------------------
 5253|   948k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5253:21): [True: 0, False: 948k]
  ------------------
 5254|      0|                    m_type = reader_type::custom_word;
 5255|      0|                }
 5256|   948k|                else {
 5257|   948k|                    m_type = reader_type::word;
 5258|   948k|                }
 5259|   948k|                break;
 5260|      0|            }
 5261|       |
 5262|  12.0k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5262:13): [True: 12.0k, False: 960k]
  ------------------
 5263|  12.0k|                m_type = reader_type::character;
 5264|  12.0k|                break;
 5265|       |
 5266|  12.3k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5266:13): [True: 12.3k, False: 960k]
  ------------------
 5267|  12.3k|                m_type = reader_type::character_set;
 5268|  12.3k|                break;
 5269|       |
 5270|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5270:13): [True: 0, False: 972k]
  ------------------
 5271|      0|                m_type = reader_type::regex;
 5272|      0|                break;
 5273|       |
 5274|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5274:13): [True: 0, False: 972k]
  ------------------
 5275|      0|                m_type = reader_type::regex_escaped;
 5276|      0|                break;
 5277|   972k|        }
 5278|       |
 5279|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5280|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5281|   972k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5284|  3.31M|    {
 5285|  3.31M|        return m_type == reader_type::word;
 5286|  3.31M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  2.36M|{
 1242|  2.36M|    auto it = src.begin();
 1243|  71.4M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 69.1M, False: 2.34M]
  ------------------
 1244|  69.1M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  69.1M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 69.1M]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  69.1M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 69.1M]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  69.1M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  69.1M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  69.1M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 21.8k, False: 69.1M]
  ------------------
 1254|  21.8k|            return false;
 1255|  21.8k|        }
 1256|  69.1M|        it += len;
 1257|  69.1M|    }
 1258|  2.34M|    return true;
 1259|  2.36M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5132|  12.3k|        {
 5133|  12.3k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5133:17): [True: 12.3k, False: 0]
  ------------------
 5134|  12.3k|                return {};
 5135|  12.3k|            }
 5136|       |
 5137|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5138|      0|            auto it = detail::to_address(charset_string.begin());
 5139|      0|            auto set = detail::parse_presentation_set(
 5140|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5141|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5142|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5143|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5144|       |
 5145|      0|            std::sort(nonascii.extra_ranges.begin(),
 5146|      0|                      nonascii.extra_ranges.end());
 5147|      0|            return {};
 5148|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5105|  7.68k|        {
 5106|  7.68k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  7.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5107|  7.68k|            const auto val =
 5108|  7.68k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5109|  7.68k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5110|  7.68k|                    (val % 8)) &
 5111|  7.68k|                   1u;
 5112|  7.68k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5156|  13.2k|        {
 5157|  13.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5157:17): [True: 5.59k, False: 7.68k]
  ------------------
 5158|  5.59k|                return false;
 5159|  5.59k|            }
 5160|       |
 5161|  7.68k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5162|  13.2k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5102|  12.3k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   787k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   787k|    else {
 2196|   787k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   787k|        return read_until_code_point(
 2208|   787k|            ranges::subrange{it, range.end()},
 2209|   787k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   787k|    }
 2211|   787k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.57M|{
 2160|  1.57M|    auto it = range.begin();
 2161|  25.9M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 25.9M, False: 7.12k]
  ------------------
 2162|  25.9M|        const auto val =
 2163|  25.9M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  25.9M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  25.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 25.9M, False: 0]
  |  |  ------------------
  ------------------
 2165|  25.9M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  25.9M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  25.9M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.56M, False: 24.4M]
  ------------------
 2168|  1.56M|                return it;
 2169|  1.56M|            }
 2170|  25.9M|        }
 2171|  24.4M|        it = val.iterator;
 2172|  24.4M|    }
 2173|       |
 2174|  7.12k|    return it;
 2175|  1.57M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  25.9M|{
 1998|  25.9M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  25.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  25.9M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  25.9M|    auto it = range.begin();
 2002|  25.9M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  25.9M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  25.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 25.9M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  25.9M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 25.9M, False: 0]
  ------------------
 2011|  25.9M|        ++it;
 2012|  25.9M|        return {it, string_type(1, *range.begin())};
 2013|  25.9M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  25.9M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  25.9M|    {
 1989|  25.9M|        return !codepoint.empty();
 1990|  25.9M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   787k|        : m_fptr([](storage fn,
  743|   787k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   787k|              cvref<T> obj = *get<T>(fn);
  745|   787k|              if constexpr (std::is_void_v<R>) {
  746|   787k|                  obj(static_cast<decltype(args)>(args)...);
  747|   787k|              }
  748|   787k|              else {
  749|   787k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   787k|              }
  751|   787k|          }),
  752|   787k|          m_storage(std::addressof(f))
  753|   787k|    {
  754|   787k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  24.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  24.1M|              else {
  749|  24.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.1M|              }
  751|  24.1M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  24.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  24.1M|        else if constexpr (std::is_object_v<T>) {
  688|  24.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  24.1M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|  24.1M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   787k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   787k|        {
  662|   787k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5180|  4.12k|    {
 5181|  4.12k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|  4.12k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|  4.12k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  4.12k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.12k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|  4.12k|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|  4.12k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 0, False: 4.12k]
  ------------------
 5189|      0|            const auto cb = [&](char32_t cp) {
 5190|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|      0|            };
 5192|       |
 5193|      0|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 0, False: 0]
  ------------------
 5194|      0|                auto it = read_until_code_point(range, cb);
 5195|      0|                return check_nonempty(it, range);
 5196|      0|            }
 5197|      0|            auto it = read_while_code_point(range, cb);
 5198|      0|            return check_nonempty(it, range);
 5199|      0|        }
 5200|       |
 5201|  4.12k|        const auto cb = [&](SourceCharT ch) {
 5202|  4.12k|            return cb_wrapper.on_ascii_only(ch);
 5203|  4.12k|        };
 5204|       |
 5205|  4.12k|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 0, False: 4.12k]
  ------------------
 5206|      0|            auto it = read_until_code_unit(range, cb);
 5207|      0|            return check_nonempty(it, range);
 5208|      0|        }
 5209|  4.12k|        auto it = read_while_code_unit(range, cb);
 5210|  4.12k|        return check_nonempty(it, range);
 5211|  4.12k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5216|  4.12k|    {
 5217|  4.12k|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 4.00k, False: 124]
  ------------------
 5218|  4.00k|            return detail::unexpected_scan_error(
 5219|  4.00k|                scan_error::invalid_scanned_value,
 5220|  4.00k|                "No characters matched in [character set]");
 5221|  4.00k|        }
 5222|       |
 5223|    124|        return it;
 5224|  4.12k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   788k|{
 2181|   788k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   788k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  4.12k|        : m_fptr([](storage fn,
  743|  4.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.12k|              cvref<T> obj = *get<T>(fn);
  745|  4.12k|              if constexpr (std::is_void_v<R>) {
  746|  4.12k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.12k|              }
  748|  4.12k|              else {
  749|  4.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.12k|              }
  751|  4.12k|          }),
  752|  4.12k|          m_storage(std::addressof(f))
  753|  4.12k|    {
  754|  4.12k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  4.42k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.42k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.42k|              else {
  749|  4.42k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.42k|              }
  751|  4.42k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.42k|    {
  684|  4.42k|        if constexpr (std::is_const_v<T>) {
  685|  4.42k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.42k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5201|  4.42k|        const auto cb = [&](SourceCharT ch) {
 5202|  4.42k|            return cb_wrapper.on_ascii_only(ch);
 5203|  4.42k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  4.12k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.12k|        {
  667|  4.12k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  1.57M|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  1.57M|    else {
 2196|  1.57M|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  1.57M|        return read_until_code_point(
 2208|  1.57M|            ranges::subrange{it, range.end()},
 2209|  1.57M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  1.57M|    }
 2211|  1.57M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.57M|        : m_fptr([](storage fn,
  743|  1.57M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.57M|              cvref<T> obj = *get<T>(fn);
  745|  1.57M|              if constexpr (std::is_void_v<R>) {
  746|  1.57M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.57M|              }
  748|  1.57M|              else {
  749|  1.57M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.57M|              }
  751|  1.57M|          }),
  752|  1.57M|          m_storage(std::addressof(f))
  753|  1.57M|    {
  754|  1.57M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  48.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.3M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.3M|              else {
  749|  48.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.3M|              }
  751|  48.3M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  48.3M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.3M|        else if constexpr (std::is_object_v<T>) {
  688|  48.3M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.3M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  48.3M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.57M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.57M|        {
  662|  1.57M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5180|  8.24k|    {
 5181|  8.24k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5182|  8.24k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5183|       |
 5184|  8.24k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  8.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  8.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 8.24k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5185|       |
 5186|  8.24k|        read_source_callback cb_wrapper{helper};
 5187|       |
 5188|  8.24k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5188:13): [True: 0, False: 8.24k]
  ------------------
 5189|      0|            const auto cb = [&](char32_t cp) {
 5190|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5191|      0|            };
 5192|       |
 5193|      0|            if (is_inverted) {
  ------------------
  |  Branch (5193:17): [True: 0, False: 0]
  ------------------
 5194|      0|                auto it = read_until_code_point(range, cb);
 5195|      0|                return check_nonempty(it, range);
 5196|      0|            }
 5197|      0|            auto it = read_while_code_point(range, cb);
 5198|      0|            return check_nonempty(it, range);
 5199|      0|        }
 5200|       |
 5201|  8.24k|        const auto cb = [&](SourceCharT ch) {
 5202|  8.24k|            return cb_wrapper.on_ascii_only(ch);
 5203|  8.24k|        };
 5204|       |
 5205|  8.24k|        if (is_inverted) {
  ------------------
  |  Branch (5205:13): [True: 0, False: 8.24k]
  ------------------
 5206|      0|            auto it = read_until_code_unit(range, cb);
 5207|      0|            return check_nonempty(it, range);
 5208|      0|        }
 5209|  8.24k|        auto it = read_while_code_unit(range, cb);
 5210|  8.24k|        return check_nonempty(it, range);
 5211|  8.24k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5216|  8.24k|    {
 5217|  8.24k|        if (it == range.begin()) {
  ------------------
  |  Branch (5217:13): [True: 8.00k, False: 248]
  ------------------
 5218|  8.00k|            return detail::unexpected_scan_error(
 5219|  8.00k|                scan_error::invalid_scanned_value,
 5220|  8.00k|                "No characters matched in [character set]");
 5221|  8.00k|        }
 5222|       |
 5223|    248|        return it;
 5224|  8.24k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  8.24k|        : m_fptr([](storage fn,
  743|  8.24k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.24k|              cvref<T> obj = *get<T>(fn);
  745|  8.24k|              if constexpr (std::is_void_v<R>) {
  746|  8.24k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.24k|              }
  748|  8.24k|              else {
  749|  8.24k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.24k|              }
  751|  8.24k|          }),
  752|  8.24k|          m_storage(std::addressof(f))
  753|  8.24k|    {
  754|  8.24k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  8.85k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.85k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.85k|              else {
  749|  8.85k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.85k|              }
  751|  8.85k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  8.85k|    {
  684|  8.85k|        if constexpr (std::is_const_v<T>) {
  685|  8.85k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.85k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5201|  8.85k|        const auto cb = [&](SourceCharT ch) {
 5202|  8.85k|            return cb_wrapper.on_ascii_only(ch);
 5203|  8.85k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  8.24k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  8.24k|        {
  667|  8.24k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|   324k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|   324k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|   324k|            auto rd = make_reader<T, char_type>();
 6225|   324k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   324k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.00k, False: 320k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.00k|    }
  ------------------
 6226|       |
 6227|   320k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 320k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|   320k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|   320k|                return impl(rd, range, value);
 6230|   320k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   324k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5837|  1.59M|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|       |                       std::is_same_v<T, std::wstring_view>) {
 5852|       |        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|  1.59M|                       std::is_same_v<T, std::wstring>) {
 5856|  1.59M|        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|  1.59M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6149|   320k|    {
 6150|   320k|        const bool need_skipped_width =
 6151|   320k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 320k]
  |  Branch (6151:33): [True: 0, False: 320k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   320k|        auto it = rng.begin();
 6155|   320k|        std::ptrdiff_t prefix_width = 0;
 6156|   320k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 320k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   320k|        else {
 6164|   320k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.08k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.08k|    }                                                  \
  |  |  |  | 3939|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   319k|            std::tie(it, prefix_width) = prefix_result;
 6166|   319k|        }
 6167|   319k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   319k|        std::ptrdiff_t value_width = 0;
 6171|   319k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 319k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   319k|        else {
 6187|   319k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.91k, False: 312k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.91k|    }                                                  \
  |  | 3939|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   312k|                                             specs, value, loc));
 6189|       |
 6190|   312k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 312k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   312k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   312k|        std::ptrdiff_t postfix_width = 0;
 6199|   312k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 311k, False: 942]
  ------------------
 6200|   311k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   311k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   311k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   311k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   311k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   311k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   311k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   311k|                                 value_width));
 6204|   311k|            std::tie(it, postfix_width) = postfix_result;
 6205|   311k|        }
 6206|       |
 6207|   312k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   312k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 312k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   312k|            specs, prefix_width, value_width, postfix_width));
 6209|   312k|        return it;
 6210|   312k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3096|   780k|{
 3097|   780k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3098|   780k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3098:13): [True: 1.36k, False: 778k]
  ------------------
 3099|  1.36k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  1.36k|    static_cast<    \
  |  |  935|  1.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3100|  1.36k|        }
 3101|   778k|        else {
 3102|   778k|            dest.assign(source.view());
 3103|   778k|        }
 3104|       |    }
 3105|       |    else {
 3106|       |        return transcode_impl(source.view(), dest);
 3107|       |    }
 3108|       |
 3109|   780k|    return {};
 3110|   780k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5302|   319k|    {
 5303|   319k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   319k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   319k|        return read_impl(range, specs, value);
 5305|   319k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5320|   319k|    {
 5321|   319k|        SCN_CLANG_PUSH
 5322|   319k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|   319k|        switch (m_type) {
 5325|   314k|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 314k, False: 4.12k]
  ------------------
 5326|   314k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 319k]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 319k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|  4.12k|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 4.12k, False: 314k]
  ------------------
 5336|  4.12k|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|  4.12k|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 319k]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 0, False: 319k]
  ------------------
 5346|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      0|                    range,
 5348|      0|                    get_unescaped_regex_pattern(
 5349|      0|                        specs.charset_string<SourceCharT>()),
 5350|      0|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 319k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|   319k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|   319k|        }
 5357|       |
 5358|   319k|        SCN_CLANG_POP
 5359|   319k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4849|   787k|    {
 4850|   787k|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|   787k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4783|   787k|{
 4784|   787k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|   787k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|   787k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 7.28k, False: 780k]
  ------------------
 4788|  7.28k|        return detail::unexpected_scan_error(
 4789|  7.28k|            scan_error::invalid_scanned_value,
 4790|  7.28k|            "Invalid encoding in scanned string");
 4791|  7.28k|    }
 4792|       |
 4793|   780k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   780k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 780k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|   780k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   780k|    static_cast<    \
  |  |  935|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|   780k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5077|  4.12k|    {
 5078|  4.12k|        auto it = read_source_impl(range, {specs});
 5079|  4.12k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  4.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.00k, False: 124]
  |  |  ------------------
  ------------------
 5080|  4.00k|            return unexpected(it.error());
 5081|  4.00k|        }
 5082|       |
 5083|    124|        return read_string_impl(range, *it, value);
 5084|  4.12k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4783|    124|{
 4784|    124|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    124|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    124|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 0, False: 124]
  ------------------
 4788|      0|        return detail::unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Invalid encoding in scanned string");
 4791|      0|    }
 4792|       |
 4793|    124|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    124|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 124]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    124|    return SCN_MOVE(result);
  ------------------
  |  |  934|    124|    static_cast<    \
  |  |  935|    124|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    124|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5302|   319k|    {
 5303|   319k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   319k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   319k|        return read_impl(range, specs, value);
 5305|   319k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5320|   319k|    {
 5321|   319k|        SCN_CLANG_PUSH
 5322|   319k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|   319k|        switch (m_type) {
 5325|   314k|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 314k, False: 4.12k]
  ------------------
 5326|   314k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 319k]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 319k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|  4.12k|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 4.12k, False: 314k]
  ------------------
 5336|  4.12k|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|  4.12k|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 319k]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 0, False: 319k]
  ------------------
 5346|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      0|                    range,
 5348|      0|                    get_unescaped_regex_pattern(
 5349|      0|                        specs.charset_string<SourceCharT>()),
 5350|      0|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 319k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|   319k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|   319k|        }
 5357|       |
 5358|   319k|        SCN_CLANG_POP
 5359|   319k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4849|   787k|    {
 4850|   787k|        return read_string_impl(range, read_until_classic_space(range), value);
 4851|   787k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4783|   787k|{
 4784|   787k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|   787k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|   787k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 7.28k, False: 780k]
  ------------------
 4788|  7.28k|        return detail::unexpected_scan_error(
 4789|  7.28k|            scan_error::invalid_scanned_value,
 4790|  7.28k|            "Invalid encoding in scanned string");
 4791|  7.28k|    }
 4792|       |
 4793|   780k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   780k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 780k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|   780k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   780k|    static_cast<    \
  |  |  935|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|   780k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3116|   780k|{
 3117|   780k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3118|   780k|        dest.assign(source.view());
 3119|       |    }
 3120|       |    else {
 3121|       |        return transcode_impl(source.view(), dest);
 3122|       |    }
 3123|       |
 3124|   780k|    return {};
 3125|   780k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5077|  4.12k|    {
 5078|  4.12k|        auto it = read_source_impl(range, {specs});
 5079|  4.12k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  4.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.00k, False: 124]
  |  |  ------------------
  ------------------
 5080|  4.00k|            return unexpected(it.error());
 5081|  4.00k|        }
 5082|       |
 5083|    124|        return read_string_impl(range, *it, value);
 5084|  4.12k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4783|    124|{
 4784|    124|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4785|       |
 4786|    124|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4787|    124|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4787:9): [True: 0, False: 124]
  ------------------
 4788|      0|        return detail::unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Invalid encoding in scanned string");
 4791|      0|    }
 4792|       |
 4793|    124|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    124|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    124|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 124]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4794|    124|    return SCN_MOVE(result);
  ------------------
  |  |  934|    124|    static_cast<    \
  |  |  935|    124|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4795|    124|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5837|   798k|{
 5838|       |    if constexpr (std::is_same_v<T, bool>) {
 5839|       |        return reader_impl_for_bool<CharT>{};
 5840|       |    }
 5841|       |    else if constexpr (std::is_same_v<T, char>) {
 5842|       |        return reader_impl_for_char<CharT>{};
 5843|       |    }
 5844|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5845|       |        return reader_impl_for_wchar<CharT>{};
 5846|       |    }
 5847|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5848|       |        return reader_impl_for_code_point<CharT>{};
 5849|       |    }
 5850|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5851|   798k|                       std::is_same_v<T, std::wstring_view>) {
 5852|   798k|        return reader_impl_for_string<CharT>{};
 5853|       |    }
 5854|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5855|       |                       std::is_same_v<T, std::wstring>) {
 5856|       |        return reader_impl_for_string<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5859|       |                       std::is_same_v<T, wregex_matches>) {
 5860|       |        return reader_impl_for_regex_matches<CharT>{};
 5861|       |    }
 5862|       |    else if constexpr (std::is_same_v<T, void*>) {
 5863|       |        return reader_impl_for_voidptr<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_floating_point_v<T>) {
 5866|       |        return reader_impl_for_float<CharT>{};
 5867|       |    }
 5868|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5869|       |                       !std::is_same_v<T, wchar_t> &&
 5870|       |                       !std::is_same_v<T, char32_t> &&
 5871|       |                       !std::is_same_v<T, bool>) {
 5872|       |        return reader_impl_for_int<CharT>{};
 5873|       |    }
 5874|       |    else {
 5875|       |        return reader_impl_for_monostate<CharT>{};
 5876|       |    }
 5877|   798k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5302|   319k|    {
 5303|   319k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   319k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   319k|        return read_impl(range, specs, value);
 5305|   319k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5320|   319k|    {
 5321|   319k|        SCN_CLANG_PUSH
 5322|   319k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5323|       |
 5324|   319k|        switch (m_type) {
 5325|   314k|            case reader_type::word:
  ------------------
  |  Branch (5325:13): [True: 314k, False: 4.12k]
  ------------------
 5326|   314k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5327|       |
 5328|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5328:13): [True: 0, False: 319k]
  ------------------
 5329|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5330|      0|                                                                   value);
 5331|       |
 5332|      0|            case reader_type::character:
  ------------------
  |  Branch (5332:13): [True: 0, False: 319k]
  ------------------
 5333|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5334|       |
 5335|  4.12k|            case reader_type::character_set:
  ------------------
  |  Branch (5335:13): [True: 4.12k, False: 314k]
  ------------------
 5336|  4.12k|                return character_set_reader_impl<SourceCharT>{}.read(
 5337|  4.12k|                    range, specs, value);
 5338|       |
 5339|      0|#if !SCN_DISABLE_REGEX
 5340|      0|            case reader_type::regex:
  ------------------
  |  Branch (5340:13): [True: 0, False: 319k]
  ------------------
 5341|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5342|      0|                    range, specs.charset_string<SourceCharT>(),
 5343|      0|                    specs.regexp_flags, value);
 5344|       |
 5345|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5345:13): [True: 0, False: 319k]
  ------------------
 5346|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5347|      0|                    range,
 5348|      0|                    get_unescaped_regex_pattern(
 5349|      0|                        specs.charset_string<SourceCharT>()),
 5350|      0|                    specs.regexp_flags, value);
 5351|      0|#endif
 5352|       |
 5353|      0|            default:
  ------------------
  |  Branch (5353:13): [True: 0, False: 319k]
  ------------------
 5354|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5355|   319k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5356|   319k|        }
 5357|       |
 5358|   319k|        SCN_CLANG_POP
 5359|   319k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4856|   787k|    {
 4857|   787k|        return read_string_view_impl(range, read_until_classic_space(range),
 4858|   787k|                                     value);
 4859|   787k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4802|   787k|{
 4803|   787k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|   787k|    auto src = [&]() {
 4806|   787k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|   787k|            return make_contiguous_buffer(
 4808|   787k|                ranges::subrange{range.begin().base(), result.base()});
 4809|   787k|        }
 4810|   787k|        else {
 4811|   787k|            return make_contiguous_buffer(
 4812|   787k|                ranges::subrange{range.begin(), result});
 4813|   787k|        }
 4814|   787k|    }();
 4815|   787k|    using src_type = decltype(src);
 4816|       |
 4817|   787k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|   787k|    else {
 4830|   787k|        const auto view = src.view();
 4831|   787k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|   787k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 7.28k, False: 780k]
  ------------------
 4834|  7.28k|            return detail::unexpected_scan_error(
 4835|  7.28k|                scan_error::invalid_scanned_value,
 4836|  7.28k|                "Invalid encoding in scanned string_view");
 4837|  7.28k|        }
 4838|       |
 4839|   780k|        return SCN_MOVE(result);
  ------------------
  |  |  934|   780k|    static_cast<    \
  |  |  935|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|   787k|    }
 4841|   787k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4805|   787k|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|   787k|        else {
 4811|   787k|            return make_contiguous_buffer(
 4812|   787k|                ranges::subrange{range.begin(), result});
 4813|   787k|        }
 4814|   787k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5091|  4.12k|    {
 5092|  4.12k|        auto it = read_source_impl(range, {specs});
 5093|  4.12k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  4.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.00k, False: 124]
  |  |  ------------------
  ------------------
 5094|  4.00k|            return unexpected(it.error());
 5095|  4.00k|        }
 5096|       |
 5097|    124|        return read_string_view_impl(range, *it, value);
 5098|  4.12k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4802|    124|{
 4803|    124|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4804|       |
 4805|    124|    auto src = [&]() {
 4806|    124|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|    124|            return make_contiguous_buffer(
 4808|    124|                ranges::subrange{range.begin().base(), result.base()});
 4809|    124|        }
 4810|    124|        else {
 4811|    124|            return make_contiguous_buffer(
 4812|    124|                ranges::subrange{range.begin(), result});
 4813|    124|        }
 4814|    124|    }();
 4815|    124|    using src_type = decltype(src);
 4816|       |
 4817|    124|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4817:9): [Folded - Ignored]
  ------------------
 4818|      0|        return detail::unexpected_scan_error(
 4819|      0|            scan_error::invalid_format_string,
 4820|      0|            "Cannot read a string_view from this source range (not "
 4821|      0|            "contiguous)");
 4822|      0|    }
 4823|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4824|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4825|       |                                             "Cannot read a string_view from "
 4826|       |                                             "this source range (would require "
 4827|       |                                             "transcoding)");
 4828|       |    }
 4829|    124|    else {
 4830|    124|        const auto view = src.view();
 4831|    124|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4832|       |
 4833|    124|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4833:13): [True: 0, False: 124]
  ------------------
 4834|      0|            return detail::unexpected_scan_error(
 4835|      0|                scan_error::invalid_scanned_value,
 4836|      0|                "Invalid encoding in scanned string_view");
 4837|      0|        }
 4838|       |
 4839|    124|        return SCN_MOVE(result);
  ------------------
  |  |  934|    124|    static_cast<    \
  |  |  935|    124|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4840|    124|    }
 4841|    124|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4805|    124|    auto src = [&]() {
 4806|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4807|       |            return make_contiguous_buffer(
 4808|       |                ranges::subrange{range.begin().base(), result.base()});
 4809|       |        }
 4810|    124|        else {
 4811|    124|            return make_contiguous_buffer(
 4812|    124|                ranges::subrange{range.begin(), result});
 4813|    124|        }
 4814|    124|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|   788k|{
 3055|   788k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 788k, False: 0]
  ------------------
 3056|   788k|        auto it = read_while_classic_space(range);
 3057|   788k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   788k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   788k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.35k, False: 787k]
  |  |  ------------------
  ------------------
 3059|  1.35k|            return unexpected(e);
 3060|  1.35k|        }
 3061|       |
 3062|   787k|        return it;
 3063|   788k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   788k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   788k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   788k|    else {
 2225|   788k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   788k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   788k|            return detail::is_cp_space(cp);
 2238|   788k|        });
 2239|   788k|    }
 2240|   788k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   788k|        : m_fptr([](storage fn,
  743|   788k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   788k|              cvref<T> obj = *get<T>(fn);
  745|   788k|              if constexpr (std::is_void_v<R>) {
  746|   788k|                  obj(static_cast<decltype(args)>(args)...);
  747|   788k|              }
  748|   788k|              else {
  749|   788k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   788k|              }
  751|   788k|          }),
  752|   788k|          m_storage(std::addressof(f))
  753|   788k|    {
  754|   788k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.80M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.80M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.80M|              else {
  749|  1.80M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.80M|              }
  751|  1.80M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.80M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.80M|        else if constexpr (std::is_object_v<T>) {
  688|  1.80M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.80M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.80M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.80M|            return detail::is_cp_space(cp);
 2238|  1.80M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   788k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   788k|        {
  662|   788k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|   121k|{
 5824|   121k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.44k, False: 120k]
  |  |  ------------------
  ------------------
 5825|  1.44k|        return unexpected(e);
 5826|  1.44k|    }
 5827|       |
 5828|   120k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 120k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|   120k|    return skip_classic_whitespace(range);
 5833|   120k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|  60.7k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  60.7k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  60.7k|            auto rd = make_reader<T, char_type>();
 5905|  60.7k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  60.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5891|  60.7k|    {
 5892|  60.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  60.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.06k, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.06k|    }                                                  \
  |  |  |  | 3939|  60.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  59.7k|                        .transform_error(make_eof_scan_error));
 5894|  59.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  60.7k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5291|  59.7k|    {
 5292|  59.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  59.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|  59.7k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|  59.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|  60.7k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  60.7k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  60.7k|            auto rd = make_reader<T, char_type>();
 5905|  60.7k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  60.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|  60.7k|    {
 5892|  60.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  60.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.06k, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.06k|    }                                                  \
  |  |  |  | 3939|  60.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  59.7k|                        .transform_error(make_eof_scan_error));
 5894|  59.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  60.7k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|  59.7k|    {
 5292|  59.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  59.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|  59.7k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|  59.7k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5823|  76.6k|{
 5824|  76.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 843, False: 75.7k]
  |  |  ------------------
  ------------------
 5825|    843|        return unexpected(e);
 5826|    843|    }
 5827|       |
 5828|  75.7k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 75.7k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|  75.7k|    return skip_classic_whitespace(range);
 5833|  75.7k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  76.6k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  76.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  76.6k|            auto rd = make_reader<T, char_type>();
 5909|  76.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 76.6k, False: 0]
  ------------------
 5910|  76.6k|                return impl(rd, range, value);
 5911|  76.6k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  76.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5891|  76.6k|    {
 5892|  76.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  76.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  76.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  76.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 75.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.28k|    }                                                  \
  |  |  |  | 3939|  76.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  75.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  75.3k|                        .transform_error(make_eof_scan_error));
 5894|  75.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  76.6k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5291|  75.3k|    {
 5292|  75.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  75.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|  75.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|  75.3k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2974|  98.7k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  98.7k|    static_cast<    \
  |  |  935|  98.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|  98.7k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|  98.7k|          m_current(m_range.begin())
 2977|  98.7k|    {
 2978|  98.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2986|   169k|    {
 2987|   169k|        return m_range.end();
 2988|   169k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3001|  78.7k|    {
 3002|  78.7k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  78.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  78.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|  78.7k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|  78.7k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 78.7k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|  78.7k|        }
 3008|  78.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  78.7k|    static_cast<    \
  |  |  935|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|  78.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2991|  90.7k|    {
 2992|  90.7k|        return ranges::subrange{begin(), end()};
 2993|  90.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|  86.7k|    {
 6063|  86.7k|        const bool need_skipped_width =
 6064|  86.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 86.7k]
  |  Branch (6064:33): [True: 0, False: 86.7k]
  ------------------
 6065|  86.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|  86.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 86.7k]
  ------------------
 6069|  86.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 86.7k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|  86.7k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 86.7k, False: 0]
  |  Branch (6073:56): [True: 81.0k, False: 5.67k]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|  81.0k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 81.0k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   160k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  81.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  81.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  81.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  81.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.42k, False: 79.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.42k|    }                                                  \
  |  |  |  | 3939|  81.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   160k|                            make_eof_scan_error));
 6084|       |
 6085|   160k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 79.6k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|  79.6k|            return result_type{it, 0};
 6093|   160k|        }
 6094|       |
 6095|  5.67k|        return result_type{rng.begin(), 0};
 6096|  86.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|  77.6k|    {
 6105|  77.6k|        const bool need_skipped_width =
 6106|  77.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 77.6k]
  |  Branch (6106:33): [True: 0, False: 77.6k]
  ------------------
 6107|  77.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|  77.6k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 77.6k]
  ------------------
 6110|  77.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 77.6k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|  77.6k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 77.6k, False: 0]
  ------------------
 6119|  77.6k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 1.58k, False: 76.0k]
  ------------------
 6120|  77.6k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 1.58k]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|  1.58k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 1.58k]
  ------------------
 6122|  1.58k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|  77.6k|        return result_type{rng.begin(), 0};
 6144|  77.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  45.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  45.3k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  45.3k|            auto rd = make_reader<T, char_type>();
 6220|  45.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  45.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.00k, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.00k|    }
  ------------------
 6221|  43.3k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  45.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6149|  43.3k|    {
 6150|  43.3k|        const bool need_skipped_width =
 6151|  43.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 43.3k]
  |  Branch (6151:33): [True: 0, False: 43.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  43.3k|        auto it = rng.begin();
 6155|  43.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  43.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 43.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  43.3k|        else {
 6164|  43.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  43.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 712, False: 42.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    712|    }                                                  \
  |  |  |  | 3939|  43.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  42.6k|            std::tie(it, prefix_width) = prefix_result;
 6166|  42.6k|        }
 6167|  42.6k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  42.6k|        std::ptrdiff_t value_width = 0;
 6171|  42.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 42.6k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  42.6k|        else {
 6187|  42.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  42.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  42.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.28k, False: 39.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  3.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  3.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  3.28k|    }                                                  \
  |  | 3939|  42.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  39.3k|                                             specs, value, loc));
 6189|       |
 6190|  39.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 39.3k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  39.3k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  39.3k|        std::ptrdiff_t postfix_width = 0;
 6199|  39.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 38.8k, False: 522]
  ------------------
 6200|  38.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  38.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  38.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  38.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  38.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  38.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  38.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  38.8k|                                 value_width));
 6204|  38.8k|            std::tie(it, postfix_width) = postfix_result;
 6205|  38.8k|        }
 6206|       |
 6207|  39.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  39.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  39.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  39.3k|            specs, prefix_width, value_width, postfix_width));
 6209|  39.3k|        return it;
 6210|  39.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|  45.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  45.3k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  45.3k|            auto rd = make_reader<T, char_type>();
 6220|  45.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  45.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.00k, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.00k|    }
  ------------------
 6221|  43.3k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  45.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|  43.3k|    {
 6150|  43.3k|        const bool need_skipped_width =
 6151|  43.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 43.3k]
  |  Branch (6151:33): [True: 0, False: 43.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  43.3k|        auto it = rng.begin();
 6155|  43.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  43.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 43.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  43.3k|        else {
 6164|  43.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  43.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 712, False: 42.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    712|    }                                                  \
  |  |  |  | 3939|  43.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  42.6k|            std::tie(it, prefix_width) = prefix_result;
 6166|  42.6k|        }
 6167|  42.6k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  42.6k|        std::ptrdiff_t value_width = 0;
 6171|  42.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 42.6k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  42.6k|        else {
 6187|  42.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  42.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  42.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.28k, False: 39.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  3.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  3.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  3.28k|    }                                                  \
  |  | 3939|  42.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  39.3k|                                             specs, value, loc));
 6189|       |
 6190|  39.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 39.3k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  39.3k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  39.3k|        std::ptrdiff_t postfix_width = 0;
 6199|  39.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 38.8k, False: 522]
  ------------------
 6200|  38.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  38.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  38.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  38.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  38.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  38.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  38.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  38.8k|                                 value_width));
 6204|  38.8k|            std::tie(it, postfix_width) = postfix_result;
 6205|  38.8k|        }
 6206|       |
 6207|  39.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  39.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  39.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  39.3k|            specs, prefix_width, value_width, postfix_width));
 6209|  39.3k|        return it;
 6210|  39.3k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|   948k|{
 5824|   948k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.72k, False: 945k]
  |  |  ------------------
  ------------------
 5825|  2.72k|        return unexpected(e);
 5826|  2.72k|    }
 5827|       |
 5828|   945k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 945k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|   945k|    return skip_classic_whitespace(range);
 5833|   945k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|   474k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|   474k|                          basic_contiguous_scan_context<char_type>>) {
 5904|   474k|            auto rd = make_reader<T, char_type>();
 5905|   474k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|   474k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5891|   474k|    {
 5892|   474k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   474k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   474k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   474k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.63k, False: 472k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.63k|    }                                                  \
  |  |  |  | 3939|   474k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   472k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|   472k|                        .transform_error(make_eof_scan_error));
 5894|   472k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|   474k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5291|   472k|    {
 5292|   472k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   472k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|   472k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|   472k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5899|   474k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|   474k|                          basic_contiguous_scan_context<char_type>>) {
 5904|   474k|            auto rd = make_reader<T, char_type>();
 5905|   474k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|   474k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5891|   474k|    {
 5892|   474k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   474k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   474k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   474k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.63k, False: 472k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.63k|    }                                                  \
  |  |  |  | 3939|   474k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   472k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|   472k|                        .transform_error(make_eof_scan_error));
 5894|   472k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|   474k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5291|   472k|    {
 5292|   472k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   472k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|   472k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|   472k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2974|   664k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   664k|    static_cast<    \
  |  |  935|   664k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|   664k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|   664k|          m_current(m_range.begin())
 2977|   664k|    {
 2978|   664k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2986|  1.27M|    {
 2987|  1.27M|        return m_range.end();
 2988|  1.27M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3001|   624k|    {
 3002|   624k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|   624k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|   624k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 624k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|   624k|        }
 3008|   624k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   624k|    static_cast<    \
  |  |  935|   624k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|   624k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2991|   648k|    {
 2992|   648k|        return ranges::subrange{begin(), end()};
 2993|   648k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|   640k|    {
 6063|   640k|        const bool need_skipped_width =
 6064|   640k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 640k]
  |  Branch (6064:33): [True: 0, False: 640k]
  ------------------
 6065|   640k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   640k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 640k]
  ------------------
 6069|   640k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 640k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   640k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 640k, False: 0]
  |  Branch (6073:56): [True: 632k, False: 8.24k]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   632k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 632k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|  1.26M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   632k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   632k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   632k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.17k, False: 629k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.17k|    }                                                  \
  |  |  |  | 3939|   632k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|  1.26M|                            make_eof_scan_error));
 6084|       |
 6085|  1.26M|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 629k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   629k|            return result_type{it, 0};
 6093|  1.26M|        }
 6094|       |
 6095|  8.24k|        return result_type{rng.begin(), 0};
 6096|   640k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|   622k|    {
 6105|   622k|        const bool need_skipped_width =
 6106|   622k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 622k]
  |  Branch (6106:33): [True: 0, False: 622k]
  ------------------
 6107|   622k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   622k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 622k]
  ------------------
 6110|   622k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 622k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   622k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 622k, False: 0]
  ------------------
 6119|   622k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 180, False: 622k]
  ------------------
 6120|   622k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 180]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|    180|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 180]
  ------------------
 6122|    180|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   622k|        return result_type{rng.begin(), 0};
 6144|   622k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|   324k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|   324k|                          basic_contiguous_scan_context<char_type>>) {
 6219|   324k|            auto rd = make_reader<T, char_type>();
 6220|   324k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   324k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.00k, False: 320k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.00k|    }
  ------------------
 6221|   320k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   324k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6149|   320k|    {
 6150|   320k|        const bool need_skipped_width =
 6151|   320k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 320k]
  |  Branch (6151:33): [True: 0, False: 320k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   320k|        auto it = rng.begin();
 6155|   320k|        std::ptrdiff_t prefix_width = 0;
 6156|   320k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 320k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   320k|        else {
 6164|   320k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.08k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.08k|    }                                                  \
  |  |  |  | 3939|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   319k|            std::tie(it, prefix_width) = prefix_result;
 6166|   319k|        }
 6167|   319k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   319k|        std::ptrdiff_t value_width = 0;
 6171|   319k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 319k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   319k|        else {
 6187|   319k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.91k, False: 312k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.91k|    }                                                  \
  |  | 3939|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   312k|                                             specs, value, loc));
 6189|       |
 6190|   312k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 312k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   312k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   312k|        std::ptrdiff_t postfix_width = 0;
 6199|   312k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 311k, False: 942]
  ------------------
 6200|   311k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   311k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   311k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   311k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   311k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   311k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   311k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   311k|                                 value_width));
 6204|   311k|            std::tie(it, postfix_width) = postfix_result;
 6205|   311k|        }
 6206|       |
 6207|   312k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   312k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 312k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   312k|            specs, prefix_width, value_width, postfix_width));
 6209|   312k|        return it;
 6210|   312k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6214|   324k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|   324k|                          basic_contiguous_scan_context<char_type>>) {
 6219|   324k|            auto rd = make_reader<T, char_type>();
 6220|   324k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   324k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.00k, False: 320k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.00k|    }
  ------------------
 6221|   320k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   324k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6149|   320k|    {
 6150|   320k|        const bool need_skipped_width =
 6151|   320k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 320k]
  |  Branch (6151:33): [True: 0, False: 320k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   320k|        auto it = rng.begin();
 6155|   320k|        std::ptrdiff_t prefix_width = 0;
 6156|   320k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 320k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   320k|        else {
 6164|   320k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.08k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.08k|    }                                                  \
  |  |  |  | 3939|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   319k|            std::tie(it, prefix_width) = prefix_result;
 6166|   319k|        }
 6167|   319k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   319k|        std::ptrdiff_t value_width = 0;
 6171|   319k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 319k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   319k|        else {
 6187|   319k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.91k, False: 312k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.91k|    }                                                  \
  |  | 3939|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   312k|                                             specs, value, loc));
 6189|       |
 6190|   312k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 312k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   312k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   312k|        std::ptrdiff_t postfix_width = 0;
 6199|   312k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 311k, False: 942]
  ------------------
 6200|   311k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   311k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   311k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   311k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   311k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   311k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   311k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   311k|                                 value_width));
 6204|   311k|            std::tie(it, postfix_width) = postfix_result;
 6205|   311k|        }
 6206|       |
 6207|   312k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   312k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 312k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   312k|            specs, prefix_width, value_width, postfix_width));
 6209|   312k|        return it;
 6210|   312k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5823|   474k|{
 5824|   474k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.36k, False: 472k]
  |  |  ------------------
  ------------------
 5825|  1.36k|        return unexpected(e);
 5826|  1.36k|    }
 5827|       |
 5828|   472k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 472k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|   472k|    return skip_classic_whitespace(range);
 5833|   472k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|   474k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|   474k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|   474k|            auto rd = make_reader<T, char_type>();
 5909|   474k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 474k, False: 0]
  ------------------
 5910|   474k|                return impl(rd, range, value);
 5911|   474k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|   474k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5891|   474k|    {
 5892|   474k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   474k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   474k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   474k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.63k, False: 472k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.63k|    }                                                  \
  |  |  |  | 3939|   474k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   472k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|   472k|                        .transform_error(make_eof_scan_error));
 5894|   472k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|   474k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5291|   472k|    {
 5292|   472k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   472k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5293|   472k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5294|   472k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  1.00k|{
   52|  1.00k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.00k|    string_buffer.resize(size);
   56|  1.00k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  1.00k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  1.00k|    const auto wsv_reinterpret_size =
   61|  1.00k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 191, False: 809]
  ------------------
   62|  1.00k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  1.00k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  1.00k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  1.00k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  1.00k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  1.00k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  1.00k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.00k|{
  122|  1.00k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.00k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.00k|    buf.resize(sizeof...(Args));
  125|  1.00k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.00k|    return buf;
  127|  1.00k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  1.00k|{
  108|  1.00k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  1.00k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  1.00k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.00k|{
  185|  1.00k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.00k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.00k|                                   format_strings);
  188|  1.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.00k|{
  133|       |    // Regular scan
  134|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.00k, False: 1.00k]
  ------------------
  135|  6.00k|        auto it = scn::ranges::begin(source);
  136|  44.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  44.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.9k|            auto result = scn::scan<T>(
  139|  44.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.9k|                scn::runtime_format(f));
  141|  44.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.00k, False: 38.9k]
  ------------------
  142|  6.00k|                break;
  143|  6.00k|            }
  144|  38.9k|            it = result->begin();
  145|  38.9k|        }
  146|  6.00k|    }
  147|       |
  148|       |    // scan localized
  149|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.00k, False: 1.00k]
  ------------------
  150|  6.00k|        auto it = scn::ranges::begin(source);
  151|  44.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  44.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.9k|            auto result = scn::scan<T>(
  154|  44.9k|                global_locale,
  155|  44.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.9k|                scn::runtime_format(f));
  157|  44.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.00k, False: 38.9k]
  ------------------
  158|  6.00k|                break;
  159|  6.00k|            }
  160|  38.9k|            it = result->begin();
  161|  38.9k|        }
  162|  6.00k|    }
  163|       |
  164|       |    // scan_value
  165|  1.00k|    {
  166|  1.00k|        auto it = scn::ranges::begin(source);
  167|  20.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  20.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  20.2k|            auto result = scn::scan_value<T>(
  170|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  20.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.00k, False: 19.2k]
  ------------------
  172|  1.00k|                break;
  173|  1.00k|            }
  174|  19.2k|            it = result->begin();
  175|  19.2k|        }
  176|  1.00k|    }
  177|  1.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.00k|{
  133|       |    // Regular scan
  134|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.00k, False: 1.00k]
  ------------------
  135|  6.00k|        auto it = scn::ranges::begin(source);
  136|  44.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  44.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.9k|            auto result = scn::scan<T>(
  139|  44.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.9k|                scn::runtime_format(f));
  141|  44.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.00k, False: 38.9k]
  ------------------
  142|  6.00k|                break;
  143|  6.00k|            }
  144|  38.9k|            it = result->begin();
  145|  38.9k|        }
  146|  6.00k|    }
  147|       |
  148|       |    // scan localized
  149|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.00k, False: 1.00k]
  ------------------
  150|  6.00k|        auto it = scn::ranges::begin(source);
  151|  44.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  44.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.9k|            auto result = scn::scan<T>(
  154|  44.9k|                global_locale,
  155|  44.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.9k|                scn::runtime_format(f));
  157|  44.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.00k, False: 38.9k]
  ------------------
  158|  6.00k|                break;
  159|  6.00k|            }
  160|  38.9k|            it = result->begin();
  161|  38.9k|        }
  162|  6.00k|    }
  163|       |
  164|       |    // scan_value
  165|  1.00k|    {
  166|  1.00k|        auto it = scn::ranges::begin(source);
  167|  20.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  20.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  20.2k|            auto result = scn::scan_value<T>(
  170|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  20.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.00k, False: 19.2k]
  ------------------
  172|  1.00k|                break;
  173|  1.00k|            }
  174|  19.2k|            it = result->begin();
  175|  19.2k|        }
  176|  1.00k|    }
  177|  1.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.00k|{
  133|       |    // Regular scan
  134|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.00k, False: 1.00k]
  ------------------
  135|  6.00k|        auto it = scn::ranges::begin(source);
  136|  56.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  56.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  56.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  56.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  56.2k|            auto result = scn::scan<T>(
  139|  56.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  56.2k|                scn::runtime_format(f));
  141|  56.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.00k, False: 50.2k]
  ------------------
  142|  6.00k|                break;
  143|  6.00k|            }
  144|  50.2k|            it = result->begin();
  145|  50.2k|        }
  146|  6.00k|    }
  147|       |
  148|       |    // scan localized
  149|  6.00k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.00k, False: 1.00k]
  ------------------
  150|  6.00k|        auto it = scn::ranges::begin(source);
  151|  56.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  56.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  56.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  56.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  56.2k|            auto result = scn::scan<T>(
  154|  56.2k|                global_locale,
  155|  56.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  56.2k|                scn::runtime_format(f));
  157|  56.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.00k, False: 50.2k]
  ------------------
  158|  6.00k|                break;
  159|  6.00k|            }
  160|  50.2k|            it = result->begin();
  161|  50.2k|        }
  162|  6.00k|    }
  163|       |
  164|       |    // scan_value
  165|  1.00k|    {
  166|  1.00k|        auto it = scn::ranges::begin(source);
  167|  25.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  25.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  25.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  25.5k|            auto result = scn::scan_value<T>(
  170|  25.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  25.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.00k, False: 24.5k]
  ------------------
  172|  1.00k|                break;
  173|  1.00k|            }
  174|  24.5k|            it = result->begin();
  175|  24.5k|        }
  176|  1.00k|    }
  177|  1.00k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  1.00k|{
   90|  1.00k|    using char_type = ranges::range_value_t<Source>;
   91|  1.00k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.00k|    deque.clear();
   93|  1.00k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.00k|              std::back_inserter(deque));
   95|  1.00k|    return deque;
   96|  1.00k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  1.00k|{
   79|  1.00k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  1.00k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  1.00k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.00k|{
  122|  1.00k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.00k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.00k|    buf.resize(sizeof...(Args));
  125|  1.00k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.00k|    return buf;
  127|  1.00k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  1.00k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  1.00k|    else {
  112|  1.00k|        return wformat_string_view_buffer;
  113|  1.00k|    }
  114|  1.00k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.00k|{
  185|  2.00k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.00k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.00k|                                   format_strings);
  188|  2.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.00k|{
  133|       |    // Regular scan
  134|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.0k, False: 2.00k]
  ------------------
  135|  12.0k|        auto it = scn::ranges::begin(source);
  136|   324k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   324k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   324k|            auto result = scn::scan<T>(
  139|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   324k|                scn::runtime_format(f));
  141|   324k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.0k, False: 312k]
  ------------------
  142|  12.0k|                break;
  143|  12.0k|            }
  144|   312k|            it = result->begin();
  145|   312k|        }
  146|  12.0k|    }
  147|       |
  148|       |    // scan localized
  149|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.0k, False: 2.00k]
  ------------------
  150|  12.0k|        auto it = scn::ranges::begin(source);
  151|   324k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   324k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   324k|            auto result = scn::scan<T>(
  154|   324k|                global_locale,
  155|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   324k|                scn::runtime_format(f));
  157|   324k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.0k, False: 312k]
  ------------------
  158|  12.0k|                break;
  159|  12.0k|            }
  160|   312k|            it = result->begin();
  161|   312k|        }
  162|  12.0k|    }
  163|       |
  164|       |    // scan_value
  165|  2.00k|    {
  166|  2.00k|        auto it = scn::ranges::begin(source);
  167|   158k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   158k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   158k|            auto result = scn::scan_value<T>(
  170|   158k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   158k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.00k, False: 156k]
  ------------------
  172|  2.00k|                break;
  173|  2.00k|            }
  174|   156k|            it = result->begin();
  175|   156k|        }
  176|  2.00k|    }
  177|  2.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.00k|{
  133|       |    // Regular scan
  134|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.0k, False: 2.00k]
  ------------------
  135|  12.0k|        auto it = scn::ranges::begin(source);
  136|   324k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   324k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   324k|            auto result = scn::scan<T>(
  139|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   324k|                scn::runtime_format(f));
  141|   324k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.0k, False: 312k]
  ------------------
  142|  12.0k|                break;
  143|  12.0k|            }
  144|   312k|            it = result->begin();
  145|   312k|        }
  146|  12.0k|    }
  147|       |
  148|       |    // scan localized
  149|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.0k, False: 2.00k]
  ------------------
  150|  12.0k|        auto it = scn::ranges::begin(source);
  151|   324k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   324k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   324k|            auto result = scn::scan<T>(
  154|   324k|                global_locale,
  155|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   324k|                scn::runtime_format(f));
  157|   324k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.0k, False: 312k]
  ------------------
  158|  12.0k|                break;
  159|  12.0k|            }
  160|   312k|            it = result->begin();
  161|   312k|        }
  162|  12.0k|    }
  163|       |
  164|       |    // scan_value
  165|  2.00k|    {
  166|  2.00k|        auto it = scn::ranges::begin(source);
  167|   158k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   158k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   158k|            auto result = scn::scan_value<T>(
  170|   158k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   158k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.00k, False: 156k]
  ------------------
  172|  2.00k|                break;
  173|  2.00k|            }
  174|   156k|            it = result->begin();
  175|   156k|        }
  176|  2.00k|    }
  177|  2.00k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.00k|{
  133|       |    // Regular scan
  134|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.0k, False: 2.00k]
  ------------------
  135|  12.0k|        auto it = scn::ranges::begin(source);
  136|   324k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   324k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   324k|            auto result = scn::scan<T>(
  139|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   324k|                scn::runtime_format(f));
  141|   324k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.0k, False: 312k]
  ------------------
  142|  12.0k|                break;
  143|  12.0k|            }
  144|   312k|            it = result->begin();
  145|   312k|        }
  146|  12.0k|    }
  147|       |
  148|       |    // scan localized
  149|  12.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.0k, False: 2.00k]
  ------------------
  150|  12.0k|        auto it = scn::ranges::begin(source);
  151|   324k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   324k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   324k|            auto result = scn::scan<T>(
  154|   324k|                global_locale,
  155|   324k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   324k|                scn::runtime_format(f));
  157|   324k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.0k, False: 312k]
  ------------------
  158|  12.0k|                break;
  159|  12.0k|            }
  160|   312k|            it = result->begin();
  161|   312k|        }
  162|  12.0k|    }
  163|       |
  164|       |    // scan_value
  165|  2.00k|    {
  166|  2.00k|        auto it = scn::ranges::begin(source);
  167|   158k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   158k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   158k|            auto result = scn::scan_value<T>(
  170|   158k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   158k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.00k, False: 156k]
  ------------------
  172|  2.00k|                break;
  173|  2.00k|            }
  174|   156k|            it = result->begin();
  175|   156k|        }
  176|  2.00k|    }
  177|  2.00k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  2.00k|{
   90|  2.00k|    using char_type = ranges::range_value_t<Source>;
   91|  2.00k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.00k|    deque.clear();
   93|  2.00k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.00k|              std::back_inserter(deque));
   95|  2.00k|    return deque;
   96|  2.00k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  2.00k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  2.00k|    else {
   83|  2.00k|        return wnoncontiguous_buffer;
   84|  2.00k|    }
   85|  2.00k|}

LLVMFuzzerTestOneInput:
   57|  1.00k|{
   58|  1.00k|    scn::fuzz::run(data, size);
   59|  1.00k|    return 0;
   60|  1.00k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  1.00k|{
   36|  1.00k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 1.00k]
  |  Branch (36:35): [True: 0, False: 1.00k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  1.00k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  1.00k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  1.00k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  1.00k|    do_basic_run(sv, f);
   45|       |
   46|  1.00k|    const auto& wf = get_format_strings<wchar_t>(
   47|  1.00k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  1.00k|    do_basic_run(wsv_reinterpret, wf);
   49|  1.00k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 1.00k, False: 0]
  ------------------
   50|  1.00k|        do_basic_run(wsv_transcode, wf);
   51|  1.00k|    }
   52|  1.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.00k|{
   25|  1.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.00k|                                                           format_strings);
   27|  1.00k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.00k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.00k|            source, format_strings);
   30|  1.00k|    }
   31|  1.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.00k|{
   25|  1.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.00k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.00k|{
   25|  2.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.00k|                                                           format_strings);
   27|  2.00k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  2.00k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.00k|            source, format_strings);
   30|  2.00k|    }
   31|  2.00k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.00k|{
   25|  2.00k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.00k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  2.00k|}

