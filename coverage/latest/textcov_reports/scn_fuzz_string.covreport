_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  11.9M|{
 4068|  11.9M|    if constexpr (sizeof(U) == 1) {
 4069|  11.9M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  11.9M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  11.9M|{
 4032|  11.9M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  11.9M|    SCN_GCC_COMPAT_PUSH
 4035|  11.9M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  11.9M|    constexpr char lengths[] =
 4037|  11.9M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  11.9M|        "\1\1\1\1\1\1\1\1"
 4039|  11.9M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  11.9M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  11.9M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  11.9M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  11.9M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  11.9M|    SCN_GCC_COMPAT_POP
 4046|  11.9M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  11.4M|{
 4274|  11.4M|    if constexpr (sizeof(CharT) == 1) {
 4275|  11.4M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  11.4M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  11.4M|{
 4087|  11.4M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  11.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  11.4M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  11.4M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  11.4M|    };
 4092|       |
 4093|  11.4M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 10.5M, False: 951k]
  ------------------
 4094|  10.5M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 579, False: 10.5M]
  ------------------
 4095|    579|            SCN_UNLIKELY_ATTR
 4096|    579|            return invalid_code_point;
 4097|    579|        }
 4098|  10.5M|        return static_cast<char32_t>(input[0]);
 4099|  10.5M|    }
 4100|       |
 4101|   951k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 253k, False: 698k]
  ------------------
 4102|   253k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 480, False: 252k]
  ------------------
 4103|    480|            SCN_UNLIKELY_ATTR
 4104|    480|            return invalid_code_point;
 4105|    480|        }
 4106|   252k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 44.5k, False: 208k]
  ------------------
 4107|  44.5k|            SCN_UNLIKELY_ATTR
 4108|  44.5k|            return invalid_code_point;
 4109|  44.5k|        }
 4110|       |
 4111|   208k|        char32_t cp{};
 4112|   208k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|   208k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|   208k|        return cp;
 4115|   252k|    }
 4116|       |
 4117|   698k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 659k, False: 38.7k]
  ------------------
 4118|   659k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 106, False: 659k]
  ------------------
 4119|    106|            SCN_UNLIKELY_ATTR
 4120|    106|            return invalid_code_point;
 4121|    106|        }
 4122|   659k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 9.22k, False: 650k]
  ------------------
 4123|   659k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 2.71k, False: 647k]
  ------------------
 4124|  11.9k|            SCN_UNLIKELY_ATTR
 4125|  11.9k|            return invalid_code_point;
 4126|  11.9k|        }
 4127|       |
 4128|   647k|        char32_t cp{};
 4129|   647k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|   647k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|   647k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|   647k|        return cp;
 4133|   659k|    }
 4134|       |
 4135|  38.7k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 38.7k, False: 0]
  ------------------
 4136|  38.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 38.7k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  38.7k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 23.4k, False: 15.2k]
  ------------------
 4141|  23.4k|            SCN_UNLIKELY_ATTR
 4142|  23.4k|            return invalid_code_point;
 4143|  23.4k|        }
 4144|  15.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 3.54k, False: 11.7k]
  ------------------
 4145|  15.2k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 197, False: 11.5k]
  ------------------
 4146|  15.2k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 298, False: 11.2k]
  ------------------
 4147|  4.03k|            SCN_UNLIKELY_ATTR
 4148|  4.03k|            return invalid_code_point;
 4149|  4.03k|        }
 4150|       |
 4151|  11.2k|        char32_t cp{};
 4152|  11.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  11.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  11.2k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  11.2k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  11.2k|        return cp;
 4157|  15.2k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  1.60M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  1.60M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  1.60M|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  10.1M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  10.1M|    else {
 3966|  10.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  10.1M|                                       to_address(first), to_address(last)))};
 3968|  10.1M|    }
 3969|  10.1M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  31.2M|{
  316|  31.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  31.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  31.2M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  34.6M|{
  294|  34.6M|    return p;
  295|  34.6M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  4.83M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  4.83M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  4.83M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  4.83M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  4.83M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  4.83M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  64.3k|    {
 2869|  64.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  64.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  64.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  64.3k|    {
 2850|  64.3k|        return decay_copy(t.begin());
 2851|  64.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  5.64M|{
 2094|  5.64M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.64M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.19M|    {
 2926|  1.19M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.19M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.19M|    {
 2908|  1.19M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.19M|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9374|   121k|{
 9375|   121k|    auto result = make_scan_result<Source, Args...>();
 9376|   121k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   121k|                                   make_scan_args(result->values())));
 9378|   121k|    return result;
 9379|   121k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9330|   298k|{
 9331|   298k|    return scan_result_type<Source, Args...>();
 9332|   298k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   298k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   298k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   298k|    {
  613|   298k|        construct();
  614|   298k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   298k|    {
  694|   298k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   298k|        m_has_value = true;
  696|   298k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|   298k|{
  396|   298k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   298k|        T(std::forward<Args>(args)...);
  398|   298k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6264|   298k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6107|   597k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   597k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6038|   656k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  1.43M|    {
  718|  1.43M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  1.43M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  1.43M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9315|   298k|{
 9316|   298k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.0k, False: 267k]
  |  |  ------------------
  ------------------
 9317|  31.0k|        out = unexpected(in.error());
 9318|  31.0k|    }
 9319|   267k|    else {
 9320|   267k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   267k|    static_cast<    \
  |  |  935|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   267k|    }
 9322|   298k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   597k|    {
 1740|   597k|        return has_value();
 1741|   597k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.19M|    {
  490|  1.19M|        return m_has_value;
  491|  1.19M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  62.0k|    {
 1746|  62.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  62.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  62.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  62.0k|        return this->get_unexpected().error();
 1748|  62.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  62.0k|    {
  473|  62.0k|        return m_unexpected;
  474|  62.0k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  2.66M|    {
  365|  2.66M|        return m_unexpected;
  366|  2.66M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  1.16M|        : m_unexpected(std::forward<Err>(e))
  350|  1.16M|    {
  351|  1.16M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.16M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  31.0k|        : base(unexpect, std::move(e.error())),
 1616|  31.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  31.0k|    {
 1618|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  31.0k|        : m_has_value(false)
  637|  31.0k|    {
  638|  31.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  31.0k|    {
  701|  31.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  31.0k|                                  std::forward<Args>(args)...);
  703|  31.0k|        m_has_value = false;
  704|  31.0k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   186k|{
  396|   186k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   186k|        T(std::forward<Args>(args)...);
  398|   186k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  1.52M|        : m_unexpected(std::forward<Args>(args)...)
  359|  1.52M|    {
  360|  1.52M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.52M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  1.52M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   155k|    {
  730|   155k|        return reinterpret_cast<unexpected<E>*>(
  731|   155k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   155k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   155k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  31.0k|    {
 1316|  31.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  31.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  31.0k|    {
  903|  31.0k|        assign_common(std::move(other));
  904|  31.0k|        return *this;
  905|  31.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  31.0k|    {
  950|  31.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 31.0k, False: 0]
  ------------------
  951|  31.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 31.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  31.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  31.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  1.52M|    {
  687|  1.52M|        return m_has_value;
  688|  1.52M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   833k|    {
  653|   833k|        return *value_ptr();
  654|   833k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  31.0k|    {
 1046|  31.0k|        this->destroy_value();
 1047|  31.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   298k|    {
  708|   298k|        scn::detail::destroy_at(value_ptr());
  709|   298k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|   298k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   298k|    else {
  408|   298k|        p->~T();
  409|   298k|    }
  410|   298k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6271|   298k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  31.0k|    {
  701|  31.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  31.0k|                                  std::forward<Args>(args)...);
  703|  31.0k|        m_has_value = false;
  704|  31.0k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   279k|{
  396|   279k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   279k|        T(std::forward<Args>(args)...);
  398|   279k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  31.0k|    {
  678|  31.0k|        return std::move(*unexpected_ptr());
  679|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  62.0k|    {
  712|  62.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  62.0k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   372k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   372k|    else {
  408|   372k|        p->~T();
  409|   372k|    }
  410|   372k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6138|   535k|    {
 6139|   535k|        m_range = std::forward<Other>(r);
 6140|   535k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   535k|    {
 1795|   535k|        return value();
 1796|   535k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   535k|    {
 1769|   535k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   535k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   535k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   535k|        return this->get_value();
 1771|   535k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   535k|    {
  456|   535k|        return m_value;
  457|   535k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9154|   243k|{
 9155|   243k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9156|   243k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9091|   243k|{
 9092|   243k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|   243k|    auto result = vscan_impl(buffer, format, args);
 9095|   243k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.6k, False: 214k]
  |  |  ------------------
  ------------------
 9096|  28.6k|        return unexpected(result.error());
 9097|  28.6k|    }
 9098|   214k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|   243k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5074|   597k|{
 5075|   597k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|   597k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|   597k|                  "\n"
 5079|   597k|                  "Unsupported range type given as input to a scanning "
 5080|   597k|                  "function.\n"
 5081|   597k|                  "A range needs to have a character type (value type) "
 5082|   597k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|   597k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|   597k|                  "to be included.\n"
 5085|   597k|                  "See the scnlib documentation for more details.");
 5086|   597k|    static_assert(
 5087|   597k|        !std::is_same_v<T, custom_char_traits>,
 5088|   597k|        "\n"
 5089|   597k|        "Unsupported range type given as input to a scanning "
 5090|   597k|        "function.\n"
 5091|   597k|        "String types (std::basic_string, and std::basic_string_view) "
 5092|   597k|        "need to use std::char_traits. Strings with custom Traits are "
 5093|   597k|        "not supported.");
 5094|   597k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|   597k|                  "\n"
 5096|   597k|                  "Unsupported range type given as input to a scanning "
 5097|   597k|                  "function.\n"
 5098|   597k|                  "file_marker_found cannot be used as an "
 5099|   597k|                  "source range type to scn::scan.\n"
 5100|   597k|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|   597k|                  "and do not provide an explicit source range, "
 5102|   597k|                  "or use scn::scan with a FILE* directly.");
 5103|   597k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|   597k|                  "\n"
 5105|   597k|                  "Unsupported range type given as input to a scanning "
 5106|   597k|                  "function.\n"
 5107|   597k|                  "In order to be scannable, a range needs to satisfy "
 5108|   597k|                  "`forward_range`. `input_range` is not sufficient.");
 5109|   597k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|   597k|                  "\n"
 5111|   597k|                  "Unsupported range type given as input to a scanning "
 5112|   597k|                  "function.\n"
 5113|   597k|                  "A range needs to model forward_range and have a valid "
 5114|   597k|                  "character type (char or wchar_t) to be scannable.\n"
 5115|   597k|                  "Examples of scannable ranges are std::string, "
 5116|   597k|                  "std::string_view, "
 5117|   597k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|   597k|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|   597k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|   597k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5013|   597k|{
 5014|   597k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5015|   597k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5016|       |    }
 5017|       |    else {
 5018|       |        return invalid_char_type{};
 5019|       |    }
 5020|   597k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   597k|    {
 3000|   597k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   597k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   597k|    {
 2981|   597k|        return t.data();
 2982|   597k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   597k|    {
 3383|   597k|        return detail::to_address(ranges::begin(derived()));
 3384|   597k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  3.44M|{
  316|  3.44M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  3.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  3.44M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.13M|    {
 2869|  1.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.13M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.13M|    {
 2850|  1.13M|        return decay_copy(t.begin());
 2851|  1.13M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  7.13M|    {
 3480|  7.13M|        return m_iterator;
 3481|  7.13M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   597k|    {
 3339|   597k|        return static_cast<const D&>(*this);
 3340|   597k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   597k|    {
 3075|   597k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   597k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   597k|    {
 3041|   597k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   597k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  9.64M|{
 2094|  9.64M|    return SCN_FWD(t);
  ------------------
  |  |  936|  9.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  9.64M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  2.51M|    {
 3496|  2.51M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  2.51M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  13.7M|    {
 1740|  13.7M|        return has_value();
 1741|  13.7M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  27.5M|    {
  490|  27.5M|        return m_has_value;
  491|  27.5M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   279k|    {
 1746|   279k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   279k|        return this->get_unexpected().error();
 1748|   279k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   279k|    {
  473|   279k|        return m_unexpected;
  474|   279k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  62.0k|        : base(unexpect, std::move(e.error())),
 1616|  62.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  62.0k|    {
 1618|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  62.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  62.0k|          m_has_value(false)
  451|  62.0k|    {
  452|  62.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   597k|    {
 1316|   597k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6368|   535k|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|   535k|                      ranges::iterator_t<SourceRange>>) {
 6371|   535k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|   535k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.71M|    {
 2869|  2.71M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.71M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.71M|    {
 2850|  2.71M|        return decay_copy(t.begin());
 2851|  2.71M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6355|   535k|{
 6356|   535k|    return ranges::end(source);
 6357|   535k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   535k|    {
 2926|   535k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   535k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   535k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   535k|    {
 2908|   535k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   535k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   535k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  3.43M|    {
 3484|  3.43M|        return m_sentinel;
 3485|  3.43M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  13.4M|    {
 1795|  13.4M|        return value();
 1796|  13.4M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  13.4M|    {
 1769|  13.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  13.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  13.4M|        return this->get_value();
 1771|  13.4M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  13.4M|    {
  456|  13.4M|        return m_value;
  457|  13.4M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   535k|        : base(std::in_place, std::forward<U>(val)),
 1570|   535k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   535k|    {
 1572|   535k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   535k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   535k|    {
  442|   535k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8461|   243k|    {
 8462|   243k|        return m_str;
 8463|   243k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|   533k|{
 5804|   533k|    detail::check_scan_arg_types<Args...>();
 5805|   533k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   533k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5518|   656k|{
 5519|   656k|    constexpr bool default_constructible_constraint =
 5520|   656k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|   656k|    static_assert(default_constructible_constraint,
 5522|   656k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|   656k|    constexpr bool destructible_constraint =
 5525|   656k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|   656k|    static_assert(destructible_constraint,
 5527|   656k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|   656k|    constexpr bool non_reference_constraint =
 5530|   656k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|   656k|    static_assert(non_reference_constraint,
 5532|   656k|                  "Scan argument types must not be references");
 5533|       |
 5534|   656k|    constexpr bool movable_constraint =
 5535|   656k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|   656k|    static_assert(movable_constraint,
 5537|   656k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|   656k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|   656k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|   656k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 5779|   533k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   533k|    {
 5781|   533k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|   533k|    {
 5789|   533k|        return {detail::make_arg<
 5790|   533k|            kind, Context,
 5791|   533k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   533k|                                 typename Context::char_type>::value>(args)...};
 5793|   533k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5568|   533k|{
 5569|   533k|    return make_value<Context>(value).ref_value;
 5570|   533k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5503|   656k|{
 5504|   656k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   656k|                                  needs_context_tag>) {
 5508|   656k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   656k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   656k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5342|   656k|    {                                                                        \
 5343|   656k|        return val;                                                          \
 5344|   656k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5472|   656k|{
 5473|   656k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|   656k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|   656k|    constexpr bool scannable_char =
 5477|   656k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|   656k|    static_assert(scannable_char,
 5479|   656k|                  "Cannot scan an argument of an unsupported character "
 5480|   656k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|   656k|    constexpr bool scannable_const =
 5483|   656k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|   656k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|   656k|    constexpr bool scannable_disabled =
 5487|   656k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|   656k|    static_assert(scannable_disabled,
 5489|   656k|                  "Cannot scan an argument that has been disabled by "
 5490|   656k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|   656k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|   656k|    static_assert(
 5494|   656k|        scannable,
 5495|   656k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|   656k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|   656k|    return arg_value{arg};
 5499|   656k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5256|   656k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|   656k|    {
 5258|   656k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6047|   533k|    {
 6048|   533k|        return m_values;
 6049|   533k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   533k|        : basic_scan_args(store.desc, store.args.data())
 5830|   533k|    {
 5831|   533k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 5881|   776k|        : m_desc(desc), m_builtin_values(data)
 5882|   776k|    {
 5883|   776k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  4.11M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.11M|    static_cast<    \
  |  |  935|  4.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.11M|    static_cast<    \
  |  |  935|  4.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  4.11M|    {
 3466|  4.11M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8134|   776k|{
 8135|   776k|    return s;
 8136|   776k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8111|   776k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   243k|        : m_str(r.str)
 8457|   243k|    {
 8458|   243k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   298k|    {
 1740|   298k|        return has_value();
 1741|   298k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   833k|    {
 1815|   833k|        return &value();
 1816|   833k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|   833k|    {
 1769|   833k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   833k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   833k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   833k|        return this->get_value();
 1771|   833k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6127|   535k|    {
 6128|   535k|        return ranges::begin(m_range);
 6129|   535k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   329k|    {
  643|   329k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 267k, False: 62.0k]
  ------------------
  644|   267k|            destroy_value();
  645|   267k|        }
  646|  62.0k|        else {
  647|  62.0k|            destroy_unexpected();
  648|  62.0k|        }
  649|   329k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9443|   121k|{
 9444|   121k|    auto result = make_scan_result<Source, Args...>();
 9445|   121k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   121k|                                   make_scan_args(result->values())));
 9447|   121k|    return result;
 9448|   121k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9172|   243k|{
 9173|   243k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9174|   243k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9107|   243k|{
 9108|   243k|#if !SCN_DISABLE_LOCALE
 9109|   243k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|   243k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|   243k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|   243k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|   243k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.6k, False: 214k]
  |  |  ------------------
  ------------------
 9116|  28.6k|        return unexpected(result.error());
 9117|  28.6k|    }
 9118|   214k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|   243k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9484|  55.4k|{
 9485|  55.4k|    auto result = make_scan_result<Source, T>();
 9486|  55.4k|    fill_scan_result(
 9487|  55.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  55.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  55.4k|                            detail::make_arg<scan_context>(result->value())));
 9489|  55.4k|    return result;
 9490|  55.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9185|   110k|{
 9186|   110k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9187|   110k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|   110k|{
 9132|   110k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|   110k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.77k, False: 106k]
  |  |  ------------------
  ------------------
 9136|  4.77k|        return unexpected(result.error());
 9137|  4.77k|    }
 9138|   106k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|   110k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5553|   122k|{
 5554|   122k|    check_scan_arg_types<T>();
 5555|       |
 5556|   122k|    basic_scan_arg<Context> arg;
 5557|   122k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|   122k|    arg.m_value = make_value<Context>(value);
 5559|   122k|    return arg;
 5560|   122k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5648|   954k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5253|  10.3M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|   122k|    {
 6070|   122k|        return std::get<0>(m_values);
 6071|   122k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9374|   121k|{
 9375|   121k|    auto result = make_scan_result<Source, Args...>();
 9376|   121k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   121k|                                   make_scan_args(result->values())));
 9378|   121k|    return result;
 9379|   121k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9330|   298k|{
 9331|   298k|    return scan_result_type<Source, Args...>();
 9332|   298k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   298k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   298k|        : m_value(T{}), m_has_value(true)
  427|   298k|    {
  428|   298k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6264|   298k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6038|   298k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9315|   298k|{
 9316|   298k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.0k, False: 267k]
  |  |  ------------------
  ------------------
 9317|  31.0k|        out = unexpected(in.error());
 9318|  31.0k|    }
 9319|   267k|    else {
 9320|   267k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   267k|    static_cast<    \
  |  |  935|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   267k|    }
 9322|   298k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  31.0k|        : base(unexpect, std::move(e.error())),
 1616|  31.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  31.0k|    {
 1618|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  31.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  31.0k|          m_has_value(false)
  451|  31.0k|    {
  452|  31.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  31.0k|    {
 1316|  31.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  31.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  31.0k|    {
  903|  31.0k|        assign_common(std::move(other));
  904|  31.0k|        return *this;
  905|  31.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  31.0k|    {
  950|  31.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 31.0k, False: 0]
  ------------------
  951|  31.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 31.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  31.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  31.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.19M|    {
  490|  1.19M|        return m_has_value;
  491|  1.19M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   833k|    {
  456|   833k|        return m_value;
  457|   833k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  31.0k|    {
 1046|  31.0k|        this->destroy_value();
 1047|  31.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  31.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  31.0k|    {
  504|  31.0k|        scn::detail::construct_at(&get_unexpected(),
  505|  31.0k|                                  std::forward<Args>(args)...);
  506|  31.0k|        m_has_value = false;
  507|  31.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  31.0k|    {
  473|  31.0k|        return m_unexpected;
  474|  31.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  31.0k|    {
  481|  31.0k|        return std::move(m_unexpected);
  482|  31.0k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8461|   243k|    {
 8462|   243k|        return m_str;
 8463|   243k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|   243k|{
 5804|   243k|    detail::check_scan_arg_types<Args...>();
 5805|   243k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   243k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5518|   298k|{
 5519|   298k|    constexpr bool default_constructible_constraint =
 5520|   298k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|   298k|    static_assert(default_constructible_constraint,
 5522|   298k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|   298k|    constexpr bool destructible_constraint =
 5525|   298k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|   298k|    static_assert(destructible_constraint,
 5527|   298k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|   298k|    constexpr bool non_reference_constraint =
 5530|   298k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|   298k|    static_assert(non_reference_constraint,
 5532|   298k|                  "Scan argument types must not be references");
 5533|       |
 5534|   298k|    constexpr bool movable_constraint =
 5535|   298k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|   298k|    static_assert(movable_constraint,
 5537|   298k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|   298k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|   298k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|   298k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 5779|   243k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   243k|    {
 5781|   243k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|   243k|    {
 5789|   243k|        return {detail::make_arg<
 5790|   243k|            kind, Context,
 5791|   243k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   243k|                                 typename Context::char_type>::value>(args)...};
 5793|   243k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5568|   243k|{
 5569|   243k|    return make_value<Context>(value).ref_value;
 5570|   243k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5503|   298k|{
 5504|   298k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   298k|                                  needs_context_tag>) {
 5508|   298k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   298k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5342|   298k|    {                                                                        \
 5343|   298k|        return val;                                                          \
 5344|   298k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5472|   298k|{
 5473|   298k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|   298k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|   298k|    constexpr bool scannable_char =
 5477|   298k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|   298k|    static_assert(scannable_char,
 5479|   298k|                  "Cannot scan an argument of an unsupported character "
 5480|   298k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|   298k|    constexpr bool scannable_const =
 5483|   298k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|   298k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|   298k|    constexpr bool scannable_disabled =
 5487|   298k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|   298k|    static_assert(scannable_disabled,
 5489|   298k|                  "Cannot scan an argument that has been disabled by "
 5490|   298k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|   298k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|   298k|    static_assert(
 5494|   298k|        scannable,
 5495|   298k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|   298k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|   298k|    return arg_value{arg};
 5499|   298k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5256|   298k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|   298k|    {
 5258|   298k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6047|   243k|    {
 6048|   243k|        return m_values;
 6049|   243k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   243k|        : basic_scan_args(store.desc, store.args.data())
 5830|   243k|    {
 5831|   243k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   243k|        : m_str(r.str)
 8457|   243k|    {
 8458|   243k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   298k|    {
 1740|   298k|        return has_value();
 1741|   298k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   833k|    {
 1815|   833k|        return &value();
 1816|   833k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|   833k|    {
 1769|   833k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   833k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   833k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   833k|        return this->get_value();
 1771|   833k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9443|   121k|{
 9444|   121k|    auto result = make_scan_result<Source, Args...>();
 9445|   121k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   121k|                                   make_scan_args(result->values())));
 9447|   121k|    return result;
 9448|   121k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 9484|  55.4k|{
 9485|  55.4k|    auto result = make_scan_result<Source, T>();
 9486|  55.4k|    fill_scan_result(
 9487|  55.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  55.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  55.4k|                            detail::make_arg<scan_context>(result->value())));
 9489|  55.4k|    return result;
 9490|  55.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5553|  55.4k|{
 5554|  55.4k|    check_scan_arg_types<T>();
 5555|       |
 5556|  55.4k|    basic_scan_arg<Context> arg;
 5557|  55.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  55.4k|    arg.m_value = make_value<Context>(value);
 5559|  55.4k|    return arg;
 5560|  55.4k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|  55.4k|    {
 6070|  55.4k|        return std::get<0>(m_values);
 6071|  55.4k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  31.0k|    {
 2869|  31.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  31.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  31.0k|    {
 2850|  31.0k|        return decay_copy(t.begin());
 2851|  31.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  14.9M|{
 2094|  14.9M|    return SCN_FWD(t);
  ------------------
  |  |  936|  14.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  14.9M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   715k|    {
 2926|   715k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   715k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   715k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   715k|    {
 2908|   715k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   715k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   715k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9374|   145k|{
 9375|   145k|    auto result = make_scan_result<Source, Args...>();
 9376|   145k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   145k|                                   make_scan_args(result->values())));
 9378|   145k|    return result;
 9379|   145k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9330|   357k|{
 9331|   357k|    return scan_result_type<Source, Args...>();
 9332|   357k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   357k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   357k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   357k|    {
  613|   357k|        construct();
  614|   357k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   357k|    {
  694|   357k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   357k|        m_has_value = true;
  696|   357k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  395|   357k|{
  396|   357k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   357k|        T(std::forward<Args>(args)...);
  398|   357k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6264|   357k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6107|   357k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   357k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  1.72M|    {
  718|  1.72M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  1.72M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  1.72M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9315|   357k|{
 9316|   357k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.0k, False: 326k]
  |  |  ------------------
  ------------------
 9317|  31.0k|        out = unexpected(in.error());
 9318|  31.0k|    }
 9319|   326k|    else {
 9320|   326k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   326k|    static_cast<    \
  |  |  935|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   326k|    }
 9322|   357k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   357k|    {
 1740|   357k|        return has_value();
 1741|   357k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   715k|    {
  490|   715k|        return m_has_value;
  491|   715k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  31.0k|    {
 1746|  31.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  31.0k|        return this->get_unexpected().error();
 1748|  31.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  31.0k|    {
  473|  31.0k|        return m_unexpected;
  474|  31.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  31.0k|        : base(unexpect, std::move(e.error())),
 1616|  31.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  31.0k|    {
 1618|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  31.0k|        : m_has_value(false)
  637|  31.0k|    {
  638|  31.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  31.0k|    {
  701|  31.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  31.0k|                                  std::forward<Args>(args)...);
  703|  31.0k|        m_has_value = false;
  704|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   155k|    {
  730|   155k|        return reinterpret_cast<unexpected<E>*>(
  731|   155k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   155k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   155k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  31.0k|    {
 1316|  31.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  31.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  31.0k|    {
  903|  31.0k|        assign_common(std::move(other));
  904|  31.0k|        return *this;
  905|  31.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  31.0k|    {
  950|  31.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 31.0k, False: 0]
  ------------------
  951|  31.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 31.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  31.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  31.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  1.81M|    {
  687|  1.81M|        return m_has_value;
  688|  1.81M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  1.01M|    {
  653|  1.01M|        return *value_ptr();
  654|  1.01M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  31.0k|    {
 1046|  31.0k|        this->destroy_value();
 1047|  31.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   357k|    {
  708|   357k|        scn::detail::destroy_at(value_ptr());
  709|   357k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  401|   357k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   357k|    else {
  408|   357k|        p->~T();
  409|   357k|    }
  410|   357k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6271|   357k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  31.0k|    {
  701|  31.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  31.0k|                                  std::forward<Args>(args)...);
  703|  31.0k|        m_has_value = false;
  704|  31.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  31.0k|    {
  678|  31.0k|        return std::move(*unexpected_ptr());
  679|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  62.0k|    {
  712|  62.0k|        scn::detail::destroy_at(unexpected_ptr());
  713|  62.0k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6138|   326k|    {
 6139|   326k|        m_range = std::forward<Other>(r);
 6140|   326k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   326k|    {
 1795|   326k|        return value();
 1796|   326k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   326k|    {
 1769|   326k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   326k|        return this->get_value();
 1771|   326k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   326k|    {
  456|   326k|        return m_value;
  457|   326k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9154|   145k|{
 9155|   145k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9156|   145k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9091|   145k|{
 9092|   145k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|   145k|    auto result = vscan_impl(buffer, format, args);
 9095|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.3k, False: 131k]
  |  |  ------------------
  ------------------
 9096|  14.3k|        return unexpected(result.error());
 9097|  14.3k|    }
 9098|   131k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|   145k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5074|   357k|{
 5075|   357k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|   357k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|   357k|                  "\n"
 5079|   357k|                  "Unsupported range type given as input to a scanning "
 5080|   357k|                  "function.\n"
 5081|   357k|                  "A range needs to have a character type (value type) "
 5082|   357k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|   357k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|   357k|                  "to be included.\n"
 5085|   357k|                  "See the scnlib documentation for more details.");
 5086|   357k|    static_assert(
 5087|   357k|        !std::is_same_v<T, custom_char_traits>,
 5088|   357k|        "\n"
 5089|   357k|        "Unsupported range type given as input to a scanning "
 5090|   357k|        "function.\n"
 5091|   357k|        "String types (std::basic_string, and std::basic_string_view) "
 5092|   357k|        "need to use std::char_traits. Strings with custom Traits are "
 5093|   357k|        "not supported.");
 5094|   357k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|   357k|                  "\n"
 5096|   357k|                  "Unsupported range type given as input to a scanning "
 5097|   357k|                  "function.\n"
 5098|   357k|                  "file_marker_found cannot be used as an "
 5099|   357k|                  "source range type to scn::scan.\n"
 5100|   357k|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|   357k|                  "and do not provide an explicit source range, "
 5102|   357k|                  "or use scn::scan with a FILE* directly.");
 5103|   357k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|   357k|                  "\n"
 5105|   357k|                  "Unsupported range type given as input to a scanning "
 5106|   357k|                  "function.\n"
 5107|   357k|                  "In order to be scannable, a range needs to satisfy "
 5108|   357k|                  "`forward_range`. `input_range` is not sufficient.");
 5109|   357k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|   357k|                  "\n"
 5111|   357k|                  "Unsupported range type given as input to a scanning "
 5112|   357k|                  "function.\n"
 5113|   357k|                  "A range needs to model forward_range and have a valid "
 5114|   357k|                  "character type (char or wchar_t) to be scannable.\n"
 5115|   357k|                  "Examples of scannable ranges are std::string, "
 5116|   357k|                  "std::string_view, "
 5117|   357k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|   357k|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|   357k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|   357k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5044|   357k|{
 5045|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5046|       |        return file_marker_found{};
 5047|       |    }
 5048|       |    else if constexpr (!ranges::forward_range<Range>) {
 5049|       |        if constexpr (ranges::range<Range>) {
 5050|       |            return insufficient_range{};
 5051|       |        }
 5052|       |        else {
 5053|       |            return invalid_input_range{};
 5054|       |        }
 5055|       |    }
 5056|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5057|       |        return invalid_char_type{};
 5058|       |    }
 5059|   357k|    else {
 5060|   357k|        return make_forward_scan_buffer(r);
 5061|   357k|    }
 5062|   357k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4878|   357k|{
 4879|   357k|    return basic_scan_forward_buffer_impl(range);
 4880|   357k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   357k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   357k|          m_cursor(ranges::begin(*m_range))
 4765|   357k|    {
 4766|   357k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4735|   357k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   357k|    {
 4737|   357k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4426|   357k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   357k|    {
 4428|   357k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   357k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   684k|    {
 2869|   684k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   684k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   684k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   684k|    {
 2850|   684k|        return decay_copy(t.begin());
 2851|   684k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  1.01M|    {
 3480|  1.01M|        return m_iterator;
 3481|  1.01M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4769|  4.30M|    {
 4770|  4.30M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 38.1k, False: 4.26M]
  ------------------
 4771|  38.1k|            return false;
 4772|  38.1k|        }
 4773|  4.26M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  4.26M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  4.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  4.26M|        }
 4776|  4.26M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 3.92M, False: 340k]
  ------------------
 4777|  3.92M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  3.92M|                                          this->m_current_view.begin(),
 4779|  3.92M|                                          this->m_current_view.end());
 4780|  3.92M|        }
 4781|  4.26M|        m_latest = *m_cursor;
 4782|  4.26M|        ++m_cursor;
 4783|  4.26M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  4.26M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  4.26M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  4.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  4.26M|        }
 4787|  4.26M|        return true;
 4788|  4.30M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  12.8M|    {
 2926|  12.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  12.8M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  12.8M|    {
 2908|  12.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  12.8M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  13.1M|    {
 3484|  13.1M|        return m_sentinel;
 3485|  13.1M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   357k|    {
 4346|   357k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   357k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   357k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  31.0k|        : base(unexpect, std::move(e.error())),
 1616|  31.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  31.0k|    {
 1618|  31.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  31.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  31.0k|          m_has_value(false)
  451|  31.0k|    {
  452|  31.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   357k|    {
 1316|   357k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6368|   326k|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|   326k|                      ranges::iterator_t<SourceRange>>) {
 6371|   326k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|   326k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   326k|    {
 2869|   326k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   326k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   326k|    {
 2850|   326k|        return decay_copy(t.begin());
 2851|   326k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6355|   326k|{
 6356|   326k|    return ranges::end(source);
 6357|   326k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   326k|    {
 2926|   326k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   326k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   326k|    {
 2908|   326k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   326k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   326k|        : base(std::in_place, std::forward<U>(val)),
 1570|   326k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   326k|    {
 1572|   326k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   326k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   326k|    {
  442|   326k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8461|   290k|    {
 8462|   290k|        return m_str;
 8463|   290k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   684k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   684k|    static_cast<    \
  |  |  935|   684k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   684k|    static_cast<    \
  |  |  935|   684k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   684k|    {
 3466|   684k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   290k|        : m_str(r.str)
 8457|   290k|    {
 8458|   290k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   357k|    {
 1740|   357k|        return has_value();
 1741|   357k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.01M|    {
 1815|  1.01M|        return &value();
 1816|  1.01M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|  1.01M|    {
 1769|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.01M|        return this->get_value();
 1771|  1.01M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6127|   326k|    {
 6128|   326k|        return ranges::begin(m_range);
 6129|   326k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   388k|    {
  643|   388k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 326k, False: 62.0k]
  ------------------
  644|   326k|            destroy_value();
  645|   326k|        }
  646|  62.0k|        else {
  647|  62.0k|            destroy_unexpected();
  648|  62.0k|        }
  649|   388k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9443|   145k|{
 9444|   145k|    auto result = make_scan_result<Source, Args...>();
 9445|   145k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   145k|                                   make_scan_args(result->values())));
 9447|   145k|    return result;
 9448|   145k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9172|   145k|{
 9173|   145k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9174|   145k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9107|   145k|{
 9108|   145k|#if !SCN_DISABLE_LOCALE
 9109|   145k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|   145k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|   145k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|   145k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.3k, False: 131k]
  |  |  ------------------
  ------------------
 9116|  14.3k|        return unexpected(result.error());
 9117|  14.3k|    }
 9118|   131k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|   145k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 9484|  67.1k|{
 9485|  67.1k|    auto result = make_scan_result<Source, T>();
 9486|  67.1k|    fill_scan_result(
 9487|  67.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  67.1k|                            detail::make_arg<scan_context>(result->value())));
 9489|  67.1k|    return result;
 9490|  67.1k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9185|  67.1k|{
 9186|  67.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9187|  67.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|  67.1k|{
 9132|  67.1k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|  67.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|  67.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.38k, False: 64.7k]
  |  |  ------------------
  ------------------
 9136|  2.38k|        return unexpected(result.error());
 9137|  2.38k|    }
 9138|  64.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|  67.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   128k|    {
 2869|   128k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   128k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   128k|    {
 2850|   128k|        return decay_copy(t.begin());
 2851|   128k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  48.4M|{
 2094|  48.4M|    return SCN_FWD(t);
  ------------------
  |  |  936|  48.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  48.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  12.4M|    {
 2926|  12.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  12.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  12.4M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  12.4M|    {
 2908|  12.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  12.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  12.4M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9330|  3.12M|{
 9331|  3.12M|    return scan_result_type<Source, Args...>();
 9332|  3.12M|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  3.12M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  3.12M|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  3.12M|    {
  613|  3.12M|        construct();
  614|  3.12M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  3.12M|    {
  694|  3.12M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  3.12M|        m_has_value = true;
  696|  3.12M|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|  3.12M|{
  396|  3.12M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  3.12M|        T(std::forward<Args>(args)...);
  398|  3.12M|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6264|  3.12M|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6107|  6.24M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  6.24M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6038|  6.24M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  15.4M|    {
  718|  15.4M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  15.4M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  15.4M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9315|  3.12M|{
 9316|  3.12M|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 62.0k, False: 3.05M]
  |  |  ------------------
  ------------------
 9317|  62.0k|        out = unexpected(in.error());
 9318|  62.0k|    }
 9319|  3.05M|    else {
 9320|  3.05M|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  3.05M|    static_cast<    \
  |  |  935|  3.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|  3.05M|    }
 9322|  3.12M|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  6.24M|    {
 1740|  6.24M|        return has_value();
 1741|  6.24M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  12.4M|    {
  490|  12.4M|        return m_has_value;
  491|  12.4M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   124k|    {
 1746|   124k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   124k|        return this->get_unexpected().error();
 1748|   124k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   124k|    {
  473|   124k|        return m_unexpected;
  474|   124k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  62.0k|        : base(unexpect, std::move(e.error())),
 1616|  62.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  62.0k|    {
 1618|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  62.0k|        : m_has_value(false)
  637|  62.0k|    {
  638|  62.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  62.0k|    {
  701|  62.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  62.0k|                                  std::forward<Args>(args)...);
  703|  62.0k|        m_has_value = false;
  704|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   310k|    {
  730|   310k|        return reinterpret_cast<unexpected<E>*>(
  731|   310k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   310k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   310k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  62.0k|    {
 1316|  62.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  62.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  62.0k|    {
  903|  62.0k|        assign_common(std::move(other));
  904|  62.0k|        return *this;
  905|  62.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  62.0k|    {
  950|  62.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 62.0k, False: 0]
  ------------------
  951|  62.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 62.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  62.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  62.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  15.6M|    {
  687|  15.6M|        return m_has_value;
  688|  15.6M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  9.23M|    {
  653|  9.23M|        return *value_ptr();
  654|  9.23M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  62.0k|    {
 1046|  62.0k|        this->destroy_value();
 1047|  62.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  3.12M|    {
  708|  3.12M|        scn::detail::destroy_at(value_ptr());
  709|  3.12M|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|  3.12M|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  3.12M|    else {
  408|  3.12M|        p->~T();
  409|  3.12M|    }
  410|  3.12M|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6271|  3.12M|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  62.0k|    {
  701|  62.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  62.0k|                                  std::forward<Args>(args)...);
  703|  62.0k|        m_has_value = false;
  704|  62.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  62.0k|    {
  678|  62.0k|        return std::move(*unexpected_ptr());
  679|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|   124k|    {
  712|   124k|        scn::detail::destroy_at(unexpected_ptr());
  713|   124k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6138|  6.11M|    {
 6139|  6.11M|        m_range = std::forward<Other>(r);
 6140|  6.11M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  6.11M|    {
 1795|  6.11M|        return value();
 1796|  6.11M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  6.11M|    {
 1769|  6.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.11M|        return this->get_value();
 1771|  6.11M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.11M|    {
  456|  6.11M|        return m_value;
  457|  6.11M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9091|  2.50M|{
 9092|  2.50M|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|  2.50M|    auto result = vscan_impl(buffer, format, args);
 9095|  2.50M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.2k, False: 2.44M]
  |  |  ------------------
  ------------------
 9096|  57.2k|        return unexpected(result.error());
 9097|  57.2k|    }
 9098|  2.44M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|  2.50M|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5074|  6.24M|{
 5075|  6.24M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|  6.24M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|  6.24M|                  "\n"
 5079|  6.24M|                  "Unsupported range type given as input to a scanning "
 5080|  6.24M|                  "function.\n"
 5081|  6.24M|                  "A range needs to have a character type (value type) "
 5082|  6.24M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|  6.24M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|  6.24M|                  "to be included.\n"
 5085|  6.24M|                  "See the scnlib documentation for more details.");
 5086|  6.24M|    static_assert(
 5087|  6.24M|        !std::is_same_v<T, custom_char_traits>,
 5088|  6.24M|        "\n"
 5089|  6.24M|        "Unsupported range type given as input to a scanning "
 5090|  6.24M|        "function.\n"
 5091|  6.24M|        "String types (std::basic_string, and std::basic_string_view) "
 5092|  6.24M|        "need to use std::char_traits. Strings with custom Traits are "
 5093|  6.24M|        "not supported.");
 5094|  6.24M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|  6.24M|                  "\n"
 5096|  6.24M|                  "Unsupported range type given as input to a scanning "
 5097|  6.24M|                  "function.\n"
 5098|  6.24M|                  "file_marker_found cannot be used as an "
 5099|  6.24M|                  "source range type to scn::scan.\n"
 5100|  6.24M|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|  6.24M|                  "and do not provide an explicit source range, "
 5102|  6.24M|                  "or use scn::scan with a FILE* directly.");
 5103|  6.24M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|  6.24M|                  "\n"
 5105|  6.24M|                  "Unsupported range type given as input to a scanning "
 5106|  6.24M|                  "function.\n"
 5107|  6.24M|                  "In order to be scannable, a range needs to satisfy "
 5108|  6.24M|                  "`forward_range`. `input_range` is not sufficient.");
 5109|  6.24M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|  6.24M|                  "\n"
 5111|  6.24M|                  "Unsupported range type given as input to a scanning "
 5112|  6.24M|                  "function.\n"
 5113|  6.24M|                  "A range needs to model forward_range and have a valid "
 5114|  6.24M|                  "character type (char or wchar_t) to be scannable.\n"
 5115|  6.24M|                  "Examples of scannable ranges are std::string, "
 5116|  6.24M|                  "std::string_view, "
 5117|  6.24M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|  6.24M|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|  6.24M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|  6.24M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5013|  6.24M|{
 5014|  6.24M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5015|  6.24M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5016|       |    }
 5017|       |    else {
 5018|       |        return invalid_char_type{};
 5019|       |    }
 5020|  6.24M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  6.24M|    {
 3000|  6.24M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  6.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  6.24M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  6.24M|    {
 2981|  6.24M|        return t.data();
 2982|  6.24M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  6.24M|    {
 3383|  6.24M|        return detail::to_address(ranges::begin(derived()));
 3384|  6.24M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  23.6M|{
  316|  23.6M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  23.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  23.6M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   585M|{
  294|   585M|    return p;
  295|   585M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  12.3M|    {
 2869|  12.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  12.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  12.3M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  12.3M|    {
 2850|  12.3M|        return decay_copy(t.begin());
 2851|  12.3M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   517M|    {
 3480|   517M|        return m_iterator;
 3481|   517M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  6.24M|    {
 3339|  6.24M|        return static_cast<const D&>(*this);
 3340|  6.24M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  6.24M|    {
 3075|  6.24M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  6.24M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  6.24M|    {
 3041|  6.24M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  6.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  6.24M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  14.9M|    {
 3496|  14.9M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  14.9M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   124k|        : base(unexpect, std::move(e.error())),
 1616|   124k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   124k|    {
 1618|   124k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   124k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   124k|          m_has_value(false)
  451|   124k|    {
  452|   124k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.24M|    {
 1316|  6.24M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6368|  6.11M|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|  6.11M|                      ranges::iterator_t<SourceRange>>) {
 6371|  6.11M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|  6.11M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  17.3M|    {
 2869|  17.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  17.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  17.3M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  17.3M|    {
 2850|  17.3M|        return decay_copy(t.begin());
 2851|  17.3M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6355|  6.11M|{
 6356|  6.11M|    return ranges::end(source);
 6357|  6.11M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  6.11M|    {
 2926|  6.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  6.11M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  6.11M|    {
 2908|  6.11M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  6.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  6.11M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   484M|    {
 3484|   484M|        return m_sentinel;
 3485|   484M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  6.11M|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.11M|    {
 1572|  6.11M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  6.11M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.11M|    {
  442|  6.11M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8461|  2.50M|    {
 8462|  2.50M|        return m_str;
 8463|  2.50M|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|  5.00M|{
 5804|  5.00M|    detail::check_scan_arg_types<Args...>();
 5805|  5.00M|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  5.00M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5518|  6.24M|{
 5519|  6.24M|    constexpr bool default_constructible_constraint =
 5520|  6.24M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  6.24M|    static_assert(default_constructible_constraint,
 5522|  6.24M|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  6.24M|    constexpr bool destructible_constraint =
 5525|  6.24M|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  6.24M|    static_assert(destructible_constraint,
 5527|  6.24M|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  6.24M|    constexpr bool non_reference_constraint =
 5530|  6.24M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  6.24M|    static_assert(non_reference_constraint,
 5532|  6.24M|                  "Scan argument types must not be references");
 5533|       |
 5534|  6.24M|    constexpr bool movable_constraint =
 5535|  6.24M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  6.24M|    static_assert(movable_constraint,
 5537|  6.24M|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  6.24M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  6.24M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  6.24M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 5779|  5.00M|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  5.00M|    {
 5781|  5.00M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|  5.00M|    {
 5789|  5.00M|        return {detail::make_arg<
 5790|  5.00M|            kind, Context,
 5791|  5.00M|            mapped_type_constant<remove_cvref_t<A>,
 5792|  5.00M|                                 typename Context::char_type>::value>(args)...};
 5793|  5.00M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5568|  5.00M|{
 5569|  5.00M|    return make_value<Context>(value).ref_value;
 5570|  5.00M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5503|  6.24M|{
 5504|  6.24M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  6.24M|                                  needs_context_tag>) {
 5508|  6.24M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  6.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  6.24M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5342|  6.24M|    {                                                                        \
 5343|  6.24M|        return val;                                                          \
 5344|  6.24M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5472|  6.24M|{
 5473|  6.24M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  6.24M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  6.24M|    constexpr bool scannable_char =
 5477|  6.24M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  6.24M|    static_assert(scannable_char,
 5479|  6.24M|                  "Cannot scan an argument of an unsupported character "
 5480|  6.24M|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  6.24M|    constexpr bool scannable_const =
 5483|  6.24M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  6.24M|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  6.24M|    constexpr bool scannable_disabled =
 5487|  6.24M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  6.24M|    static_assert(scannable_disabled,
 5489|  6.24M|                  "Cannot scan an argument that has been disabled by "
 5490|  6.24M|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  6.24M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  6.24M|    static_assert(
 5494|  6.24M|        scannable,
 5495|  6.24M|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  6.24M|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  6.24M|    return arg_value{arg};
 5499|  6.24M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5256|  6.24M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  6.24M|    {
 5258|  6.24M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6047|  5.00M|    {
 6048|  5.00M|        return m_values;
 6049|  5.00M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  5.00M|        : basic_scan_args(store.desc, store.args.data())
 5830|  5.00M|    {
 5831|  5.00M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 5881|  7.51M|        : m_desc(desc), m_builtin_values(data)
 5882|  7.51M|    {
 5883|  7.51M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|   197M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   197M|    static_cast<    \
  |  |  935|   197M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   197M|    static_cast<    \
  |  |  935|   197M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   197M|    {
 3466|   197M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8139|  7.51M|{
 8140|  7.51M|    return s;
 8141|  7.51M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8111|  7.51M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  2.50M|        : m_str(r.str)
 8457|  2.50M|    {
 8458|  2.50M|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  3.12M|    {
 1740|  3.12M|        return has_value();
 1741|  3.12M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  9.23M|    {
 1815|  9.23M|        return &value();
 1816|  9.23M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  9.23M|    {
 1769|  9.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.23M|        return this->get_value();
 1771|  9.23M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6127|  6.11M|    {
 6128|  6.11M|        return ranges::begin(m_range);
 6129|  6.11M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  3.18M|    {
  643|  3.18M|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 3.05M, False: 124k]
  ------------------
  644|  3.05M|            destroy_value();
  645|  3.05M|        }
  646|   124k|        else {
  647|   124k|            destroy_unexpected();
  648|   124k|        }
  649|  3.18M|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9107|  2.50M|{
 9108|  2.50M|#if !SCN_DISABLE_LOCALE
 9109|  2.50M|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|  2.50M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|  2.50M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|  2.50M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|  2.50M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.2k, False: 2.44M]
  |  |  ------------------
  ------------------
 9116|  57.2k|        return unexpected(result.error());
 9117|  57.2k|    }
 9118|  2.44M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|  2.50M|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|  1.23M|{
 9132|  1.23M|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|  1.23M|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|  1.23M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.54k, False: 1.22M]
  |  |  ------------------
  ------------------
 9136|  9.54k|        return unexpected(result.error());
 9137|  9.54k|    }
 9138|  1.22M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|  1.23M|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5553|  1.23M|{
 5554|  1.23M|    check_scan_arg_types<T>();
 5555|       |
 5556|  1.23M|    basic_scan_arg<Context> arg;
 5557|  1.23M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  1.23M|    arg.m_value = make_value<Context>(value);
 5559|  1.23M|    return arg;
 5560|  1.23M|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5648|  9.36M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|  1.23M|    {
 6070|  1.23M|        return std::get<0>(m_values);
 6071|  1.23M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9330|  3.12M|{
 9331|  3.12M|    return scan_result_type<Source, Args...>();
 9332|  3.12M|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  3.12M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  3.12M|        : m_value(T{}), m_has_value(true)
  427|  3.12M|    {
  428|  3.12M|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6264|  3.12M|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6038|  3.12M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9315|  3.12M|{
 9316|  3.12M|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 62.0k, False: 3.05M]
  |  |  ------------------
  ------------------
 9317|  62.0k|        out = unexpected(in.error());
 9318|  62.0k|    }
 9319|  3.05M|    else {
 9320|  3.05M|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  3.05M|    static_cast<    \
  |  |  935|  3.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|  3.05M|    }
 9322|  3.12M|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  62.0k|        : base(unexpect, std::move(e.error())),
 1616|  62.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  62.0k|    {
 1618|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  62.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  62.0k|          m_has_value(false)
  451|  62.0k|    {
  452|  62.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  62.0k|    {
 1316|  62.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  62.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  62.0k|    {
  903|  62.0k|        assign_common(std::move(other));
  904|  62.0k|        return *this;
  905|  62.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  62.0k|    {
  950|  62.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 62.0k, False: 0]
  ------------------
  951|  62.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 62.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  62.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  62.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  12.4M|    {
  490|  12.4M|        return m_has_value;
  491|  12.4M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  9.23M|    {
  456|  9.23M|        return m_value;
  457|  9.23M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  62.0k|    {
 1046|  62.0k|        this->destroy_value();
 1047|  62.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  62.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  62.0k|    {
  504|  62.0k|        scn::detail::construct_at(&get_unexpected(),
  505|  62.0k|                                  std::forward<Args>(args)...);
  506|  62.0k|        m_has_value = false;
  507|  62.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  62.0k|    {
  473|  62.0k|        return m_unexpected;
  474|  62.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  62.0k|    {
  481|  62.0k|        return std::move(m_unexpected);
  482|  62.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8461|  2.50M|    {
 8462|  2.50M|        return m_str;
 8463|  2.50M|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 5803|  2.50M|{
 5804|  2.50M|    detail::check_scan_arg_types<Args...>();
 5805|  2.50M|    return detail::scan_arg_store<Context, Args...>(values);
 5806|  2.50M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5518|  3.12M|{
 5519|  3.12M|    constexpr bool default_constructible_constraint =
 5520|  3.12M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  3.12M|    static_assert(default_constructible_constraint,
 5522|  3.12M|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  3.12M|    constexpr bool destructible_constraint =
 5525|  3.12M|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  3.12M|    static_assert(destructible_constraint,
 5527|  3.12M|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  3.12M|    constexpr bool non_reference_constraint =
 5530|  3.12M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  3.12M|    static_assert(non_reference_constraint,
 5532|  3.12M|                  "Scan argument types must not be references");
 5533|       |
 5534|  3.12M|    constexpr bool movable_constraint =
 5535|  3.12M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  3.12M|    static_assert(movable_constraint,
 5537|  3.12M|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  3.12M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  3.12M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  3.12M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 5779|  2.50M|        : args(std::apply(make_argptrs<Args...>, args))
 5780|  2.50M|    {
 5781|  2.50M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 5788|  2.50M|    {
 5789|  2.50M|        return {detail::make_arg<
 5790|  2.50M|            kind, Context,
 5791|  2.50M|            mapped_type_constant<remove_cvref_t<A>,
 5792|  2.50M|                                 typename Context::char_type>::value>(args)...};
 5793|  2.50M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5568|  2.50M|{
 5569|  2.50M|    return make_value<Context>(value).ref_value;
 5570|  2.50M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5503|  3.12M|{
 5504|  3.12M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|  3.12M|                                  needs_context_tag>) {
 5508|  3.12M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  3.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|  3.12M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5342|  3.12M|    {                                                                        \
 5343|  3.12M|        return val;                                                          \
 5344|  3.12M|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5472|  3.12M|{
 5473|  3.12M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  3.12M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  3.12M|    constexpr bool scannable_char =
 5477|  3.12M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  3.12M|    static_assert(scannable_char,
 5479|  3.12M|                  "Cannot scan an argument of an unsupported character "
 5480|  3.12M|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  3.12M|    constexpr bool scannable_const =
 5483|  3.12M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  3.12M|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  3.12M|    constexpr bool scannable_disabled =
 5487|  3.12M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  3.12M|    static_assert(scannable_disabled,
 5489|  3.12M|                  "Cannot scan an argument that has been disabled by "
 5490|  3.12M|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  3.12M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  3.12M|    static_assert(
 5494|  3.12M|        scannable,
 5495|  3.12M|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  3.12M|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  3.12M|    return arg_value{arg};
 5499|  3.12M|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5256|  3.12M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  3.12M|    {
 5258|  3.12M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6047|  2.50M|    {
 6048|  2.50M|        return m_values;
 6049|  2.50M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|  2.50M|        : basic_scan_args(store.desc, store.args.data())
 5830|  2.50M|    {
 5831|  2.50M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  2.50M|        : m_str(r.str)
 8457|  2.50M|    {
 8458|  2.50M|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  3.12M|    {
 1740|  3.12M|        return has_value();
 1741|  3.12M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  9.23M|    {
 1815|  9.23M|        return &value();
 1816|  9.23M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  9.23M|    {
 1769|  9.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.23M|        return this->get_value();
 1771|  9.23M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5553|   616k|{
 5554|   616k|    check_scan_arg_types<T>();
 5555|       |
 5556|   616k|    basic_scan_arg<Context> arg;
 5557|   616k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|   616k|    arg.m_value = make_value<Context>(value);
 5559|   616k|    return arg;
 5560|   616k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|   616k|    {
 6070|   616k|        return std::get<0>(m_values);
 6071|   616k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  62.0k|    {
 2869|  62.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  62.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  62.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  62.0k|    {
 2850|  62.0k|        return decay_copy(t.begin());
 2851|  62.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|   238M|{
 2094|   238M|    return SCN_FWD(t);
  ------------------
  |  |  936|   238M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   238M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  6.24M|    {
 2926|  6.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  6.24M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  6.24M|    {
 2908|  6.24M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  6.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  6.24M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9330|  3.12M|{
 9331|  3.12M|    return scan_result_type<Source, Args...>();
 9332|  3.12M|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  3.12M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  3.12M|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  3.12M|    {
  613|  3.12M|        construct();
  614|  3.12M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  3.12M|    {
  694|  3.12M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  3.12M|        m_has_value = true;
  696|  3.12M|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  395|  3.12M|{
  396|  3.12M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  3.12M|        T(std::forward<Args>(args)...);
  398|  3.12M|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6264|  3.12M|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6107|  3.12M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|  3.12M|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  15.4M|    {
  718|  15.4M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  15.4M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  15.4M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9315|  3.12M|{
 9316|  3.12M|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  3.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 62.0k, False: 3.05M]
  |  |  ------------------
  ------------------
 9317|  62.0k|        out = unexpected(in.error());
 9318|  62.0k|    }
 9319|  3.05M|    else {
 9320|  3.05M|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  3.05M|    static_cast<    \
  |  |  935|  3.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|  3.05M|    }
 9322|  3.12M|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  3.12M|    {
 1740|  3.12M|        return has_value();
 1741|  3.12M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.24M|    {
  490|  6.24M|        return m_has_value;
  491|  6.24M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  62.0k|    {
 1746|  62.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  62.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  62.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  62.0k|        return this->get_unexpected().error();
 1748|  62.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  62.0k|    {
  473|  62.0k|        return m_unexpected;
  474|  62.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  62.0k|        : base(unexpect, std::move(e.error())),
 1616|  62.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  62.0k|    {
 1618|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  62.0k|        : m_has_value(false)
  637|  62.0k|    {
  638|  62.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  62.0k|    {
  701|  62.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  62.0k|                                  std::forward<Args>(args)...);
  703|  62.0k|        m_has_value = false;
  704|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   310k|    {
  730|   310k|        return reinterpret_cast<unexpected<E>*>(
  731|   310k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   310k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   310k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  62.0k|    {
 1316|  62.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  62.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  62.0k|    {
  903|  62.0k|        assign_common(std::move(other));
  904|  62.0k|        return *this;
  905|  62.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  62.0k|    {
  950|  62.0k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 62.0k, False: 0]
  ------------------
  951|  62.0k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 62.0k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  62.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  62.0k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  15.6M|    {
  687|  15.6M|        return m_has_value;
  688|  15.6M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  9.23M|    {
  653|  9.23M|        return *value_ptr();
  654|  9.23M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  62.0k|    {
 1046|  62.0k|        this->destroy_value();
 1047|  62.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  3.12M|    {
  708|  3.12M|        scn::detail::destroy_at(value_ptr());
  709|  3.12M|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  401|  3.12M|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  3.12M|    else {
  408|  3.12M|        p->~T();
  409|  3.12M|    }
  410|  3.12M|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6271|  3.12M|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  62.0k|    {
  701|  62.0k|        scn::detail::construct_at(unexpected_ptr(),
  702|  62.0k|                                  std::forward<Args>(args)...);
  703|  62.0k|        m_has_value = false;
  704|  62.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  62.0k|    {
  678|  62.0k|        return std::move(*unexpected_ptr());
  679|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|   124k|    {
  712|   124k|        scn::detail::destroy_at(unexpected_ptr());
  713|   124k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6138|  3.05M|    {
 6139|  3.05M|        m_range = std::forward<Other>(r);
 6140|  3.05M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  3.05M|    {
 1795|  3.05M|        return value();
 1796|  3.05M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  3.05M|    {
 1769|  3.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.05M|        return this->get_value();
 1771|  3.05M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.05M|    {
  456|  3.05M|        return m_value;
  457|  3.05M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9091|  1.25M|{
 9092|  1.25M|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|  1.25M|    auto result = vscan_impl(buffer, format, args);
 9095|  1.25M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.6k, False: 1.22M]
  |  |  ------------------
  ------------------
 9096|  28.6k|        return unexpected(result.error());
 9097|  28.6k|    }
 9098|  1.22M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|  1.25M|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5074|  3.12M|{
 5075|  3.12M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|  3.12M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|  3.12M|                  "\n"
 5079|  3.12M|                  "Unsupported range type given as input to a scanning "
 5080|  3.12M|                  "function.\n"
 5081|  3.12M|                  "A range needs to have a character type (value type) "
 5082|  3.12M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|  3.12M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|  3.12M|                  "to be included.\n"
 5085|  3.12M|                  "See the scnlib documentation for more details.");
 5086|  3.12M|    static_assert(
 5087|  3.12M|        !std::is_same_v<T, custom_char_traits>,
 5088|  3.12M|        "\n"
 5089|  3.12M|        "Unsupported range type given as input to a scanning "
 5090|  3.12M|        "function.\n"
 5091|  3.12M|        "String types (std::basic_string, and std::basic_string_view) "
 5092|  3.12M|        "need to use std::char_traits. Strings with custom Traits are "
 5093|  3.12M|        "not supported.");
 5094|  3.12M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|  3.12M|                  "\n"
 5096|  3.12M|                  "Unsupported range type given as input to a scanning "
 5097|  3.12M|                  "function.\n"
 5098|  3.12M|                  "file_marker_found cannot be used as an "
 5099|  3.12M|                  "source range type to scn::scan.\n"
 5100|  3.12M|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|  3.12M|                  "and do not provide an explicit source range, "
 5102|  3.12M|                  "or use scn::scan with a FILE* directly.");
 5103|  3.12M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|  3.12M|                  "\n"
 5105|  3.12M|                  "Unsupported range type given as input to a scanning "
 5106|  3.12M|                  "function.\n"
 5107|  3.12M|                  "In order to be scannable, a range needs to satisfy "
 5108|  3.12M|                  "`forward_range`. `input_range` is not sufficient.");
 5109|  3.12M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|  3.12M|                  "\n"
 5111|  3.12M|                  "Unsupported range type given as input to a scanning "
 5112|  3.12M|                  "function.\n"
 5113|  3.12M|                  "A range needs to model forward_range and have a valid "
 5114|  3.12M|                  "character type (char or wchar_t) to be scannable.\n"
 5115|  3.12M|                  "Examples of scannable ranges are std::string, "
 5116|  3.12M|                  "std::string_view, "
 5117|  3.12M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|  3.12M|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|  3.12M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|  3.12M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5044|  3.12M|{
 5045|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5046|       |        return file_marker_found{};
 5047|       |    }
 5048|       |    else if constexpr (!ranges::forward_range<Range>) {
 5049|       |        if constexpr (ranges::range<Range>) {
 5050|       |            return insufficient_range{};
 5051|       |        }
 5052|       |        else {
 5053|       |            return invalid_input_range{};
 5054|       |        }
 5055|       |    }
 5056|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5057|       |        return invalid_char_type{};
 5058|       |    }
 5059|  3.12M|    else {
 5060|  3.12M|        return make_forward_scan_buffer(r);
 5061|  3.12M|    }
 5062|  3.12M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4878|  3.12M|{
 4879|  3.12M|    return basic_scan_forward_buffer_impl(range);
 4880|  3.12M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|  3.12M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  3.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|  3.12M|          m_cursor(ranges::begin(*m_range))
 4765|  3.12M|    {
 4766|  3.12M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4735|  3.12M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|  3.12M|    {
 4737|  3.12M|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4426|  3.12M|        : m_current_view(sv), m_is_contiguous(false)
 4427|  3.12M|    {
 4428|  3.12M|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|  3.12M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  6.18M|    {
 2869|  6.18M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  6.18M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  6.18M|    {
 2850|  6.18M|        return decay_copy(t.begin());
 2851|  6.18M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  9.23M|    {
 3480|  9.23M|        return m_iterator;
 3481|  9.23M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4769|  73.3M|    {
 4770|  73.3M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 51.8k, False: 73.2M]
  ------------------
 4771|  51.8k|            return false;
 4772|  51.8k|        }
 4773|  73.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  73.2M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  73.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  73.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  73.2M|        }
 4776|  73.2M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 70.2M, False: 3.08M]
  ------------------
 4777|  70.2M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  70.2M|                                          this->m_current_view.begin(),
 4779|  70.2M|                                          this->m_current_view.end());
 4780|  70.2M|        }
 4781|  73.2M|        m_latest = *m_cursor;
 4782|  73.2M|        ++m_cursor;
 4783|  73.2M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  73.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  73.2M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  73.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  73.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  73.2M|        }
 4787|  73.2M|        return true;
 4788|  73.3M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   219M|    {
 2926|   219M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   219M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   219M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   219M|    {
 2908|   219M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   219M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   219M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   222M|    {
 3484|   222M|        return m_sentinel;
 3485|   222M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|  3.12M|    {
 4346|  3.12M|        SCN_UNUSED(position);
  ------------------
  |  |  915|  3.12M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  3.12M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  62.0k|        : base(unexpect, std::move(e.error())),
 1616|  62.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  62.0k|    {
 1618|  62.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  62.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  62.0k|          m_has_value(false)
  451|  62.0k|    {
  452|  62.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.12M|    {
 1316|  3.12M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6368|  3.05M|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|  3.05M|                      ranges::iterator_t<SourceRange>>) {
 6371|  3.05M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|  3.05M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.05M|    {
 2869|  3.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.05M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.05M|    {
 2850|  3.05M|        return decay_copy(t.begin());
 2851|  3.05M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6355|  3.05M|{
 6356|  3.05M|    return ranges::end(source);
 6357|  3.05M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.05M|    {
 2926|  3.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.05M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.05M|    {
 2908|  3.05M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.05M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  3.05M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.05M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.05M|    {
 1572|  3.05M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  3.05M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.05M|    {
  442|  3.05M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8461|  2.50M|    {
 8462|  2.50M|        return m_str;
 8463|  2.50M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  6.18M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.18M|    static_cast<    \
  |  |  935|  6.18M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.18M|    static_cast<    \
  |  |  935|  6.18M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  6.18M|    {
 3466|  6.18M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  2.50M|        : m_str(r.str)
 8457|  2.50M|    {
 8458|  2.50M|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  3.12M|    {
 1740|  3.12M|        return has_value();
 1741|  3.12M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  9.23M|    {
 1815|  9.23M|        return &value();
 1816|  9.23M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|  9.23M|    {
 1769|  9.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.23M|        return this->get_value();
 1771|  9.23M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6127|  3.05M|    {
 6128|  3.05M|        return ranges::begin(m_range);
 6129|  3.05M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  3.18M|    {
  643|  3.18M|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 3.05M, False: 124k]
  ------------------
  644|  3.05M|            destroy_value();
  645|  3.05M|        }
  646|   124k|        else {
  647|   124k|            destroy_unexpected();
  648|   124k|        }
  649|  3.18M|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9107|  1.25M|{
 9108|  1.25M|#if !SCN_DISABLE_LOCALE
 9109|  1.25M|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|  1.25M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|  1.25M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|  1.25M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|  1.25M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.6k, False: 1.22M]
  |  |  ------------------
  ------------------
 9116|  28.6k|        return unexpected(result.error());
 9117|  28.6k|    }
 9118|  1.22M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|  1.25M|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|   616k|{
 9132|   616k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|   616k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|   616k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   616k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.77k, False: 611k]
  |  |  ------------------
  ------------------
 9136|  4.77k|        return unexpected(result.error());
 9137|  4.77k|    }
 9138|   611k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|   616k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   364k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   364k|    {
 3742|   364k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   364k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   364k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  14.2M|    {
 3480|  14.2M|        return m_iterator;
 3481|  14.2M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|   247M|    {
 3480|   247M|        return m_iterator;
 3481|   247M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  32.1M|    {
  572|  32.1M|        return m_has_value;
  573|  32.1M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   257k|    {
  555|   257k|        return m_unexpected;
  556|   257k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   257k|    {
 1746|   257k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   257k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   257k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   257k|        return this->get_unexpected().error();
 1748|   257k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 6705|  4.23M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 6728|  85.8k|    {
 6729|  85.8k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 85.8k]
  |  Branch (6729:39): [True: 0, False: 0]
  ------------------
 6730|       |            // clang-format off
 6731|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6732|       |            // clang-format on
 6733|      0|        }
 6734|       |
 6735|  85.8k|        m_specs.width = width;
 6736|  85.8k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 6749|  4.14M|    {
 6750|  4.14M|        m_specs.type = type;
 6751|  4.14M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 6766|   100k|    {
 6767|   100k|        const auto begin_value = static_cast<unsigned>(begin);
 6768|   100k|        const auto end_value = static_cast<unsigned>(end);
 6769|   100k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6770|       |
 6771|   100k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 100k, False: 0]
  |  |  ------------------
  ------------------
 6772|       |            // No need to bit-twiddle with a mask, because with the
 6773|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6774|   100k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|   100k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6775|  2.70M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6775:40): [True: 2.60M, False: 100k]
  ------------------
 6776|  2.60M|                m_specs.charset_literals[v / 8] |=
 6777|  2.60M|                    static_cast<unsigned char>(1ul << (v % 8));
 6778|  2.60M|            }
 6779|   100k|        }
 6780|      0|        else {
 6781|      0|            m_specs.charset_has_nonascii = true;
 6782|      0|        }
 6783|   100k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 6811|  85.8k|    {
 6812|  85.8k|        SCN_UNLIKELY_ATTR
 6813|  85.8k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 6814|  85.8k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 6822|  4.38M|    {
 6823|  4.38M|        return m_error;
 6824|  4.38M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   338k|{
 3918|   338k|    return unexpected(scan_error{c, m});
 3919|   338k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|   224M|{
 4308|       |    // Pattern_White_Space property
 4309|   224M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 65.7M, False: 158M]
  |  Branch (4309:27): [True: 9.38M, False: 56.3M]
  ------------------
 4310|   224M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 9.78M, False: 205M]
  ------------------
 4311|   224M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 1.46M, False: 203M]
  ------------------
 4312|   224M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 575k, False: 203M]
  ------------------
 4313|   224M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 602k, False: 202M]
  ------------------
 4314|   224M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 350k, False: 202M]
  ------------------
 4315|   224M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 285, False: 202M]
  ------------------
 4316|   224M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7505|  42.9k|{
 7506|  42.9k|    switch (type) {
 7507|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7507:9): [True: 0, False: 42.9k]
  ------------------
 7508|      0|            return arg_type_category::none;
 7509|       |
 7510|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7510:9): [True: 0, False: 42.9k]
  ------------------
 7511|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7511:9): [True: 0, False: 42.9k]
  ------------------
 7512|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7512:9): [True: 0, False: 42.9k]
  ------------------
 7513|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7513:9): [True: 0, False: 42.9k]
  ------------------
 7514|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7514:9): [True: 0, False: 42.9k]
  ------------------
 7515|      0|            return arg_type_category::integer;
 7516|       |
 7517|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7517:9): [True: 0, False: 42.9k]
  ------------------
 7518|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7518:9): [True: 0, False: 42.9k]
  ------------------
 7519|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7519:9): [True: 0, False: 42.9k]
  ------------------
 7520|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7520:9): [True: 0, False: 42.9k]
  ------------------
 7521|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7521:9): [True: 0, False: 42.9k]
  ------------------
 7522|      0|            return arg_type_category::unsigned_integer;
 7523|       |
 7524|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7524:9): [True: 0, False: 42.9k]
  ------------------
 7525|      0|            return arg_type_category::pointer;
 7526|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7526:9): [True: 0, False: 42.9k]
  ------------------
 7527|      0|            return arg_type_category::boolean;
 7528|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7528:9): [True: 0, False: 42.9k]
  ------------------
 7529|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7529:9): [True: 0, False: 42.9k]
  ------------------
 7530|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7530:9): [True: 0, False: 42.9k]
  ------------------
 7531|      0|            return arg_type_category::character;
 7532|       |
 7533|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7533:9): [True: 0, False: 42.9k]
  ------------------
 7534|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7534:9): [True: 0, False: 42.9k]
  ------------------
 7535|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7535:9): [True: 0, False: 42.9k]
  ------------------
 7536|      0|            return arg_type_category::floating;
 7537|       |
 7538|  4.77k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7538:9): [True: 4.77k, False: 38.1k]
  ------------------
 7539|  14.3k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7539:9): [True: 9.54k, False: 33.3k]
  ------------------
 7540|  23.8k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7540:9): [True: 9.54k, False: 33.3k]
  ------------------
 7541|  42.9k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7541:9): [True: 19.0k, False: 23.8k]
  ------------------
 7542|  42.9k|            return arg_type_category::string;
 7543|       |
 7544|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7544:9): [True: 0, False: 42.9k]
  ------------------
 7545|      0|            return arg_type_category::custom;
 7546|       |
 7547|      0|            SCN_CLANG_PUSH
 7548|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7549|      0|        default:
  ------------------
  |  Branch (7549:9): [True: 0, False: 42.9k]
  ------------------
 7550|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7551|  42.9k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7552|  42.9k|            SCN_CLANG_POP
 7553|  42.9k|    }
 7554|       |
 7555|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7556|  42.9k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  31.9M|    {
 1740|  31.9M|        return has_value();
 1741|  31.9M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7647|  4.14M|{
 7648|  4.14M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7648:9): [True: 0, False: 4.14M]
  ------------------
 7649|  4.14M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7649:9): [True: 4.05M, False: 92.9k]
  ------------------
 7650|  4.14M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7650:9): [True: 50.0k, False: 42.9k]
  ------------------
 7651|  4.14M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7651:9): [True: 0, False: 42.9k]
  ------------------
 7652|  4.14M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 42.9k]
  ------------------
 7653|  4.10M|        return;
 7654|  4.10M|    }
 7655|  42.9k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7655:9): [True: 42.9k, False: 0]
  ------------------
 7656|  42.9k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|  42.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.9k, False: 0]
  |  |  ------------------
  ------------------
 7657|       |            // clang-format off
 7658|  42.9k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7659|       |            // clang-format on
 7660|  42.9k|        }
 7661|      0|        return;
 7662|  42.9k|    }
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid type specifier for string");
 7665|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4471|  77.4M|    {
 4472|  77.4M|        assert(m_begin);
 4473|  77.4M|        return m_end == nullptr;
 4474|  77.4M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   326k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   326k|    else {
 3981|   326k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   326k|    }
 3983|   326k|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4488|  1.67M|    {
 4489|  1.67M|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 1.67M]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|  1.67M|        return parent()->get_segment_starting_at(position());
 4495|  1.67M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4482|  45.1M|    {
 4483|  45.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  45.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  45.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  45.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  45.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4375|  1.67M|    {
 4376|  1.67M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 963k, False: 715k]
  |  |  ------------------
  ------------------
 4377|  1.67M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|   963k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|   963k|        }
 4380|   715k|        const auto start = pos - m_putback_buffer.size();
 4381|   715k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   715k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   715k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|   715k|        return m_current_view.substr(start);
 4383|   715k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4466|  1.88M|    {
 4467|  1.88M|        return m_position;
 4468|  1.88M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4397|  1.07M|    {
 4398|  1.07M|        return m_is_contiguous;
 4399|  1.07M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4471|  1.33G|    {
 4472|  1.33G|        assert(m_begin);
 4473|  1.33G|        return m_end == nullptr;
 4474|  1.33G|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  3.06M|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  3.06M|    else {
 3981|  3.06M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  3.06M|    }
 3983|  3.06M|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4488|  9.24M|    {
 4489|  9.24M|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 9.24M]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|  9.24M|        return parent()->get_segment_starting_at(position());
 4495|  9.24M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4482|   779M|    {
 4483|   779M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   779M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   779M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|   779M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|   779M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4375|  9.24M|    {
 4376|  9.24M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  9.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.13M, False: 3.11M]
  |  |  ------------------
  ------------------
 4377|  9.24M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|  6.13M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|  6.13M|        }
 4380|  3.11M|        const auto start = pos - m_putback_buffer.size();
 4381|  3.11M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  3.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|  3.11M|        return m_current_view.substr(start);
 4383|  3.11M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4466|  11.1M|    {
 4467|  11.1M|        return m_position;
 4468|  11.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4397|  9.36M|    {
 4398|  9.36M|        return m_is_contiguous;
 4399|  9.36M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  2.18M|    {
 3334|  2.18M|        return static_cast<D&>(*this);
 3335|  2.18M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  2.18M|    {
 3375|  2.18M|        return detail::to_address(ranges::begin(derived()));
 3376|  2.18M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  11.2M|    {
 3334|  11.2M|        return static_cast<D&>(*this);
 3335|  11.2M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  11.2M|    {
 3375|  11.2M|        return detail::to_address(ranges::begin(derived()));
 3376|  11.2M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8658|   146k|    {
 8659|   146k|        return ranges::subrange{begin(), end()};
 8660|   146k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8650|   146k|    {
 8651|   146k|        return ranges::default_sentinel;
 8652|   146k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  5.22M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  5.22M|    static_cast<    \
  |  |  935|  5.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  5.22M|    static_cast<    \
  |  |  935|  5.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  5.22M|    {
 3466|  5.22M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8477|  10.2M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   336k|    {
 1979|   336k|        return detail::transform_error_impl(std::move(*this),
 1980|   336k|                                            std::forward<F>(f));
 1981|   336k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   336k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   336k|    else {
 1472|   336k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   336k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   336k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 332k, False: 4.49k]
  |  |  ------------------
  ------------------
 1474|   336k|                   ? result(*std::forward<Exp>(exp))
 1475|   336k|                   : result(unexpect,
 1476|  4.49k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.49k|                                           std::forward<Exp>(exp).error()));
 1478|   336k|    }
 1479|   336k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   673k|    {
  490|   673k|        return m_has_value;
  491|   673k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   332k|    {
 1805|   332k|        return std::move(value());
 1806|   332k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   332k|    {
 1769|   332k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   332k|        return this->get_value();
 1771|   332k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   332k|    {
  456|   332k|        return m_value;
  457|   332k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   791k|        : base(std::in_place, std::forward<U>(val)),
 1570|   791k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   791k|    {
 1572|   791k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   791k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   791k|    {
  442|   791k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   831k|    {
 1316|   831k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  26.8k|{
 1350|  26.8k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  26.8k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  4.49k|    {
 1756|  4.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  4.49k|        return std::move(this->get_unexpected().error());
 1758|  4.49k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  4.49k|    {
  473|  4.49k|        return m_unexpected;
  474|  4.49k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  53.7k|    {
  365|  53.7k|        return m_unexpected;
  366|  53.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  4.49k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  4.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  4.49k|    {
 1628|  4.49k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  38.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  38.3k|          m_has_value(false)
  451|  38.3k|    {
  452|  38.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8658|  1.25M|    {
 8659|  1.25M|        return ranges::subrange{begin(), end()};
 8660|  1.25M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8650|  1.25M|    {
 8651|  1.25M|        return ranges::default_sentinel;
 8652|  1.25M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  88.1M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  88.1M|    static_cast<    \
  |  |  935|  88.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  88.1M|    static_cast<    \
  |  |  935|  88.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  88.1M|    {
 3466|  88.1M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  3.08M|    {
 1979|  3.08M|        return detail::transform_error_impl(std::move(*this),
 1980|  3.08M|                                            std::forward<F>(f));
 1981|  3.08M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  3.08M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  3.08M|    else {
 1472|  3.08M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  3.08M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  3.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.07M, False: 5.21k]
  |  |  ------------------
  ------------------
 1474|  3.08M|                   ? result(*std::forward<Exp>(exp))
 1475|  3.08M|                   : result(unexpect,
 1476|  5.21k|                            trivial_invoke(std::forward<F>(f),
 1477|  5.21k|                                           std::forward<Exp>(exp).error()));
 1478|  3.08M|    }
 1479|  3.08M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  6.16M|    {
  490|  6.16M|        return m_has_value;
  491|  6.16M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  3.07M|    {
 1805|  3.07M|        return std::move(value());
 1806|  3.07M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  3.07M|    {
 1769|  3.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.07M|        return this->get_value();
 1771|  3.07M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  3.07M|    {
  456|  3.07M|        return m_value;
  457|  3.07M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  7.36M|        : base(std::in_place, std::forward<U>(val)),
 1570|  7.36M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  7.36M|    {
 1572|  7.36M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  7.36M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.36M|    {
  442|  7.36M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.43M|    {
 1316|  7.43M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  5.21k|    {
 1756|  5.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  5.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  5.21k|        return std::move(this->get_unexpected().error());
 1758|  5.21k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  5.21k|    {
  473|  5.21k|        return m_unexpected;
  474|  5.21k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  5.21k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  5.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  5.21k|    {
 1628|  5.21k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  74.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.6k|          m_has_value(false)
  451|  74.6k|    {
  452|  74.6k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   338k|        : m_unexpected(std::forward<Err>(e))
  350|   338k|    {
  351|   338k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   338k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   338k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   279k|        : base(unexpect, std::move(e.error())),
 1616|   279k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   279k|    {
 1618|   279k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   279k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   279k|          m_has_value(false)
  451|   279k|    {
  452|   279k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  10.3M|    {
 1316|  10.3M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  68.8k|        : base(unexpect, std::move(e.error())),
 1616|  68.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  68.8k|    {
 1618|  68.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  75.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  75.5k|          m_has_value(false)
  451|  75.5k|    {
  452|  75.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.37M|    {
 1316|  1.37M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  1.29M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.29M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.29M|    {
 1572|  1.29M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.29M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.29M|    {
  442|  1.29M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  1.37M|    {
 1740|  1.37M|        return has_value();
 1741|  1.37M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  2.75M|    {
  490|  2.75M|        return m_has_value;
  491|  2.75M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  75.5k|    {
 1746|  75.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  75.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  75.5k|        return this->get_unexpected().error();
 1748|  75.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  75.5k|    {
  473|  75.5k|        return m_unexpected;
  474|  75.5k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  1.08M|    {
 1805|  1.08M|        return std::move(value());
 1806|  1.08M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  1.30M|    {
 1769|  1.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.30M|        return this->get_value();
 1771|  1.30M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.30M|    {
  456|  1.30M|        return m_value;
  457|  1.30M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   138k|        : base(unexpect, std::move(e.error())),
 1616|   138k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   138k|    {
 1618|   138k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   149k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   149k|          m_has_value(false)
  451|   149k|    {
  452|   149k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8M|    {
 1316|  14.8M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  14.7M|        : base(std::in_place, std::forward<U>(val)),
 1570|  14.7M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  14.7M|    {
 1572|  14.7M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  14.7M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  14.7M|    {
  442|  14.7M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  14.8M|    {
 1740|  14.8M|        return has_value();
 1741|  14.8M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  29.7M|    {
  490|  29.7M|        return m_has_value;
  491|  29.7M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   149k|    {
 1746|   149k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   149k|        return this->get_unexpected().error();
 1748|   149k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   149k|    {
  473|   149k|        return m_unexpected;
  474|   149k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  12.2M|    {
 1805|  12.2M|        return std::move(value());
 1806|  12.2M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  14.7M|    {
 1769|  14.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  14.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  14.7M|        return this->get_value();
 1771|  14.7M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  14.7M|    {
  456|  14.7M|        return m_value;
  457|  14.7M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   554k|    {
 1979|   554k|        return detail::transform_error_impl(std::move(*this),
 1980|   554k|                                            std::forward<F>(f));
 1981|   554k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   554k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   554k|    else {
 1472|   554k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   554k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   554k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 547k, False: 6.74k]
  |  |  ------------------
  ------------------
 1474|   554k|                   ? result(*std::forward<Exp>(exp))
 1475|   554k|                   : result(unexpect,
 1476|  6.74k|                            trivial_invoke(std::forward<F>(f),
 1477|  6.74k|                                           std::forward<Exp>(exp).error()));
 1478|   554k|    }
 1479|   554k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.10M|    {
  490|  1.10M|        return m_has_value;
  491|  1.10M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   547k|    {
 1805|   547k|        return std::move(value());
 1806|   547k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   547k|    {
 1769|   547k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   547k|        return this->get_value();
 1771|   547k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   547k|    {
  456|   547k|        return m_value;
  457|   547k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  6.74k|    {
 1756|  6.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  6.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  6.74k|        return std::move(this->get_unexpected().error());
 1758|  6.74k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  6.74k|    {
  473|  6.74k|        return m_unexpected;
  474|  6.74k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  6.74k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  6.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  6.74k|    {
 1628|  6.74k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8642|   435k|    {
 8643|   435k|        return m_current;
 8644|   435k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8535|   392k|    {
 8536|   392k|        return m_locale;
 8537|   392k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8541|   420k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   420k|    static_cast<    \
  |  |  935|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   420k|    static_cast<    \
  |  |  935|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8542|   420k|    {
 8543|   420k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  33.8k|        : base(unexpect, std::move(e.error())),
 1616|  33.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  33.8k|    {
 1618|  33.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8642|  3.74M|    {
 8643|  3.74M|        return m_current;
 8644|  3.74M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8535|  3.75M|    {
 8536|  3.75M|        return m_locale;
 8537|  3.75M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8541|  3.81M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  3.81M|    static_cast<    \
  |  |  935|  3.81M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  3.81M|    static_cast<    \
  |  |  935|  3.81M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8542|  3.81M|    {
 8543|  3.81M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  69.4k|        : base(unexpect, std::move(e.error())),
 1616|  69.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  69.4k|    {
 1618|  69.4k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  27.6M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  27.6M|        : m_deferred_init(), m_has_value(true)
  529|  27.6M|    {
  530|  27.6M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   343k|        : base(unexpect, std::move(e.error())),
 1616|   343k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   343k|    {
 1618|   343k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   343k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   343k|          m_has_value(false)
  550|   343k|    {
  551|   343k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   343k|    {
 1316|   343k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  4.08M|    {
 4558|  4.08M|        return x.is_at_end();
 4559|  4.08M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4601|  8.34M|    {
 4602|  8.34M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 8.34M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  8.34M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 8.34M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  8.34M|        return !read_at_position();
 4609|  8.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4581|  22.9M|    {
 4582|  22.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  22.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  22.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  22.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 22.9M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  22.9M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  22.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 18.6M, False: 4.30M]
  |  |  ------------------
  ------------------
 4589|  18.6M|            return true;
 4590|  18.6M|        }
 4591|       |
 4592|  8.56M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 4.30M, False: 4.26M]
  ------------------
 4593|  4.30M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 38.1k, False: 4.26M]
  ------------------
 4594|  38.1k|                return false;
 4595|  38.1k|            }
 4596|  4.30M|        }
 4597|  4.26M|        return true;
 4598|  4.30M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4355|  31.5M|    {
 4356|  31.5M|        return m_putback_buffer.size() + m_current_view.size();
 4357|  31.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4516|  7.66M|    {
 4517|  7.66M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  7.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  7.66M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 7.66M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  7.66M|        auto res = read_at_position();
 4526|  7.66M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  7.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  7.66M|        return parent()->get_character_at(m_position);
 4528|  7.66M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4386|  7.66M|    {
 4387|  7.66M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  7.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.16M, False: 3.49M]
  |  |  ------------------
  ------------------
 4388|  7.66M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  4.16M|            return m_putback_buffer[pos];
 4390|  4.16M|        }
 4391|  3.49M|        const auto start = pos - m_putback_buffer.size();
 4392|  3.49M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  3.49M|        return m_current_view[start];
 4394|  3.49M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   332k|        : base(std::in_place, std::forward<U>(val)),
 1570|   332k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   332k|    {
 1572|   332k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   332k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   332k|    {
  442|   332k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   336k|    {
 1316|   336k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  4.49k|        : base(unexpect, std::move(e.error())),
 1616|  4.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.49k|    {
 1618|  4.49k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  4.49k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.49k|          m_has_value(false)
  451|  4.49k|    {
  452|  4.49k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  26.8k|        : m_unexpected(std::forward<Args>(args)...)
  359|  26.8k|    {
  360|  26.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  26.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  26.8k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4551|  2.93M|    {
 4552|  2.93M|        return !(lhs == rhs);
 4553|  2.93M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4546|  2.93M|    {
 4547|  2.93M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 2.93M, False: 0]
  |  Branch (4547:46): [True: 483k, False: 2.45M]
  ------------------
 4548|  2.93M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4502|  6.91M|    {
 4503|  6.91M|        ++m_position;
 4504|  6.91M|        (void)read_at_position();
 4505|  6.91M|        return *this;
 4506|  6.91M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  26.8k|        : m_unexpected(std::forward<Err>(e))
  350|  26.8k|    {
  351|  26.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  26.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  26.8k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.95k|        : base(unexpect, std::move(e.error())),
 1616|  1.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.95k|    {
 1618|  1.95k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.95k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.95k|          m_has_value(false)
  451|  1.95k|    {
  452|  1.95k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   273k|    {
 1316|   273k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   271k|        : base(std::in_place, std::forward<U>(val)),
 1570|   271k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   271k|    {
 1572|   271k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   271k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   271k|    {
  442|   271k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   273k|    {
 1740|   273k|        return has_value();
 1741|   273k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   547k|    {
  490|   547k|        return m_has_value;
  491|   547k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  1.95k|    {
 1746|  1.95k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.95k|        return this->get_unexpected().error();
 1748|  1.95k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.95k|    {
  473|  1.95k|        return m_unexpected;
  474|  1.95k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   271k|    {
 1805|   271k|        return std::move(value());
 1806|   271k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   271k|    {
 1769|   271k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   271k|        return this->get_value();
 1771|   271k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   271k|    {
  456|   271k|        return m_value;
  457|   271k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  12.7M|    {
 3484|  12.7M|        return m_sentinel;
 3485|  12.7M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   831k|    {
 1740|   831k|        return has_value();
 1741|   831k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.66M|    {
  490|  1.66M|        return m_has_value;
  491|  1.66M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  38.3k|    {
 1746|  38.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  38.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  38.3k|        return this->get_unexpected().error();
 1748|  38.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  38.3k|    {
  473|  38.3k|        return m_unexpected;
  474|  38.3k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   658k|    {
 1805|   658k|        return std::move(value());
 1806|   658k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   793k|    {
 1769|   793k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   793k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   793k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   793k|        return this->get_value();
 1771|   793k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   793k|    {
  456|   793k|        return m_value;
  457|   793k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   350k|    {
 3480|   350k|        return m_iterator;
 3481|   350k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   350k|    {
 3484|   350k|        return m_sentinel;
 3485|   350k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   334k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   334k|    static_cast<    \
  |  |  935|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   334k|    static_cast<    \
  |  |  935|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   334k|    {
 3466|   334k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  4.26M|    {
 4569|  4.26M|        return !x.is_at_end();
 4570|  4.26M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  6.74k|        : base(unexpect, std::move(e.error())),
 1616|  6.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.74k|    {
 1618|  6.74k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  6.74k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.74k|          m_has_value(false)
  451|  6.74k|    {
  452|  6.74k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   554k|    {
 1316|   554k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   547k|        : base(std::in_place, std::forward<U>(val)),
 1570|   547k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   547k|    {
 1572|   547k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   547k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   547k|    {
  442|   547k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  2.69k|        : base(unexpect, std::move(e.error())),
 1616|  2.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.69k|    {
 1618|  2.69k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  2.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.69k|          m_has_value(false)
  451|  2.69k|    {
  452|  2.69k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   450k|    {
 1316|   450k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   447k|        : base(std::in_place, std::forward<U>(val)),
 1570|   447k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   447k|    {
 1572|   447k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   447k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   447k|    {
  442|   447k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   450k|    {
 1740|   450k|        return has_value();
 1741|   450k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|   900k|    {
  490|   900k|        return m_has_value;
  491|   900k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  2.69k|    {
 1746|  2.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.69k|        return this->get_unexpected().error();
 1748|  2.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  2.69k|    {
  473|  2.69k|        return m_unexpected;
  474|  2.69k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   447k|    {
 1805|   447k|        return std::move(value());
 1806|   447k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   447k|    {
 1769|   447k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   447k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   447k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   447k|        return this->get_value();
 1771|   447k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   447k|    {
  456|   447k|        return m_value;
  457|   447k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  2.18M|    {
 3000|  2.18M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  2.18M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  2.18M|    {
 2981|  2.18M|        return t.data();
 2982|  2.18M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  10.0M|        : base(std::in_place, std::forward<U>(val)),
 1570|  10.0M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  10.0M|    {
 1572|  10.0M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  10.0M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  10.0M|    {
  442|  10.0M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   134k|    {
 1795|   134k|        return value();
 1796|   134k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   220k|    {
 1795|   220k|        return value();
 1796|   220k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|  2.10k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.10k|    {
 1572|  2.10k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.10k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.10k|    {
  442|  2.10k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  4.20k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.20k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.20k|    {
 1572|  4.20k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.20k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.20k|    {
  442|  4.20k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  78.2M|    {
 4558|  78.2M|        return x.is_at_end();
 4559|  78.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4601|   152M|    {
 4602|   152M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 152M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|   152M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 152M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|   152M|        return !read_at_position();
 4609|   152M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4581|   402M|    {
 4582|   402M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   402M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   402M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|   402M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 402M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|   402M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   402M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 328M, False: 73.3M]
  |  |  ------------------
  ------------------
 4589|   328M|            return true;
 4590|   328M|        }
 4591|       |
 4592|   146M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 73.3M, False: 73.2M]
  ------------------
 4593|  73.3M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 51.8k, False: 73.2M]
  ------------------
 4594|  51.8k|                return false;
 4595|  51.8k|            }
 4596|  73.3M|        }
 4597|  73.2M|        return true;
 4598|  73.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4355|   548M|    {
 4356|   548M|        return m_putback_buffer.size() + m_current_view.size();
 4357|   548M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4516|   148M|    {
 4517|   148M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   148M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   148M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|   148M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 148M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|   148M|        auto res = read_at_position();
 4526|   148M|        SCN_EXPECT(res);
  ------------------
  |  |  930|   148M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   148M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|   148M|        return parent()->get_character_at(m_position);
 4528|   148M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4386|   148M|    {
 4387|   148M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   148M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 77.8M, False: 70.2M]
  |  |  ------------------
  ------------------
 4388|   148M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  77.8M|            return m_putback_buffer[pos];
 4390|  77.8M|        }
 4391|  70.2M|        const auto start = pos - m_putback_buffer.size();
 4392|  70.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  70.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  70.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  70.2M|        return m_current_view[start];
 4394|  70.2M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   407M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   407M|    else {
 4075|       |        // utf-32
 4076|   407M|        static_assert(sizeof(U) == 4);
 4077|   407M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   407M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   407M|        return 1;
 4079|   407M|    }
 4080|   407M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  3.07M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.07M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.07M|    {
 1572|  3.07M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.07M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.07M|    {
  442|  3.07M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.08M|    {
 1316|  3.08M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  5.21k|        : base(unexpect, std::move(e.error())),
 1616|  5.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.21k|    {
 1618|  5.21k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  5.21k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.21k|          m_has_value(false)
  451|  5.21k|    {
  452|  5.21k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4551|  29.2M|    {
 4552|  29.2M|        return !(lhs == rhs);
 4553|  29.2M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4546|  29.2M|    {
 4547|  29.2M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 29.2M, False: 0]
  |  Branch (4547:46): [True: 1.24M, False: 28.0M]
  ------------------
 4548|  29.2M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4502|   101M|    {
 4503|   101M|        ++m_position;
 4504|   101M|        (void)read_at_position();
 4505|   101M|        return *this;
 4506|   101M|    }
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   407M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   407M|    else {
 4281|   407M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   407M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   407M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   407M|        auto cp = static_cast<char32_t>(input.front());
 4283|   407M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   407M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.49M, False: 404M]
  |  |  ------------------
  ------------------
 4284|  2.49M|            return invalid_code_point;
 4285|  2.49M|        }
 4286|   404M|        return cp;
 4287|   407M|    }
 4288|   407M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  2.08k|        : base(unexpect, std::move(e.error())),
 1616|  2.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.08k|    {
 1618|  2.08k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  2.08k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.08k|          m_has_value(false)
  451|  2.08k|    {
  452|  2.08k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.46M|    {
 1316|  2.46M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  2.46M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.46M|    {
 1572|  2.46M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  2.46M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.46M|    {
  442|  2.46M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  2.46M|    {
 1740|  2.46M|        return has_value();
 1741|  2.46M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.92M|    {
  490|  4.92M|        return m_has_value;
  491|  4.92M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  2.08k|    {
 1746|  2.08k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.08k|        return this->get_unexpected().error();
 1748|  2.08k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  2.08k|    {
  473|  2.08k|        return m_unexpected;
  474|  2.08k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  2.46M|    {
 1805|  2.46M|        return std::move(value());
 1806|  2.46M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  2.46M|    {
 1769|  2.46M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.46M|        return this->get_value();
 1771|  2.46M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.46M|    {
  456|  2.46M|        return m_value;
  457|  2.46M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|   236M|    {
 3484|   236M|        return m_sentinel;
 3485|   236M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  7.43M|    {
 1740|  7.43M|        return has_value();
 1741|  7.43M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  14.8M|    {
  490|  14.8M|        return m_has_value;
  491|  14.8M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  74.6k|    {
 1746|  74.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  74.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  74.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  74.6k|        return this->get_unexpected().error();
 1748|  74.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  74.6k|    {
  473|  74.6k|        return m_unexpected;
  474|  74.6k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  6.13M|    {
 1805|  6.13M|        return std::move(value());
 1806|  6.13M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  7.36M|    {
 1769|  7.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  7.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  7.36M|        return this->get_value();
 1771|  7.36M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  7.36M|    {
  456|  7.36M|        return m_value;
  457|  7.36M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   187M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   187M|    else {
 3966|   187M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   187M|                                       to_address(first), to_address(last)))};
 3968|   187M|    }
 3969|   187M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   561M|{
  316|   561M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   561M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   561M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|  3.09M|    {
 3480|  3.09M|        return m_iterator;
 3481|  3.09M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|  3.09M|    {
 3484|  3.09M|        return m_sentinel;
 3485|  3.09M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  3.07M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.07M|    static_cast<    \
  |  |  935|  3.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.07M|    static_cast<    \
  |  |  935|  3.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  3.07M|    {
 3466|  3.07M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  74.5M|    {
 4569|  74.5M|        return !x.is_at_end();
 4570|  74.5M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  10.4k|        : base(unexpect, std::move(e.error())),
 1616|  10.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.4k|    {
 1618|  10.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  10.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  10.4k|          m_has_value(false)
  451|  10.4k|    {
  452|  10.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.16M|    {
 1316|  6.16M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  6.15M|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.15M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.15M|    {
 1572|  6.15M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  6.15M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.15M|    {
  442|  6.15M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  12.3M|    {
  490|  12.3M|        return m_has_value;
  491|  12.3M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  6.15M|    {
 1769|  6.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.15M|        return this->get_value();
 1771|  6.15M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  6.15M|    {
  456|  6.15M|        return m_value;
  457|  6.15M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  4.17k|        : base(unexpect, std::move(e.error())),
 1616|  4.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.17k|    {
 1618|  4.17k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  4.17k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.17k|          m_has_value(false)
  451|  4.17k|    {
  452|  4.17k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.92M|    {
 1316|  4.92M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  4.92M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.92M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.92M|    {
 1572|  4.92M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  4.92M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.92M|    {
  442|  4.92M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  6.16M|    {
 1979|  6.16M|        return detail::transform_error_impl(std::move(*this),
 1980|  6.16M|                                            std::forward<F>(f));
 1981|  6.16M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  6.16M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  6.16M|    else {
 1472|  6.16M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  6.16M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  6.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.15M, False: 10.4k]
  |  |  ------------------
  ------------------
 1474|  6.16M|                   ? result(*std::forward<Exp>(exp))
 1475|  6.16M|                   : result(unexpect,
 1476|  10.4k|                            trivial_invoke(std::forward<F>(f),
 1477|  10.4k|                                           std::forward<Exp>(exp).error()));
 1478|  6.16M|    }
 1479|  6.16M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  6.15M|    {
 1805|  6.15M|        return std::move(value());
 1806|  6.15M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  10.4k|    {
 1756|  10.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  10.4k|        return std::move(this->get_unexpected().error());
 1758|  10.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  10.4k|    {
  473|  10.4k|        return m_unexpected;
  474|  10.4k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  10.4k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  10.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  10.4k|    {
 1628|  10.4k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|  4.92M|    {
 1740|  4.92M|        return has_value();
 1741|  4.92M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  9.85M|    {
  490|  9.85M|        return m_has_value;
  491|  9.85M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  4.17k|    {
 1746|  4.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  4.17k|        return this->get_unexpected().error();
 1748|  4.17k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  4.17k|    {
  473|  4.17k|        return m_unexpected;
  474|  4.17k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  4.92M|    {
 1805|  4.92M|        return std::move(value());
 1806|  4.92M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  4.92M|    {
 1769|  4.92M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.92M|        return this->get_value();
 1771|  4.92M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|  4.92M|    {
  456|  4.92M|        return m_value;
  457|  4.92M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  11.2M|    {
 3000|  11.2M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  11.2M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  11.2M|    {
 2981|  11.2M|        return t.data();
 2982|  11.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  1.22M|    {
 1795|  1.22M|        return value();
 1796|  1.22M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  2.44M|    {
 1795|  2.44M|        return value();
 1796|  2.44M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    264|        : base(std::in_place, std::forward<U>(val)),
 1570|    264|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    264|    {
 1572|    264|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    264|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    264|    {
  442|    264|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    528|        : base(std::in_place, std::forward<U>(val)),
 1570|    528|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    528|    {
 1572|    528|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    528|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    528|    {
  442|    528|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 5870|   776k|    {
 5871|   776k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 5872|      0|            return max_size();
 5873|      0|        }
 5874|       |
 5875|   776k|        return static_cast<std::size_t>(m_desc &
 5876|   776k|                                        ((1 << detail::packed_arg_bits) - 1));
 5877|   776k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 5896|  1.55M|    {
 5897|  1.55M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5898|  1.55M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 5838|   776k|    {
 5839|   776k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 5840|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5841|      0|                return m_args[id];
 5842|      0|            }
 5843|      0|            return {};
 5844|      0|        }
 5845|       |
 5846|   776k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 5847|      0|            return {};
 5848|      0|        }
 5849|       |
 5850|   776k|        const auto t = type(id);
 5851|   776k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 5852|      0|            return {};
 5853|      0|        }
 5854|       |
 5855|   776k|        basic_scan_arg<Context> arg;
 5856|   776k|        arg.m_type = t;
 5857|   776k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5857:13): [True: 776k, False: 0]
  ------------------
 5858|   776k|            arg.m_value.ref_value = m_builtin_values[id];
 5859|   776k|        }
 5860|      0|        else {
 5861|      0|            arg.m_value = m_values[id];
 5862|      0|        }
 5863|   776k|        return arg;
 5864|   776k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 5905|   776k|    {
 5906|       |        // First (0th) index is size, types start after that
 5907|   776k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5908|   776k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5909|   776k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5910|   776k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 5900|   776k|    {
 5901|   776k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5902|   776k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5654|  1.34M|    {
 5655|  1.34M|        return m_type != detail::arg_type::none_type;
 5656|  1.34M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 8993|   332k|{
 8994|   332k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   332k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   332k|{
 8895|   332k|#define SCN_VISIT(Type)                                                \
 8896|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   332k|    }                                                                  \
 8899|   332k|    else {                                                             \
 8900|   332k|        return vis(monostate_val);                                     \
 8901|   332k|    }
 8902|       |
 8903|   332k|    monostate monostate_val{};
 8904|       |
 8905|   332k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 332k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 332k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 332k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 332k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 332k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 332k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 332k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 332k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 332k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 332k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 332k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 332k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 332k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 332k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 332k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 332k]
  ------------------
 8937|      0|            SCN_VISIT(float);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8938|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 332k]
  ------------------
 8939|      0|            SCN_VISIT(double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8940|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 332k]
  ------------------
 8941|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8942|   166k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 166k, False: 166k]
  ------------------
 8943|   166k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   166k|    }                                                                  \
  |  | 8899|   166k|    else {                                                             \
  |  | 8900|   166k|        return vis(monostate_val);                                     \
  |  | 8901|   166k|    }
  ------------------
 8944|   332k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 166k, False: 166k]
  ------------------
 8945|   332k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   332k|    }                                                                  \
  |  | 8899|   332k|    else {                                                             \
  |  | 8900|   332k|        return vis(monostate_val);                                     \
  |  | 8901|   332k|    }
  ------------------
 8946|   332k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 332k]
  ------------------
 8947|   332k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   332k|    }                                                                  \
  |  | 8899|   332k|    else {                                                             \
  |  | 8900|   332k|        return vis(monostate_val);                                     \
  |  | 8901|   332k|    }
  ------------------
 8948|   332k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 332k]
  ------------------
 8949|   332k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   332k|    }                                                                  \
  |  | 8899|   332k|    else {                                                             \
  |  | 8900|   332k|        return vis(monostate_val);                                     \
  |  | 8901|   332k|    }
  ------------------
 8950|   332k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 332k]
  ------------------
 8951|   332k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   332k|    }                                                                  \
  |  | 8899|   332k|    else {                                                             \
  |  | 8900|   332k|        return vis(monostate_val);                                     \
  |  | 8901|   332k|    }
  ------------------
 8952|   332k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 332k]
  ------------------
 8953|   332k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   332k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   332k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   332k|    }                                                                  \
  |  | 8899|   332k|    else {                                                             \
  |  | 8900|   332k|        return vis(monostate_val);                                     \
  |  | 8901|   332k|    }
  ------------------
 8954|       |
 8955|   332k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 332k]
  ------------------
 8956|   332k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   332k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   332k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 332k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 332k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   332k|            SCN_CLANG_POP
 8973|   332k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 5699|  1.76M|{
 5700|  1.76M|    return arg.m_type;
 5701|  1.76M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 5711|   926k|{
 5712|   926k|    return arg.m_value;
 5713|   926k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5950|   420k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5951|   420k|    {
 5952|   420k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8626|   156k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8627|   156k|    {
 8628|   156k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4689|   357k|{
 4690|   357k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 357k]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|   357k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   357k|                            ranges::default_sentinel};
 4696|   357k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4452|   357k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   357k|    {
 4454|   357k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   357k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   357k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 8993|   201k|{
 8994|   201k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   201k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   201k|{
 8895|   201k|#define SCN_VISIT(Type)                                                \
 8896|   201k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   201k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   201k|    }                                                                  \
 8899|   201k|    else {                                                             \
 8900|   201k|        return vis(monostate_val);                                     \
 8901|   201k|    }
 8902|       |
 8903|   201k|    monostate monostate_val{};
 8904|       |
 8905|   201k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 201k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 201k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 201k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 201k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 201k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 201k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 201k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 201k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 201k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 201k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 201k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 201k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 201k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 201k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 201k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 201k]
  ------------------
 8937|      0|            SCN_VISIT(float);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8938|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 201k]
  ------------------
 8939|      0|            SCN_VISIT(double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8940|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 201k]
  ------------------
 8941|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8942|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 201k]
  ------------------
 8943|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8944|   201k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 201k, False: 0]
  ------------------
 8945|   201k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   201k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   201k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   201k|    }                                                                  \
  |  | 8899|   201k|    else {                                                             \
  |  | 8900|   201k|        return vis(monostate_val);                                     \
  |  | 8901|   201k|    }
  ------------------
 8946|   201k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 201k]
  ------------------
 8947|   201k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   201k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   201k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   201k|    }                                                                  \
  |  | 8899|   201k|    else {                                                             \
  |  | 8900|   201k|        return vis(monostate_val);                                     \
  |  | 8901|   201k|    }
  ------------------
 8948|   201k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 201k]
  ------------------
 8949|   201k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   201k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   201k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   201k|    }                                                                  \
  |  | 8899|   201k|    else {                                                             \
  |  | 8900|   201k|        return vis(monostate_val);                                     \
  |  | 8901|   201k|    }
  ------------------
 8950|   201k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 201k]
  ------------------
 8951|   201k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   201k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   201k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   201k|    }                                                                  \
  |  | 8899|   201k|    else {                                                             \
  |  | 8900|   201k|        return vis(monostate_val);                                     \
  |  | 8901|   201k|    }
  ------------------
 8952|   201k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 201k]
  ------------------
 8953|   201k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   201k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   201k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   201k|    }                                                                  \
  |  | 8899|   201k|    else {                                                             \
  |  | 8900|   201k|        return vis(monostate_val);                                     \
  |  | 8901|   201k|    }
  ------------------
 8954|       |
 8955|   201k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 201k]
  ------------------
 8956|   201k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   201k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   201k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 201k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 201k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   201k|            SCN_CLANG_POP
 8973|   201k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   264k|    {
 3075|   264k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   264k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   264k|    {
 3041|   264k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   264k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|   264k|{
 7487|   264k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|   264k|    handler.check_args_exhausted();
 7489|   264k|    return handler.get_error();
 7490|   264k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|   264k|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|   264k|    auto begin = format.data();
 7455|   264k|    auto it = begin;
 7456|   264k|    const auto end = format.data() + format.size();
 7457|       |
 7458|   480k|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 264k, False: 216k]
  ------------------
 7459|   264k|        const auto ch = *it++;
 7460|   264k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 264k, False: 0]
  ------------------
 7461|   264k|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|   264k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|   264k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 47.7k, False: 216k]
  ------------------
 7465|  47.7k|                return;
 7466|  47.7k|            }
 7467|   264k|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|   264k|    }
 7478|       |
 7479|   216k|    handler.on_literal_text(begin, end);
 7480|   216k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7383|   264k|{
 7384|   264k|    struct id_adapter {
 7385|   264k|        constexpr void operator()()
 7386|   264k|        {
 7387|   264k|            arg_id = handler.on_arg_id();
 7388|   264k|        }
 7389|   264k|        constexpr void operator()(std::size_t id)
 7390|   264k|        {
 7391|   264k|            arg_id = handler.on_arg_id(id);
 7392|   264k|        }
 7393|       |
 7394|   264k|        constexpr void on_error(const char* msg)
 7395|   264k|        {
 7396|   264k|            SCN_UNLIKELY_ATTR
 7397|   264k|            handler.on_error(msg);
 7398|   264k|        }
 7399|       |
 7400|   264k|        Handler& handler;
 7401|   264k|        std::size_t arg_id;
 7402|   264k|    };
 7403|       |
 7404|   264k|    ++begin;
 7405|   264k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 264k]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|   264k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 264k]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|   264k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 264k]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|   264k|    else {
 7417|   264k|        auto adapter = id_adapter{handler, 0};
 7418|   264k|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|   264k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 264k]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|   264k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 264k]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|   264k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 264k, False: 0]
  ------------------
 7429|   264k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 264k]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|   264k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|   264k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   528k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.0k, False: 245k]
  |  |  |  Branch (865:45): [True: 0, False: 264k]
  |  |  |  Branch (865:45): [True: 19.0k, False: 245k]
  |  |  ------------------
  ------------------
 7435|  19.0k|                handler.on_error("Unknown format specifier");
 7436|  19.0k|                return begin;
 7437|  19.0k|            }
 7438|   264k|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|   264k|    }
 7445|   245k|    return begin + 1;
 7446|   264k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8525|   420k|    {
 8526|   420k|        return m_args.get(id);
 8527|   420k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 5979|   420k|    {
 5980|   420k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 420k]
  |  |  ------------------
  ------------------
 5981|      0|            on_error(
 5982|      0|                "Cannot switch from manual to automatic argument indexing");
 5983|      0|            return 0;
 5984|      0|        }
 5985|       |
 5986|   420k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5987|   420k|        do_check_arg_id(id);
 5988|   420k|        return id;
 5989|   420k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6499|   420k|{
 6500|   420k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6500:9): [Folded - Ignored]
  ------------------
 6501|   420k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6501:10): [Folded - Ignored]
  |  Branch (6501:22): [Folded - Ignored]
  ------------------
 6502|       |        // The cast below will cause an error on gcc pre-12
 6503|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6504|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6504:13): [True: 0, False: 0]
  ------------------
 6505|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6506|      0|            SCN_UNLIKELY_ATTR
 6507|      0|            on_error("Argument not found");
 6508|      0|        }
 6509|      0|    }
 6510|   420k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|   264k|{
 6885|   264k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|   264k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 264k, False: 0]
  |  Branch (6886:26): [True: 0, False: 264k]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|   264k|    handler();
 6891|   264k|    return begin;
 6892|   264k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 6833|  28.6k|{
 6834|  28.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  28.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6835|  28.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  28.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  28.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6836|       |
 6837|  28.6k|    unsigned long long value = 0;
 6838|  57.2k|    do {
 6839|  57.2k|        value *= 10;
 6840|  57.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6841|  57.2k|        if (value >
  ------------------
  |  Branch (6841:13): [True: 0, False: 57.2k]
  ------------------
 6842|  57.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6843|      0|            return -1;
 6844|      0|        }
 6845|  57.2k|        ++begin;
 6846|  57.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6846:14): [True: 57.2k, False: 0]
  |  Branch (6846:30): [True: 57.2k, False: 0]
  |  Branch (6846:47): [True: 28.6k, False: 28.6k]
  ------------------
 6847|  28.6k|    return static_cast<int>(value);
 6848|  28.6k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|   264k|        {
 7387|   264k|            arg_id = handler.on_arg_id();
 7388|   264k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 5974|   392k|    {
 5975|   392k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5976|   392k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 5963|   812k|    {
 5964|   812k|        return m_format.data();
 5965|   812k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7563|   264k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|   264k|    {
 7565|   264k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|   264k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7299|   264k|{
 7300|   264k|    auto do_presentation = [&]() -> const CharT* {
 7301|   264k|        if (*begin == CharT{'['}) {
 7302|   264k|            auto set = parse_presentation_set(begin, end, handler);
 7303|   264k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|   264k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|   264k|                return begin;
 7308|   264k|            }
 7309|   264k|            handler.on_character_set_string(set);
 7310|   264k|            return begin;
 7311|   264k|        }
 7312|   264k|        if (*begin == CharT{'/'}) {
 7313|   264k|            return parse_presentation_regex(begin, end, handler);
 7314|   264k|        }
 7315|   264k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   264k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|   264k|            handler.on_error("Invalid type specifier in format string");
 7318|   264k|            return begin;
 7319|   264k|        }
 7320|   264k|        handler.on_type(type);
 7321|   264k|        return begin;
 7322|   264k|    };
 7323|       |
 7324|   264k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 264k, False: 0]
  |  Branch (7324:28): [True: 231k, False: 32.8k]
  ------------------
 7325|   264k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 231k, False: 0]
  |  Branch (7325:36): [True: 221k, False: 9.54k]
  ------------------
 7326|   221k|        return do_presentation();
 7327|   221k|    }
 7328|       |
 7329|  42.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|  42.3k|    begin = parse_align(begin, end, handler);
 7335|  42.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|  42.3k|    begin = parse_width(begin, end, handler);
 7341|  42.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|  42.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 42.3k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|  42.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 9.54k, False: 32.8k]
  ------------------
 7360|  9.54k|        handler.on_localized();
 7361|  9.54k|        ++begin;
 7362|  9.54k|    }
 7363|  42.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|  42.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 42.3k, False: 0]
  |  Branch (7368:25): [True: 32.8k, False: 9.54k]
  ------------------
 7369|  32.8k|        do_presentation();
 7370|  32.8k|    }
 7371|  42.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|  42.3k|    return begin;
 7377|  42.3k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 6948|   371k|{
 6949|   371k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6949:13): [True: 357k, False: 14.3k]
  |  Branch (6949:33): [True: 357k, False: 0]
  ------------------
 6950|   371k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6950:13): [True: 14.3k, False: 0]
  |  Branch (6950:33): [True: 14.3k, False: 0]
  ------------------
 6951|   371k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7300|   254k|    auto do_presentation = [&]() -> const CharT* {
 7301|   254k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 13.7k, False: 240k]
  ------------------
 7302|  13.7k|            auto set = parse_presentation_set(begin, end, handler);
 7303|  13.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|  13.7k|            handler.on_character_set_string(set);
 7310|  13.7k|            return begin;
 7311|  13.7k|        }
 7312|   240k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 240k]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|   240k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   240k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.54k, False: 231k]
  |  |  ------------------
  ------------------
 7317|  9.54k|            handler.on_error("Invalid type specifier in format string");
 7318|  9.54k|            return begin;
 7319|  9.54k|        }
 7320|   231k|        handler.on_type(type);
 7321|   231k|        return begin;
 7322|   240k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7138|  13.7k|{
 7139|  13.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7140|  13.7k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|       |
 7142|  13.7k|    auto start = begin;
 7143|  13.7k|    ++begin;
 7144|       |
 7145|  13.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 7146|       |        // clang-format off
 7147|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7148|       |        // clang-format on
 7149|      0|        return {};
 7150|      0|    }
 7151|  13.7k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7151:9): [True: 0, False: 13.7k]
  ------------------
 7152|      0|        handler.on_charset_inverted();
 7153|      0|        ++begin;
 7154|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7155|       |            // clang-format off
 7156|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7157|       |            // clang-format on
 7158|      0|            return {};
 7159|      0|        }
 7160|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7160:13): [True: 0, False: 0]
  ------------------
 7161|      0|            handler.on_charset_single(char32_t{']'});
 7162|      0|            ++begin;
 7163|      0|        }
 7164|      0|    }
 7165|  13.7k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7165:14): [True: 0, False: 13.7k]
  ------------------
 7166|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7167|      0|    }
 7168|       |
 7169|  41.2k|    while (begin != end) {
  ------------------
  |  Branch (7169:12): [True: 41.2k, False: 0]
  ------------------
 7170|  41.2k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 41.2k]
  |  |  ------------------
  ------------------
 7171|      0|            break;
 7172|      0|        }
 7173|       |
 7174|  41.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7174:13): [True: 13.7k, False: 27.4k]
  ------------------
 7175|  13.7k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7176|  13.7k|        }
 7177|       |
 7178|  27.4k|        parse_presentation_set_literal(begin, end, handler);
 7179|  27.4k|    }
 7180|       |
 7181|      0|    SCN_UNLIKELY_ATTR
 7182|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7183|      0|    return {};
 7184|  13.7k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7102|  27.4k|{
 7103|  27.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  27.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|       |
 7105|  27.4k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7106|  27.4k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 7107|      0|        return;
 7108|      0|    }
 7109|       |
 7110|  27.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7110:9): [True: 27.4k, False: 0]
  |  Branch (7110:25): [True: 27.4k, False: 0]
  |  Branch (7110:49): [True: 27.4k, False: 0]
  ------------------
 7111|  27.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7111:9): [True: 27.4k, False: 0]
  ------------------
 7112|  27.4k|        ++begin;
 7113|       |
 7114|  27.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7115|  27.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 7116|      0|            return;
 7117|      0|        }
 7118|       |
 7119|  27.4k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 7120|       |            // clang-format off
 7121|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7122|       |            // clang-format on
 7123|      0|            return;
 7124|      0|        }
 7125|       |
 7126|  27.4k|        handler.on_charset_range(cp_first, cp_second + 1);
 7127|  27.4k|        return;
 7128|  27.4k|    }
 7129|       |
 7130|      0|    handler.on_charset_single(cp_first);
 7131|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7078|  54.9k|{
 7079|  54.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  54.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7080|       |
 7081|  54.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7082|  54.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 54.9k]
  |  |  |  Branch (865:45): [True: 0, False: 54.9k]
  |  |  |  Branch (865:45): [True: 0, False: 54.9k]
  |  |  ------------------
  ------------------
 7083|      0|        handler.on_error("Invalid encoding in format string");
 7084|      0|        return invalid_code_point;
 7085|      0|    }
 7086|       |
 7087|  54.9k|    const auto cp =
 7088|  54.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7089|  54.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 54.9k]
  |  |  ------------------
  ------------------
 7090|      0|        handler.on_error("Invalid encoding in format string");
 7091|      0|        return invalid_code_point;
 7092|      0|    }
 7093|       |
 7094|  54.9k|    begin += len;
 7095|  54.9k|    return cp;
 7096|  54.9k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6792|  20.6k|    {
 6793|  20.6k|        m_specs.charset_string_data = fmt.data();
 6794|  20.6k|        m_specs.charset_string_size = fmt.size();
 6795|  20.6k|        on_type(presentation_type::string_set);
 6796|  20.6k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6896|   385k|{
 6897|   385k|    switch (type) {
 6898|      0|        case 'b':
  ------------------
  |  Branch (6898:9): [True: 0, False: 385k]
  ------------------
 6899|      0|        case 'B':
  ------------------
  |  Branch (6899:9): [True: 0, False: 385k]
  ------------------
 6900|      0|            return presentation_type::int_binary;
 6901|      0|        case 'd':
  ------------------
  |  Branch (6901:9): [True: 0, False: 385k]
  ------------------
 6902|      0|            return presentation_type::int_decimal;
 6903|      0|        case 'i':
  ------------------
  |  Branch (6903:9): [True: 0, False: 385k]
  ------------------
 6904|      0|            return presentation_type::int_generic;
 6905|      0|        case 'u':
  ------------------
  |  Branch (6905:9): [True: 0, False: 385k]
  ------------------
 6906|      0|            return presentation_type::int_unsigned_decimal;
 6907|      0|        case 'o':
  ------------------
  |  Branch (6907:9): [True: 0, False: 385k]
  ------------------
 6908|      0|            return presentation_type::int_octal;
 6909|      0|        case 'x':
  ------------------
  |  Branch (6909:9): [True: 0, False: 385k]
  ------------------
 6910|      0|        case 'X':
  ------------------
  |  Branch (6910:9): [True: 0, False: 385k]
  ------------------
 6911|      0|            return presentation_type::int_hex;
 6912|      0|        case 'r':
  ------------------
  |  Branch (6912:9): [True: 0, False: 385k]
  ------------------
 6913|      0|        case 'R':
  ------------------
  |  Branch (6913:9): [True: 0, False: 385k]
  ------------------
 6914|      0|            return presentation_type::int_arbitrary_base;
 6915|      0|        case 'a':
  ------------------
  |  Branch (6915:9): [True: 0, False: 385k]
  ------------------
 6916|      0|        case 'A':
  ------------------
  |  Branch (6916:9): [True: 0, False: 385k]
  ------------------
 6917|      0|            return presentation_type::float_hex;
 6918|      0|        case 'e':
  ------------------
  |  Branch (6918:9): [True: 0, False: 385k]
  ------------------
 6919|      0|        case 'E':
  ------------------
  |  Branch (6919:9): [True: 0, False: 385k]
  ------------------
 6920|      0|            return presentation_type::float_scientific;
 6921|      0|        case 'f':
  ------------------
  |  Branch (6921:9): [True: 0, False: 385k]
  ------------------
 6922|      0|        case 'F':
  ------------------
  |  Branch (6922:9): [True: 0, False: 385k]
  ------------------
 6923|      0|            return presentation_type::float_fixed;
 6924|      0|        case 'g':
  ------------------
  |  Branch (6924:9): [True: 0, False: 385k]
  ------------------
 6925|      0|        case 'G':
  ------------------
  |  Branch (6925:9): [True: 0, False: 385k]
  ------------------
 6926|      0|            return presentation_type::float_general;
 6927|   357k|        case 's':
  ------------------
  |  Branch (6927:9): [True: 357k, False: 28.6k]
  ------------------
 6928|   357k|            return presentation_type::string;
 6929|  14.3k|        case 'c':
  ------------------
  |  Branch (6929:9): [True: 14.3k, False: 371k]
  ------------------
 6930|  14.3k|            return presentation_type::character;
 6931|      0|        case '?':
  ------------------
  |  Branch (6931:9): [True: 0, False: 385k]
  ------------------
 6932|      0|            return presentation_type::escaped_character;
 6933|      0|        case 'p':
  ------------------
  |  Branch (6933:9): [True: 0, False: 385k]
  ------------------
 6934|      0|            return presentation_type::pointer;
 6935|      0|        case '[':
  ------------------
  |  Branch (6935:9): [True: 0, False: 385k]
  ------------------
 6936|      0|        case '/':
  ------------------
  |  Branch (6936:9): [True: 0, False: 385k]
  ------------------
 6937|       |            // Should be handled by parse_presentation_set and
 6938|       |            // parse_presentation_regex
 6939|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6941|  14.3k|        default:
  ------------------
  |  Branch (6941:9): [True: 14.3k, False: 371k]
  ------------------
 6942|  14.3k|            return presentation_type::none;
 6943|   385k|    }
 6944|   385k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 6973|  42.3k|{
 6974|  42.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|  42.3k|    auto check_align = [](wchar_t ch) {
 6977|  42.3k|        switch (ch) {
 6978|  42.3k|            case L'<':
 6979|  42.3k|                return align_type::left;
 6980|  42.3k|            case L'>':
 6981|  42.3k|                return align_type::right;
 6982|  42.3k|            case L'^':
 6983|  42.3k|                return align_type::center;
 6984|  42.3k|            default:
 6985|  42.3k|                return align_type::none;
 6986|  42.3k|        }
 6987|  42.3k|    };
 6988|       |
 6989|  42.3k|    auto potential_fill_len = code_point_length(begin, end);
 6990|  42.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  84.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  |  Branch (865:45): [True: 0, False: 42.3k]
  |  |  |  Branch (865:45): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 6991|  42.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|  42.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|  42.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|  42.3k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|  42.3k|    const auto begin_before_fill = begin;
 7001|  42.3k|    begin += potential_fill_len;
 7002|       |
 7003|  42.3k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 42.3k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|  42.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|  42.3k|    const auto begin_after_fill = begin;
 7009|  42.3k|    ++begin;
 7010|       |
 7011|  42.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 42.3k, False: 0]
  ------------------
 7012|  42.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|  42.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 13.7k, False: 28.6k]
  ------------------
 7017|  13.7k|            return begin_before_fill;
 7018|  13.7k|        }
 7019|  42.3k|    }
 7020|       |
 7021|  28.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 28.6k, False: 0]
  ------------------
 7022|  28.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 28.6k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|  28.6k|        return begin_before_fill;
 7027|  28.6k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|  28.6k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 6955|  63.5k|{
 6956|  63.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  63.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6957|       |    if constexpr (sizeof(CharT) != 1) {
 6958|       |        return 1;
 6959|       |    }
 6960|  63.5k|    else {
 6961|  63.5k|        const auto lengths =
 6962|  63.5k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6963|  63.5k|            "\3\4";
 6964|  63.5k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6965|  63.5k|        return len;
 6966|  63.5k|    }
 6967|  63.5k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 6976|  84.7k|    auto check_align = [](wchar_t ch) {
 6977|  84.7k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 84.7k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 84.7k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 84.7k]
  ------------------
 6983|      0|                return align_type::center;
 6984|  84.7k|            default:
  ------------------
  |  Branch (6984:13): [True: 84.7k, False: 0]
  ------------------
 6985|  84.7k|                return align_type::none;
 6986|  84.7k|        }
 6987|  84.7k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7038|  42.3k|{
 7039|  42.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  42.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|  42.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 42.3k, False: 0]
  |  Branch (7041:33): [True: 19.0k, False: 23.2k]
  ------------------
 7042|  19.0k|        int width = parse_simple_int(begin, end);
 7043|  19.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 19.0k, False: 0]
  |  |  ------------------
  ------------------
 7044|  19.0k|            handler.on_width(width);
 7045|  19.0k|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|  19.0k|    }
 7051|  42.3k|    return begin;
 7052|  42.3k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7569|  9.54k|    {
 7570|  9.54k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|  9.54k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 9.54k, False: 0]
  ------------------
 7572|  9.54k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 9.54k, False: 0]
  ------------------
 7573|  9.54k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 9.54k, False: 0]
  ------------------
 7574|  9.54k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 9.54k, False: 0]
  ------------------
 7575|  9.54k|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|  9.54k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|  9.54k|        }
 7580|       |
 7581|      0|        Handler::on_localized();
 7582|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 8993|   245k|{
 8994|   245k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   245k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   245k|{
 8895|   245k|#define SCN_VISIT(Type)                                                \
 8896|   245k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   245k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   245k|    }                                                                  \
 8899|   245k|    else {                                                             \
 8900|   245k|        return vis(monostate_val);                                     \
 8901|   245k|    }
 8902|       |
 8903|   245k|    monostate monostate_val{};
 8904|       |
 8905|   245k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 245k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 245k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 245k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 245k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 245k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 245k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 245k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 245k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 245k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 245k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 245k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 245k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 245k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 245k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 245k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 245k]
  ------------------
 8937|      0|            SCN_VISIT(float);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8938|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 245k]
  ------------------
 8939|      0|            SCN_VISIT(double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8940|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 245k]
  ------------------
 8941|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8942|   122k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 122k, False: 122k]
  ------------------
 8943|   122k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   122k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   122k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   122k|    }                                                                  \
  |  | 8899|   122k|    else {                                                             \
  |  | 8900|   122k|        return vis(monostate_val);                                     \
  |  | 8901|   122k|    }
  ------------------
 8944|   245k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 122k, False: 122k]
  ------------------
 8945|   245k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   245k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   245k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   245k|    }                                                                  \
  |  | 8899|   245k|    else {                                                             \
  |  | 8900|   245k|        return vis(monostate_val);                                     \
  |  | 8901|   245k|    }
  ------------------
 8946|   245k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 245k]
  ------------------
 8947|   245k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   245k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   245k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   245k|    }                                                                  \
  |  | 8899|   245k|    else {                                                             \
  |  | 8900|   245k|        return vis(monostate_val);                                     \
  |  | 8901|   245k|    }
  ------------------
 8948|   245k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 245k]
  ------------------
 8949|   245k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   245k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   245k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   245k|    }                                                                  \
  |  | 8899|   245k|    else {                                                             \
  |  | 8900|   245k|        return vis(monostate_val);                                     \
  |  | 8901|   245k|    }
  ------------------
 8950|   245k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 245k]
  ------------------
 8951|   245k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   245k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   245k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   245k|    }                                                                  \
  |  | 8899|   245k|    else {                                                             \
  |  | 8900|   245k|        return vis(monostate_val);                                     \
  |  | 8901|   245k|    }
  ------------------
 8952|   245k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 245k]
  ------------------
 8953|   245k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   245k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   245k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   245k|    }                                                                  \
  |  | 8899|   245k|    else {                                                             \
  |  | 8900|   245k|        return vis(monostate_val);                                     \
  |  | 8901|   245k|    }
  ------------------
 8954|       |
 8955|   245k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 245k]
  ------------------
 8956|   245k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   245k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   245k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 245k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 245k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   245k|            SCN_CLANG_POP
 8973|   245k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|   156k|{
 7487|   156k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|   156k|    handler.check_args_exhausted();
 7489|   156k|    return handler.get_error();
 7490|   156k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|   156k|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|   156k|    auto begin = format.data();
 7455|   156k|    auto it = begin;
 7456|   156k|    const auto end = format.data() + format.size();
 7457|       |
 7458|   289k|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 156k, False: 132k]
  ------------------
 7459|   156k|        const auto ch = *it++;
 7460|   156k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 156k, False: 0]
  ------------------
 7461|   156k|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|   156k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|   156k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 23.8k, False: 132k]
  ------------------
 7465|  23.8k|                return;
 7466|  23.8k|            }
 7467|   156k|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|   156k|    }
 7478|       |
 7479|   132k|    handler.on_literal_text(begin, end);
 7480|   132k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8664|   132k|    {
 8665|   132k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   132k|    static_cast<    \
  |  |  935|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8666|   132k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7383|   156k|{
 7384|   156k|    struct id_adapter {
 7385|   156k|        constexpr void operator()()
 7386|   156k|        {
 7387|   156k|            arg_id = handler.on_arg_id();
 7388|   156k|        }
 7389|   156k|        constexpr void operator()(std::size_t id)
 7390|   156k|        {
 7391|   156k|            arg_id = handler.on_arg_id(id);
 7392|   156k|        }
 7393|       |
 7394|   156k|        constexpr void on_error(const char* msg)
 7395|   156k|        {
 7396|   156k|            SCN_UNLIKELY_ATTR
 7397|   156k|            handler.on_error(msg);
 7398|   156k|        }
 7399|       |
 7400|   156k|        Handler& handler;
 7401|   156k|        std::size_t arg_id;
 7402|   156k|    };
 7403|       |
 7404|   156k|    ++begin;
 7405|   156k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|   156k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 156k]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|   156k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 156k]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|   156k|    else {
 7417|   156k|        auto adapter = id_adapter{handler, 0};
 7418|   156k|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|   156k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|   156k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 156k]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|   156k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 156k, False: 0]
  ------------------
 7429|   156k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|   156k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|   156k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.54k, False: 146k]
  |  |  |  Branch (865:45): [True: 0, False: 156k]
  |  |  |  Branch (865:45): [True: 9.54k, False: 146k]
  |  |  ------------------
  ------------------
 7435|  9.54k|                handler.on_error("Unknown format specifier");
 7436|  9.54k|                return begin;
 7437|  9.54k|            }
 7438|   156k|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|   156k|    }
 7445|   146k|    return begin + 1;
 7446|   156k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|   156k|{
 6885|   156k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|   156k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 156k, False: 0]
  |  Branch (6886:26): [True: 0, False: 156k]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|   156k|    handler();
 6891|   156k|    return begin;
 6892|   156k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|   156k|        {
 7387|   156k|            arg_id = handler.on_arg_id();
 7388|   156k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7563|   156k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|   156k|    {
 7565|   156k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|   156k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7299|   156k|{
 7300|   156k|    auto do_presentation = [&]() -> const CharT* {
 7301|   156k|        if (*begin == CharT{'['}) {
 7302|   156k|            auto set = parse_presentation_set(begin, end, handler);
 7303|   156k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|   156k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|   156k|                return begin;
 7308|   156k|            }
 7309|   156k|            handler.on_character_set_string(set);
 7310|   156k|            return begin;
 7311|   156k|        }
 7312|   156k|        if (*begin == CharT{'/'}) {
 7313|   156k|            return parse_presentation_regex(begin, end, handler);
 7314|   156k|        }
 7315|   156k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   156k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|   156k|            handler.on_error("Invalid type specifier in format string");
 7318|   156k|            return begin;
 7319|   156k|        }
 7320|   156k|        handler.on_type(type);
 7321|   156k|        return begin;
 7322|   156k|    };
 7323|       |
 7324|   156k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 156k, False: 0]
  |  Branch (7324:28): [True: 140k, False: 16.4k]
  ------------------
 7325|   156k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 140k, False: 0]
  |  Branch (7325:36): [True: 135k, False: 4.77k]
  ------------------
 7326|   135k|        return do_presentation();
 7327|   135k|    }
 7328|       |
 7329|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|  21.1k|    begin = parse_align(begin, end, handler);
 7335|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|  21.1k|    begin = parse_width(begin, end, handler);
 7341|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|  21.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 21.1k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|  21.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 4.77k, False: 16.4k]
  ------------------
 7360|  4.77k|        handler.on_localized();
 7361|  4.77k|        ++begin;
 7362|  4.77k|    }
 7363|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|  21.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 21.1k, False: 0]
  |  Branch (7368:25): [True: 16.4k, False: 4.77k]
  ------------------
 7369|  16.4k|        do_presentation();
 7370|  16.4k|    }
 7371|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|  21.1k|    return begin;
 7377|  21.1k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7300|   151k|    auto do_presentation = [&]() -> const CharT* {
 7301|   151k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 6.87k, False: 144k]
  ------------------
 7302|  6.87k|            auto set = parse_presentation_set(begin, end, handler);
 7303|  6.87k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  6.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.87k]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|  6.87k|            handler.on_character_set_string(set);
 7310|  6.87k|            return begin;
 7311|  6.87k|        }
 7312|   144k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 144k]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|   144k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   144k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.77k, False: 140k]
  |  |  ------------------
  ------------------
 7317|  4.77k|            handler.on_error("Invalid type specifier in format string");
 7318|  4.77k|            return begin;
 7319|  4.77k|        }
 7320|   140k|        handler.on_type(type);
 7321|   140k|        return begin;
 7322|   144k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7138|  6.87k|{
 7139|  6.87k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  6.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7140|  6.87k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  6.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|       |
 7142|  6.87k|    auto start = begin;
 7143|  6.87k|    ++begin;
 7144|       |
 7145|  6.87k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.87k]
  |  |  ------------------
  ------------------
 7146|       |        // clang-format off
 7147|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7148|       |        // clang-format on
 7149|      0|        return {};
 7150|      0|    }
 7151|  6.87k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7151:9): [True: 0, False: 6.87k]
  ------------------
 7152|      0|        handler.on_charset_inverted();
 7153|      0|        ++begin;
 7154|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7155|       |            // clang-format off
 7156|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7157|       |            // clang-format on
 7158|      0|            return {};
 7159|      0|        }
 7160|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7160:13): [True: 0, False: 0]
  ------------------
 7161|      0|            handler.on_charset_single(char32_t{']'});
 7162|      0|            ++begin;
 7163|      0|        }
 7164|      0|    }
 7165|  6.87k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7165:14): [True: 0, False: 6.87k]
  ------------------
 7166|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7167|      0|    }
 7168|       |
 7169|  20.6k|    while (begin != end) {
  ------------------
  |  Branch (7169:12): [True: 20.6k, False: 0]
  ------------------
 7170|  20.6k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  20.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 20.6k]
  |  |  ------------------
  ------------------
 7171|      0|            break;
 7172|      0|        }
 7173|       |
 7174|  20.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7174:13): [True: 6.87k, False: 13.7k]
  ------------------
 7175|  6.87k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7176|  6.87k|        }
 7177|       |
 7178|  13.7k|        parse_presentation_set_literal(begin, end, handler);
 7179|  13.7k|    }
 7180|       |
 7181|      0|    SCN_UNLIKELY_ATTR
 7182|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7183|      0|    return {};
 7184|  6.87k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7102|  13.7k|{
 7103|  13.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|       |
 7105|  13.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7106|  13.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 7107|      0|        return;
 7108|      0|    }
 7109|       |
 7110|  13.7k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7110:9): [True: 13.7k, False: 0]
  |  Branch (7110:25): [True: 13.7k, False: 0]
  |  Branch (7110:49): [True: 13.7k, False: 0]
  ------------------
 7111|  13.7k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7111:9): [True: 13.7k, False: 0]
  ------------------
 7112|  13.7k|        ++begin;
 7113|       |
 7114|  13.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7115|  13.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 7116|      0|            return;
 7117|      0|        }
 7118|       |
 7119|  13.7k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 7120|       |            // clang-format off
 7121|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7122|       |            // clang-format on
 7123|      0|            return;
 7124|      0|        }
 7125|       |
 7126|  13.7k|        handler.on_charset_range(cp_first, cp_second + 1);
 7127|  13.7k|        return;
 7128|  13.7k|    }
 7129|       |
 7130|      0|    handler.on_charset_single(cp_first);
 7131|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7078|  27.4k|{
 7079|  27.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  27.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7080|       |
 7081|  27.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7082|  27.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 27.4k]
  |  |  |  Branch (865:45): [True: 0, False: 27.4k]
  |  |  |  Branch (865:45): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 7083|      0|        handler.on_error("Invalid encoding in format string");
 7084|      0|        return invalid_code_point;
 7085|      0|    }
 7086|       |
 7087|  27.4k|    const auto cp =
 7088|  27.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7089|  27.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 7090|      0|        handler.on_error("Invalid encoding in format string");
 7091|      0|        return invalid_code_point;
 7092|      0|    }
 7093|       |
 7094|  27.4k|    begin += len;
 7095|  27.4k|    return cp;
 7096|  27.4k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 6973|  21.1k|{
 6974|  21.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|  21.1k|    auto check_align = [](wchar_t ch) {
 6977|  21.1k|        switch (ch) {
 6978|  21.1k|            case L'<':
 6979|  21.1k|                return align_type::left;
 6980|  21.1k|            case L'>':
 6981|  21.1k|                return align_type::right;
 6982|  21.1k|            case L'^':
 6983|  21.1k|                return align_type::center;
 6984|  21.1k|            default:
 6985|  21.1k|                return align_type::none;
 6986|  21.1k|        }
 6987|  21.1k|    };
 6988|       |
 6989|  21.1k|    auto potential_fill_len = code_point_length(begin, end);
 6990|  21.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.1k]
  |  |  |  Branch (865:45): [True: 0, False: 21.1k]
  |  |  |  Branch (865:45): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6991|  21.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|  21.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|  21.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|  21.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|  21.1k|    const auto begin_before_fill = begin;
 7001|  21.1k|    begin += potential_fill_len;
 7002|       |
 7003|  21.1k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 21.1k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|  21.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|  21.1k|    const auto begin_after_fill = begin;
 7009|  21.1k|    ++begin;
 7010|       |
 7011|  21.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 21.1k, False: 0]
  ------------------
 7012|  21.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|  21.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 6.87k, False: 14.3k]
  ------------------
 7017|  6.87k|            return begin_before_fill;
 7018|  6.87k|        }
 7019|  21.1k|    }
 7020|       |
 7021|  14.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 14.3k, False: 0]
  ------------------
 7022|  14.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 14.3k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|  14.3k|        return begin_before_fill;
 7027|  14.3k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|  14.3k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6976|  42.3k|    auto check_align = [](wchar_t ch) {
 6977|  42.3k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 42.3k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 42.3k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 42.3k]
  ------------------
 6983|      0|                return align_type::center;
 6984|  42.3k|            default:
  ------------------
  |  Branch (6984:13): [True: 42.3k, False: 0]
  ------------------
 6985|  42.3k|                return align_type::none;
 6986|  42.3k|        }
 6987|  42.3k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7038|  21.1k|{
 7039|  21.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|  21.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 21.1k, False: 0]
  |  Branch (7041:33): [True: 9.54k, False: 11.6k]
  ------------------
 7042|  9.54k|        int width = parse_simple_int(begin, end);
 7043|  9.54k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  9.54k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 9.54k, False: 0]
  |  |  ------------------
  ------------------
 7044|  9.54k|            handler.on_width(width);
 7045|  9.54k|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|  9.54k|    }
 7051|  21.1k|    return begin;
 7052|  21.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7569|  4.77k|    {
 7570|  4.77k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|  4.77k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 4.77k, False: 0]
  ------------------
 7572|  4.77k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 4.77k, False: 0]
  ------------------
 7573|  4.77k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 4.77k, False: 0]
  ------------------
 7574|  4.77k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 4.77k, False: 0]
  ------------------
 7575|  4.77k|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|  4.77k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|  4.77k|        }
 7580|       |
 7581|      0|        Handler::on_localized();
 7582|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 8993|   146k|{
 8994|   146k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   146k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   146k|{
 8895|   146k|#define SCN_VISIT(Type)                                                \
 8896|   146k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   146k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   146k|    }                                                                  \
 8899|   146k|    else {                                                             \
 8900|   146k|        return vis(monostate_val);                                     \
 8901|   146k|    }
 8902|       |
 8903|   146k|    monostate monostate_val{};
 8904|       |
 8905|   146k|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 146k]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 146k]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 146k]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 146k]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 146k]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 146k]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 146k]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 146k]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 146k]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 146k]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 146k]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 146k]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 146k]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 146k]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 146k]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 146k]
  ------------------
 8937|      0|            SCN_VISIT(float);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8938|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 146k]
  ------------------
 8939|      0|            SCN_VISIT(double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8940|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 146k]
  ------------------
 8941|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8942|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 146k]
  ------------------
 8943|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8944|   146k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 146k, False: 0]
  ------------------
 8945|   146k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   146k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   146k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   146k|    }                                                                  \
  |  | 8899|   146k|    else {                                                             \
  |  | 8900|   146k|        return vis(monostate_val);                                     \
  |  | 8901|   146k|    }
  ------------------
 8946|   146k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 146k]
  ------------------
 8947|   146k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   146k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   146k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   146k|    }                                                                  \
  |  | 8899|   146k|    else {                                                             \
  |  | 8900|   146k|        return vis(monostate_val);                                     \
  |  | 8901|   146k|    }
  ------------------
 8948|   146k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 146k]
  ------------------
 8949|   146k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   146k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   146k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   146k|    }                                                                  \
  |  | 8899|   146k|    else {                                                             \
  |  | 8900|   146k|        return vis(monostate_val);                                     \
  |  | 8901|   146k|    }
  ------------------
 8950|   146k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 146k]
  ------------------
 8951|   146k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   146k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   146k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   146k|    }                                                                  \
  |  | 8899|   146k|    else {                                                             \
  |  | 8900|   146k|        return vis(monostate_val);                                     \
  |  | 8901|   146k|    }
  ------------------
 8952|   146k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 146k]
  ------------------
 8953|   146k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   146k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   146k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   146k|    }                                                                  \
  |  | 8899|   146k|    else {                                                             \
  |  | 8900|   146k|        return vis(monostate_val);                                     \
  |  | 8901|   146k|    }
  ------------------
 8954|       |
 8955|   146k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 146k]
  ------------------
 8956|   146k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   146k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   146k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 146k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 146k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   146k|            SCN_CLANG_POP
 8973|   146k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4350|  31.0k|    {
 4351|  31.0k|        sync(0);
 4352|  31.0k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 5870|  7.51M|    {
 5871|  7.51M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  7.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.51M]
  |  |  ------------------
  ------------------
 5872|      0|            return max_size();
 5873|      0|        }
 5874|       |
 5875|  7.51M|        return static_cast<std::size_t>(m_desc &
 5876|  7.51M|                                        ((1 << detail::packed_arg_bits) - 1));
 5877|  7.51M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 5896|  15.0M|    {
 5897|  15.0M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5898|  15.0M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 5838|  7.51M|    {
 5839|  7.51M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  7.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.51M]
  |  |  ------------------
  ------------------
 5840|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5841|      0|                return m_args[id];
 5842|      0|            }
 5843|      0|            return {};
 5844|      0|        }
 5845|       |
 5846|  7.51M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  7.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.51M]
  |  |  ------------------
  ------------------
 5847|      0|            return {};
 5848|      0|        }
 5849|       |
 5850|  7.51M|        const auto t = type(id);
 5851|  7.51M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  7.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 7.51M]
  |  |  ------------------
  ------------------
 5852|      0|            return {};
 5853|      0|        }
 5854|       |
 5855|  7.51M|        basic_scan_arg<Context> arg;
 5856|  7.51M|        arg.m_type = t;
 5857|  7.51M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5857:13): [True: 7.51M, False: 0]
  ------------------
 5858|  7.51M|            arg.m_value.ref_value = m_builtin_values[id];
 5859|  7.51M|        }
 5860|      0|        else {
 5861|      0|            arg.m_value = m_values[id];
 5862|      0|        }
 5863|  7.51M|        return arg;
 5864|  7.51M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 5905|  7.51M|    {
 5906|       |        // First (0th) index is size, types start after that
 5907|  7.51M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5908|  7.51M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5909|  7.51M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5910|  7.51M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 5900|  7.51M|    {
 5901|  7.51M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5902|  7.51M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5654|  13.1M|    {
 5655|  13.1M|        return m_type != detail::arg_type::none_type;
 5656|  13.1M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 8993|  3.69M|{
 8994|  3.69M|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  3.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  3.69M|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  3.69M|{
 8895|  3.69M|#define SCN_VISIT(Type)                                                \
 8896|  3.69M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  3.69M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  3.69M|    }                                                                  \
 8899|  3.69M|    else {                                                             \
 8900|  3.69M|        return vis(monostate_val);                                     \
 8901|  3.69M|    }
 8902|       |
 8903|  3.69M|    monostate monostate_val{};
 8904|       |
 8905|  3.69M|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 3.69M]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 3.69M]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 3.69M]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 3.69M]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 3.69M]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 3.69M]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 3.69M]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 3.69M]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 3.69M]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 3.69M]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 3.69M]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 3.69M]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 3.69M]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 3.69M]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 3.69M]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 3.69M]
  ------------------
 8937|      0|            SCN_VISIT(float);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8938|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 3.69M]
  ------------------
 8939|      0|            SCN_VISIT(double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8940|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 3.69M]
  ------------------
 8941|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8942|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 3.69M]
  ------------------
 8943|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8944|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 3.69M]
  ------------------
 8945|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8946|  1.84M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 1.84M, False: 1.84M]
  ------------------
 8947|  1.84M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  1.84M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.84M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.84M|    }                                                                  \
  |  | 8899|  1.84M|    else {                                                             \
  |  | 8900|  1.84M|        return vis(monostate_val);                                     \
  |  | 8901|  1.84M|    }
  ------------------
 8948|  3.69M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 1.84M, False: 1.84M]
  ------------------
 8949|  3.69M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  3.69M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  3.69M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  3.69M|    }                                                                  \
  |  | 8899|  3.69M|    else {                                                             \
  |  | 8900|  3.69M|        return vis(monostate_val);                                     \
  |  | 8901|  3.69M|    }
  ------------------
 8950|  3.69M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 3.69M]
  ------------------
 8951|  3.69M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  3.69M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  3.69M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  3.69M|    }                                                                  \
  |  | 8899|  3.69M|    else {                                                             \
  |  | 8900|  3.69M|        return vis(monostate_val);                                     \
  |  | 8901|  3.69M|    }
  ------------------
 8952|  3.69M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 3.69M]
  ------------------
 8953|  3.69M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  3.69M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  3.69M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  3.69M|    }                                                                  \
  |  | 8899|  3.69M|    else {                                                             \
  |  | 8900|  3.69M|        return vis(monostate_val);                                     \
  |  | 8901|  3.69M|    }
  ------------------
 8954|       |
 8955|  3.69M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 3.69M]
  ------------------
 8956|  3.69M|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  3.69M|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  3.69M|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 3.69M]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 3.69M]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  3.69M|            SCN_CLANG_POP
 8973|  3.69M|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 5699|  16.9M|{
 5700|  16.9M|    return arg.m_type;
 5701|  16.9M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 5711|  9.30M|{
 5712|  9.30M|    return arg.m_value;
 5713|  9.30M|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5950|  3.81M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5951|  3.81M|    {
 5952|  3.81M|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8626|  1.27M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|  1.27M|    static_cast<    \
  |  |  935|  1.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8627|  1.27M|    {
 8628|  1.27M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  2.54M|    {
 3075|  2.54M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  2.54M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  2.54M|    {
 3041|  2.54M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  2.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  2.54M|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|  2.54M|{
 7487|  2.54M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|  2.54M|    handler.check_args_exhausted();
 7489|  2.54M|    return handler.get_error();
 7490|  2.54M|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|  2.54M|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|  2.54M|    auto begin = format.data();
 7455|  2.54M|    auto it = begin;
 7456|  2.54M|    const auto end = format.data() + format.size();
 7457|       |
 7458|  4.99M|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 2.54M, False: 2.44M]
  ------------------
 7459|  2.54M|        const auto ch = *it++;
 7460|  2.54M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 2.54M, False: 0]
  ------------------
 7461|  2.54M|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|  2.54M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|  2.54M|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 95.4k, False: 2.44M]
  ------------------
 7465|  95.4k|                return;
 7466|  95.4k|            }
 7467|  2.54M|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|  2.54M|    }
 7478|       |
 7479|  2.44M|    handler.on_literal_text(begin, end);
 7480|  2.44M|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7383|  2.54M|{
 7384|  2.54M|    struct id_adapter {
 7385|  2.54M|        constexpr void operator()()
 7386|  2.54M|        {
 7387|  2.54M|            arg_id = handler.on_arg_id();
 7388|  2.54M|        }
 7389|  2.54M|        constexpr void operator()(std::size_t id)
 7390|  2.54M|        {
 7391|  2.54M|            arg_id = handler.on_arg_id(id);
 7392|  2.54M|        }
 7393|       |
 7394|  2.54M|        constexpr void on_error(const char* msg)
 7395|  2.54M|        {
 7396|  2.54M|            SCN_UNLIKELY_ATTR
 7397|  2.54M|            handler.on_error(msg);
 7398|  2.54M|        }
 7399|       |
 7400|  2.54M|        Handler& handler;
 7401|  2.54M|        std::size_t arg_id;
 7402|  2.54M|    };
 7403|       |
 7404|  2.54M|    ++begin;
 7405|  2.54M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.54M]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|  2.54M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 2.54M]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|  2.54M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 2.54M]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|  2.54M|    else {
 7417|  2.54M|        auto adapter = id_adapter{handler, 0};
 7418|  2.54M|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|  2.54M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.54M]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|  2.54M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 2.54M]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|  2.54M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 2.54M, False: 0]
  ------------------
 7429|  2.54M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.54M]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|  2.54M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|  2.54M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  5.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 38.1k, False: 2.50M]
  |  |  |  Branch (865:45): [True: 0, False: 2.54M]
  |  |  |  Branch (865:45): [True: 38.1k, False: 2.50M]
  |  |  ------------------
  ------------------
 7435|  38.1k|                handler.on_error("Unknown format specifier");
 7436|  38.1k|                return begin;
 7437|  38.1k|            }
 7438|  2.54M|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|  2.54M|    }
 7445|  2.50M|    return begin + 1;
 7446|  2.54M|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8525|  3.81M|    {
 8526|  3.81M|        return m_args.get(id);
 8527|  3.81M|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 5979|  3.81M|    {
 5980|  3.81M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  3.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.81M]
  |  |  ------------------
  ------------------
 5981|      0|            on_error(
 5982|      0|                "Cannot switch from manual to automatic argument indexing");
 5983|      0|            return 0;
 5984|      0|        }
 5985|       |
 5986|  3.81M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5987|  3.81M|        do_check_arg_id(id);
 5988|  3.81M|        return id;
 5989|  3.81M|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6499|  3.81M|{
 6500|  3.81M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6500:9): [Folded - Ignored]
  ------------------
 6501|  3.81M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6501:10): [Folded - Ignored]
  |  Branch (6501:22): [Folded - Ignored]
  ------------------
 6502|       |        // The cast below will cause an error on gcc pre-12
 6503|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6504|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6504:13): [True: 0, False: 0]
  ------------------
 6505|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6506|      0|            SCN_UNLIKELY_ATTR
 6507|      0|            on_error("Argument not found");
 6508|      0|        }
 6509|      0|    }
 6510|  3.81M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|  2.54M|{
 6885|  2.54M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|  2.54M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 2.54M, False: 0]
  |  Branch (6886:26): [True: 0, False: 2.54M]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|  2.54M|    handler();
 6891|  2.54M|    return begin;
 6892|  2.54M|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 6833|  57.2k|{
 6834|  57.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6835|  57.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6836|       |
 6837|  57.2k|    unsigned long long value = 0;
 6838|   114k|    do {
 6839|   114k|        value *= 10;
 6840|   114k|        value += static_cast<unsigned long long>(*begin - '0');
 6841|   114k|        if (value >
  ------------------
  |  Branch (6841:13): [True: 0, False: 114k]
  ------------------
 6842|   114k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6843|      0|            return -1;
 6844|      0|        }
 6845|   114k|        ++begin;
 6846|   114k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6846:14): [True: 114k, False: 0]
  |  Branch (6846:30): [True: 114k, False: 0]
  |  Branch (6846:47): [True: 57.2k, False: 57.2k]
  ------------------
 6847|  57.2k|    return static_cast<int>(value);
 6848|  57.2k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|  2.54M|        {
 7387|  2.54M|            arg_id = handler.on_arg_id();
 7388|  2.54M|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 5974|  3.75M|    {
 5975|  3.75M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5976|  3.75M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4689|  3.12M|{
 4690|  3.12M|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 3.12M]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|  3.12M|    return ranges::subrange{forward_iterator{this, 0},
 4695|  3.12M|                            ranges::default_sentinel};
 4696|  3.12M|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4452|  3.12M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|  3.12M|    {
 4454|  3.12M|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  3.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|  3.12M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  3.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  3.12M|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 5963|  7.57M|    {
 5964|  7.57M|        return m_format.data();
 5965|  7.57M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7563|  2.54M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  2.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|  2.54M|    {
 7565|  2.54M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|  2.54M|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7299|  2.54M|{
 7300|  2.54M|    auto do_presentation = [&]() -> const CharT* {
 7301|  2.54M|        if (*begin == CharT{'['}) {
 7302|  2.54M|            auto set = parse_presentation_set(begin, end, handler);
 7303|  2.54M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|  2.54M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|  2.54M|                return begin;
 7308|  2.54M|            }
 7309|  2.54M|            handler.on_character_set_string(set);
 7310|  2.54M|            return begin;
 7311|  2.54M|        }
 7312|  2.54M|        if (*begin == CharT{'/'}) {
 7313|  2.54M|            return parse_presentation_regex(begin, end, handler);
 7314|  2.54M|        }
 7315|  2.54M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  2.54M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|  2.54M|            handler.on_error("Invalid type specifier in format string");
 7318|  2.54M|            return begin;
 7319|  2.54M|        }
 7320|  2.54M|        handler.on_type(type);
 7321|  2.54M|        return begin;
 7322|  2.54M|    };
 7323|       |
 7324|  2.54M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 2.54M, False: 0]
  |  Branch (7324:28): [True: 2.48M, False: 57.7k]
  ------------------
 7325|  2.54M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 2.48M, False: 0]
  |  Branch (7325:36): [True: 2.46M, False: 19.0k]
  ------------------
 7326|  2.46M|        return do_presentation();
 7327|  2.46M|    }
 7328|       |
 7329|  76.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.8k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|  76.8k|    begin = parse_align(begin, end, handler);
 7335|  76.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.8k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|  76.8k|    begin = parse_width(begin, end, handler);
 7341|  76.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.8k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|  76.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 76.8k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|  76.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 19.0k, False: 57.7k]
  ------------------
 7360|  19.0k|        handler.on_localized();
 7361|  19.0k|        ++begin;
 7362|  19.0k|    }
 7363|  76.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.8k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|  76.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 76.8k, False: 0]
  |  Branch (7368:25): [True: 57.7k, False: 19.0k]
  ------------------
 7369|  57.7k|        do_presentation();
 7370|  57.7k|    }
 7371|  76.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.8k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|  76.8k|    return begin;
 7377|  76.8k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 6948|  3.72M|{
 6949|  3.72M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6949:13): [True: 3.69M, False: 28.6k]
  |  Branch (6949:33): [True: 3.69M, False: 0]
  ------------------
 6950|  3.72M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6950:13): [True: 28.6k, False: 0]
  |  Branch (6950:33): [True: 28.6k, False: 0]
  ------------------
 6951|  3.72M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7300|  2.52M|    auto do_presentation = [&]() -> const CharT* {
 7301|  2.52M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 19.6k, False: 2.50M]
  ------------------
 7302|  19.6k|            auto set = parse_presentation_set(begin, end, handler);
 7303|  19.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|  19.6k|            handler.on_character_set_string(set);
 7310|  19.6k|            return begin;
 7311|  19.6k|        }
 7312|  2.50M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 2.50M]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|  2.50M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  2.50M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.0k, False: 2.48M]
  |  |  ------------------
  ------------------
 7317|  19.0k|            handler.on_error("Invalid type specifier in format string");
 7318|  19.0k|            return begin;
 7319|  19.0k|        }
 7320|  2.48M|        handler.on_type(type);
 7321|  2.48M|        return begin;
 7322|  2.50M|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7138|  19.6k|{
 7139|  19.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7140|  19.6k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|       |
 7142|  19.6k|    auto start = begin;
 7143|  19.6k|    ++begin;
 7144|       |
 7145|  19.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 7146|       |        // clang-format off
 7147|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7148|       |        // clang-format on
 7149|      0|        return {};
 7150|      0|    }
 7151|  19.6k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7151:9): [True: 0, False: 19.6k]
  ------------------
 7152|      0|        handler.on_charset_inverted();
 7153|      0|        ++begin;
 7154|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7155|       |            // clang-format off
 7156|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7157|       |            // clang-format on
 7158|      0|            return {};
 7159|      0|        }
 7160|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7160:13): [True: 0, False: 0]
  ------------------
 7161|      0|            handler.on_charset_single(char32_t{']'});
 7162|      0|            ++begin;
 7163|      0|        }
 7164|      0|    }
 7165|  19.6k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7165:14): [True: 0, False: 19.6k]
  ------------------
 7166|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7167|      0|    }
 7168|       |
 7169|  58.8k|    while (begin != end) {
  ------------------
  |  Branch (7169:12): [True: 58.8k, False: 0]
  ------------------
 7170|  58.8k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 58.8k]
  |  |  ------------------
  ------------------
 7171|      0|            break;
 7172|      0|        }
 7173|       |
 7174|  58.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7174:13): [True: 19.6k, False: 39.2k]
  ------------------
 7175|  19.6k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7176|  19.6k|        }
 7177|       |
 7178|  39.2k|        parse_presentation_set_literal(begin, end, handler);
 7179|  39.2k|    }
 7180|       |
 7181|      0|    SCN_UNLIKELY_ATTR
 7182|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7183|      0|    return {};
 7184|  19.6k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7102|  39.2k|{
 7103|  39.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|       |
 7105|  39.2k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7106|  39.2k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.2k]
  |  |  ------------------
  ------------------
 7107|      0|        return;
 7108|      0|    }
 7109|       |
 7110|  39.2k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7110:9): [True: 39.2k, False: 0]
  |  Branch (7110:25): [True: 39.2k, False: 0]
  |  Branch (7110:49): [True: 39.2k, False: 0]
  ------------------
 7111|  39.2k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7111:9): [True: 39.2k, False: 0]
  ------------------
 7112|  39.2k|        ++begin;
 7113|       |
 7114|  39.2k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7115|  39.2k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.2k]
  |  |  ------------------
  ------------------
 7116|      0|            return;
 7117|      0|        }
 7118|       |
 7119|  39.2k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.2k]
  |  |  ------------------
  ------------------
 7120|       |            // clang-format off
 7121|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7122|       |            // clang-format on
 7123|      0|            return;
 7124|      0|        }
 7125|       |
 7126|  39.2k|        handler.on_charset_range(cp_first, cp_second + 1);
 7127|  39.2k|        return;
 7128|  39.2k|    }
 7129|       |
 7130|      0|    handler.on_charset_single(cp_first);
 7131|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7078|  78.4k|{
 7079|  78.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  78.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  78.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7080|       |
 7081|  78.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7082|  78.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 78.4k]
  |  |  |  Branch (865:45): [True: 0, False: 78.4k]
  |  |  |  Branch (865:45): [True: 0, False: 78.4k]
  |  |  ------------------
  ------------------
 7083|      0|        handler.on_error("Invalid encoding in format string");
 7084|      0|        return invalid_code_point;
 7085|      0|    }
 7086|       |
 7087|  78.4k|    const auto cp =
 7088|  78.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7089|  78.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 78.4k]
  |  |  ------------------
  ------------------
 7090|      0|        handler.on_error("Invalid encoding in format string");
 7091|      0|        return invalid_code_point;
 7092|      0|    }
 7093|       |
 7094|  78.4k|    begin += len;
 7095|  78.4k|    return cp;
 7096|  78.4k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6792|  29.4k|    {
 6793|  29.4k|        m_specs.charset_string_data = fmt.data();
 6794|  29.4k|        m_specs.charset_string_size = fmt.size();
 6795|  29.4k|        on_type(presentation_type::string_set);
 6796|  29.4k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6896|  3.75M|{
 6897|  3.75M|    switch (type) {
 6898|      0|        case 'b':
  ------------------
  |  Branch (6898:9): [True: 0, False: 3.75M]
  ------------------
 6899|      0|        case 'B':
  ------------------
  |  Branch (6899:9): [True: 0, False: 3.75M]
  ------------------
 6900|      0|            return presentation_type::int_binary;
 6901|      0|        case 'd':
  ------------------
  |  Branch (6901:9): [True: 0, False: 3.75M]
  ------------------
 6902|      0|            return presentation_type::int_decimal;
 6903|      0|        case 'i':
  ------------------
  |  Branch (6903:9): [True: 0, False: 3.75M]
  ------------------
 6904|      0|            return presentation_type::int_generic;
 6905|      0|        case 'u':
  ------------------
  |  Branch (6905:9): [True: 0, False: 3.75M]
  ------------------
 6906|      0|            return presentation_type::int_unsigned_decimal;
 6907|      0|        case 'o':
  ------------------
  |  Branch (6907:9): [True: 0, False: 3.75M]
  ------------------
 6908|      0|            return presentation_type::int_octal;
 6909|      0|        case 'x':
  ------------------
  |  Branch (6909:9): [True: 0, False: 3.75M]
  ------------------
 6910|      0|        case 'X':
  ------------------
  |  Branch (6910:9): [True: 0, False: 3.75M]
  ------------------
 6911|      0|            return presentation_type::int_hex;
 6912|      0|        case 'r':
  ------------------
  |  Branch (6912:9): [True: 0, False: 3.75M]
  ------------------
 6913|      0|        case 'R':
  ------------------
  |  Branch (6913:9): [True: 0, False: 3.75M]
  ------------------
 6914|      0|            return presentation_type::int_arbitrary_base;
 6915|      0|        case 'a':
  ------------------
  |  Branch (6915:9): [True: 0, False: 3.75M]
  ------------------
 6916|      0|        case 'A':
  ------------------
  |  Branch (6916:9): [True: 0, False: 3.75M]
  ------------------
 6917|      0|            return presentation_type::float_hex;
 6918|      0|        case 'e':
  ------------------
  |  Branch (6918:9): [True: 0, False: 3.75M]
  ------------------
 6919|      0|        case 'E':
  ------------------
  |  Branch (6919:9): [True: 0, False: 3.75M]
  ------------------
 6920|      0|            return presentation_type::float_scientific;
 6921|      0|        case 'f':
  ------------------
  |  Branch (6921:9): [True: 0, False: 3.75M]
  ------------------
 6922|      0|        case 'F':
  ------------------
  |  Branch (6922:9): [True: 0, False: 3.75M]
  ------------------
 6923|      0|            return presentation_type::float_fixed;
 6924|      0|        case 'g':
  ------------------
  |  Branch (6924:9): [True: 0, False: 3.75M]
  ------------------
 6925|      0|        case 'G':
  ------------------
  |  Branch (6925:9): [True: 0, False: 3.75M]
  ------------------
 6926|      0|            return presentation_type::float_general;
 6927|  3.69M|        case 's':
  ------------------
  |  Branch (6927:9): [True: 3.69M, False: 57.2k]
  ------------------
 6928|  3.69M|            return presentation_type::string;
 6929|  28.6k|        case 'c':
  ------------------
  |  Branch (6929:9): [True: 28.6k, False: 3.72M]
  ------------------
 6930|  28.6k|            return presentation_type::character;
 6931|      0|        case '?':
  ------------------
  |  Branch (6931:9): [True: 0, False: 3.75M]
  ------------------
 6932|      0|            return presentation_type::escaped_character;
 6933|      0|        case 'p':
  ------------------
  |  Branch (6933:9): [True: 0, False: 3.75M]
  ------------------
 6934|      0|            return presentation_type::pointer;
 6935|      0|        case '[':
  ------------------
  |  Branch (6935:9): [True: 0, False: 3.75M]
  ------------------
 6936|      0|        case '/':
  ------------------
  |  Branch (6936:9): [True: 0, False: 3.75M]
  ------------------
 6937|       |            // Should be handled by parse_presentation_set and
 6938|       |            // parse_presentation_regex
 6939|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6941|  28.6k|        default:
  ------------------
  |  Branch (6941:9): [True: 28.6k, False: 3.72M]
  ------------------
 6942|  28.6k|            return presentation_type::none;
 6943|  3.75M|    }
 6944|  3.75M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 6973|  76.8k|{
 6974|  76.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|  76.8k|    auto check_align = [](wchar_t ch) {
 6977|  76.8k|        switch (ch) {
 6978|  76.8k|            case L'<':
 6979|  76.8k|                return align_type::left;
 6980|  76.8k|            case L'>':
 6981|  76.8k|                return align_type::right;
 6982|  76.8k|            case L'^':
 6983|  76.8k|                return align_type::center;
 6984|  76.8k|            default:
 6985|  76.8k|                return align_type::none;
 6986|  76.8k|        }
 6987|  76.8k|    };
 6988|       |
 6989|  76.8k|    auto potential_fill_len = code_point_length(begin, end);
 6990|  76.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.8k]
  |  |  |  Branch (865:45): [True: 0, False: 76.8k]
  |  |  |  Branch (865:45): [True: 0, False: 76.8k]
  |  |  ------------------
  ------------------
 6991|  76.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|  76.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|  76.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|  76.8k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|  76.8k|    const auto begin_before_fill = begin;
 7001|  76.8k|    begin += potential_fill_len;
 7002|       |
 7003|  76.8k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 76.8k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|  76.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|  76.8k|    const auto begin_after_fill = begin;
 7009|  76.8k|    ++begin;
 7010|       |
 7011|  76.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 76.8k, False: 0]
  ------------------
 7012|  76.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.8k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|  76.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 19.6k, False: 57.2k]
  ------------------
 7017|  19.6k|            return begin_before_fill;
 7018|  19.6k|        }
 7019|  76.8k|    }
 7020|       |
 7021|  57.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 57.2k, False: 0]
  ------------------
 7022|  57.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 57.2k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|  57.2k|        return begin_before_fill;
 7027|  57.2k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|  57.2k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 6955|   115k|{
 6956|   115k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6957|   115k|    if constexpr (sizeof(CharT) != 1) {
 6958|   115k|        return 1;
 6959|       |    }
 6960|       |    else {
 6961|       |        const auto lengths =
 6962|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6963|       |            "\3\4";
 6964|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6965|       |        return len;
 6966|       |    }
 6967|   115k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 6976|   153k|    auto check_align = [](wchar_t ch) {
 6977|   153k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 153k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 153k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 153k]
  ------------------
 6983|      0|                return align_type::center;
 6984|   153k|            default:
  ------------------
  |  Branch (6984:13): [True: 153k, False: 0]
  ------------------
 6985|   153k|                return align_type::none;
 6986|   153k|        }
 6987|   153k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7038|  76.8k|{
 7039|  76.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|  76.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 76.8k, False: 0]
  |  Branch (7041:33): [True: 38.1k, False: 38.6k]
  ------------------
 7042|  38.1k|        int width = parse_simple_int(begin, end);
 7043|  38.1k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  38.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 38.1k, False: 0]
  |  |  ------------------
  ------------------
 7044|  38.1k|            handler.on_width(width);
 7045|  38.1k|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|  38.1k|    }
 7051|  76.8k|    return begin;
 7052|  76.8k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7569|  19.0k|    {
 7570|  19.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|  19.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 19.0k, False: 0]
  ------------------
 7572|  19.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 19.0k, False: 0]
  ------------------
 7573|  19.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 19.0k, False: 0]
  ------------------
 7574|  19.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 19.0k, False: 0]
  ------------------
 7575|  19.0k|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|  19.0k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|  19.0k|        }
 7580|       |
 7581|      0|        Handler::on_localized();
 7582|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 8993|  2.50M|{
 8994|  2.50M|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  2.50M|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  2.50M|{
 8895|  2.50M|#define SCN_VISIT(Type)                                                \
 8896|  2.50M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  2.50M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  2.50M|    }                                                                  \
 8899|  2.50M|    else {                                                             \
 8900|  2.50M|        return vis(monostate_val);                                     \
 8901|  2.50M|    }
 8902|       |
 8903|  2.50M|    monostate monostate_val{};
 8904|       |
 8905|  2.50M|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 2.50M]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 2.50M]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 2.50M]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 2.50M]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 2.50M]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 2.50M]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 2.50M]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 2.50M]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 2.50M]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 2.50M]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 2.50M]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 2.50M]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 2.50M]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 2.50M]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 2.50M]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 2.50M]
  ------------------
 8937|      0|            SCN_VISIT(float);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8938|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 2.50M]
  ------------------
 8939|      0|            SCN_VISIT(double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8940|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 2.50M]
  ------------------
 8941|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8942|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 2.50M]
  ------------------
 8943|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8944|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 2.50M]
  ------------------
 8945|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8946|  1.25M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 1.25M, False: 1.25M]
  ------------------
 8947|  1.25M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  1.25M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.25M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.25M|    }                                                                  \
  |  | 8899|  1.25M|    else {                                                             \
  |  | 8900|  1.25M|        return vis(monostate_val);                                     \
  |  | 8901|  1.25M|    }
  ------------------
 8948|  2.50M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 1.25M, False: 1.25M]
  ------------------
 8949|  2.50M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  2.50M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  2.50M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  2.50M|    }                                                                  \
  |  | 8899|  2.50M|    else {                                                             \
  |  | 8900|  2.50M|        return vis(monostate_val);                                     \
  |  | 8901|  2.50M|    }
  ------------------
 8950|  2.50M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 2.50M]
  ------------------
 8951|  2.50M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  2.50M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  2.50M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  2.50M|    }                                                                  \
  |  | 8899|  2.50M|    else {                                                             \
  |  | 8900|  2.50M|        return vis(monostate_val);                                     \
  |  | 8901|  2.50M|    }
  ------------------
 8952|  2.50M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 2.50M]
  ------------------
 8953|  2.50M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  2.50M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  2.50M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  2.50M|    }                                                                  \
  |  | 8899|  2.50M|    else {                                                             \
  |  | 8900|  2.50M|        return vis(monostate_val);                                     \
  |  | 8901|  2.50M|    }
  ------------------
 8954|       |
 8955|  2.50M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 2.50M]
  ------------------
 8956|  2.50M|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  2.50M|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  2.50M|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 2.50M]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 2.50M]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  2.50M|            SCN_CLANG_POP
 8973|  2.50M|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 8993|  1.84M|{
 8994|  1.84M|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  1.84M|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  1.84M|{
 8895|  1.84M|#define SCN_VISIT(Type)                                                \
 8896|  1.84M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  1.84M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  1.84M|    }                                                                  \
 8899|  1.84M|    else {                                                             \
 8900|  1.84M|        return vis(monostate_val);                                     \
 8901|  1.84M|    }
 8902|       |
 8903|  1.84M|    monostate monostate_val{};
 8904|       |
 8905|  1.84M|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 1.84M]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 1.84M]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 1.84M]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 1.84M]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 1.84M]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 1.84M]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 1.84M]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 1.84M]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 1.84M]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 1.84M]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 1.84M]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 1.84M]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 1.84M]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 1.84M]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 1.84M]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 1.84M]
  ------------------
 8937|      0|            SCN_VISIT(float);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8938|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 1.84M]
  ------------------
 8939|      0|            SCN_VISIT(double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8940|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 1.84M]
  ------------------
 8941|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8942|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 1.84M]
  ------------------
 8943|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8944|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 1.84M]
  ------------------
 8945|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8946|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 1.84M]
  ------------------
 8947|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8948|  1.84M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 1.84M, False: 0]
  ------------------
 8949|  1.84M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  1.84M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.84M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.84M|    }                                                                  \
  |  | 8899|  1.84M|    else {                                                             \
  |  | 8900|  1.84M|        return vis(monostate_val);                                     \
  |  | 8901|  1.84M|    }
  ------------------
 8950|  1.84M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 1.84M]
  ------------------
 8951|  1.84M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  1.84M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.84M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.84M|    }                                                                  \
  |  | 8899|  1.84M|    else {                                                             \
  |  | 8900|  1.84M|        return vis(monostate_val);                                     \
  |  | 8901|  1.84M|    }
  ------------------
 8952|  1.84M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 1.84M]
  ------------------
 8953|  1.84M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  1.84M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.84M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.84M|    }                                                                  \
  |  | 8899|  1.84M|    else {                                                             \
  |  | 8900|  1.84M|        return vis(monostate_val);                                     \
  |  | 8901|  1.84M|    }
  ------------------
 8954|       |
 8955|  1.84M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 1.84M]
  ------------------
 8956|  1.84M|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  1.84M|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  1.84M|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 1.84M]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 1.84M]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  1.84M|            SCN_CLANG_POP
 8973|  1.84M|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|  1.27M|{
 7487|  1.27M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|  1.27M|    handler.check_args_exhausted();
 7489|  1.27M|    return handler.get_error();
 7490|  1.27M|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|  1.27M|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|  1.27M|    auto begin = format.data();
 7455|  1.27M|    auto it = begin;
 7456|  1.27M|    const auto end = format.data() + format.size();
 7457|       |
 7458|  2.49M|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 1.27M, False: 1.22M]
  ------------------
 7459|  1.27M|        const auto ch = *it++;
 7460|  1.27M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 1.27M, False: 0]
  ------------------
 7461|  1.27M|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|  1.27M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|  1.27M|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 47.7k, False: 1.22M]
  ------------------
 7465|  47.7k|                return;
 7466|  47.7k|            }
 7467|  1.27M|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|  1.27M|    }
 7478|       |
 7479|  1.22M|    handler.on_literal_text(begin, end);
 7480|  1.22M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8664|  1.22M|    {
 8665|  1.22M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  1.22M|    static_cast<    \
  |  |  935|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8666|  1.22M|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7383|  1.27M|{
 7384|  1.27M|    struct id_adapter {
 7385|  1.27M|        constexpr void operator()()
 7386|  1.27M|        {
 7387|  1.27M|            arg_id = handler.on_arg_id();
 7388|  1.27M|        }
 7389|  1.27M|        constexpr void operator()(std::size_t id)
 7390|  1.27M|        {
 7391|  1.27M|            arg_id = handler.on_arg_id(id);
 7392|  1.27M|        }
 7393|       |
 7394|  1.27M|        constexpr void on_error(const char* msg)
 7395|  1.27M|        {
 7396|  1.27M|            SCN_UNLIKELY_ATTR
 7397|  1.27M|            handler.on_error(msg);
 7398|  1.27M|        }
 7399|       |
 7400|  1.27M|        Handler& handler;
 7401|  1.27M|        std::size_t arg_id;
 7402|  1.27M|    };
 7403|       |
 7404|  1.27M|    ++begin;
 7405|  1.27M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.27M]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|  1.27M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 1.27M]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|  1.27M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 1.27M]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|  1.27M|    else {
 7417|  1.27M|        auto adapter = id_adapter{handler, 0};
 7418|  1.27M|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|  1.27M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.27M]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|  1.27M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 1.27M]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|  1.27M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 1.27M, False: 0]
  ------------------
 7429|  1.27M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.27M]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|  1.27M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|  1.27M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.0k, False: 1.25M]
  |  |  |  Branch (865:45): [True: 0, False: 1.27M]
  |  |  |  Branch (865:45): [True: 19.0k, False: 1.25M]
  |  |  ------------------
  ------------------
 7435|  19.0k|                handler.on_error("Unknown format specifier");
 7436|  19.0k|                return begin;
 7437|  19.0k|            }
 7438|  1.27M|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|  1.27M|    }
 7445|  1.25M|    return begin + 1;
 7446|  1.27M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|  1.27M|{
 6885|  1.27M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|  1.27M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 1.27M, False: 0]
  |  Branch (6886:26): [True: 0, False: 1.27M]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|  1.27M|    handler();
 6891|  1.27M|    return begin;
 6892|  1.27M|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|  1.27M|        {
 7387|  1.27M|            arg_id = handler.on_arg_id();
 7388|  1.27M|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7563|  1.27M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|  1.27M|    {
 7565|  1.27M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  1.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|  1.27M|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7299|  1.27M|{
 7300|  1.27M|    auto do_presentation = [&]() -> const CharT* {
 7301|  1.27M|        if (*begin == CharT{'['}) {
 7302|  1.27M|            auto set = parse_presentation_set(begin, end, handler);
 7303|  1.27M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|  1.27M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|  1.27M|                return begin;
 7308|  1.27M|            }
 7309|  1.27M|            handler.on_character_set_string(set);
 7310|  1.27M|            return begin;
 7311|  1.27M|        }
 7312|  1.27M|        if (*begin == CharT{'/'}) {
 7313|  1.27M|            return parse_presentation_regex(begin, end, handler);
 7314|  1.27M|        }
 7315|  1.27M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  1.27M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|  1.27M|            handler.on_error("Invalid type specifier in format string");
 7318|  1.27M|            return begin;
 7319|  1.27M|        }
 7320|  1.27M|        handler.on_type(type);
 7321|  1.27M|        return begin;
 7322|  1.27M|    };
 7323|       |
 7324|  1.27M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 1.27M, False: 0]
  |  Branch (7324:28): [True: 1.24M, False: 28.8k]
  ------------------
 7325|  1.27M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 1.24M, False: 0]
  |  Branch (7325:36): [True: 1.23M, False: 9.54k]
  ------------------
 7326|  1.23M|        return do_presentation();
 7327|  1.23M|    }
 7328|       |
 7329|  38.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38.4k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|  38.4k|    begin = parse_align(begin, end, handler);
 7335|  38.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38.4k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|  38.4k|    begin = parse_width(begin, end, handler);
 7341|  38.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38.4k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|  38.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 38.4k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|  38.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 9.54k, False: 28.8k]
  ------------------
 7360|  9.54k|        handler.on_localized();
 7361|  9.54k|        ++begin;
 7362|  9.54k|    }
 7363|  38.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38.4k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|  38.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 38.4k, False: 0]
  |  Branch (7368:25): [True: 28.8k, False: 9.54k]
  ------------------
 7369|  28.8k|        do_presentation();
 7370|  28.8k|    }
 7371|  38.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38.4k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|  38.4k|    return begin;
 7377|  38.4k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7300|  1.26M|    auto do_presentation = [&]() -> const CharT* {
 7301|  1.26M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 9.80k, False: 1.25M]
  ------------------
 7302|  9.80k|            auto set = parse_presentation_set(begin, end, handler);
 7303|  9.80k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  9.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.80k]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|  9.80k|            handler.on_character_set_string(set);
 7310|  9.80k|            return begin;
 7311|  9.80k|        }
 7312|  1.25M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 1.25M]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|  1.25M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  1.25M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.54k, False: 1.24M]
  |  |  ------------------
  ------------------
 7317|  9.54k|            handler.on_error("Invalid type specifier in format string");
 7318|  9.54k|            return begin;
 7319|  9.54k|        }
 7320|  1.24M|        handler.on_type(type);
 7321|  1.24M|        return begin;
 7322|  1.25M|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7138|  9.80k|{
 7139|  9.80k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7140|  9.80k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  9.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7141|       |
 7142|  9.80k|    auto start = begin;
 7143|  9.80k|    ++begin;
 7144|       |
 7145|  9.80k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  9.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.80k]
  |  |  ------------------
  ------------------
 7146|       |        // clang-format off
 7147|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7148|       |        // clang-format on
 7149|      0|        return {};
 7150|      0|    }
 7151|  9.80k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7151:9): [True: 0, False: 9.80k]
  ------------------
 7152|      0|        handler.on_charset_inverted();
 7153|      0|        ++begin;
 7154|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7155|       |            // clang-format off
 7156|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7157|       |            // clang-format on
 7158|      0|            return {};
 7159|      0|        }
 7160|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7160:13): [True: 0, False: 0]
  ------------------
 7161|      0|            handler.on_charset_single(char32_t{']'});
 7162|      0|            ++begin;
 7163|      0|        }
 7164|      0|    }
 7165|  9.80k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7165:14): [True: 0, False: 9.80k]
  ------------------
 7166|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7167|      0|    }
 7168|       |
 7169|  29.4k|    while (begin != end) {
  ------------------
  |  Branch (7169:12): [True: 29.4k, False: 0]
  ------------------
 7170|  29.4k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 29.4k]
  |  |  ------------------
  ------------------
 7171|      0|            break;
 7172|      0|        }
 7173|       |
 7174|  29.4k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7174:13): [True: 9.80k, False: 19.6k]
  ------------------
 7175|  9.80k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7176|  9.80k|        }
 7177|       |
 7178|  19.6k|        parse_presentation_set_literal(begin, end, handler);
 7179|  19.6k|    }
 7180|       |
 7181|      0|    SCN_UNLIKELY_ATTR
 7182|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7183|      0|    return {};
 7184|  9.80k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7102|  19.6k|{
 7103|  19.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|       |
 7105|  19.6k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7106|  19.6k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 7107|      0|        return;
 7108|      0|    }
 7109|       |
 7110|  19.6k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7110:9): [True: 19.6k, False: 0]
  |  Branch (7110:25): [True: 19.6k, False: 0]
  |  Branch (7110:49): [True: 19.6k, False: 0]
  ------------------
 7111|  19.6k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7111:9): [True: 19.6k, False: 0]
  ------------------
 7112|  19.6k|        ++begin;
 7113|       |
 7114|  19.6k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7115|  19.6k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 7116|      0|            return;
 7117|      0|        }
 7118|       |
 7119|  19.6k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 7120|       |            // clang-format off
 7121|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7122|       |            // clang-format on
 7123|      0|            return;
 7124|      0|        }
 7125|       |
 7126|  19.6k|        handler.on_charset_range(cp_first, cp_second + 1);
 7127|  19.6k|        return;
 7128|  19.6k|    }
 7129|       |
 7130|      0|    handler.on_charset_single(cp_first);
 7131|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7078|  39.2k|{
 7079|  39.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7080|       |
 7081|  39.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7082|  39.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.2k]
  |  |  |  Branch (865:45): [True: 0, False: 39.2k]
  |  |  |  Branch (865:45): [True: 0, False: 39.2k]
  |  |  ------------------
  ------------------
 7083|      0|        handler.on_error("Invalid encoding in format string");
 7084|      0|        return invalid_code_point;
 7085|      0|    }
 7086|       |
 7087|  39.2k|    const auto cp =
 7088|  39.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7089|  39.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 39.2k]
  |  |  ------------------
  ------------------
 7090|      0|        handler.on_error("Invalid encoding in format string");
 7091|      0|        return invalid_code_point;
 7092|      0|    }
 7093|       |
 7094|  39.2k|    begin += len;
 7095|  39.2k|    return cp;
 7096|  39.2k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 6973|  38.4k|{
 6974|  38.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  38.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|  38.4k|    auto check_align = [](wchar_t ch) {
 6977|  38.4k|        switch (ch) {
 6978|  38.4k|            case L'<':
 6979|  38.4k|                return align_type::left;
 6980|  38.4k|            case L'>':
 6981|  38.4k|                return align_type::right;
 6982|  38.4k|            case L'^':
 6983|  38.4k|                return align_type::center;
 6984|  38.4k|            default:
 6985|  38.4k|                return align_type::none;
 6986|  38.4k|        }
 6987|  38.4k|    };
 6988|       |
 6989|  38.4k|    auto potential_fill_len = code_point_length(begin, end);
 6990|  38.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38.4k]
  |  |  |  Branch (865:45): [True: 0, False: 38.4k]
  |  |  |  Branch (865:45): [True: 0, False: 38.4k]
  |  |  ------------------
  ------------------
 6991|  38.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|  38.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|  38.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|  38.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|  38.4k|    const auto begin_before_fill = begin;
 7001|  38.4k|    begin += potential_fill_len;
 7002|       |
 7003|  38.4k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 38.4k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|  38.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|  38.4k|    const auto begin_after_fill = begin;
 7009|  38.4k|    ++begin;
 7010|       |
 7011|  38.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 38.4k, False: 0]
  ------------------
 7012|  38.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38.4k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|  38.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 9.80k, False: 28.6k]
  ------------------
 7017|  9.80k|            return begin_before_fill;
 7018|  9.80k|        }
 7019|  38.4k|    }
 7020|       |
 7021|  28.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 28.6k, False: 0]
  ------------------
 7022|  28.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 28.6k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|  28.6k|        return begin_before_fill;
 7027|  28.6k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|  28.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6976|  76.8k|    auto check_align = [](wchar_t ch) {
 6977|  76.8k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 76.8k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 76.8k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 76.8k]
  ------------------
 6983|      0|                return align_type::center;
 6984|  76.8k|            default:
  ------------------
  |  Branch (6984:13): [True: 76.8k, False: 0]
  ------------------
 6985|  76.8k|                return align_type::none;
 6986|  76.8k|        }
 6987|  76.8k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7038|  38.4k|{
 7039|  38.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  38.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|  38.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 38.4k, False: 0]
  |  Branch (7041:33): [True: 19.0k, False: 19.3k]
  ------------------
 7042|  19.0k|        int width = parse_simple_int(begin, end);
 7043|  19.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 19.0k, False: 0]
  |  |  ------------------
  ------------------
 7044|  19.0k|            handler.on_width(width);
 7045|  19.0k|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|  19.0k|    }
 7051|  38.4k|    return begin;
 7052|  38.4k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7569|  9.54k|    {
 7570|  9.54k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|  9.54k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 9.54k, False: 0]
  ------------------
 7572|  9.54k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 9.54k, False: 0]
  ------------------
 7573|  9.54k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 9.54k, False: 0]
  ------------------
 7574|  9.54k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 9.54k, False: 0]
  ------------------
 7575|  9.54k|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|  9.54k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|  9.54k|        }
 7580|       |
 7581|      0|        Handler::on_localized();
 7582|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 8993|  1.25M|{
 8994|  1.25M|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  1.25M|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  1.25M|{
 8895|  1.25M|#define SCN_VISIT(Type)                                                \
 8896|  1.25M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  1.25M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  1.25M|    }                                                                  \
 8899|  1.25M|    else {                                                             \
 8900|  1.25M|        return vis(monostate_val);                                     \
 8901|  1.25M|    }
 8902|       |
 8903|  1.25M|    monostate monostate_val{};
 8904|       |
 8905|  1.25M|    switch (get_arg_type(arg)) {
 8906|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 0, False: 1.25M]
  ------------------
 8907|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8908|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 1.25M]
  ------------------
 8909|      0|            SCN_VISIT(short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8910|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 0, False: 1.25M]
  ------------------
 8911|      0|            SCN_VISIT(int);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8912|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 1.25M]
  ------------------
 8913|      0|            SCN_VISIT(long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8914|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 0, False: 1.25M]
  ------------------
 8915|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8916|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 0, False: 1.25M]
  ------------------
 8917|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8918|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 1.25M]
  ------------------
 8919|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8920|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 0, False: 1.25M]
  ------------------
 8921|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8922|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 1.25M]
  ------------------
 8923|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8924|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 0, False: 1.25M]
  ------------------
 8925|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8926|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 1.25M]
  ------------------
 8927|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8928|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 1.25M]
  ------------------
 8929|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8930|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 1.25M]
  ------------------
 8931|      0|            SCN_VISIT(char);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8932|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 1.25M]
  ------------------
 8933|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8934|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 1.25M]
  ------------------
 8935|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8936|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 1.25M]
  ------------------
 8937|      0|            SCN_VISIT(float);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8938|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 1.25M]
  ------------------
 8939|      0|            SCN_VISIT(double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8940|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 1.25M]
  ------------------
 8941|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8942|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 1.25M]
  ------------------
 8943|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8944|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 1.25M]
  ------------------
 8945|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8946|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 1.25M]
  ------------------
 8947|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|      0|    }                                                                  \
  |  | 8899|      0|    else {                                                             \
  |  | 8900|      0|        return vis(monostate_val);                                     \
  |  | 8901|      0|    }
  ------------------
 8948|  1.25M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 1.25M, False: 0]
  ------------------
 8949|  1.25M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  1.25M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.25M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.25M|    }                                                                  \
  |  | 8899|  1.25M|    else {                                                             \
  |  | 8900|  1.25M|        return vis(monostate_val);                                     \
  |  | 8901|  1.25M|    }
  ------------------
 8950|  1.25M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 1.25M]
  ------------------
 8951|  1.25M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  1.25M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.25M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.25M|    }                                                                  \
  |  | 8899|  1.25M|    else {                                                             \
  |  | 8900|  1.25M|        return vis(monostate_val);                                     \
  |  | 8901|  1.25M|    }
  ------------------
 8952|  1.25M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 1.25M]
  ------------------
 8953|  1.25M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  1.25M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.25M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.25M|    }                                                                  \
  |  | 8899|  1.25M|    else {                                                             \
  |  | 8900|  1.25M|        return vis(monostate_val);                                     \
  |  | 8901|  1.25M|    }
  ------------------
 8954|       |
 8955|  1.25M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 1.25M]
  ------------------
 8956|  1.25M|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  1.25M|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  1.25M|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 1.25M]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 1.25M]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  1.25M|            SCN_CLANG_POP
 8973|  1.25M|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4350|  62.0k|    {
 4351|  62.0k|        sync(0);
 4352|  62.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5824|   178k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5824|  1.84M|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  1.25M|{
   89|  1.25M|    auto result = make_scan_result<Source, Args...>();
   90|  1.25M|    fill_scan_result(result,
   91|  1.25M|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.25M|                           make_scan_args<wscan_context>(result->values())));
   93|  1.25M|    return result;
   94|  1.25M|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  2.50M|{
   44|  2.50M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  2.50M|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  1.25M|{
  131|  1.25M|    auto result = make_scan_result<Source, Args...>();
  132|  1.25M|    fill_scan_result(result,
  133|  1.25M|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.25M|                           make_scan_args<wscan_context>(result->values())));
  135|  1.25M|    return result;
  136|  1.25M|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  2.50M|{
   60|  2.50M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  2.50M|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   616k|{
  171|   616k|    auto result = make_scan_result<Source, T>();
  172|   616k|    fill_scan_result(
  173|   616k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   616k|                            detail::make_arg<wscan_context>(result->value())));
  175|   616k|    return result;
  176|   616k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  1.23M|{
   72|  1.23M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  1.23M|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|  1.25M|{
   89|  1.25M|    auto result = make_scan_result<Source, Args...>();
   90|  1.25M|    fill_scan_result(result,
   91|  1.25M|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.25M|                           make_scan_args<wscan_context>(result->values())));
   93|  1.25M|    return result;
   94|  1.25M|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|  1.25M|{
  131|  1.25M|    auto result = make_scan_result<Source, Args...>();
  132|  1.25M|    fill_scan_result(result,
  133|  1.25M|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.25M|                           make_scan_args<wscan_context>(result->values())));
  135|  1.25M|    return result;
  136|  1.25M|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   616k|{
  171|   616k|    auto result = make_scan_result<Source, T>();
  172|   616k|    fill_scan_result(
  173|   616k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   616k|                            detail::make_arg<wscan_context>(result->value())));
  175|   616k|    return result;
  176|   616k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|  1.25M|{
   89|  1.25M|    auto result = make_scan_result<Source, Args...>();
   90|  1.25M|    fill_scan_result(result,
   91|  1.25M|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  1.25M|                           make_scan_args<wscan_context>(result->values())));
   93|  1.25M|    return result;
   94|  1.25M|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  1.25M|{
   44|  1.25M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  1.25M|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|  1.25M|{
  131|  1.25M|    auto result = make_scan_result<Source, Args...>();
  132|  1.25M|    fill_scan_result(result,
  133|  1.25M|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  1.25M|                           make_scan_args<wscan_context>(result->values())));
  135|  1.25M|    return result;
  136|  1.25M|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  1.25M|{
   60|  1.25M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  1.25M|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   616k|{
  171|   616k|    auto result = make_scan_result<Source, T>();
  172|   616k|    fill_scan_result(
  173|   616k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   616k|                            detail::make_arg<wscan_context>(result->value())));
  175|   616k|    return result;
  176|   616k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   616k|{
   72|   616k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   616k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  663|  4.14M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  664|  4.14M|{
  665|  4.14M|    static_assert(std::is_same_v<Locale, std::locale>);
  666|  4.14M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2235|   243k|{
 2236|   243k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2237|   243k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2243|   145k|{
 2244|   145k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2245|   145k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 131k, False: 14.3k]
  |  |  ------------------
  ------------------
 2246|   131k|        source.sync(*n);
 2247|   131k|    }
 2248|  14.3k|    else {
 2249|  14.3k|        source.sync_all();
 2250|  14.3k|    }
 2251|   145k|    return n;
 2252|   145k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2259|  2.50M|{
 2260|  2.50M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2261|  2.50M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2267|  1.25M|{
 2268|  1.25M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2269|  1.25M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  1.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.22M, False: 28.6k]
  |  |  ------------------
  ------------------
 2270|  1.22M|        source.sync(*n);
 2271|  1.22M|    }
 2272|  28.6k|    else {
 2273|  28.6k|        source.sync_all();
 2274|  28.6k|    }
 2275|  1.25M|    return n;
 2276|  1.25M|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  205|   880k|{
  206|   880k|    return find_classic_impl(
  207|   880k|        source, [](char ch) { return is_ascii_space(ch); },
  208|   880k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  209|   880k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  213|   886k|{
  214|   886k|    return find_classic_impl(
  215|   886k|        source, [](char ch) { return !is_ascii_space(ch); },
  216|   886k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  217|   886k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2192|   243k|{
 2193|   243k|    return vscan_internal(source, format, args);
 2194|   243k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2198|   145k|{
 2199|   145k|    auto n = vscan_internal(source, format, args);
 2200|   145k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 131k, False: 14.3k]
  |  |  ------------------
  ------------------
 2201|   131k|        source.sync(*n);
 2202|   131k|    }
 2203|  14.3k|    else {
 2204|  14.3k|        source.sync_all();
 2205|  14.3k|    }
 2206|   145k|    return n;
 2207|   145k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2212|  2.50M|{
 2213|  2.50M|    return vscan_internal(source, format, args);
 2214|  2.50M|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2218|  1.25M|{
 2219|  1.25M|    auto n = vscan_internal(source, format, args);
 2220|  1.25M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  1.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.22M, False: 28.6k]
  |  |  ------------------
  ------------------
 2221|  1.22M|        source.sync(*n);
 2222|  1.22M|    }
 2223|  28.6k|    else {
 2224|  28.6k|        source.sync_all();
 2225|  28.6k|    }
 2226|  1.25M|    return n;
 2227|  1.25M|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2302|   110k|{
 2303|   110k|    return vscan_value_internal(source, arg);
 2304|   110k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2307|  67.1k|{
 2308|  67.1k|    auto n = vscan_value_internal(source, arg);
 2309|  67.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  67.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 64.7k, False: 2.38k]
  |  |  ------------------
  ------------------
 2310|  64.7k|        source.sync(*n);
 2311|  64.7k|    }
 2312|  2.38k|    else {
 2313|  2.38k|        source.sync_all();
 2314|  2.38k|    }
 2315|  67.1k|    return n;
 2316|  67.1k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2321|  1.23M|{
 2322|  1.23M|    return vscan_value_internal(source, arg);
 2323|  1.23M|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2327|   616k|{
 2328|   616k|    auto n = vscan_value_internal(source, arg);
 2329|   616k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   616k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 611k, False: 4.77k]
  |  |  ------------------
  ------------------
 2330|   611k|        source.sync(*n);
 2331|   611k|    }
 2332|  4.77k|    else {
 2333|  4.77k|        source.sync_all();
 2334|  4.77k|    }
 2335|   616k|    return n;
 2336|   616k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   880k|{
  130|   880k|    auto it = source.begin();
  131|       |
  132|  1.64M|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 1.30M, False: 344k]
  ------------------
  133|  1.30M|        auto sv =
  134|  1.30M|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  1.30M|                .substr(0, 8);
  136|       |
  137|  1.30M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 957k, False: 342k]
  ------------------
  138|   957k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|   957k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|   957k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 400k, False: 557k]
  ------------------
  141|   400k|                break;
  142|   400k|            }
  143|   557k|            continue;
  144|   957k|        }
  145|       |
  146|  1.03M|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:28): [True: 829k, False: 207k]
  ------------------
  147|   829k|            auto tmp =
  148|   829k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   829k|            auto res = get_next_code_point(tmp);
  150|   829k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 135k, False: 694k]
  ------------------
  151|   135k|                return it;
  152|   135k|            }
  153|   694k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  154|   694k|            it = detail::make_string_view_iterator(source, res.iterator);
  155|   694k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   694k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   694k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   694k|        }
  157|   342k|    }
  158|       |
  159|   744k|    return detail::make_string_view_iterator(source, it);
  160|   880k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|  2.13M|{
  117|  2.13M|    static_assert(sizeof(*source.data()) == 1);
  118|  2.13M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|  2.13M|    uint64_t word{};
  120|  2.13M|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|  2.13M|    return has_byte_greater(word, 127) != 0;
  123|  2.13M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  207|  4.03M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  208|   829k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   886k|{
  130|   886k|    auto it = source.begin();
  131|       |
  132|  1.14M|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 833k, False: 313k]
  ------------------
  133|   833k|        auto sv =
  134|   833k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|   833k|                .substr(0, 8);
  136|       |
  137|   833k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 665k, False: 167k]
  ------------------
  138|   665k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|   665k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|   665k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 411k, False: 254k]
  ------------------
  141|   411k|                break;
  142|   411k|            }
  143|   254k|            continue;
  144|   665k|        }
  145|       |
  146|   324k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:28): [True: 319k, False: 4.81k]
  ------------------
  147|   319k|            auto tmp =
  148|   319k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   319k|            auto res = get_next_code_point(tmp);
  150|   319k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 162k, False: 156k]
  ------------------
  151|   162k|                return it;
  152|   162k|            }
  153|   156k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  154|   156k|            it = detail::make_string_view_iterator(source, res.iterator);
  155|   156k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   156k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   156k|        }
  157|   167k|    }
  158|       |
  159|   724k|    return detail::make_string_view_iterator(source, it);
  160|   886k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  215|  1.76M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  216|   319k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2124|   290k|{
 2125|   290k|    const auto argcount = args.size();
 2126|   290k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2126:9): [True: 134k, False: 156k]
  |  Branch (2126:60): [True: 134k, False: 0]
  ------------------
 2127|   134k|        auto arg = args.get(0);
 2128|   134k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   134k|    static_cast<    \
  |  |  935|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2129|   134k|    }
 2130|       |
 2131|   156k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2131:9): [True: 0, False: 156k]
  ------------------
 2132|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2133|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2134|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2135|      0|        return vscan_parse_format_string(format, handler);
 2136|      0|    }
 2137|       |
 2138|   156k|    SCN_UNLIKELY_ATTR
 2139|   156k|    {
 2140|   156k|        auto handler = format_handler<false, CharT>{
 2141|   156k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2142|   156k|        return vscan_parse_format_string(format, handler);
 2143|   156k|    }
 2144|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1672|   776k|{
 1673|   776k|    if (format.size() != 2) {
  ------------------
  |  Branch (1673:9): [True: 420k, False: 356k]
  ------------------
 1674|   420k|        return false;
 1675|   420k|    }
 1676|   356k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1676:12): [True: 356k, False: 0]
  |  Branch (1676:39): [True: 356k, False: 0]
  ------------------
 1677|   776k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1705|   201k|{
 1706|   201k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
 1707|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1708|      0|                                             "Argument #0 not found");
 1709|      0|    }
 1710|       |
 1711|   201k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   201k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
 1712|      0|        auto reader = impl::default_arg_reader<
 1713|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1714|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1715|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1716|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1717|      0|    }
 1718|       |
 1719|   201k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1720|   201k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   201k|    static_cast<    \
  |  |  935|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|   201k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 7.15k, False: 194k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  7.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  7.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  7.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  7.15k|    }                                                  \
  |  |  |  | 3939|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1722|   194k|    return it.position();
 1723|   201k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1948|   264k|        : format_handler_base{argcount},
 1949|   264k|          parse_ctx{format},
 1950|   264k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   264k|    static_cast<    \
  |  |  935|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   264k|    static_cast<    \
  |  |  935|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|   264k|    {
 1952|   264k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1766|  4.23M|    format_handler_base(size_t argcount) : args_count(argcount)
 1767|  4.23M|    {
 1768|  4.23M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 1769|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1770|      0|        }
 1771|  4.23M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1899|   264k|        : contiguous_ctx(source, args, loc)
 1900|   264k|    {
 1901|   264k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|   264k|{
 2090|   264k|    const auto beg = handler.get_ctx().begin();
 2091|   264k|    detail::parse_format_string<false>(format, handler);
 2092|   264k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 47.7k, False: 216k]
  |  |  ------------------
  ------------------
 2093|  47.7k|        return unexpected(err.error());
 2094|  47.7k|    }
 2095|   216k|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|   264k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2073|  1.71M|    {
 2074|  1.71M|        return ctx.get();
 2075|  1.71M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1904|  1.71M|    {
 1905|  1.71M|        return contiguous_ctx;
 1906|  1.71M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1955|   480k|    {
 1956|   480k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 480k]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|   480k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1815|   128k|    {
 1816|   128k|        error = unexpected(err);
 1817|   128k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1727|   264k|{
 1728|   264k|    auto arg = ctx.arg(id);
 1729|   264k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 264k]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|   264k|    return arg;
 1733|   264k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1841|  4.23M|    {
 1842|  4.23M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 1843|      0|            on_error({scan_error::invalid_format_string,
 1844|      0|                      "Argument ID out-of-range"});
 1845|      0|            return;
 1846|      0|        }
 1847|       |
 1848|  4.23M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 1849|      0|            on_error({scan_error::invalid_format_string,
 1850|      0|                      "Argument with this ID has already been scanned"});
 1851|      0|        }
 1852|       |
 1853|  4.23M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  4.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.23M, False: 0]
  |  |  ------------------
  ------------------
 1854|  4.23M|            visited_args_lower64 |= (1ull << id);
 1855|  4.23M|            return;
 1856|  4.23M|        }
 1857|       |
 1858|      0|        id -= 64;
 1859|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1860|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1825|  4.23M|    {
 1826|  4.23M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 1827|      0|            on_error({scan_error::invalid_format_string,
 1828|      0|                      "Argument ID out-of-range"});
 1829|      0|            return false;
 1830|      0|        }
 1831|       |
 1832|  4.23M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  4.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.23M, False: 0]
  |  |  ------------------
  ------------------
 1833|  4.23M|            return (visited_args_lower64 >> id) & 1ull;
 1834|  4.23M|        }
 1835|       |
 1836|      0|        id -= 64;
 1837|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1838|  4.23M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1995|   264k|    {
 1996|   264k|        return parse_ctx.next_arg_id();
 1997|   264k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2035|   264k|    {
 2036|   264k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|   264k|        set_arg_as_visited(arg_id);
 2038|       |
 2039|   264k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 264k]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|   264k|        auto specs = detail::format_specs{};
 2049|   264k|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|   264k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|   264k|            detail::get_arg_type(arg)};
 2052|       |
 2053|   264k|        begin = detail::parse_format_specs(begin, end, handler);
 2054|   264k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 264k]
  |  Branch (2054:29): [True: 0, False: 264k]
  ------------------
 2055|      0|            SCN_UNLIKELY_ATTR
 2056|      0|            on_error({scan_error::invalid_format_string,
 2057|      0|                      "Missing '}' in format string"});
 2058|      0|            return parse_ctx.begin();
 2059|      0|        }
 2060|   264k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.0k, False: 245k]
  |  |  ------------------
  ------------------
 2061|  19.0k|            return parse_ctx.begin();
 2062|  19.0k|        }
 2063|   245k|        parse_ctx.advance_to(begin);
 2064|       |
 2065|   245k|        on_visit_scan_arg(
 2066|   245k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|   245k|                                           get_ctx().locale()},
 2068|   245k|            arg);
 2069|   245k|        return parse_ctx.begin();
 2070|   264k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1745|   264k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|   264k|    {
 1747|   264k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2006|   245k|    {
 2007|   245k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 245k]
  |  Branch (2007:13): [True: 0, False: 245k]
  |  Branch (2007:29): [True: 0, False: 245k]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|   245k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|   245k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.6k, False: 216k]
  |  |  ------------------
  ------------------
 2014|  28.6k|            on_error(r.error());
 2015|  28.6k|        }
 2016|   216k|        else {
 2017|   216k|            get_ctx().advance_to(*r);
 2018|   216k|        }
 2019|   245k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1809|  85.8k|    {
 1810|  85.8k|        SCN_UNLIKELY_ATTR
 1811|  85.8k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1812|  85.8k|                                              msg);
 1813|  85.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1774|  4.23M|    {
 1775|  4.23M|        {
 1776|  4.23M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1776:45): [True: 0, False: 4.23M]
  ------------------
 1777|  4.23M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1777:35): [True: 0, False: 4.23M]
  ------------------
 1778|  4.23M|                                      ? std::numeric_limits<uint64_t>::max()
 1779|  4.23M|                                      : (1ull << args_count_lower64) - 1;
 1780|       |
 1781|  4.23M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1781:17): [True: 0, False: 4.23M]
  ------------------
 1782|      0|                return on_error({scan_error::invalid_format_string,
 1783|      0|                                 "Argument list not exhausted"});
 1784|      0|            }
 1785|  4.23M|        }
 1786|       |
 1787|  4.23M|        if (args_count < 64) {
  ------------------
  |  Branch (1787:13): [True: 4.23M, False: 0]
  ------------------
 1788|  4.23M|            return;
 1789|  4.23M|        }
 1790|       |
 1791|      0|        auto last_args_count = args_count - 64;
 1792|      0|        for (auto it = visited_args_upper.begin();
 1793|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1793:14): [True: 0, False: 0]
  ------------------
 1794|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1794:17): [True: 0, False: 0]
  ------------------
 1795|      0|                return on_error({scan_error::invalid_format_string,
 1796|      0|                                 "Argument list not exhausted"});
 1797|      0|            }
 1798|      0|            last_args_count -= 8;
 1799|      0|        }
 1800|       |
 1801|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1802|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1802:13): [True: 0, False: 0]
  ------------------
 1803|      0|            return on_error({scan_error::invalid_format_string,
 1804|      0|                             "Argument list not exhausted"});
 1805|      0|        }
 1806|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1820|  16.8M|    {
 1821|  16.8M|        return error;
 1822|  16.8M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1948|   156k|        : format_handler_base{argcount},
 1949|   156k|          parse_ctx{format},
 1950|   156k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|   156k|    {
 1952|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1875|   156k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   156k|    static_cast<    \
  |  |  935|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1876|   156k|    {
 1877|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|   156k|{
 2090|   156k|    const auto beg = handler.get_ctx().begin();
 2091|   156k|    detail::parse_format_string<false>(format, handler);
 2092|   156k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.8k, False: 132k]
  |  |  ------------------
  ------------------
 2093|  23.8k|        return unexpected(err.error());
 2094|  23.8k|    }
 2095|   132k|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2073|  1.02M|    {
 2074|  1.02M|        return ctx.get();
 2075|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1880|  1.02M|    {
 1881|  1.02M|        return ctx;
 1882|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1955|   289k|    {
 1956|   289k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 289k]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|   289k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1727|   156k|{
 1728|   156k|    auto arg = ctx.arg(id);
 1729|   156k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|   156k|    return arg;
 1733|   156k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1995|   156k|    {
 1996|   156k|        return parse_ctx.next_arg_id();
 1997|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2035|   156k|    {
 2036|   156k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|   156k|        set_arg_as_visited(arg_id);
 2038|       |
 2039|   156k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 156k]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|   156k|        auto specs = detail::format_specs{};
 2049|   156k|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|   156k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|   156k|            detail::get_arg_type(arg)};
 2052|       |
 2053|   156k|        begin = detail::parse_format_specs(begin, end, handler);
 2054|   156k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 156k]
  |  Branch (2054:29): [True: 0, False: 156k]
  ------------------
 2055|      0|            SCN_UNLIKELY_ATTR
 2056|      0|            on_error({scan_error::invalid_format_string,
 2057|      0|                      "Missing '}' in format string"});
 2058|      0|            return parse_ctx.begin();
 2059|      0|        }
 2060|   156k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.54k, False: 146k]
  |  |  ------------------
  ------------------
 2061|  9.54k|            return parse_ctx.begin();
 2062|  9.54k|        }
 2063|   146k|        parse_ctx.advance_to(begin);
 2064|       |
 2065|   146k|        on_visit_scan_arg(
 2066|   146k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|   146k|                                           get_ctx().locale()},
 2068|   146k|            arg);
 2069|   146k|        return parse_ctx.begin();
 2070|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1745|   156k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|   156k|    {
 1747|   156k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2006|   146k|    {
 2007|   146k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 146k]
  |  Branch (2007:13): [True: 0, False: 146k]
  |  Branch (2007:29): [True: 0, False: 146k]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|   146k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|   146k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.3k, False: 132k]
  |  |  ------------------
  ------------------
 2014|  14.3k|            on_error(r.error());
 2015|  14.3k|        }
 2016|   132k|        else {
 2017|   132k|            get_ctx().advance_to(*r);
 2018|   132k|        }
 2019|   146k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2104|   486k|{
 2105|   486k|    const auto argcount = args.size();
 2106|   486k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2106:9): [True: 221k, False: 264k]
  |  Branch (2106:60): [True: 221k, False: 0]
  ------------------
 2107|   221k|        auto arg = args.get(0);
 2108|   221k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   221k|    static_cast<    \
  |  |  935|   221k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2109|   221k|    }
 2110|       |
 2111|   264k|    auto handler = format_handler<true, CharT>{
 2112|   264k|        ranges::subrange<const CharT*>{source.data(),
 2113|   264k|                                       source.data() + source.size()},
 2114|   264k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   264k|    static_cast<    \
  |  |  935|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   264k|    static_cast<    \
  |  |  935|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2115|   264k|    return vscan_parse_format_string(format, handler);
 2116|   486k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1685|   332k|{
 1686|   332k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
 1687|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1688|      0|                                             "Argument #0 not found");
 1689|      0|    }
 1690|       |
 1691|   332k|    auto reader =
 1692|   332k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1693|   332k|            ranges::subrange<const CharT*>{source.data(),
 1694|   332k|                                           source.data() + source.size()},
 1695|   332k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   332k|    static_cast<    \
  |  |  935|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1696|   332k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14.3k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.3k|    }                                                  \
  |  |  |  | 3939|   332k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|   318k|    return ranges::distance(source.data(), it);
 1698|   332k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2104|  5.00M|{
 2105|  5.00M|    const auto argcount = args.size();
 2106|  5.00M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2106:9): [True: 2.46M, False: 2.54M]
  |  Branch (2106:60): [True: 2.46M, False: 0]
  ------------------
 2107|  2.46M|        auto arg = args.get(0);
 2108|  2.46M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  2.46M|    static_cast<    \
  |  |  935|  2.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2109|  2.46M|    }
 2110|       |
 2111|  2.54M|    auto handler = format_handler<true, CharT>{
 2112|  2.54M|        ranges::subrange<const CharT*>{source.data(),
 2113|  2.54M|                                       source.data() + source.size()},
 2114|  2.54M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  2.54M|    static_cast<    \
  |  |  935|  2.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  2.54M|    static_cast<    \
  |  |  935|  2.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2115|  2.54M|    return vscan_parse_format_string(format, handler);
 2116|  5.00M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1672|  7.51M|{
 1673|  7.51M|    if (format.size() != 2) {
  ------------------
  |  Branch (1673:9): [True: 3.81M, False: 3.69M]
  ------------------
 1674|  3.81M|        return false;
 1675|  3.81M|    }
 1676|  3.69M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1676:12): [True: 3.69M, False: 0]
  |  Branch (1676:39): [True: 3.69M, False: 0]
  ------------------
 1677|  7.51M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1685|  3.69M|{
 1686|  3.69M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  3.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.69M]
  |  |  ------------------
  ------------------
 1687|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1688|      0|                                             "Argument #0 not found");
 1689|      0|    }
 1690|       |
 1691|  3.69M|    auto reader =
 1692|  3.69M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1693|  3.69M|            ranges::subrange<const CharT*>{source.data(),
 1694|  3.69M|                                           source.data() + source.size()},
 1695|  3.69M|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  3.69M|    static_cast<    \
  |  |  935|  3.69M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1696|  3.69M|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  3.69M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.69M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.69M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28.6k, False: 3.67M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  28.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  28.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  28.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  28.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  28.6k|    }                                                  \
  |  |  |  | 3939|  3.69M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|  3.67M|    return ranges::distance(source.data(), it);
 1698|  3.69M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1948|  2.54M|        : format_handler_base{argcount},
 1949|  2.54M|          parse_ctx{format},
 1950|  2.54M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  2.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  2.54M|    static_cast<    \
  |  |  935|  2.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  2.54M|    static_cast<    \
  |  |  935|  2.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|  2.54M|    {
 1952|  2.54M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1899|  2.54M|        : contiguous_ctx(source, args, loc)
 1900|  2.54M|    {
 1901|  2.54M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|  2.54M|{
 2090|  2.54M|    const auto beg = handler.get_ctx().begin();
 2091|  2.54M|    detail::parse_format_string<false>(format, handler);
 2092|  2.54M|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 95.4k, False: 2.44M]
  |  |  ------------------
  ------------------
 2093|  95.4k|        return unexpected(err.error());
 2094|  95.4k|    }
 2095|  2.44M|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|  2.54M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2073|  17.5M|    {
 2074|  17.5M|        return ctx.get();
 2075|  17.5M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1904|  17.5M|    {
 1905|  17.5M|        return contiguous_ctx;
 1906|  17.5M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1955|  4.99M|    {
 1956|  4.99M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 4.99M]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|  4.99M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1727|  2.54M|{
 1728|  2.54M|    auto arg = ctx.arg(id);
 1729|  2.54M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.54M]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|  2.54M|    return arg;
 1733|  2.54M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1995|  2.54M|    {
 1996|  2.54M|        return parse_ctx.next_arg_id();
 1997|  2.54M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2035|  2.54M|    {
 2036|  2.54M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|  2.54M|        set_arg_as_visited(arg_id);
 2038|       |
 2039|  2.54M|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 2.54M]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|  2.54M|        auto specs = detail::format_specs{};
 2049|  2.54M|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|  2.54M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|  2.54M|            detail::get_arg_type(arg)};
 2052|       |
 2053|  2.54M|        begin = detail::parse_format_specs(begin, end, handler);
 2054|  2.54M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 2.54M]
  |  Branch (2054:29): [True: 0, False: 2.54M]
  ------------------
 2055|      0|            SCN_UNLIKELY_ATTR
 2056|      0|            on_error({scan_error::invalid_format_string,
 2057|      0|                      "Missing '}' in format string"});
 2058|      0|            return parse_ctx.begin();
 2059|      0|        }
 2060|  2.54M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 38.1k, False: 2.50M]
  |  |  ------------------
  ------------------
 2061|  38.1k|            return parse_ctx.begin();
 2062|  38.1k|        }
 2063|  2.50M|        parse_ctx.advance_to(begin);
 2064|       |
 2065|  2.50M|        on_visit_scan_arg(
 2066|  2.50M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|  2.50M|                                           get_ctx().locale()},
 2068|  2.50M|            arg);
 2069|  2.50M|        return parse_ctx.begin();
 2070|  2.54M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1745|  2.54M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|  2.54M|    {
 1747|  2.54M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2006|  2.50M|    {
 2007|  2.50M|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 2.50M]
  |  Branch (2007:13): [True: 0, False: 2.50M]
  |  Branch (2007:29): [True: 0, False: 2.50M]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|  2.50M|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|  2.50M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.2k, False: 2.44M]
  |  |  ------------------
  ------------------
 2014|  57.2k|            on_error(r.error());
 2015|  57.2k|        }
 2016|  2.44M|        else {
 2017|  2.44M|            get_ctx().advance_to(*r);
 2018|  2.44M|        }
 2019|  2.50M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2124|  2.50M|{
 2125|  2.50M|    const auto argcount = args.size();
 2126|  2.50M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2126:9): [True: 1.23M, False: 1.27M]
  |  Branch (2126:60): [True: 1.23M, False: 0]
  ------------------
 2127|  1.23M|        auto arg = args.get(0);
 2128|  1.23M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  1.23M|    static_cast<    \
  |  |  935|  1.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2129|  1.23M|    }
 2130|       |
 2131|  1.27M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2131:9): [True: 0, False: 1.27M]
  ------------------
 2132|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2133|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2134|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2135|      0|        return vscan_parse_format_string(format, handler);
 2136|      0|    }
 2137|       |
 2138|  1.27M|    SCN_UNLIKELY_ATTR
 2139|  1.27M|    {
 2140|  1.27M|        auto handler = format_handler<false, CharT>{
 2141|  1.27M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.27M|    static_cast<    \
  |  |  935|  1.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.27M|    static_cast<    \
  |  |  935|  1.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2142|  1.27M|        return vscan_parse_format_string(format, handler);
 2143|  1.27M|    }
 2144|  1.27M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1705|  1.84M|{
 1706|  1.84M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 1707|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1708|      0|                                             "Argument #0 not found");
 1709|      0|    }
 1710|       |
 1711|  1.84M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  1.84M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 1712|      0|        auto reader = impl::default_arg_reader<
 1713|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1714|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1715|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1716|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1717|      0|    }
 1718|       |
 1719|  1.84M|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1720|  1.84M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  1.84M|    static_cast<    \
  |  |  935|  1.84M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|  1.84M|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  1.84M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.84M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.84M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14.3k, False: 1.83M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.3k|    }                                                  \
  |  |  |  | 3939|  1.84M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1722|  1.83M|    return it.position();
 1723|  1.84M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1948|  1.27M|        : format_handler_base{argcount},
 1949|  1.27M|          parse_ctx{format},
 1950|  1.27M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.27M|    static_cast<    \
  |  |  935|  1.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.27M|    static_cast<    \
  |  |  935|  1.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|  1.27M|    {
 1952|  1.27M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1875|  1.27M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  1.27M|    static_cast<    \
  |  |  935|  1.27M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1876|  1.27M|    {
 1877|  1.27M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|  1.27M|{
 2090|  1.27M|    const auto beg = handler.get_ctx().begin();
 2091|  1.27M|    detail::parse_format_string<false>(format, handler);
 2092|  1.27M|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 47.7k, False: 1.22M]
  |  |  ------------------
  ------------------
 2093|  47.7k|        return unexpected(err.error());
 2094|  47.7k|    }
 2095|  1.22M|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|  1.27M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2073|  8.76M|    {
 2074|  8.76M|        return ctx.get();
 2075|  8.76M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1880|  8.76M|    {
 1881|  8.76M|        return ctx;
 1882|  8.76M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1955|  2.49M|    {
 1956|  2.49M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 2.49M]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|  2.49M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1727|  1.27M|{
 1728|  1.27M|    auto arg = ctx.arg(id);
 1729|  1.27M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.27M]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|  1.27M|    return arg;
 1733|  1.27M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1995|  1.27M|    {
 1996|  1.27M|        return parse_ctx.next_arg_id();
 1997|  1.27M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2035|  1.27M|    {
 2036|  1.27M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|  1.27M|        set_arg_as_visited(arg_id);
 2038|       |
 2039|  1.27M|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 1.27M]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|  1.27M|        auto specs = detail::format_specs{};
 2049|  1.27M|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|  1.27M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|  1.27M|            detail::get_arg_type(arg)};
 2052|       |
 2053|  1.27M|        begin = detail::parse_format_specs(begin, end, handler);
 2054|  1.27M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 1.27M]
  |  Branch (2054:29): [True: 0, False: 1.27M]
  ------------------
 2055|      0|            SCN_UNLIKELY_ATTR
 2056|      0|            on_error({scan_error::invalid_format_string,
 2057|      0|                      "Missing '}' in format string"});
 2058|      0|            return parse_ctx.begin();
 2059|      0|        }
 2060|  1.27M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.0k, False: 1.25M]
  |  |  ------------------
  ------------------
 2061|  19.0k|            return parse_ctx.begin();
 2062|  19.0k|        }
 2063|  1.25M|        parse_ctx.advance_to(begin);
 2064|       |
 2065|  1.25M|        on_visit_scan_arg(
 2066|  1.25M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|  1.25M|                                           get_ctx().locale()},
 2068|  1.25M|            arg);
 2069|  1.25M|        return parse_ctx.begin();
 2070|  1.27M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1745|  1.27M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|  1.27M|    {
 1747|  1.27M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2006|  1.25M|    {
 2007|  1.25M|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 1.25M]
  |  Branch (2007:13): [True: 0, False: 1.25M]
  |  Branch (2007:29): [True: 0, False: 1.25M]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|  1.25M|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|  1.25M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.6k, False: 1.22M]
  |  |  ------------------
  ------------------
 2014|  28.6k|            on_error(r.error());
 2015|  28.6k|        }
 2016|  1.22M|        else {
 2017|  1.22M|            get_ctx().advance_to(*r);
 2018|  1.22M|        }
 2019|  1.25M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2150|   110k|{
 2151|   110k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|   110k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2150|  67.1k|{
 2151|  67.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|  67.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2150|  1.23M|{
 2151|  1.23M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|  1.23M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2150|   616k|{
 2151|   616k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|   616k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1352|  2.38k|{
 1353|  2.38k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1354|       |
 1355|  2.38k|    if constexpr (sizeof(SourceCharT) == 1) {
 1356|       |        if constexpr (sizeof(DestCharT) == 2) {
 1357|       |            std::u32string tmp;
 1358|       |            transcode_to_string_impl_to32(src, tmp);
 1359|       |            return transcode_to_string_impl_32to16<false>(
 1360|       |                std::u32string_view{tmp}, dest);
 1361|       |        }
 1362|  2.38k|        else if constexpr (sizeof(DestCharT) == 4) {
 1363|  2.38k|            return transcode_to_string_impl_to32(src, dest);
 1364|  2.38k|        }
 1365|       |    }
 1366|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1367|       |        if constexpr (sizeof(DestCharT) == 1) {
 1368|       |            std::u32string tmp;
 1369|       |            transcode_to_string_impl_to32(src, tmp);
 1370|       |            return transcode_to_string_impl_32to8<false>(
 1371|       |                std::u32string_view{tmp}, dest);
 1372|       |        }
 1373|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1374|       |            return trasncode_to_string_impl_to32(src, dest);
 1375|       |        }
 1376|       |    }
 1377|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1378|       |        if constexpr (sizeof(DestCharT) == 1) {
 1379|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1380|       |        }
 1381|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1382|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1383|       |        }
 1384|       |    }
 1385|       |
 1386|  2.38k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  2.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1387|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1388|  2.38k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1245|  2.38k|{
 1246|  2.38k|    static_assert(sizeof(DestCharT) == 4);
 1247|       |
 1248|  2.38k|    auto it = src.begin();
 1249|   893k|    while (it != src.end()) {
  ------------------
  |  Branch (1249:12): [True: 890k, False: 2.38k]
  ------------------
 1250|   890k|        auto res = get_next_code_point(
 1251|   890k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1252|   890k|                                                                 src.end()));
 1253|   890k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   890k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.4k, False: 879k]
  |  |  ------------------
  ------------------
 1254|  11.4k|            dest.push_back(DestCharT{0xfffd});
 1255|  11.4k|        }
 1256|   879k|        else {
 1257|   879k|            dest.push_back(res.value);
 1258|   879k|        }
 1259|   890k|        it = detail::make_string_view_iterator(src, res.iterator);
 1260|   890k|    }
 1261|  2.38k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1169|  2.03M|{
 1170|  2.03M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  2.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1171|       |
 1172|  2.03M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1173|  2.03M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.4k, False: 1.98M]
  |  |  ------------------
  ------------------
 1174|  50.4k|        return {get_start_for_next_code_point(input),
 1175|  50.4k|                detail::invalid_code_point};
 1176|  50.4k|    }
 1177|  1.98M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.2k, False: 1.94M]
  |  |  ------------------
  ------------------
 1178|  43.2k|        return {input.end(), detail::invalid_code_point};
 1179|  43.2k|    }
 1180|       |
 1181|  1.94M|    return {input.begin() + len,
 1182|  1.94M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1183|  1.98M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1155|  50.4k|{
 1156|  50.4k|    auto it = input.begin();
 1157|   224k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1157:12): [True: 218k, False: 5.57k]
  ------------------
 1158|   218k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1158:13): [True: 44.8k, False: 173k]
  ------------------
 1159|  44.8k|            break;
 1160|  44.8k|        }
 1161|   218k|    }
 1162|  50.4k|    return it;
 1163|  50.4k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 2925|  42.9k|    {
 2926|  42.9k|        SCN_UNLIKELY_ATTR
 2927|  42.9k|        m_msg = msg;
 2928|  42.9k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 2930|  4.14M|    {
 2931|  4.14M|        return m_msg == nullptr;
 2932|  4.14M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  5.79M|{
  458|  5.79M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  5.79M|        static_cast<unsigned char>(ch))];
  460|  5.79M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   119k|{
  469|   119k|    return static_cast<unsigned char>(ch) <= 127;
  470|   119k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  31.9k|{
  474|  31.9k|#if WCHAR_MIN < 0
  475|  31.9k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 29.4k, False: 2.46k]
  |  Branch (475:23): [True: 18.6k, False: 10.8k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  31.9k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  2.13M|{
  539|  2.13M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.13M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  16.2M|{
  784|  16.2M|    return e != eof_error::good;
  785|  16.2M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  26.8k|{
  798|  26.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  26.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  26.8k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  26.8k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5925|  4.02M|{
 5926|  4.02M|    if (specs.width != 0) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 4.02M]
  ------------------
 5927|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5927:13): [True: 0, False: 0]
  ------------------
 5928|      0|            return detail::unexpected_scan_error(
 5929|      0|                scan_error::length_too_short,
 5930|      0|                "Scanned value too narrow, width did not exceed what "
 5931|      0|                "was specified in the format string");
 5932|      0|        }
 5933|      0|    }
 5934|  4.02M|    if (specs.precision != 0) {
  ------------------
  |  Branch (5934:9): [True: 0, False: 4.02M]
  ------------------
 5935|       |        // Ensured by take_width_view
 5936|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5937|      0|                   specs.precision);
 5938|      0|    }
 5939|  4.02M|    return {};
 5940|  4.02M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.09M|    {
  304|  1.09M|        ranges::advance(x, n);
  305|  1.09M|        return x;
  306|  1.09M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.09M|    {
  268|  1.09M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.09M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.09M|    {
  151|  1.09M|        i += n;
  152|  1.09M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.51M|    {
  108|  2.51M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.51M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.51M|    {
   87|  2.51M|        return s - i;
   88|  2.51M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  6.11M|    {
  108|  6.11M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  6.11M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  6.11M|    {
   87|  6.11M|        return s - i;
   88|  6.11M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2872|   725k|    {
 2873|   725k|        return m_current;
 2874|   725k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2872|  7.49M|    {
 2873|  7.49M|        return m_current;
 2874|  7.49M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   343k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   343k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   343k|        auto beg = r.begin();
  991|   343k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 343k, False: 0]
  ------------------
  992|   343k|            return false;
  993|   343k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   343k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|   104k|    {
  763|   104k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   104k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  20.6k|        : m_fptr([](storage fn,
  743|  20.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.6k|              cvref<T> obj = *get<T>(fn);
  745|  20.6k|              if constexpr (std::is_void_v<R>) {
  746|  20.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.6k|              }
  748|  20.6k|              else {
  749|  20.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.6k|              }
  751|  20.6k|          }),
  752|  20.6k|          m_storage(std::addressof(f))
  753|  20.6k|    {
  754|  20.6k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  52.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  52.3k|              else {
  749|  52.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.3k|              }
  751|  52.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  52.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.3k|        else if constexpr (std::is_object_v<T>) {
  688|  52.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.3k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  20.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  20.6k|        {
  662|  20.6k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|   245M|    {
  763|   245M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   245M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   245M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  9.54M|        : m_fptr([](storage fn,
  743|  9.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.54M|              cvref<T> obj = *get<T>(fn);
  745|  9.54M|              if constexpr (std::is_void_v<R>) {
  746|  9.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.54M|              }
  748|  9.54M|              else {
  749|  9.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.54M|              }
  751|  9.54M|          }),
  752|  9.54M|          m_storage(std::addressof(f))
  753|  9.54M|    {
  754|  9.54M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  21.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.8M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.8M|              else {
  749|  21.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.8M|              }
  751|  21.8M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  21.8M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.8M|        else if constexpr (std::is_object_v<T>) {
  688|  21.8M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.8M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  9.54M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  9.54M|        {
  662|  9.54M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 5953|   142k|    {
 5954|   142k|        const bool need_skipped_width =
 5955|   142k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 142k]
  |  Branch (5955:33): [True: 0, False: 142k]
  ------------------
 5956|   142k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|   142k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 142k]
  ------------------
 5960|   142k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 142k]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|   142k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 142k, False: 0]
  |  Branch (5964:56): [True: 135k, False: 6.87k]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|   135k|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 135k]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|   268k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.95k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.95k|    }                                                  \
  |  |  |  | 3939|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|   268k|                            make_eof_scan_error));
 5975|       |
 5976|   268k|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 133k]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|   133k|            return result_type{it, 0};
 5984|   268k|        }
 5985|       |
 5986|  6.87k|        return result_type{rng.begin(), 0};
 5987|   142k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1965|  6.87k|{
 1966|  6.87k|    return read_until_code_unit(range, std::not_fn(pred));
 1967|  6.87k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1946|  6.87k|{
 1947|       |    if constexpr (ranges::common_range<Range>) {
 1948|       |        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|  6.87k|    else {
 1951|  6.87k|        auto first = range.begin();
 1952|  17.5k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1952:16): [True: 17.4k, False: 100]
  ------------------
 1953|  17.4k|            if (pred(*first)) {
  ------------------
  |  Branch (1953:17): [True: 6.77k, False: 10.6k]
  ------------------
 1954|  6.77k|                return first;
 1955|  6.77k|            }
 1956|  17.4k|        }
 1957|    100|        return first;
 1958|  6.87k|    }
 1959|  6.87k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   132k|    {
  108|   132k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   132k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   132k|    {
   94|   132k|        iter_difference_t<I> counter{0};
   95|  1.45M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.32M, False: 132k]
  ------------------
   96|  1.32M|            ++i;
   97|  1.32M|            ++counter;
   98|  1.32M|        }
   99|   132k|        return counter;
  100|   132k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   536k|{
  951|   536k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   536k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.49k, False: 531k]
  |  |  ------------------
  ------------------
  952|  4.49k|        return eof_error::eof;
  953|  4.49k|    }
  954|   531k|    return eof_error::good;
  955|   536k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  4.08M|{
  945|  4.08M|    return is_range_eof(r.begin(), r.end());
  946|  4.08M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  4.08M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  4.08M|    {
  938|  4.08M|        return begin == end;
  939|  4.08M|    }
  940|  4.08M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1672|   334k|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|       |                  ranges::sized_range<Range>) {
 1676|       |        return string_view_wrapper{SCN_FWD(range)};
 1677|       |    }
 1678|   334k|    else {
 1679|   334k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1680|   334k|    }
 1681|   334k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1526|   334k|    {
 1527|   334k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1528|   334k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1610|   334k|    {
 1611|   334k|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|   334k|                           ranges::common_range<Range>) {
 1628|   334k|            auto beg_seg = range.begin().contiguous_segment();
 1629|   334k|            auto end_seg = range.end().contiguous_segment();
 1630|   334k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.12k, False: 326k]
  |  |  ------------------
  ------------------
 1631|   334k|                             detail::to_address(end_seg.end()))) {
 1632|  8.12k|                auto& str = m_storage.emplace();
 1633|  8.12k|                str.reserve(range.end().position() - range.begin().position());
 1634|  8.12k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|  8.12k|                m_view = string_view_type{str};
 1636|  8.12k|                return;
 1637|  8.12k|            }
 1638|       |
 1639|   326k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|   326k|                                                            end_seg.data());
 1641|   326k|            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|   334k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1571|   656k|    {
 1572|   656k|        return m_view;
 1573|   656k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1561|   334k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 5995|   131k|    {
 5996|   131k|        const bool need_skipped_width =
 5997|   131k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 131k]
  |  Branch (5997:33): [True: 0, False: 131k]
  ------------------
 5998|   131k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|   131k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 131k]
  ------------------
 6001|   131k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 131k]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|   131k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 131k, False: 0]
  ------------------
 6010|   131k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 2.05k, False: 129k]
  ------------------
 6011|   131k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 2.05k]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|  2.05k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 2.05k]
  ------------------
 6013|  2.05k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|   131k|        return result_type{rng.begin(), 0};
 6035|   131k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   884k|{
  951|   884k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   884k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.74k, False: 877k]
  |  |  ------------------
  ------------------
  952|  6.74k|        return eof_error::eof;
  953|  6.74k|    }
  954|   877k|    return eof_error::good;
  955|   884k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   884k|{
  945|   884k|    return is_range_eof(r.begin(), r.end());
  946|   884k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   884k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   884k|    {
  938|   884k|        return begin == end;
  939|   884k|    }
  940|   884k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1672|   552k|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|   552k|                  ranges::sized_range<Range>) {
 1676|   552k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|   552k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1478|   552k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|   552k|    {
 1480|   552k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1492|  3.01M|    {
 1493|  3.01M|        return sv;
 1494|  3.01M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1965|  13.7k|{
 1966|  13.7k|    return read_until_code_unit(range, std::not_fn(pred));
 1967|  13.7k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1946|  13.7k|{
 1947|  13.7k|    if constexpr (ranges::common_range<Range>) {
 1948|  13.7k|        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|       |    else {
 1951|       |        auto first = range.begin();
 1952|       |        for (; first != range.end(); ++first) {
 1953|       |            if (pred(*first)) {
 1954|       |                return first;
 1955|       |            }
 1956|       |        }
 1957|       |        return first;
 1958|       |    }
 1959|  13.7k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2945|   551k|{
 2946|   551k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 551k, False: 0]
  ------------------
 2947|   551k|        auto it = read_while_classic_space(range);
 2948|   551k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|   551k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.89k, False: 547k]
  |  |  ------------------
  ------------------
 2950|  3.89k|            return unexpected(e);
 2951|  3.89k|        }
 2952|       |
 2953|   547k|        return it;
 2954|   551k|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|   551k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2106|   551k|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|   551k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|   551k|        auto buf = make_contiguous_buffer(range);
 2111|   551k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|   551k|        return ranges::next(range.begin(),
 2113|   551k|                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|       |    else {
 2116|       |        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|       |            return detail::is_cp_space(cp);
 2129|       |        });
 2130|       |    }
 2131|   551k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1672|  1.09M|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|  1.09M|                  ranges::sized_range<Range>) {
 1676|  1.09M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|  1.09M|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1478|  1.09M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|  1.09M|    {
 1480|  1.09M|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  25.7k|    {
  304|  25.7k|        ranges::advance(x, n);
  305|  25.7k|        return x;
  306|  25.7k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   667k|    {
  268|   667k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   667k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   667k|    {
  181|  1.22M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 556k, False: 667k]
  ------------------
  182|   556k|            ++i;
  183|   556k|        }
  184|   667k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1576|   331k|    {
 1577|   331k|        return m_storage.has_value();
 1578|   331k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1581|  4.77k|    {
 1582|  4.77k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  4.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1583|  4.77k|        return *m_storage;
 1584|  4.77k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   146k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   146k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   146k|            auto rd = make_reader<T, char_type>();
 6116|   146k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   146k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.77k, False: 142k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.77k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.77k|    }
  ------------------
 6117|       |
 6118|   142k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 142k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   142k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   142k|                return impl(rd, range, value);
 6121|   142k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   146k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5728|   637k|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|       |                       std::is_same_v<T, std::wstring_view>) {
 5743|       |        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|   637k|                       std::is_same_v<T, std::wstring>) {
 5747|   637k|        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|   637k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5122|   926k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3035|   392k|    {
 3036|   392k|        reader_error_handler eh{};
 3037|   392k|        get_derived().check_specs_impl(specs, eh);
 3038|   392k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.3k, False: 377k]
  |  |  ------------------
  ------------------
 3039|  14.3k|            return detail::unexpected_scan_error(
 3040|  14.3k|                scan_error::invalid_format_string, eh.m_msg);
 3041|  14.3k|        }
 3042|   377k|        return {};
 3043|   392k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3047|   392k|    {
 3048|   392k|        return static_cast<Derived&>(*this);
 3049|   392k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5126|   392k|    {
 5127|   392k|        detail::check_string_type_specs(specs, eh);
 5128|       |
 5129|   392k|        SCN_GCC_PUSH
 5130|   392k|        SCN_GCC_IGNORE("-Wswitch")
 5131|   392k|        SCN_GCC_IGNORE("-Wswitch-default")
 5132|       |
 5133|   392k|        SCN_CLANG_PUSH
 5134|   392k|        SCN_CLANG_IGNORE("-Wswitch")
 5135|   392k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5136|       |
 5137|   392k|        switch (specs.type) {
  ------------------
  |  Branch (5137:17): [True: 0, False: 392k]
  ------------------
 5138|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5138:13): [True: 0, False: 392k]
  ------------------
 5139|      0|                m_type = reader_type::word;
 5140|      0|                break;
 5141|       |
 5142|   357k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5142:13): [True: 357k, False: 34.9k]
  ------------------
 5143|   357k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5143:21): [True: 0, False: 357k]
  ------------------
 5144|   357k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5144:21): [True: 0, False: 357k]
  ------------------
 5145|      0|                    m_type = reader_type::custom_word;
 5146|      0|                }
 5147|   357k|                else {
 5148|   357k|                    m_type = reader_type::word;
 5149|   357k|                }
 5150|   357k|                break;
 5151|      0|            }
 5152|       |
 5153|  14.3k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5153:13): [True: 14.3k, False: 377k]
  ------------------
 5154|  14.3k|                m_type = reader_type::character;
 5155|  14.3k|                break;
 5156|       |
 5157|  20.6k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5157:13): [True: 20.6k, False: 371k]
  ------------------
 5158|  20.6k|                m_type = reader_type::character_set;
 5159|  20.6k|                break;
 5160|       |
 5161|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5161:13): [True: 0, False: 392k]
  ------------------
 5162|      0|                m_type = reader_type::regex;
 5163|      0|                break;
 5164|       |
 5165|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5165:13): [True: 0, False: 392k]
  ------------------
 5166|      0|                m_type = reader_type::regex_escaped;
 5167|      0|                break;
 5168|   392k|        }
 5169|       |
 5170|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5171|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5172|   392k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6040|   142k|    {
 6041|   142k|        const bool need_skipped_width =
 6042|   142k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 142k]
  |  Branch (6042:33): [True: 0, False: 142k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   142k|        auto it = rng.begin();
 6046|   142k|        std::ptrdiff_t prefix_width = 0;
 6047|   142k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 142k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   142k|        else {
 6055|   142k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.95k, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.95k|    }                                                  \
  |  |  |  | 3939|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   140k|            std::tie(it, prefix_width) = prefix_result;
 6057|   140k|        }
 6058|   140k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   140k|        std::ptrdiff_t value_width = 0;
 6062|   140k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 140k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   140k|        else {
 6078|   140k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.58k, False: 132k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.58k|    }                                                  \
  |  | 3939|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   132k|                                             specs, value, loc));
 6080|       |
 6081|   132k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 132k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   132k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   132k|        std::ptrdiff_t postfix_width = 0;
 6090|   132k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 131k, False: 1.18k]
  ------------------
 6091|   131k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   131k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   131k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   131k|                                 value_width));
 6095|   131k|            std::tie(it, postfix_width) = postfix_result;
 6096|   131k|        }
 6097|       |
 6098|   132k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   132k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 132k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   132k|            specs, prefix_width, value_width, postfix_width));
 6100|   132k|        return it;
 6101|   132k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5175|  1.25M|    {
 5176|  1.25M|        return m_type == reader_type::word;
 5177|  1.25M|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1132|   886k|{
 1133|   886k|    auto it = src.begin();
 1134|  6.82M|    while (it != src.end()) {
  ------------------
  |  Branch (1134:12): [True: 5.96M, False: 861k]
  ------------------
 1135|  5.96M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1136|  5.96M|        if (len == 0) {
  ------------------
  |  Branch (1136:13): [True: 14.3k, False: 5.94M]
  ------------------
 1137|  14.3k|            return false;
 1138|  14.3k|        }
 1139|  5.94M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1139:13): [True: 1.57k, False: 5.94M]
  ------------------
 1140|  1.57k|            return false;
 1141|  1.57k|        }
 1142|  5.94M|        const auto cp = detail::decode_code_point_exhaustive(
 1143|  5.94M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1144|  5.94M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1144:13): [True: 8.61k, False: 5.93M]
  ------------------
 1145|  8.61k|            return false;
 1146|  8.61k|        }
 1147|  5.93M|        it += len;
 1148|  5.93M|    }
 1149|   861k|    return true;
 1150|   886k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 2987|   326k|{
 2988|   326k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2989|   326k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2989:13): [True: 4.77k, False: 322k]
  ------------------
 2990|  4.77k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  4.77k|    static_cast<    \
  |  |  935|  4.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2991|  4.77k|        }
 2992|   322k|        else {
 2993|   322k|            dest.assign(source.view());
 2994|   322k|        }
 2995|       |    }
 2996|       |    else {
 2997|       |        return transcode_impl(source.view(), dest);
 2998|       |    }
 2999|       |
 3000|   326k|    return {};
 3001|   326k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5023|  20.6k|        {
 5024|  20.6k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5024:17): [True: 20.6k, False: 0]
  ------------------
 5025|  20.6k|                return {};
 5026|  20.6k|            }
 5027|       |
 5028|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5029|      0|            auto it = detail::to_address(charset_string.begin());
 5030|      0|            auto set = detail::parse_presentation_set(
 5031|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5032|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5033|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5034|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5035|       |
 5036|      0|            std::sort(nonascii.extra_ranges.begin(),
 5037|      0|                      nonascii.extra_ranges.end());
 5038|      0|            return {};
 5039|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 4996|  48.6k|        {
 4997|  48.6k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  48.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4998|  48.6k|            const auto val =
 4999|  48.6k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5000|  48.6k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5001|  48.6k|                    (val % 8)) &
 5002|  48.6k|                   1u;
 5003|  48.6k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5047|  52.3k|        {
 5048|  52.3k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5048:17): [True: 3.68k, False: 48.6k]
  ------------------
 5049|  3.68k|                return false;
 5050|  3.68k|            }
 5051|       |
 5052|  48.6k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5053|  52.3k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 4993|  20.6k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5193|   140k|    {
 5194|   140k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   140k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|   140k|        return read_impl(range, specs, value);
 5196|   140k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5211|   140k|    {
 5212|   140k|        SCN_CLANG_PUSH
 5213|   140k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|   140k|        switch (m_type) {
 5216|   133k|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 133k, False: 6.87k]
  ------------------
 5217|   133k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 140k]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 140k]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|  6.87k|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 6.87k, False: 133k]
  ------------------
 5227|  6.87k|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|  6.87k|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 140k]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 0, False: 140k]
  ------------------
 5237|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|      0|                    range,
 5239|      0|                    get_unescaped_regex_pattern(
 5240|      0|                        specs.charset_string<SourceCharT>()),
 5241|      0|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 140k]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|   140k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|   140k|        }
 5248|       |
 5249|   140k|        SCN_CLANG_POP
 5250|   140k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4740|   332k|    {
 4741|   332k|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|   332k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4674|   332k|{
 4675|   332k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|   332k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|   332k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 7.42k, False: 324k]
  ------------------
 4679|  7.42k|        return detail::unexpected_scan_error(
 4680|  7.42k|            scan_error::invalid_scanned_value,
 4681|  7.42k|            "Invalid encoding in scanned string");
 4682|  7.42k|    }
 4683|       |
 4684|   324k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   324k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 324k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|   324k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   324k|    static_cast<    \
  |  |  935|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|   324k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2077|   332k|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|       |        auto buf = make_contiguous_buffer(range);
 2082|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2083|       |        return ranges::next(range.begin(),
 2084|       |                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|   332k|    else {
 2087|   332k|        auto it = range.begin();
 2088|       |
 2089|   332k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|   332k|            auto seg = get_contiguous_beginning(range);
 2091|   332k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|   332k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2092:17): [True: 0, False: 332k]
  ------------------
 2093|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|      0|            }
 2095|   332k|            ranges::advance(it, seg.size());
 2096|   332k|        }
 2097|       |
 2098|      0|        return read_until_code_point(
 2099|   332k|            ranges::subrange{it, range.end()},
 2100|   332k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|   332k|    }
 2102|   332k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   667k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   667k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   667k|        else {
 1055|   667k|            return r.begin().contiguous_segment();
 1056|   667k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   667k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2050|   641k|{
 2051|   641k|    auto it = range.begin();
 2052|  3.55M|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 3.54M, False: 8.95k]
  ------------------
 2053|  3.54M|        const auto val =
 2054|  3.54M|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|  3.54M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  3.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.50M, False: 38.9k]
  |  |  ------------------
  ------------------
 2056|  3.50M|            const auto cp = detail::decode_code_point_exhaustive(
 2057|  3.50M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|  3.50M|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 632k, False: 2.87M]
  ------------------
 2059|   632k|                return it;
 2060|   632k|            }
 2061|  3.50M|        }
 2062|  2.91M|        it = val.iterator;
 2063|  2.91M|    }
 2064|       |
 2065|  8.95k|    return it;
 2066|   641k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1888|  3.54M|{
 1889|  3.54M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  3.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|  3.54M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|  3.54M|    auto it = range.begin();
 1893|  3.54M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|  3.54M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  3.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 38.9k, False: 3.50M]
  |  |  ------------------
  ------------------
 1896|  38.9k|        ++it;
 1897|  38.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|  38.9k|        return {it, {}};
 1899|  38.9k|    }
 1900|       |
 1901|  3.50M|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 3.33M, False: 168k]
  ------------------
 1902|  3.33M|        ++it;
 1903|  3.33M|        return {it, string_type(1, *range.begin())};
 1904|  3.33M|    }
 1905|       |
 1906|   168k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|   168k|    return {it, string_type{range.begin(), it}};
 1908|  3.50M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1155|  38.9k|{
 1156|  38.9k|    auto it = input.begin();
 1157|  97.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1157:12): [True: 95.8k, False: 1.45k]
  ------------------
 1158|  95.8k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1158:13): [True: 37.5k, False: 58.3k]
  ------------------
 1159|  37.5k|            break;
 1160|  37.5k|        }
 1161|  95.8k|    }
 1162|  38.9k|    return it;
 1163|  38.9k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|   168k|    {
  283|   168k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   168k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|   168k|    {
  252|   168k|        constexpr iter_difference_t<I> zero{0};
  253|   168k|        iter_difference_t<I> counter{0};
  254|       |
  255|   632k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 464k, False: 167k]
  |  Branch (255:30): [True: 463k, False: 1.16k]
  ------------------
  256|   463k|            ++i;
  257|   463k|            ++counter;
  258|   463k|        }
  259|       |
  260|   168k|        return counter;
  261|   168k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1879|  3.54M|    {
 1880|  3.54M|        return !codepoint.empty();
 1881|  3.54M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   332k|        : m_fptr([](storage fn,
  743|   332k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   332k|              cvref<T> obj = *get<T>(fn);
  745|   332k|              if constexpr (std::is_void_v<R>) {
  746|   332k|                  obj(static_cast<decltype(args)>(args)...);
  747|   332k|              }
  748|   332k|              else {
  749|   332k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   332k|              }
  751|   332k|          }),
  752|   332k|          m_storage(std::addressof(f))
  753|   332k|    {
  754|   332k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.28M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.28M|              else {
  749|  2.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.28M|              }
  751|  2.28M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.28M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.28M|        else if constexpr (std::is_object_v<T>) {
  688|  2.28M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.28M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2100|  2.28M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   332k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   332k|        {
  662|   332k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 4968|  6.87k|    {
 4969|  6.87k|        auto it = read_source_impl(range, {specs});
 4970|  6.87k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  6.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.77k, False: 2.10k]
  |  |  ------------------
  ------------------
 4971|  4.77k|            return unexpected(it.error());
 4972|  4.77k|        }
 4973|       |
 4974|  2.10k|        return read_string_impl(range, *it, value);
 4975|  6.87k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5071|  6.87k|    {
 5072|  6.87k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5073|  6.87k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5074|       |
 5075|  6.87k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  6.87k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  6.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 6.87k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5076|       |
 5077|  6.87k|        read_source_callback cb_wrapper{helper};
 5078|       |
 5079|  6.87k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5079:13): [True: 0, False: 6.87k]
  ------------------
 5080|      0|            const auto cb = [&](char32_t cp) {
 5081|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|      0|            };
 5083|       |
 5084|      0|            if (is_inverted) {
  ------------------
  |  Branch (5084:17): [True: 0, False: 0]
  ------------------
 5085|      0|                auto it = read_until_code_point(range, cb);
 5086|      0|                return check_nonempty(it, range);
 5087|      0|            }
 5088|      0|            auto it = read_while_code_point(range, cb);
 5089|      0|            return check_nonempty(it, range);
 5090|      0|        }
 5091|       |
 5092|  6.87k|        const auto cb = [&](SourceCharT ch) {
 5093|  6.87k|            return cb_wrapper.on_ascii_only(ch);
 5094|  6.87k|        };
 5095|       |
 5096|  6.87k|        if (is_inverted) {
  ------------------
  |  Branch (5096:13): [True: 0, False: 6.87k]
  ------------------
 5097|      0|            auto it = read_until_code_unit(range, cb);
 5098|      0|            return check_nonempty(it, range);
 5099|      0|        }
 5100|  6.87k|        auto it = read_while_code_unit(range, cb);
 5101|  6.87k|        return check_nonempty(it, range);
 5102|  6.87k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5107|  6.87k|    {
 5108|  6.87k|        if (it == range.begin()) {
  ------------------
  |  Branch (5108:13): [True: 4.77k, False: 2.10k]
  ------------------
 5109|  4.77k|            return detail::unexpected_scan_error(
 5110|  4.77k|                scan_error::invalid_scanned_value,
 5111|  4.77k|                "No characters matched in [character set]");
 5112|  4.77k|        }
 5113|       |
 5114|  2.10k|        return it;
 5115|  6.87k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2071|   309k|{
 2072|   309k|    return read_until_code_point(range, std::not_fn(pred));
 2073|   309k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  6.87k|        : m_fptr([](storage fn,
  743|  6.87k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.87k|              cvref<T> obj = *get<T>(fn);
  745|  6.87k|              if constexpr (std::is_void_v<R>) {
  746|  6.87k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.87k|              }
  748|  6.87k|              else {
  749|  6.87k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.87k|              }
  751|  6.87k|          }),
  752|  6.87k|          m_storage(std::addressof(f))
  753|  6.87k|    {
  754|  6.87k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  17.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.4k|              else {
  749|  17.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.4k|              }
  751|  17.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  17.4k|    {
  684|  17.4k|        if constexpr (std::is_const_v<T>) {
  685|  17.4k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.4k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5092|  17.4k|        const auto cb = [&](SourceCharT ch) {
 5093|  17.4k|            return cb_wrapper.on_ascii_only(ch);
 5094|  17.4k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  6.87k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  6.87k|        {
  667|  6.87k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4674|  2.10k|{
 4675|  2.10k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|  2.10k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|  2.10k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 0, False: 2.10k]
  ------------------
 4679|      0|        return detail::unexpected_scan_error(
 4680|      0|            scan_error::invalid_scanned_value,
 4681|      0|            "Invalid encoding in scanned string");
 4682|      0|    }
 4683|       |
 4684|  2.10k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  2.10k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|  2.10k|    return SCN_MOVE(result);
  ------------------
  |  |  934|  2.10k|    static_cast<    \
  |  |  935|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|  2.10k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5193|   116k|    {
 5194|   116k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   116k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|   116k|        return read_impl(range, specs, value);
 5196|   116k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5211|   116k|    {
 5212|   116k|        SCN_CLANG_PUSH
 5213|   116k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|   116k|        switch (m_type) {
 5216|   109k|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 109k, False: 6.87k]
  ------------------
 5217|   109k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 116k]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 116k]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|  6.87k|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 6.87k, False: 109k]
  ------------------
 5227|  6.87k|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|  6.87k|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 116k]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 0, False: 116k]
  ------------------
 5237|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|      0|                    range,
 5239|      0|                    get_unescaped_regex_pattern(
 5240|      0|                        specs.charset_string<SourceCharT>()),
 5241|      0|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 116k]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|   116k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|   116k|        }
 5248|       |
 5249|   116k|        SCN_CLANG_POP
 5250|   116k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4740|   273k|    {
 4741|   273k|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|   273k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4674|   273k|{
 4675|   273k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|   273k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|   273k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 8.55k, False: 265k]
  ------------------
 4679|  8.55k|        return detail::unexpected_scan_error(
 4680|  8.55k|            scan_error::invalid_scanned_value,
 4681|  8.55k|            "Invalid encoding in scanned string");
 4682|  8.55k|    }
 4683|       |
 4684|   265k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   265k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 265k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|   265k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   265k|    static_cast<    \
  |  |  935|   265k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|   265k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3007|   267k|{
 3008|   267k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3009|   267k|        dest.assign(source.view());
 3010|       |    }
 3011|       |    else {
 3012|       |        return transcode_impl(source.view(), dest);
 3013|       |    }
 3014|       |
 3015|   267k|    return {};
 3016|   267k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2077|   547k|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|   547k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|   547k|        auto buf = make_contiguous_buffer(range);
 2082|   547k|        auto it = find_classic_space_narrow_fast(buf.view());
 2083|   547k|        return ranges::next(range.begin(),
 2084|   547k|                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|       |    else {
 2087|       |        auto it = range.begin();
 2088|       |
 2089|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|       |            auto seg = get_contiguous_beginning(range);
 2091|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|       |                seg_it != seg.end()) {
 2093|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|       |            }
 2095|       |            ranges::advance(it, seg.size());
 2096|       |        }
 2097|       |
 2098|       |        return read_until_code_point(
 2099|       |            ranges::subrange{it, range.end()},
 2100|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|       |    }
 2102|   547k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4968|  6.87k|    {
 4969|  6.87k|        auto it = read_source_impl(range, {specs});
 4970|  6.87k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  6.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.77k, False: 2.10k]
  |  |  ------------------
  ------------------
 4971|  4.77k|            return unexpected(it.error());
 4972|  4.77k|        }
 4973|       |
 4974|  2.10k|        return read_string_impl(range, *it, value);
 4975|  6.87k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5071|  13.7k|    {
 5072|  13.7k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5073|  13.7k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5074|       |
 5075|  13.7k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  13.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 13.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5076|       |
 5077|  13.7k|        read_source_callback cb_wrapper{helper};
 5078|       |
 5079|  13.7k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5079:13): [True: 0, False: 13.7k]
  ------------------
 5080|      0|            const auto cb = [&](char32_t cp) {
 5081|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|      0|            };
 5083|       |
 5084|      0|            if (is_inverted) {
  ------------------
  |  Branch (5084:17): [True: 0, False: 0]
  ------------------
 5085|      0|                auto it = read_until_code_point(range, cb);
 5086|      0|                return check_nonempty(it, range);
 5087|      0|            }
 5088|      0|            auto it = read_while_code_point(range, cb);
 5089|      0|            return check_nonempty(it, range);
 5090|      0|        }
 5091|       |
 5092|  13.7k|        const auto cb = [&](SourceCharT ch) {
 5093|  13.7k|            return cb_wrapper.on_ascii_only(ch);
 5094|  13.7k|        };
 5095|       |
 5096|  13.7k|        if (is_inverted) {
  ------------------
  |  Branch (5096:13): [True: 0, False: 13.7k]
  ------------------
 5097|      0|            auto it = read_until_code_unit(range, cb);
 5098|      0|            return check_nonempty(it, range);
 5099|      0|        }
 5100|  13.7k|        auto it = read_while_code_unit(range, cb);
 5101|  13.7k|        return check_nonempty(it, range);
 5102|  13.7k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5107|  13.7k|    {
 5108|  13.7k|        if (it == range.begin()) {
  ------------------
  |  Branch (5108:13): [True: 9.54k, False: 4.20k]
  ------------------
 5109|  9.54k|            return detail::unexpected_scan_error(
 5110|  9.54k|                scan_error::invalid_scanned_value,
 5111|  9.54k|                "No characters matched in [character set]");
 5112|  9.54k|        }
 5113|       |
 5114|  4.20k|        return it;
 5115|  13.7k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  13.7k|        : m_fptr([](storage fn,
  743|  13.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.7k|              cvref<T> obj = *get<T>(fn);
  745|  13.7k|              if constexpr (std::is_void_v<R>) {
  746|  13.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.7k|              }
  748|  13.7k|              else {
  749|  13.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.7k|              }
  751|  13.7k|          }),
  752|  13.7k|          m_storage(std::addressof(f))
  753|  13.7k|    {
  754|  13.7k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  34.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.8k|              else {
  749|  34.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.8k|              }
  751|  34.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  34.8k|    {
  684|  34.8k|        if constexpr (std::is_const_v<T>) {
  685|  34.8k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.8k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5092|  34.8k|        const auto cb = [&](SourceCharT ch) {
 5093|  34.8k|            return cb_wrapper.on_ascii_only(ch);
 5094|  34.8k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  13.7k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  13.7k|        {
  667|  13.7k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4674|  2.10k|{
 4675|  2.10k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|  2.10k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|  2.10k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 0, False: 2.10k]
  ------------------
 4679|      0|        return detail::unexpected_scan_error(
 4680|      0|            scan_error::invalid_scanned_value,
 4681|      0|            "Invalid encoding in scanned string");
 4682|      0|    }
 4683|       |
 4684|  2.10k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  2.10k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|  2.10k|    return SCN_MOVE(result);
  ------------------
  |  |  934|  2.10k|    static_cast<    \
  |  |  935|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|  2.10k|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5728|   288k|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|   288k|                       std::is_same_v<T, std::wstring_view>) {
 5743|   288k|        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|       |                       std::is_same_v<T, std::wstring>) {
 5747|       |        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|   288k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5193|   116k|    {
 5194|   116k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   116k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|   116k|        return read_impl(range, specs, value);
 5196|   116k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5211|   116k|    {
 5212|   116k|        SCN_CLANG_PUSH
 5213|   116k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|   116k|        switch (m_type) {
 5216|   109k|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 109k, False: 6.87k]
  ------------------
 5217|   109k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 116k]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 116k]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|  6.87k|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 6.87k, False: 109k]
  ------------------
 5227|  6.87k|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|  6.87k|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 116k]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 0, False: 116k]
  ------------------
 5237|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|      0|                    range,
 5239|      0|                    get_unescaped_regex_pattern(
 5240|      0|                        specs.charset_string<SourceCharT>()),
 5241|      0|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 116k]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|   116k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|   116k|        }
 5248|       |
 5249|   116k|        SCN_CLANG_POP
 5250|   116k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4747|   273k|    {
 4748|   273k|        return read_string_view_impl(range, read_until_classic_space(range),
 4749|   273k|                                     value);
 4750|   273k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4693|   273k|{
 4694|   273k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|   273k|    auto src = [&]() {
 4697|   273k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|   273k|            return make_contiguous_buffer(
 4699|   273k|                ranges::subrange{range.begin().base(), result.base()});
 4700|   273k|        }
 4701|   273k|        else {
 4702|   273k|            return make_contiguous_buffer(
 4703|   273k|                ranges::subrange{range.begin(), result});
 4704|   273k|        }
 4705|   273k|    }();
 4706|   273k|    using src_type = decltype(src);
 4707|       |
 4708|   273k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|   273k|    else {
 4721|   273k|        const auto view = src.view();
 4722|   273k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|   273k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 8.55k, False: 265k]
  ------------------
 4725|  8.55k|            return detail::unexpected_scan_error(
 4726|  8.55k|                scan_error::invalid_scanned_value,
 4727|  8.55k|                "Invalid encoding in scanned string_view");
 4728|  8.55k|        }
 4729|       |
 4730|   265k|        return SCN_MOVE(result);
  ------------------
  |  |  934|   265k|    static_cast<    \
  |  |  935|   265k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|   273k|    }
 4732|   273k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4696|   273k|    auto src = [&]() {
 4697|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|       |            return make_contiguous_buffer(
 4699|       |                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|   273k|        else {
 4702|   273k|            return make_contiguous_buffer(
 4703|   273k|                ranges::subrange{range.begin(), result});
 4704|   273k|        }
 4705|   273k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4982|  6.87k|    {
 4983|  6.87k|        auto it = read_source_impl(range, {specs});
 4984|  6.87k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  6.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.77k, False: 2.10k]
  |  |  ------------------
  ------------------
 4985|  4.77k|            return unexpected(it.error());
 4986|  4.77k|        }
 4987|       |
 4988|  2.10k|        return read_string_view_impl(range, *it, value);
 4989|  6.87k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4693|  2.10k|{
 4694|  2.10k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|  2.10k|    auto src = [&]() {
 4697|  2.10k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|  2.10k|            return make_contiguous_buffer(
 4699|  2.10k|                ranges::subrange{range.begin().base(), result.base()});
 4700|  2.10k|        }
 4701|  2.10k|        else {
 4702|  2.10k|            return make_contiguous_buffer(
 4703|  2.10k|                ranges::subrange{range.begin(), result});
 4704|  2.10k|        }
 4705|  2.10k|    }();
 4706|  2.10k|    using src_type = decltype(src);
 4707|       |
 4708|  2.10k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|  2.10k|    else {
 4721|  2.10k|        const auto view = src.view();
 4722|  2.10k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|  2.10k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 0, False: 2.10k]
  ------------------
 4725|      0|            return detail::unexpected_scan_error(
 4726|      0|                scan_error::invalid_scanned_value,
 4727|      0|                "Invalid encoding in scanned string_view");
 4728|      0|        }
 4729|       |
 4730|  2.10k|        return SCN_MOVE(result);
  ------------------
  |  |  934|  2.10k|    static_cast<    \
  |  |  935|  2.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|  2.10k|    }
 4732|  2.10k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4696|  2.10k|    auto src = [&]() {
 4697|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|       |            return make_contiguous_buffer(
 4699|       |                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|  2.10k|        else {
 4702|  2.10k|            return make_contiguous_buffer(
 4703|  2.10k|                ranges::subrange{range.begin(), result});
 4704|  2.10k|        }
 4705|  2.10k|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2945|   334k|{
 2946|   334k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 334k, False: 0]
  ------------------
 2947|   334k|        auto it = read_while_classic_space(range);
 2948|   334k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|   334k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.81k, False: 332k]
  |  |  ------------------
  ------------------
 2950|  2.81k|            return unexpected(e);
 2951|  2.81k|        }
 2952|       |
 2953|   332k|        return it;
 2954|   334k|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|   334k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2106|   334k|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|   334k|    else {
 2116|   334k|        auto it = range.begin();
 2117|       |
 2118|   334k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|   334k|            auto seg = get_contiguous_beginning(range);
 2120|   334k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|   334k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2121:17): [True: 25.7k, False: 309k]
  ------------------
 2122|  25.7k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|  25.7k|            }
 2124|   309k|            ranges::advance(it, seg.size());
 2125|   309k|        }
 2126|       |
 2127|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|   334k|            return detail::is_cp_space(cp);
 2129|   334k|        });
 2130|   334k|    }
 2131|   334k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   309k|        : m_fptr([](storage fn,
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
  752|   309k|          m_storage(std::addressof(f))
  753|   309k|    {
  754|   309k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.22M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.22M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.22M|              else {
  749|  1.22M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.22M|              }
  751|  1.22M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.22M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.22M|        else if constexpr (std::is_object_v<T>) {
  688|  1.22M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.22M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2127|  1.22M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  1.22M|            return detail::is_cp_space(cp);
 2129|  1.22M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   309k|        {
  662|   309k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  3.09M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  3.09M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  3.09M|        auto beg = r.begin();
  991|  3.09M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 3.09M, False: 0]
  ------------------
  992|  3.09M|            return false;
  993|  3.09M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  3.09M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  63.8k|    {
  763|  63.8k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  63.8k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  29.4k|        : m_fptr([](storage fn,
  743|  29.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.4k|              cvref<T> obj = *get<T>(fn);
  745|  29.4k|              if constexpr (std::is_void_v<R>) {
  746|  29.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.4k|              }
  748|  29.4k|              else {
  749|  29.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.4k|              }
  751|  29.4k|          }),
  752|  29.4k|          m_storage(std::addressof(f))
  753|  29.4k|    {
  754|  29.4k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  31.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.9k|              else {
  749|  31.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.9k|              }
  751|  31.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  31.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.9k|        else if constexpr (std::is_object_v<T>) {
  688|  31.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.9k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  29.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  29.4k|        {
  662|  29.4k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 5953|  1.24M|    {
 5954|  1.24M|        const bool need_skipped_width =
 5955|  1.24M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 1.24M]
  |  Branch (5955:33): [True: 0, False: 1.24M]
  ------------------
 5956|  1.24M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|  1.24M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 1.24M]
  ------------------
 5960|  1.24M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 1.24M]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|  1.24M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 1.24M, False: 0]
  |  Branch (5964:56): [True: 1.23M, False: 9.80k]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|  1.23M|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 1.23M]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|  2.46M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  1.23M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.08k, False: 1.23M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.08k|    }                                                  \
  |  |  |  | 3939|  1.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|  2.46M|                            make_eof_scan_error));
 5975|       |
 5976|  2.46M|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 1.23M]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|  1.23M|            return result_type{it, 0};
 5984|  2.46M|        }
 5985|       |
 5986|  9.80k|        return result_type{rng.begin(), 0};
 5987|  1.24M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1965|  9.80k|{
 1966|  9.80k|    return read_until_code_unit(range, std::not_fn(pred));
 1967|  9.80k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1946|  9.80k|{
 1947|       |    if constexpr (ranges::common_range<Range>) {
 1948|       |        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|  9.80k|    else {
 1951|  9.80k|        auto first = range.begin();
 1952|  10.7k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1952:16): [True: 10.6k, False: 96]
  ------------------
 1953|  10.6k|            if (pred(*first)) {
  ------------------
  |  Branch (1953:17): [True: 9.70k, False: 934]
  ------------------
 1954|  9.70k|                return first;
 1955|  9.70k|            }
 1956|  10.6k|        }
 1957|     96|        return first;
 1958|  9.80k|    }
 1959|  9.80k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.22M|    {
  108|  1.22M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.22M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.22M|    {
   94|  1.22M|        iter_difference_t<I> counter{0};
   95|  27.6M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 26.4M, False: 1.22M]
  ------------------
   96|  26.4M|            ++i;
   97|  26.4M|            ++counter;
   98|  26.4M|        }
   99|  1.22M|        return counter;
  100|  1.22M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  4.92M|{
  951|  4.92M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  4.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.21k, False: 4.92M]
  |  |  ------------------
  ------------------
  952|  5.21k|        return eof_error::eof;
  953|  5.21k|    }
  954|  4.92M|    return eof_error::good;
  955|  4.92M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  78.2M|{
  945|  78.2M|    return is_range_eof(r.begin(), r.end());
  946|  78.2M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  78.2M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  78.2M|    {
  938|  78.2M|        return begin == end;
  939|  78.2M|    }
  940|  78.2M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1672|  3.07M|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|       |                  ranges::sized_range<Range>) {
 1676|       |        return string_view_wrapper{SCN_FWD(range)};
 1677|       |    }
 1678|  3.07M|    else {
 1679|  3.07M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  3.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1680|  3.07M|    }
 1681|  3.07M|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1526|  3.07M|    {
 1527|  3.07M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  3.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1528|  3.07M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1610|  3.07M|    {
 1611|  3.07M|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|  3.07M|                           ranges::common_range<Range>) {
 1628|  3.07M|            auto beg_seg = range.begin().contiguous_segment();
 1629|  3.07M|            auto end_seg = range.end().contiguous_segment();
 1630|  3.07M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  3.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.74k, False: 3.06M]
  |  |  ------------------
  ------------------
 1631|  3.07M|                             detail::to_address(end_seg.end()))) {
 1632|  9.74k|                auto& str = m_storage.emplace();
 1633|  9.74k|                str.reserve(range.end().position() - range.begin().position());
 1634|  9.74k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|  9.74k|                m_view = string_view_type{str};
 1636|  9.74k|                return;
 1637|  9.74k|            }
 1638|       |
 1639|  3.06M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|  3.06M|                                                            end_seg.data());
 1641|  3.06M|            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|  3.07M|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1571|  6.13M|    {
 1572|  6.13M|        return m_view;
 1573|  6.13M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1561|  3.07M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 5995|  1.22M|    {
 5996|  1.22M|        const bool need_skipped_width =
 5997|  1.22M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 1.22M]
  |  Branch (5997:33): [True: 0, False: 1.22M]
  ------------------
 5998|  1.22M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|  1.22M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 1.22M]
  ------------------
 6001|  1.22M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 1.22M]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|  1.22M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 1.22M, False: 0]
  ------------------
 6010|  1.22M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 216, False: 1.22M]
  ------------------
 6011|  1.22M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 216]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|    216|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 216]
  ------------------
 6013|    216|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|  1.22M|        return result_type{rng.begin(), 0};
 6035|  1.22M|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1888|   146M|{
 1889|   146M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   146M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   146M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|   146M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|   146M|    auto it = range.begin();
 1893|   146M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|   146M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   146M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 146M]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|   146M|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 146M, False: 0]
  ------------------
 1902|   146M|        ++it;
 1903|   146M|        return {it, string_type(1, *range.begin())};
 1904|   146M|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|   146M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   156M|{
  945|   156M|    return is_range_eof(r.begin(), r.end());
  946|   156M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   156M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   156M|    {
  938|   156M|        return begin == end;
  939|   156M|    }
  940|   156M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1879|   146M|    {
 1880|   146M|        return !codepoint.empty();
 1881|   146M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  9.85M|{
  951|  9.85M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  9.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.4k, False: 9.84M]
  |  |  ------------------
  ------------------
  952|  10.4k|        return eof_error::eof;
  953|  10.4k|    }
  954|  9.84M|    return eof_error::good;
  955|  9.85M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1672|  6.15M|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|  6.15M|                  ranges::sized_range<Range>) {
 1676|  6.15M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  6.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|  6.15M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1478|  6.15M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|  6.15M|    {
 1480|  6.15M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1492|  9.21M|    {
 1493|  9.21M|        return sv;
 1494|  9.21M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1965|  19.6k|{
 1966|  19.6k|    return read_until_code_unit(range, std::not_fn(pred));
 1967|  19.6k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1946|  19.6k|{
 1947|  19.6k|    if constexpr (ranges::common_range<Range>) {
 1948|  19.6k|        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|       |    else {
 1951|       |        auto first = range.begin();
 1952|       |        for (; first != range.end(); ++first) {
 1953|       |            if (pred(*first)) {
 1954|       |                return first;
 1955|       |            }
 1956|       |        }
 1957|       |        return first;
 1958|       |    }
 1959|  19.6k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2945|  6.16M|{
 2946|  6.16M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 6.16M, False: 0]
  ------------------
 2947|  6.16M|        auto it = read_while_classic_space(range);
 2948|  6.16M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|  6.16M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  6.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.95k, False: 6.15M]
  |  |  ------------------
  ------------------
 2950|  4.95k|            return unexpected(e);
 2951|  4.95k|        }
 2952|       |
 2953|  6.15M|        return it;
 2954|  6.16M|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|  6.16M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2106|  6.16M|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|  6.16M|    else {
 2116|  6.16M|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|  6.16M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  6.16M|            return detail::is_cp_space(cp);
 2129|  6.16M|        });
 2130|  6.16M|    }
 2131|  6.16M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2071|  6.16M|{
 2072|  6.16M|    return read_until_code_point(range, std::not_fn(pred));
 2073|  6.16M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2050|  12.3M|{
 2051|  12.3M|    auto it = range.begin();
 2052|   146M|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 146M, False: 31.0k]
  ------------------
 2053|   146M|        const auto val =
 2054|   146M|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|   146M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   146M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 146M, False: 0]
  |  |  ------------------
  ------------------
 2056|   146M|            const auto cp = detail::decode_code_point_exhaustive(
 2057|   146M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|   146M|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 12.2M, False: 134M]
  ------------------
 2059|  12.2M|                return it;
 2060|  12.2M|            }
 2061|   146M|        }
 2062|   134M|        it = val.iterator;
 2063|   134M|    }
 2064|       |
 2065|  31.0k|    return it;
 2066|  12.3M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  6.16M|        : m_fptr([](storage fn,
  743|  6.16M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.16M|              cvref<T> obj = *get<T>(fn);
  745|  6.16M|              if constexpr (std::is_void_v<R>) {
  746|  6.16M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.16M|              }
  748|  6.16M|              else {
  749|  6.16M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.16M|              }
  751|  6.16M|          }),
  752|  6.16M|          m_storage(std::addressof(f))
  753|  6.16M|    {
  754|  6.16M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  13.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.7M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.7M|              else {
  749|  13.7M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.7M|              }
  751|  13.7M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  13.7M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  13.7M|        else if constexpr (std::is_object_v<T>) {
  688|  13.7M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.7M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2127|  13.7M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  13.7M|            return detail::is_cp_space(cp);
 2129|  13.7M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  6.16M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.16M|        {
  662|  6.16M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1576|  3.06M|    {
 1577|  3.06M|        return m_storage.has_value();
 1578|  3.06M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1581|  3.03k|    {
 1582|  3.03k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  3.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1583|  3.03k|        return *m_storage;
 1584|  3.03k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5122|  9.30M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3035|  3.75M|    {
 3036|  3.75M|        reader_error_handler eh{};
 3037|  3.75M|        get_derived().check_specs_impl(specs, eh);
 3038|  3.75M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  3.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28.6k, False: 3.72M]
  |  |  ------------------
  ------------------
 3039|  28.6k|            return detail::unexpected_scan_error(
 3040|  28.6k|                scan_error::invalid_format_string, eh.m_msg);
 3041|  28.6k|        }
 3042|  3.72M|        return {};
 3043|  3.75M|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3047|  3.75M|    {
 3048|  3.75M|        return static_cast<Derived&>(*this);
 3049|  3.75M|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5126|  3.75M|    {
 5127|  3.75M|        detail::check_string_type_specs(specs, eh);
 5128|       |
 5129|  3.75M|        SCN_GCC_PUSH
 5130|  3.75M|        SCN_GCC_IGNORE("-Wswitch")
 5131|  3.75M|        SCN_GCC_IGNORE("-Wswitch-default")
 5132|       |
 5133|  3.75M|        SCN_CLANG_PUSH
 5134|  3.75M|        SCN_CLANG_IGNORE("-Wswitch")
 5135|  3.75M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5136|       |
 5137|  3.75M|        switch (specs.type) {
  ------------------
  |  Branch (5137:17): [True: 0, False: 3.75M]
  ------------------
 5138|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5138:13): [True: 0, False: 3.75M]
  ------------------
 5139|      0|                m_type = reader_type::word;
 5140|      0|                break;
 5141|       |
 5142|  3.69M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5142:13): [True: 3.69M, False: 58.0k]
  ------------------
 5143|  3.69M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5143:21): [True: 0, False: 3.69M]
  ------------------
 5144|  3.69M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5144:21): [True: 0, False: 3.69M]
  ------------------
 5145|      0|                    m_type = reader_type::custom_word;
 5146|      0|                }
 5147|  3.69M|                else {
 5148|  3.69M|                    m_type = reader_type::word;
 5149|  3.69M|                }
 5150|  3.69M|                break;
 5151|      0|            }
 5152|       |
 5153|  28.6k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5153:13): [True: 28.6k, False: 3.72M]
  ------------------
 5154|  28.6k|                m_type = reader_type::character;
 5155|  28.6k|                break;
 5156|       |
 5157|  29.4k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5157:13): [True: 29.4k, False: 3.72M]
  ------------------
 5158|  29.4k|                m_type = reader_type::character_set;
 5159|  29.4k|                break;
 5160|       |
 5161|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5161:13): [True: 0, False: 3.75M]
  ------------------
 5162|      0|                m_type = reader_type::regex;
 5163|      0|                break;
 5164|       |
 5165|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5165:13): [True: 0, False: 3.75M]
  ------------------
 5166|      0|                m_type = reader_type::regex_escaped;
 5167|      0|                break;
 5168|  3.75M|        }
 5169|       |
 5170|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5171|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5172|  3.75M|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5175|  12.9M|    {
 5176|  12.9M|        return m_type == reader_type::word;
 5177|  12.9M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1132|  9.23M|{
 1133|  9.23M|    auto it = src.begin();
 1134|   196M|    while (it != src.end()) {
  ------------------
  |  Branch (1134:12): [True: 187M, False: 9.17M]
  ------------------
 1135|   187M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1136|   187M|        if (len == 0) {
  ------------------
  |  Branch (1136:13): [True: 0, False: 187M]
  ------------------
 1137|      0|            return false;
 1138|      0|        }
 1139|   187M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1139:13): [True: 0, False: 187M]
  ------------------
 1140|      0|            return false;
 1141|      0|        }
 1142|   187M|        const auto cp = detail::decode_code_point_exhaustive(
 1143|   187M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1144|   187M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1144:13): [True: 55.9k, False: 187M]
  ------------------
 1145|  55.9k|            return false;
 1146|  55.9k|        }
 1147|   187M|        it += len;
 1148|   187M|    }
 1149|  9.17M|    return true;
 1150|  9.23M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5023|  29.4k|        {
 5024|  29.4k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5024:17): [True: 29.4k, False: 0]
  ------------------
 5025|  29.4k|                return {};
 5026|  29.4k|            }
 5027|       |
 5028|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5029|      0|            auto it = detail::to_address(charset_string.begin());
 5030|      0|            auto set = detail::parse_presentation_set(
 5031|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5032|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5033|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5034|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5035|       |
 5036|      0|            std::sort(nonascii.extra_ranges.begin(),
 5037|      0|                      nonascii.extra_ranges.end());
 5038|      0|            return {};
 5039|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 4996|  18.6k|        {
 4997|  18.6k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4998|  18.6k|            const auto val =
 4999|  18.6k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5000|  18.6k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5001|  18.6k|                    (val % 8)) &
 5002|  18.6k|                   1u;
 5003|  18.6k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5047|  31.9k|        {
 5048|  31.9k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5048:17): [True: 13.2k, False: 18.6k]
  ------------------
 5049|  13.2k|                return false;
 5050|  13.2k|            }
 5051|       |
 5052|  18.6k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5053|  31.9k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 4993|  29.4k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2077|  3.07M|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|       |        auto buf = make_contiguous_buffer(range);
 2082|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2083|       |        return ranges::next(range.begin(),
 2084|       |                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|  3.07M|    else {
 2087|  3.07M|        auto it = range.begin();
 2088|       |
 2089|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|       |            auto seg = get_contiguous_beginning(range);
 2091|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|       |                seg_it != seg.end()) {
 2093|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|       |            }
 2095|       |            ranges::advance(it, seg.size());
 2096|       |        }
 2097|       |
 2098|  3.07M|        return read_until_code_point(
 2099|  3.07M|            ranges::subrange{it, range.end()},
 2100|  3.07M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|  3.07M|    }
 2102|  3.07M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2050|  6.15M|{
 2051|  6.15M|    auto it = range.begin();
 2052|  73.3M|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 73.2M, False: 15.5k]
  ------------------
 2053|  73.2M|        const auto val =
 2054|  73.2M|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|  73.2M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  73.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 73.2M, False: 0]
  |  |  ------------------
  ------------------
 2056|  73.2M|            const auto cp = detail::decode_code_point_exhaustive(
 2057|  73.2M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|  73.2M|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 6.14M, False: 67.1M]
  ------------------
 2059|  6.14M|                return it;
 2060|  6.14M|            }
 2061|  73.2M|        }
 2062|  67.1M|        it = val.iterator;
 2063|  67.1M|    }
 2064|       |
 2065|  15.5k|    return it;
 2066|  6.15M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1888|  73.2M|{
 1889|  73.2M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  73.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  73.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|  73.2M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|  73.2M|    auto it = range.begin();
 1893|  73.2M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|  73.2M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  73.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 73.2M]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|  73.2M|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 73.2M, False: 0]
  ------------------
 1902|  73.2M|        ++it;
 1903|  73.2M|        return {it, string_type(1, *range.begin())};
 1904|  73.2M|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|  73.2M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1879|  73.2M|    {
 1880|  73.2M|        return !codepoint.empty();
 1881|  73.2M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  3.07M|        : m_fptr([](storage fn,
  743|  3.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.07M|              cvref<T> obj = *get<T>(fn);
  745|  3.07M|              if constexpr (std::is_void_v<R>) {
  746|  3.07M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.07M|              }
  748|  3.07M|              else {
  749|  3.07M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.07M|              }
  751|  3.07M|          }),
  752|  3.07M|          m_storage(std::addressof(f))
  753|  3.07M|    {
  754|  3.07M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  66.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.4M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  66.4M|              else {
  749|  66.4M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.4M|              }
  751|  66.4M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  66.4M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  66.4M|        else if constexpr (std::is_object_v<T>) {
  688|  66.4M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  66.4M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2100|  66.4M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  3.07M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.07M|        {
  662|  3.07M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5071|  9.80k|    {
 5072|  9.80k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5073|  9.80k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5074|       |
 5075|  9.80k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  9.80k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  9.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 9.80k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5076|       |
 5077|  9.80k|        read_source_callback cb_wrapper{helper};
 5078|       |
 5079|  9.80k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5079:13): [True: 0, False: 9.80k]
  ------------------
 5080|      0|            const auto cb = [&](char32_t cp) {
 5081|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|      0|            };
 5083|       |
 5084|      0|            if (is_inverted) {
  ------------------
  |  Branch (5084:17): [True: 0, False: 0]
  ------------------
 5085|      0|                auto it = read_until_code_point(range, cb);
 5086|      0|                return check_nonempty(it, range);
 5087|      0|            }
 5088|      0|            auto it = read_while_code_point(range, cb);
 5089|      0|            return check_nonempty(it, range);
 5090|      0|        }
 5091|       |
 5092|  9.80k|        const auto cb = [&](SourceCharT ch) {
 5093|  9.80k|            return cb_wrapper.on_ascii_only(ch);
 5094|  9.80k|        };
 5095|       |
 5096|  9.80k|        if (is_inverted) {
  ------------------
  |  Branch (5096:13): [True: 0, False: 9.80k]
  ------------------
 5097|      0|            auto it = read_until_code_unit(range, cb);
 5098|      0|            return check_nonempty(it, range);
 5099|      0|        }
 5100|  9.80k|        auto it = read_while_code_unit(range, cb);
 5101|  9.80k|        return check_nonempty(it, range);
 5102|  9.80k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5107|  9.80k|    {
 5108|  9.80k|        if (it == range.begin()) {
  ------------------
  |  Branch (5108:13): [True: 9.54k, False: 264]
  ------------------
 5109|  9.54k|            return detail::unexpected_scan_error(
 5110|  9.54k|                scan_error::invalid_scanned_value,
 5111|  9.54k|                "No characters matched in [character set]");
 5112|  9.54k|        }
 5113|       |
 5114|    264|        return it;
 5115|  9.80k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2071|  3.08M|{
 2072|  3.08M|    return read_until_code_point(range, std::not_fn(pred));
 2073|  3.08M|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  9.80k|        : m_fptr([](storage fn,
  743|  9.80k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.80k|              cvref<T> obj = *get<T>(fn);
  745|  9.80k|              if constexpr (std::is_void_v<R>) {
  746|  9.80k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.80k|              }
  748|  9.80k|              else {
  749|  9.80k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.80k|              }
  751|  9.80k|          }),
  752|  9.80k|          m_storage(std::addressof(f))
  753|  9.80k|    {
  754|  9.80k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  10.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.6k|              else {
  749|  10.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.6k|              }
  751|  10.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  10.6k|    {
  684|  10.6k|        if constexpr (std::is_const_v<T>) {
  685|  10.6k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.6k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5092|  10.6k|        const auto cb = [&](SourceCharT ch) {
 5093|  10.6k|            return cb_wrapper.on_ascii_only(ch);
 5094|  10.6k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  9.80k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  9.80k|        {
  667|  9.80k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2077|  6.15M|{
 2078|       |    if constexpr (ranges::contiguous_range<Range> &&
 2079|       |                  ranges::sized_range<Range> &&
 2080|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2081|       |        auto buf = make_contiguous_buffer(range);
 2082|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2083|       |        return ranges::next(range.begin(),
 2084|       |                            ranges::distance(buf.view().begin(), it));
 2085|       |    }
 2086|  6.15M|    else {
 2087|  6.15M|        auto it = range.begin();
 2088|       |
 2089|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2090|       |            auto seg = get_contiguous_beginning(range);
 2091|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2092|       |                seg_it != seg.end()) {
 2093|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2094|       |            }
 2095|       |            ranges::advance(it, seg.size());
 2096|       |        }
 2097|       |
 2098|  6.15M|        return read_until_code_point(
 2099|  6.15M|            ranges::subrange{it, range.end()},
 2100|  6.15M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2101|  6.15M|    }
 2102|  6.15M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  6.15M|        : m_fptr([](storage fn,
  743|  6.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.15M|              cvref<T> obj = *get<T>(fn);
  745|  6.15M|              if constexpr (std::is_void_v<R>) {
  746|  6.15M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.15M|              }
  748|  6.15M|              else {
  749|  6.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.15M|              }
  751|  6.15M|          }),
  752|  6.15M|          m_storage(std::addressof(f))
  753|  6.15M|    {
  754|  6.15M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   132M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   132M|              else {
  749|   132M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132M|              }
  751|   132M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   132M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   132M|        else if constexpr (std::is_object_v<T>) {
  688|   132M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   132M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2100|   132M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  6.15M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.15M|        {
  662|  6.15M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5071|  19.6k|    {
 5072|  19.6k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5073|  19.6k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5074|       |
 5075|  19.6k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  19.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 19.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5076|       |
 5077|  19.6k|        read_source_callback cb_wrapper{helper};
 5078|       |
 5079|  19.6k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5079:13): [True: 0, False: 19.6k]
  ------------------
 5080|      0|            const auto cb = [&](char32_t cp) {
 5081|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5082|      0|            };
 5083|       |
 5084|      0|            if (is_inverted) {
  ------------------
  |  Branch (5084:17): [True: 0, False: 0]
  ------------------
 5085|      0|                auto it = read_until_code_point(range, cb);
 5086|      0|                return check_nonempty(it, range);
 5087|      0|            }
 5088|      0|            auto it = read_while_code_point(range, cb);
 5089|      0|            return check_nonempty(it, range);
 5090|      0|        }
 5091|       |
 5092|  19.6k|        const auto cb = [&](SourceCharT ch) {
 5093|  19.6k|            return cb_wrapper.on_ascii_only(ch);
 5094|  19.6k|        };
 5095|       |
 5096|  19.6k|        if (is_inverted) {
  ------------------
  |  Branch (5096:13): [True: 0, False: 19.6k]
  ------------------
 5097|      0|            auto it = read_until_code_unit(range, cb);
 5098|      0|            return check_nonempty(it, range);
 5099|      0|        }
 5100|  19.6k|        auto it = read_while_code_unit(range, cb);
 5101|  19.6k|        return check_nonempty(it, range);
 5102|  19.6k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5107|  19.6k|    {
 5108|  19.6k|        if (it == range.begin()) {
  ------------------
  |  Branch (5108:13): [True: 19.0k, False: 528]
  ------------------
 5109|  19.0k|            return detail::unexpected_scan_error(
 5110|  19.0k|                scan_error::invalid_scanned_value,
 5111|  19.0k|                "No characters matched in [character set]");
 5112|  19.0k|        }
 5113|       |
 5114|    528|        return it;
 5115|  19.6k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  19.6k|        : m_fptr([](storage fn,
  743|  19.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.6k|              cvref<T> obj = *get<T>(fn);
  745|  19.6k|              if constexpr (std::is_void_v<R>) {
  746|  19.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.6k|              }
  748|  19.6k|              else {
  749|  19.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.6k|              }
  751|  19.6k|          }),
  752|  19.6k|          m_storage(std::addressof(f))
  753|  19.6k|    {
  754|  19.6k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  21.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.2k|              else {
  749|  21.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.2k|              }
  751|  21.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  21.2k|    {
  684|  21.2k|        if constexpr (std::is_const_v<T>) {
  685|  21.2k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.2k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5092|  21.2k|        const auto cb = [&](SourceCharT ch) {
 5093|  21.2k|            return cb_wrapper.on_ascii_only(ch);
 5094|  21.2k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  19.6k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  19.6k|        {
  667|  19.6k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|  1.25M|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|  1.25M|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|  1.25M|            auto rd = make_reader<T, char_type>();
 6116|  1.25M|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.25M|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 9.54k, False: 1.24M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  9.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  9.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  9.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  9.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  9.54k|    }
  ------------------
 6117|       |
 6118|  1.24M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 1.24M, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|  1.24M|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|  1.24M|                return impl(rd, range, value);
 6121|  1.24M|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.25M|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5728|  6.20M|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|       |                       std::is_same_v<T, std::wstring_view>) {
 5743|       |        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|  6.20M|                       std::is_same_v<T, std::wstring>) {
 5747|  6.20M|        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|  6.20M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6040|  1.24M|    {
 6041|  1.24M|        const bool need_skipped_width =
 6042|  1.24M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.24M]
  |  Branch (6042:33): [True: 0, False: 1.24M]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  1.24M|        auto it = rng.begin();
 6046|  1.24M|        std::ptrdiff_t prefix_width = 0;
 6047|  1.24M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 1.24M]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  1.24M|        else {
 6055|  1.24M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.24M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.24M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.24M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.08k, False: 1.24M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.08k|    }                                                  \
  |  |  |  | 3939|  1.24M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  1.24M|            std::tie(it, prefix_width) = prefix_result;
 6057|  1.24M|        }
 6058|  1.24M|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  1.24M|        std::ptrdiff_t value_width = 0;
 6062|  1.24M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 1.24M]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  1.24M|        else {
 6078|  1.24M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.24M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.24M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.9k, False: 1.22M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.9k|    }                                                  \
  |  | 3939|  1.24M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|  1.22M|                                             specs, value, loc));
 6080|       |
 6081|  1.22M|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 1.22M]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|  1.22M|        }
 6087|       |
 6088|       |        // Read postfix
 6089|  1.22M|        std::ptrdiff_t postfix_width = 0;
 6090|  1.22M|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 1.22M, False: 1.87k]
  ------------------
 6091|  1.22M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.22M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.22M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.22M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.22M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.22M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|  1.22M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|  1.22M|                                 rd.skip_ws_before_read(), prefix_width,
 6094|  1.22M|                                 value_width));
 6095|  1.22M|            std::tie(it, postfix_width) = postfix_result;
 6096|  1.22M|        }
 6097|       |
 6098|  1.22M|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.22M|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.22M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|  1.22M|            specs, prefix_width, value_width, postfix_width));
 6100|  1.22M|        return it;
 6101|  1.22M|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 2987|  3.05M|{
 2988|  3.05M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2989|  3.05M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2989:13): [True: 3.03k, False: 3.05M]
  ------------------
 2990|  3.03k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  3.03k|    static_cast<    \
  |  |  935|  3.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2991|  3.03k|        }
 2992|  3.05M|        else {
 2993|  3.05M|            dest.assign(source.view());
 2994|  3.05M|        }
 2995|       |    }
 2996|       |    else {
 2997|       |        return transcode_impl(source.view(), dest);
 2998|       |    }
 2999|       |
 3000|  3.05M|    return {};
 3001|  3.05M|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5193|  1.24M|    {
 5194|  1.24M|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|  1.24M|        return read_impl(range, specs, value);
 5196|  1.24M|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5211|  1.24M|    {
 5212|  1.24M|        SCN_CLANG_PUSH
 5213|  1.24M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|  1.24M|        switch (m_type) {
 5216|  1.23M|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 1.23M, False: 9.80k]
  ------------------
 5217|  1.23M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 1.24M]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 1.24M]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|  9.80k|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 9.80k, False: 1.23M]
  ------------------
 5227|  9.80k|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|  9.80k|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 1.24M]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 0, False: 1.24M]
  ------------------
 5237|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|      0|                    range,
 5239|      0|                    get_unescaped_regex_pattern(
 5240|      0|                        specs.charset_string<SourceCharT>()),
 5241|      0|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 1.24M]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|  1.24M|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|  1.24M|        }
 5248|       |
 5249|  1.24M|        SCN_CLANG_POP
 5250|  1.24M|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4740|  3.07M|    {
 4741|  3.07M|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|  3.07M|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4674|  3.07M|{
 4675|  3.07M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|  3.07M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|  3.07M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 18.6k, False: 3.05M]
  ------------------
 4679|  18.6k|        return detail::unexpected_scan_error(
 4680|  18.6k|            scan_error::invalid_scanned_value,
 4681|  18.6k|            "Invalid encoding in scanned string");
 4682|  18.6k|    }
 4683|       |
 4684|  3.05M|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  3.05M|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  3.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.05M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|  3.05M|    return SCN_MOVE(result);
  ------------------
  |  |  934|  3.05M|    static_cast<    \
  |  |  935|  3.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|  3.05M|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 4968|  9.80k|    {
 4969|  9.80k|        auto it = read_source_impl(range, {specs});
 4970|  9.80k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  9.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.54k, False: 264]
  |  |  ------------------
  ------------------
 4971|  9.54k|            return unexpected(it.error());
 4972|  9.54k|        }
 4973|       |
 4974|    264|        return read_string_impl(range, *it, value);
 4975|  9.80k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4674|    264|{
 4675|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|    264|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|    264|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 0, False: 264]
  ------------------
 4679|      0|        return detail::unexpected_scan_error(
 4680|      0|            scan_error::invalid_scanned_value,
 4681|      0|            "Invalid encoding in scanned string");
 4682|      0|    }
 4683|       |
 4684|    264|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    264|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|    264|    return SCN_MOVE(result);
  ------------------
  |  |  934|    264|    static_cast<    \
  |  |  935|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|    264|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5193|  1.24M|    {
 5194|  1.24M|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|  1.24M|        return read_impl(range, specs, value);
 5196|  1.24M|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5211|  1.24M|    {
 5212|  1.24M|        SCN_CLANG_PUSH
 5213|  1.24M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|  1.24M|        switch (m_type) {
 5216|  1.23M|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 1.23M, False: 9.80k]
  ------------------
 5217|  1.23M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 1.24M]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 1.24M]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|  9.80k|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 9.80k, False: 1.23M]
  ------------------
 5227|  9.80k|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|  9.80k|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 1.24M]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 0, False: 1.24M]
  ------------------
 5237|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|      0|                    range,
 5239|      0|                    get_unescaped_regex_pattern(
 5240|      0|                        specs.charset_string<SourceCharT>()),
 5241|      0|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 1.24M]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|  1.24M|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|  1.24M|        }
 5248|       |
 5249|  1.24M|        SCN_CLANG_POP
 5250|  1.24M|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4740|  3.07M|    {
 4741|  3.07M|        return read_string_impl(range, read_until_classic_space(range), value);
 4742|  3.07M|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4674|  3.07M|{
 4675|  3.07M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|  3.07M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|  3.07M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 18.6k, False: 3.05M]
  ------------------
 4679|  18.6k|        return detail::unexpected_scan_error(
 4680|  18.6k|            scan_error::invalid_scanned_value,
 4681|  18.6k|            "Invalid encoding in scanned string");
 4682|  18.6k|    }
 4683|       |
 4684|  3.05M|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  3.05M|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  3.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.05M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|  3.05M|    return SCN_MOVE(result);
  ------------------
  |  |  934|  3.05M|    static_cast<    \
  |  |  935|  3.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|  3.05M|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3007|  3.05M|{
 3008|  3.05M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3009|  3.05M|        dest.assign(source.view());
 3010|       |    }
 3011|       |    else {
 3012|       |        return transcode_impl(source.view(), dest);
 3013|       |    }
 3014|       |
 3015|  3.05M|    return {};
 3016|  3.05M|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4968|  9.80k|    {
 4969|  9.80k|        auto it = read_source_impl(range, {specs});
 4970|  9.80k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  9.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.54k, False: 264]
  |  |  ------------------
  ------------------
 4971|  9.54k|            return unexpected(it.error());
 4972|  9.54k|        }
 4973|       |
 4974|    264|        return read_string_impl(range, *it, value);
 4975|  9.80k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4674|    264|{
 4675|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4676|       |
 4677|    264|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4678|    264|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4678:9): [True: 0, False: 264]
  ------------------
 4679|      0|        return detail::unexpected_scan_error(
 4680|      0|            scan_error::invalid_scanned_value,
 4681|      0|            "Invalid encoding in scanned string");
 4682|      0|    }
 4683|       |
 4684|    264|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    264|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 264]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4685|    264|    return SCN_MOVE(result);
  ------------------
  |  |  934|    264|    static_cast<    \
  |  |  935|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4686|    264|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5728|  3.10M|{
 5729|       |    if constexpr (std::is_same_v<T, bool>) {
 5730|       |        return reader_impl_for_bool<CharT>{};
 5731|       |    }
 5732|       |    else if constexpr (std::is_same_v<T, char>) {
 5733|       |        return reader_impl_for_char<CharT>{};
 5734|       |    }
 5735|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5736|       |        return reader_impl_for_wchar<CharT>{};
 5737|       |    }
 5738|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5739|       |        return reader_impl_for_code_point<CharT>{};
 5740|       |    }
 5741|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5742|  3.10M|                       std::is_same_v<T, std::wstring_view>) {
 5743|  3.10M|        return reader_impl_for_string<CharT>{};
 5744|       |    }
 5745|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5746|       |                       std::is_same_v<T, std::wstring>) {
 5747|       |        return reader_impl_for_string<CharT>{};
 5748|       |    }
 5749|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5750|       |                       std::is_same_v<T, wregex_matches>) {
 5751|       |        return reader_impl_for_regex_matches<CharT>{};
 5752|       |    }
 5753|       |    else if constexpr (std::is_same_v<T, void*>) {
 5754|       |        return reader_impl_for_voidptr<CharT>{};
 5755|       |    }
 5756|       |    else if constexpr (std::is_floating_point_v<T>) {
 5757|       |        return reader_impl_for_float<CharT>{};
 5758|       |    }
 5759|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5760|       |                       !std::is_same_v<T, wchar_t> &&
 5761|       |                       !std::is_same_v<T, char32_t> &&
 5762|       |                       !std::is_same_v<T, bool>) {
 5763|       |        return reader_impl_for_int<CharT>{};
 5764|       |    }
 5765|       |    else {
 5766|       |        return reader_impl_for_monostate<CharT>{};
 5767|       |    }
 5768|  3.10M|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5193|  1.24M|    {
 5194|  1.24M|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5195|  1.24M|        return read_impl(range, specs, value);
 5196|  1.24M|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5211|  1.24M|    {
 5212|  1.24M|        SCN_CLANG_PUSH
 5213|  1.24M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5214|       |
 5215|  1.24M|        switch (m_type) {
 5216|  1.23M|            case reader_type::word:
  ------------------
  |  Branch (5216:13): [True: 1.23M, False: 9.80k]
  ------------------
 5217|  1.23M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5218|       |
 5219|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5219:13): [True: 0, False: 1.24M]
  ------------------
 5220|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5221|      0|                                                                   value);
 5222|       |
 5223|      0|            case reader_type::character:
  ------------------
  |  Branch (5223:13): [True: 0, False: 1.24M]
  ------------------
 5224|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5225|       |
 5226|  9.80k|            case reader_type::character_set:
  ------------------
  |  Branch (5226:13): [True: 9.80k, False: 1.23M]
  ------------------
 5227|  9.80k|                return character_set_reader_impl<SourceCharT>{}.read(
 5228|  9.80k|                    range, specs, value);
 5229|       |
 5230|      0|#if !SCN_DISABLE_REGEX
 5231|      0|            case reader_type::regex:
  ------------------
  |  Branch (5231:13): [True: 0, False: 1.24M]
  ------------------
 5232|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5233|      0|                    range, specs.charset_string<SourceCharT>(),
 5234|      0|                    specs.regexp_flags, value);
 5235|       |
 5236|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5236:13): [True: 0, False: 1.24M]
  ------------------
 5237|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5238|      0|                    range,
 5239|      0|                    get_unescaped_regex_pattern(
 5240|      0|                        specs.charset_string<SourceCharT>()),
 5241|      0|                    specs.regexp_flags, value);
 5242|      0|#endif
 5243|       |
 5244|      0|            default:
  ------------------
  |  Branch (5244:13): [True: 0, False: 1.24M]
  ------------------
 5245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5246|  1.24M|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5247|  1.24M|        }
 5248|       |
 5249|  1.24M|        SCN_CLANG_POP
 5250|  1.24M|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4747|  3.07M|    {
 4748|  3.07M|        return read_string_view_impl(range, read_until_classic_space(range),
 4749|  3.07M|                                     value);
 4750|  3.07M|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4693|  3.07M|{
 4694|  3.07M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|  3.07M|    auto src = [&]() {
 4697|  3.07M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|  3.07M|            return make_contiguous_buffer(
 4699|  3.07M|                ranges::subrange{range.begin().base(), result.base()});
 4700|  3.07M|        }
 4701|  3.07M|        else {
 4702|  3.07M|            return make_contiguous_buffer(
 4703|  3.07M|                ranges::subrange{range.begin(), result});
 4704|  3.07M|        }
 4705|  3.07M|    }();
 4706|  3.07M|    using src_type = decltype(src);
 4707|       |
 4708|  3.07M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|  3.07M|    else {
 4721|  3.07M|        const auto view = src.view();
 4722|  3.07M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|  3.07M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 18.6k, False: 3.05M]
  ------------------
 4725|  18.6k|            return detail::unexpected_scan_error(
 4726|  18.6k|                scan_error::invalid_scanned_value,
 4727|  18.6k|                "Invalid encoding in scanned string_view");
 4728|  18.6k|        }
 4729|       |
 4730|  3.05M|        return SCN_MOVE(result);
  ------------------
  |  |  934|  3.05M|    static_cast<    \
  |  |  935|  3.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|  3.07M|    }
 4732|  3.07M|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4696|  3.07M|    auto src = [&]() {
 4697|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|       |            return make_contiguous_buffer(
 4699|       |                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|  3.07M|        else {
 4702|  3.07M|            return make_contiguous_buffer(
 4703|  3.07M|                ranges::subrange{range.begin(), result});
 4704|  3.07M|        }
 4705|  3.07M|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4982|  9.80k|    {
 4983|  9.80k|        auto it = read_source_impl(range, {specs});
 4984|  9.80k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  9.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.54k, False: 264]
  |  |  ------------------
  ------------------
 4985|  9.54k|            return unexpected(it.error());
 4986|  9.54k|        }
 4987|       |
 4988|    264|        return read_string_view_impl(range, *it, value);
 4989|  9.80k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4693|    264|{
 4694|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4695|       |
 4696|    264|    auto src = [&]() {
 4697|    264|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|    264|            return make_contiguous_buffer(
 4699|    264|                ranges::subrange{range.begin().base(), result.base()});
 4700|    264|        }
 4701|    264|        else {
 4702|    264|            return make_contiguous_buffer(
 4703|    264|                ranges::subrange{range.begin(), result});
 4704|    264|        }
 4705|    264|    }();
 4706|    264|    using src_type = decltype(src);
 4707|       |
 4708|    264|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4708:9): [Folded - Ignored]
  ------------------
 4709|      0|        return detail::unexpected_scan_error(
 4710|      0|            scan_error::invalid_format_string,
 4711|      0|            "Cannot read a string_view from this source range (not "
 4712|      0|            "contiguous)");
 4713|      0|    }
 4714|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4715|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4716|       |                                             "Cannot read a string_view from "
 4717|       |                                             "this source range (would require "
 4718|       |                                             "transcoding)");
 4719|       |    }
 4720|    264|    else {
 4721|    264|        const auto view = src.view();
 4722|    264|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4723|       |
 4724|    264|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4724:13): [True: 0, False: 264]
  ------------------
 4725|      0|            return detail::unexpected_scan_error(
 4726|      0|                scan_error::invalid_scanned_value,
 4727|      0|                "Invalid encoding in scanned string_view");
 4728|      0|        }
 4729|       |
 4730|    264|        return SCN_MOVE(result);
  ------------------
  |  |  934|    264|    static_cast<    \
  |  |  935|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4731|    264|    }
 4732|    264|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4696|    264|    auto src = [&]() {
 4697|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4698|       |            return make_contiguous_buffer(
 4699|       |                ranges::subrange{range.begin().base(), result.base()});
 4700|       |        }
 4701|    264|        else {
 4702|    264|            return make_contiguous_buffer(
 4703|    264|                ranges::subrange{range.begin(), result});
 4704|    264|        }
 4705|    264|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2945|  3.08M|{
 2946|  3.08M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 3.08M, False: 0]
  ------------------
 2947|  3.08M|        auto it = read_while_classic_space(range);
 2948|  3.08M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|  3.08M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.47k, False: 3.07M]
  |  |  ------------------
  ------------------
 2950|  2.47k|            return unexpected(e);
 2951|  2.47k|        }
 2952|       |
 2953|  3.07M|        return it;
 2954|  3.08M|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|  3.08M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2106|  3.08M|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|  3.08M|    else {
 2116|  3.08M|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|  3.08M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  3.08M|            return detail::is_cp_space(cp);
 2129|  3.08M|        });
 2130|  3.08M|    }
 2131|  3.08M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  3.08M|        : m_fptr([](storage fn,
  743|  3.08M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.08M|              cvref<T> obj = *get<T>(fn);
  745|  3.08M|              if constexpr (std::is_void_v<R>) {
  746|  3.08M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.08M|              }
  748|  3.08M|              else {
  749|  3.08M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.08M|              }
  751|  3.08M|          }),
  752|  3.08M|          m_storage(std::addressof(f))
  753|  3.08M|    {
  754|  3.08M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  6.88M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.88M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.88M|              else {
  749|  6.88M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.88M|              }
  751|  6.88M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  6.88M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.88M|        else if constexpr (std::is_object_v<T>) {
  688|  6.88M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.88M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2127|  6.88M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  6.88M|            return detail::is_cp_space(cp);
 2129|  6.88M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  3.08M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.08M|        {
  662|  3.08M|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5714|   332k|{
 5715|   332k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.85k, False: 329k]
  |  |  ------------------
  ------------------
 5716|  2.85k|        return unexpected(e);
 5717|  2.85k|    }
 5718|       |
 5719|   329k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 329k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|   329k|    return skip_classic_whitespace(range);
 5724|   329k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|   166k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|   166k|                          basic_contiguous_scan_context<char_type>>) {
 5795|   166k|            auto rd = make_reader<T, char_type>();
 5796|   166k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|   166k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5782|   166k|    {
 5783|   166k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.02k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.02k|    }                                                  \
  |  |  |  | 3939|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|   164k|                        .transform_error(make_eof_scan_error));
 5785|   164k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|   166k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5182|   164k|    {
 5183|   164k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   164k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|   164k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|   164k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|   166k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|   166k|                          basic_contiguous_scan_context<char_type>>) {
 5795|   166k|            auto rd = make_reader<T, char_type>();
 5796|   166k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|   166k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5782|   166k|    {
 5783|   166k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.02k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.02k|    }                                                  \
  |  |  |  | 3939|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|   164k|                        .transform_error(make_eof_scan_error));
 5785|   164k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|   166k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5182|   164k|    {
 5183|   164k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   164k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|   164k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|   164k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5714|   201k|{
 5715|   201k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.68k, False: 199k]
  |  |  ------------------
  ------------------
 5716|  1.68k|        return unexpected(e);
 5717|  1.68k|    }
 5718|       |
 5719|   199k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 199k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|   199k|    return skip_classic_whitespace(range);
 5724|   199k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|   201k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|   201k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|   201k|            auto rd = make_reader<T, char_type>();
 5800|   201k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 201k, False: 0]
  ------------------
 5801|   201k|                return impl(rd, range, value);
 5802|   201k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|   201k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5782|   201k|    {
 5783|   201k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.53k, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.53k|    }                                                  \
  |  |  |  | 3939|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|   198k|                        .transform_error(make_eof_scan_error));
 5785|   198k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|   201k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5182|   198k|    {
 5183|   198k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   198k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|   198k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|   198k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2865|   264k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   264k|    static_cast<    \
  |  |  935|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2866|   264k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2867|   264k|          m_current(m_range.begin())
 2868|   264k|    {
 2869|   264k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2877|   461k|    {
 2878|   461k|        return m_range.end();
 2879|   461k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 2892|   216k|    {
 2893|   216k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   216k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   216k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2894|   216k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2895|   216k|            if (it == nullptr) {
  ------------------
  |  Branch (2895:17): [True: 0, False: 216k]
  ------------------
 2896|      0|                it = end();
 2897|      0|            }
 2898|   216k|        }
 2899|   216k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   216k|    static_cast<    \
  |  |  935|   216k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2900|   216k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2882|   245k|    {
 2883|   245k|        return ranges::subrange{begin(), end()};
 2884|   245k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 5953|   235k|    {
 5954|   235k|        const bool need_skipped_width =
 5955|   235k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 235k]
  |  Branch (5955:33): [True: 0, False: 235k]
  ------------------
 5956|   235k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|   235k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 235k]
  ------------------
 5960|   235k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 235k]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|   235k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 235k, False: 0]
  |  Branch (5964:56): [True: 221k, False: 13.7k]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|   221k|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 221k]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|   441k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.69k, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.69k|    }                                                  \
  |  |  |  | 3939|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|   441k|                            make_eof_scan_error));
 5975|       |
 5976|   441k|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 219k]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|   219k|            return result_type{it, 0};
 5984|   441k|        }
 5985|       |
 5986|  13.7k|        return result_type{rng.begin(), 0};
 5987|   235k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 5995|   214k|    {
 5996|   214k|        const bool need_skipped_width =
 5997|   214k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 214k]
  |  Branch (5997:33): [True: 0, False: 214k]
  ------------------
 5998|   214k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|   214k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 214k]
  ------------------
 6001|   214k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 214k]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|   214k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 214k, False: 0]
  ------------------
 6010|   214k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 4.10k, False: 210k]
  ------------------
 6011|   214k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 4.10k]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|  4.10k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 4.10k]
  ------------------
 6013|  4.10k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|   214k|        return result_type{rng.begin(), 0};
 6035|   214k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|   122k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   122k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   122k|            auto rd = make_reader<T, char_type>();
 6111|   122k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   122k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.77k, False: 117k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.77k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.77k|    }
  ------------------
 6112|   117k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   122k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6040|   117k|    {
 6041|   117k|        const bool need_skipped_width =
 6042|   117k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 117k]
  |  Branch (6042:33): [True: 0, False: 117k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   117k|        auto it = rng.begin();
 6046|   117k|        std::ptrdiff_t prefix_width = 0;
 6047|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 117k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   117k|        else {
 6055|   117k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.34k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.34k|    }                                                  \
  |  |  |  | 3939|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   116k|            std::tie(it, prefix_width) = prefix_result;
 6057|   116k|        }
 6058|   116k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   116k|        std::ptrdiff_t value_width = 0;
 6062|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 116k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   116k|        else {
 6078|   116k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 8.19k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  8.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  8.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  8.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  8.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  8.19k|    }                                                  \
  |  | 3939|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   108k|                                             specs, value, loc));
 6080|       |
 6081|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 108k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   108k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   108k|        std::ptrdiff_t postfix_width = 0;
 6090|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 107k, False: 1.00k]
  ------------------
 6091|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   107k|                                 value_width));
 6095|   107k|            std::tie(it, postfix_width) = postfix_result;
 6096|   107k|        }
 6097|       |
 6098|   108k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   108k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   108k|            specs, prefix_width, value_width, postfix_width));
 6100|   108k|        return it;
 6101|   108k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|   122k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   122k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   122k|            auto rd = make_reader<T, char_type>();
 6111|   122k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   122k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 4.77k, False: 117k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  4.77k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  4.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  4.77k|    }
  ------------------
 6112|   117k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   122k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6040|   117k|    {
 6041|   117k|        const bool need_skipped_width =
 6042|   117k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 117k]
  |  Branch (6042:33): [True: 0, False: 117k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   117k|        auto it = rng.begin();
 6046|   117k|        std::ptrdiff_t prefix_width = 0;
 6047|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 117k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   117k|        else {
 6055|   117k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.34k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.34k|    }                                                  \
  |  |  |  | 3939|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   116k|            std::tie(it, prefix_width) = prefix_result;
 6057|   116k|        }
 6058|   116k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   116k|        std::ptrdiff_t value_width = 0;
 6062|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 116k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   116k|        else {
 6078|   116k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 8.19k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  8.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  8.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  8.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  8.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  8.19k|    }                                                  \
  |  | 3939|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   108k|                                             specs, value, loc));
 6080|       |
 6081|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 108k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   108k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   108k|        std::ptrdiff_t postfix_width = 0;
 6090|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 107k, False: 1.00k]
  ------------------
 6091|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   107k|                                 value_width));
 6095|   107k|            std::tie(it, postfix_width) = postfix_result;
 6096|   107k|        }
 6097|       |
 6098|   108k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   108k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   108k|            specs, prefix_width, value_width, postfix_width));
 6100|   108k|        return it;
 6101|   108k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5714|  3.69M|{
 5715|  3.69M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  3.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.47k, False: 3.69M]
  |  |  ------------------
  ------------------
 5716|  5.47k|        return unexpected(e);
 5717|  5.47k|    }
 5718|       |
 5719|  3.69M|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 3.69M]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|  3.69M|    return skip_classic_whitespace(range);
 5724|  3.69M|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|  1.84M|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  1.84M|                          basic_contiguous_scan_context<char_type>>) {
 5795|  1.84M|            auto rd = make_reader<T, char_type>();
 5796|  1.84M|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  1.84M|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5782|  1.84M|    {
 5783|  1.84M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  1.84M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.84M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.84M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.12k, False: 1.84M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.12k|    }                                                  \
  |  |  |  | 3939|  1.84M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  1.84M|                        .transform_error(make_eof_scan_error));
 5785|  1.84M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  1.84M|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5182|  1.84M|    {
 5183|  1.84M|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.84M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|  1.84M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|  1.84M|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5790|  1.84M|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  1.84M|                          basic_contiguous_scan_context<char_type>>) {
 5795|  1.84M|            auto rd = make_reader<T, char_type>();
 5796|  1.84M|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  1.84M|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5782|  1.84M|    {
 5783|  1.84M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  1.84M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.84M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.84M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.12k, False: 1.84M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.12k|    }                                                  \
  |  |  |  | 3939|  1.84M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  1.84M|                        .transform_error(make_eof_scan_error));
 5785|  1.84M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  1.84M|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5182|  1.84M|    {
 5183|  1.84M|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.84M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|  1.84M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|  1.84M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2865|  2.54M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  2.54M|    static_cast<    \
  |  |  935|  2.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2866|  2.54M|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2867|  2.54M|          m_current(m_range.begin())
 2868|  2.54M|    {
 2869|  2.54M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2877|  4.95M|    {
 2878|  4.95M|        return m_range.end();
 2879|  4.95M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 2892|  2.44M|    {
 2893|  2.44M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  2.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2894|  2.44M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2895|  2.44M|            if (it == nullptr) {
  ------------------
  |  Branch (2895:17): [True: 0, False: 2.44M]
  ------------------
 2896|      0|                it = end();
 2897|      0|            }
 2898|  2.44M|        }
 2899|  2.44M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  2.44M|    static_cast<    \
  |  |  935|  2.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2900|  2.44M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2882|  2.50M|    {
 2883|  2.50M|        return ranges::subrange{begin(), end()};
 2884|  2.50M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 5953|  2.48M|    {
 5954|  2.48M|        const bool need_skipped_width =
 5955|  2.48M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 2.48M]
  |  Branch (5955:33): [True: 0, False: 2.48M]
  ------------------
 5956|  2.48M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|  2.48M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 2.48M]
  ------------------
 5960|  2.48M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 2.48M]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|  2.48M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 2.48M, False: 0]
  |  Branch (5964:56): [True: 2.46M, False: 19.6k]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|  2.46M|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 2.46M]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|  4.92M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  2.46M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.46M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.46M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.17k, False: 2.46M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.17k|    }                                                  \
  |  |  |  | 3939|  2.46M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|  4.92M|                            make_eof_scan_error));
 5975|       |
 5976|  4.92M|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 2.46M]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|  2.46M|            return result_type{it, 0};
 5984|  4.92M|        }
 5985|       |
 5986|  19.6k|        return result_type{rng.begin(), 0};
 5987|  2.48M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 5995|  2.44M|    {
 5996|  2.44M|        const bool need_skipped_width =
 5997|  2.44M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 2.44M]
  |  Branch (5997:33): [True: 0, False: 2.44M]
  ------------------
 5998|  2.44M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|  2.44M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 2.44M]
  ------------------
 6001|  2.44M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 2.44M]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|  2.44M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 2.44M, False: 0]
  ------------------
 6010|  2.44M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 432, False: 2.44M]
  ------------------
 6011|  2.44M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 432]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|    432|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 432]
  ------------------
 6013|    432|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|  2.44M|        return result_type{rng.begin(), 0};
 6035|  2.44M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|  1.25M|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.25M|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.25M|            auto rd = make_reader<T, char_type>();
 6111|  1.25M|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.25M|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 9.54k, False: 1.24M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  9.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  9.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  9.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  9.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  9.54k|    }
  ------------------
 6112|  1.24M|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.25M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6040|  1.24M|    {
 6041|  1.24M|        const bool need_skipped_width =
 6042|  1.24M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.24M]
  |  Branch (6042:33): [True: 0, False: 1.24M]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  1.24M|        auto it = rng.begin();
 6046|  1.24M|        std::ptrdiff_t prefix_width = 0;
 6047|  1.24M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 1.24M]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  1.24M|        else {
 6055|  1.24M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.24M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.24M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.24M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.08k, False: 1.24M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.08k|    }                                                  \
  |  |  |  | 3939|  1.24M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  1.24M|            std::tie(it, prefix_width) = prefix_result;
 6057|  1.24M|        }
 6058|  1.24M|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  1.24M|        std::ptrdiff_t value_width = 0;
 6062|  1.24M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 1.24M]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  1.24M|        else {
 6078|  1.24M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.24M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.24M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.9k, False: 1.22M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.9k|    }                                                  \
  |  | 3939|  1.24M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|  1.22M|                                             specs, value, loc));
 6080|       |
 6081|  1.22M|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 1.22M]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|  1.22M|        }
 6087|       |
 6088|       |        // Read postfix
 6089|  1.22M|        std::ptrdiff_t postfix_width = 0;
 6090|  1.22M|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 1.22M, False: 1.87k]
  ------------------
 6091|  1.22M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.22M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.22M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.22M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.22M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.22M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|  1.22M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|  1.22M|                                 rd.skip_ws_before_read(), prefix_width,
 6094|  1.22M|                                 value_width));
 6095|  1.22M|            std::tie(it, postfix_width) = postfix_result;
 6096|  1.22M|        }
 6097|       |
 6098|  1.22M|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.22M|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.22M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|  1.22M|            specs, prefix_width, value_width, postfix_width));
 6100|  1.22M|        return it;
 6101|  1.22M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6105|  1.25M|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  1.25M|                          basic_contiguous_scan_context<char_type>>) {
 6110|  1.25M|            auto rd = make_reader<T, char_type>();
 6111|  1.25M|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  1.25M|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 9.54k, False: 1.24M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  9.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  9.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  9.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  9.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  9.54k|    }
  ------------------
 6112|  1.24M|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  1.25M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6040|  1.24M|    {
 6041|  1.24M|        const bool need_skipped_width =
 6042|  1.24M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.24M]
  |  Branch (6042:33): [True: 0, False: 1.24M]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  1.24M|        auto it = rng.begin();
 6046|  1.24M|        std::ptrdiff_t prefix_width = 0;
 6047|  1.24M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 1.24M]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  1.24M|        else {
 6055|  1.24M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  1.24M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.24M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.24M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.08k, False: 1.24M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.08k|    }                                                  \
  |  |  |  | 3939|  1.24M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  1.24M|            std::tie(it, prefix_width) = prefix_result;
 6057|  1.24M|        }
 6058|  1.24M|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  1.24M|        std::ptrdiff_t value_width = 0;
 6062|  1.24M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 1.24M]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  1.24M|        else {
 6078|  1.24M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  1.24M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.24M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.9k, False: 1.22M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.9k|    }                                                  \
  |  | 3939|  1.24M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|  1.22M|                                             specs, value, loc));
 6080|       |
 6081|  1.22M|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 1.22M]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|  1.22M|        }
 6087|       |
 6088|       |        // Read postfix
 6089|  1.22M|        std::ptrdiff_t postfix_width = 0;
 6090|  1.22M|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 1.22M, False: 1.87k]
  ------------------
 6091|  1.22M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  1.22M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.22M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.22M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.22M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.22M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|  1.22M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|  1.22M|                                 rd.skip_ws_before_read(), prefix_width,
 6094|  1.22M|                                 value_width));
 6095|  1.22M|            std::tie(it, postfix_width) = postfix_result;
 6096|  1.22M|        }
 6097|       |
 6098|  1.22M|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  1.22M|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.22M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|  1.22M|            specs, prefix_width, value_width, postfix_width));
 6100|  1.22M|        return it;
 6101|  1.22M|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5714|  1.84M|{
 5715|  1.84M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.73k, False: 1.84M]
  |  |  ------------------
  ------------------
 5716|  2.73k|        return unexpected(e);
 5717|  2.73k|    }
 5718|       |
 5719|  1.84M|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 1.84M]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|  1.84M|    return skip_classic_whitespace(range);
 5724|  1.84M|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  1.84M|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  1.84M|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  1.84M|            auto rd = make_reader<T, char_type>();
 5800|  1.84M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 1.84M, False: 0]
  ------------------
 5801|  1.84M|                return impl(rd, range, value);
 5802|  1.84M|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  1.84M|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5782|  1.84M|    {
 5783|  1.84M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  1.84M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.84M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.84M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.12k, False: 1.84M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.12k|    }                                                  \
  |  |  |  | 3939|  1.84M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  1.84M|                        .transform_error(make_eof_scan_error));
 5785|  1.84M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  1.84M|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5182|  1.84M|    {
 5183|  1.84M|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  1.84M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5184|  1.84M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5185|  1.84M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.38k|{
   52|  2.38k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  2.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.38k|    string_buffer.resize(size);
   56|  2.38k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.38k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.38k|    const auto wsv_reinterpret_size =
   61|  2.38k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 392, False: 1.99k]
  ------------------
   62|  2.38k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.38k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.38k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.38k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.38k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.38k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.38k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.38k|{
  122|  2.38k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.38k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.38k|    buf.resize(sizeof...(Args));
  125|  2.38k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.38k|    return buf;
  127|  2.38k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.38k|{
  108|  2.38k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.38k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.38k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.38k|{
  185|  2.38k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.38k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.38k|                                   format_strings);
  188|  2.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.38k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 2.38k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|   121k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   121k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   121k|            auto result = scn::scan<T>(
  139|   121k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   121k|                scn::runtime_format(f));
  141|   121k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 107k]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|   107k|            it = result->begin();
  145|   107k|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 2.38k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|   121k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   121k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   121k|            auto result = scn::scan<T>(
  154|   121k|                global_locale,
  155|   121k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   121k|                scn::runtime_format(f));
  157|   121k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 107k]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|   107k|            it = result->begin();
  161|   107k|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.38k|    {
  166|  2.38k|        auto it = scn::ranges::begin(source);
  167|  55.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  55.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  55.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  55.4k|            auto result = scn::scan_value<T>(
  170|  55.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  55.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.38k, False: 53.0k]
  ------------------
  172|  2.38k|                break;
  173|  2.38k|            }
  174|  53.0k|            it = result->begin();
  175|  53.0k|        }
  176|  2.38k|    }
  177|  2.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.38k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 2.38k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|   121k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   121k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   121k|            auto result = scn::scan<T>(
  139|   121k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   121k|                scn::runtime_format(f));
  141|   121k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 107k]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|   107k|            it = result->begin();
  145|   107k|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 2.38k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|   121k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   121k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   121k|            auto result = scn::scan<T>(
  154|   121k|                global_locale,
  155|   121k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   121k|                scn::runtime_format(f));
  157|   121k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 107k]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|   107k|            it = result->begin();
  161|   107k|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.38k|    {
  166|  2.38k|        auto it = scn::ranges::begin(source);
  167|  55.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  55.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  55.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  55.4k|            auto result = scn::scan_value<T>(
  170|  55.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  55.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.38k, False: 53.0k]
  ------------------
  172|  2.38k|                break;
  173|  2.38k|            }
  174|  53.0k|            it = result->begin();
  175|  53.0k|        }
  176|  2.38k|    }
  177|  2.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.38k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 2.38k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|   145k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   145k|            auto result = scn::scan<T>(
  139|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   145k|                scn::runtime_format(f));
  141|   145k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 131k]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|   131k|            it = result->begin();
  145|   131k|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 2.38k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|   145k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   145k|            auto result = scn::scan<T>(
  154|   145k|                global_locale,
  155|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   145k|                scn::runtime_format(f));
  157|   145k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 131k]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|   131k|            it = result->begin();
  161|   131k|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.38k|    {
  166|  2.38k|        auto it = scn::ranges::begin(source);
  167|  67.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  67.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  67.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  67.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  67.1k|            auto result = scn::scan_value<T>(
  170|  67.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  67.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.38k, False: 64.7k]
  ------------------
  172|  2.38k|                break;
  173|  2.38k|            }
  174|  64.7k|            it = result->begin();
  175|  64.7k|        }
  176|  2.38k|    }
  177|  2.38k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.38k|{
   90|  2.38k|    using char_type = ranges::range_value_t<Source>;
   91|  2.38k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.38k|    deque.clear();
   93|  2.38k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.38k|              std::back_inserter(deque));
   95|  2.38k|    return deque;
   96|  2.38k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.38k|{
   79|  2.38k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.38k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.38k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.38k|{
  122|  2.38k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.38k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.38k|    buf.resize(sizeof...(Args));
  125|  2.38k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.38k|    return buf;
  127|  2.38k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.38k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.38k|    else {
  112|  2.38k|        return wformat_string_view_buffer;
  113|  2.38k|    }
  114|  2.38k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.77k|{
  185|  4.77k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.77k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.77k|                                   format_strings);
  188|  4.77k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  4.77k|{
  133|       |    // Regular scan
  134|  28.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 28.6k, False: 4.77k]
  ------------------
  135|  28.6k|        auto it = scn::ranges::begin(source);
  136|  1.25M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.25M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.25M|            auto result = scn::scan<T>(
  139|  1.25M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.25M|                scn::runtime_format(f));
  141|  1.25M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 28.6k, False: 1.22M]
  ------------------
  142|  28.6k|                break;
  143|  28.6k|            }
  144|  1.22M|            it = result->begin();
  145|  1.22M|        }
  146|  28.6k|    }
  147|       |
  148|       |    // scan localized
  149|  28.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 28.6k, False: 4.77k]
  ------------------
  150|  28.6k|        auto it = scn::ranges::begin(source);
  151|  1.25M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.25M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.25M|            auto result = scn::scan<T>(
  154|  1.25M|                global_locale,
  155|  1.25M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.25M|                scn::runtime_format(f));
  157|  1.25M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 28.6k, False: 1.22M]
  ------------------
  158|  28.6k|                break;
  159|  28.6k|            }
  160|  1.22M|            it = result->begin();
  161|  1.22M|        }
  162|  28.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.77k|    {
  166|  4.77k|        auto it = scn::ranges::begin(source);
  167|   616k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   616k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   616k|            auto result = scn::scan_value<T>(
  170|   616k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   616k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.77k, False: 611k]
  ------------------
  172|  4.77k|                break;
  173|  4.77k|            }
  174|   611k|            it = result->begin();
  175|   611k|        }
  176|  4.77k|    }
  177|  4.77k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.77k|{
  133|       |    // Regular scan
  134|  28.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 28.6k, False: 4.77k]
  ------------------
  135|  28.6k|        auto it = scn::ranges::begin(source);
  136|  1.25M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.25M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.25M|            auto result = scn::scan<T>(
  139|  1.25M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.25M|                scn::runtime_format(f));
  141|  1.25M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 28.6k, False: 1.22M]
  ------------------
  142|  28.6k|                break;
  143|  28.6k|            }
  144|  1.22M|            it = result->begin();
  145|  1.22M|        }
  146|  28.6k|    }
  147|       |
  148|       |    // scan localized
  149|  28.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 28.6k, False: 4.77k]
  ------------------
  150|  28.6k|        auto it = scn::ranges::begin(source);
  151|  1.25M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.25M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.25M|            auto result = scn::scan<T>(
  154|  1.25M|                global_locale,
  155|  1.25M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.25M|                scn::runtime_format(f));
  157|  1.25M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 28.6k, False: 1.22M]
  ------------------
  158|  28.6k|                break;
  159|  28.6k|            }
  160|  1.22M|            it = result->begin();
  161|  1.22M|        }
  162|  28.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.77k|    {
  166|  4.77k|        auto it = scn::ranges::begin(source);
  167|   616k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   616k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   616k|            auto result = scn::scan_value<T>(
  170|   616k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   616k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.77k, False: 611k]
  ------------------
  172|  4.77k|                break;
  173|  4.77k|            }
  174|   611k|            it = result->begin();
  175|   611k|        }
  176|  4.77k|    }
  177|  4.77k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  4.77k|{
  133|       |    // Regular scan
  134|  28.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 28.6k, False: 4.77k]
  ------------------
  135|  28.6k|        auto it = scn::ranges::begin(source);
  136|  1.25M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.25M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.25M|            auto result = scn::scan<T>(
  139|  1.25M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.25M|                scn::runtime_format(f));
  141|  1.25M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 28.6k, False: 1.22M]
  ------------------
  142|  28.6k|                break;
  143|  28.6k|            }
  144|  1.22M|            it = result->begin();
  145|  1.22M|        }
  146|  28.6k|    }
  147|       |
  148|       |    // scan localized
  149|  28.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 28.6k, False: 4.77k]
  ------------------
  150|  28.6k|        auto it = scn::ranges::begin(source);
  151|  1.25M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.25M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.25M|            auto result = scn::scan<T>(
  154|  1.25M|                global_locale,
  155|  1.25M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.25M|                scn::runtime_format(f));
  157|  1.25M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 28.6k, False: 1.22M]
  ------------------
  158|  28.6k|                break;
  159|  28.6k|            }
  160|  1.22M|            it = result->begin();
  161|  1.22M|        }
  162|  28.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.77k|    {
  166|  4.77k|        auto it = scn::ranges::begin(source);
  167|   616k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   616k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   616k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   616k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   616k|            auto result = scn::scan_value<T>(
  170|   616k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   616k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.77k, False: 611k]
  ------------------
  172|  4.77k|                break;
  173|  4.77k|            }
  174|   611k|            it = result->begin();
  175|   611k|        }
  176|  4.77k|    }
  177|  4.77k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.77k|{
   90|  4.77k|    using char_type = ranges::range_value_t<Source>;
   91|  4.77k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.77k|    deque.clear();
   93|  4.77k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.77k|              std::back_inserter(deque));
   95|  4.77k|    return deque;
   96|  4.77k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.77k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  4.77k|    else {
   83|  4.77k|        return wnoncontiguous_buffer;
   84|  4.77k|    }
   85|  4.77k|}

LLVMFuzzerTestOneInput:
   57|  2.38k|{
   58|  2.38k|    scn::fuzz::run(data, size);
   59|  2.38k|    return 0;
   60|  2.38k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  2.38k|{
   36|  2.38k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 2.38k]
  |  Branch (36:35): [True: 0, False: 2.38k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  2.38k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  2.38k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  2.38k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  2.38k|    do_basic_run(sv, f);
   45|       |
   46|  2.38k|    const auto& wf = get_format_strings<wchar_t>(
   47|  2.38k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  2.38k|    do_basic_run(wsv_reinterpret, wf);
   49|  2.38k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 2.38k, False: 0]
  ------------------
   50|  2.38k|        do_basic_run(wsv_transcode, wf);
   51|  2.38k|    }
   52|  2.38k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.38k|{
   25|  2.38k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.38k|                                                           format_strings);
   27|  2.38k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  2.38k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.38k|            source, format_strings);
   30|  2.38k|    }
   31|  2.38k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.38k|{
   25|  2.38k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.38k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  2.38k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.77k|{
   25|  4.77k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  4.77k|                                                           format_strings);
   27|  4.77k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  4.77k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  4.77k|            source, format_strings);
   30|  4.77k|    }
   31|  4.77k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.77k|{
   25|  4.77k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  4.77k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  4.77k|}

