_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|  5.69M|{
 3778|  5.69M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  5.69M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  5.69M|    }
 3781|  5.69M|    else if constexpr (sizeof(U) == 2) {
 3782|  5.69M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  5.69M|    }
 3784|  5.69M|    else {
 3785|       |        // utf-32
 3786|  5.69M|        static_assert(sizeof(U) == 4);
 3787|  5.69M|        SCN_UNUSED(ch);
 3788|  5.69M|        return 1;
 3789|  5.69M|    }
 3790|  5.69M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|  5.69M|{
 3742|  5.69M|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|  5.69M|    SCN_GCC_COMPAT_PUSH
 3745|  5.69M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|  5.69M|    constexpr char lengths[] =
 3747|  5.69M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|  5.69M|        "\1\1\1\1\1\1\1\1"
 3749|  5.69M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|  5.69M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|  5.69M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|  5.69M|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|  5.69M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|  5.69M|    SCN_GCC_COMPAT_POP
 3756|  5.69M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  5.58M|{
 3984|  5.58M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  5.58M|        return decode_utf8_code_point_exhaustive(input);
 3986|  5.58M|    }
 3987|  5.58M|    else if constexpr (sizeof(CharT) == 2) {
 3988|  5.58M|        return decode_utf16_code_point_exhaustive(input);
 3989|  5.58M|    }
 3990|  5.58M|    else {
 3991|  5.58M|        SCN_EXPECT(input.size() == 1);
 3992|  5.58M|        auto cp = static_cast<char32_t>(input.front());
 3993|  5.58M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|  5.58M|            return invalid_code_point;
 3995|  5.58M|        }
 3996|  5.58M|        return cp;
 3997|  5.58M|    }
 3998|  5.58M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|  5.58M|{
 3797|  5.58M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|  5.58M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  5.58M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  5.58M|    };
 3802|       |
 3803|  5.58M|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 5.04M, False: 546k]
  ------------------
 3804|  5.04M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 119, False: 5.04M]
  ------------------
 3805|    119|            SCN_UNLIKELY_ATTR
 3806|    119|            return invalid_code_point;
 3807|    119|        }
 3808|  5.04M|        return static_cast<char32_t>(input[0]);
 3809|  5.04M|    }
 3810|       |
 3811|   546k|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 219k, False: 326k]
  ------------------
 3812|   219k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 85, False: 219k]
  ------------------
 3813|     85|            SCN_UNLIKELY_ATTR
 3814|     85|            return invalid_code_point;
 3815|     85|        }
 3816|   219k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 10.8k, False: 208k]
  ------------------
 3817|  10.8k|            SCN_UNLIKELY_ATTR
 3818|  10.8k|            return invalid_code_point;
 3819|  10.8k|        }
 3820|       |
 3821|   208k|        char32_t cp{};
 3822|   208k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|   208k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|   208k|        return cp;
 3825|   219k|    }
 3826|       |
 3827|   326k|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 292k, False: 34.1k]
  ------------------
 3828|   292k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 10, False: 292k]
  ------------------
 3829|     10|            SCN_UNLIKELY_ATTR
 3830|     10|            return invalid_code_point;
 3831|     10|        }
 3832|   292k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 19.0k, False: 273k]
  ------------------
 3833|   292k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 1.38k, False: 272k]
  ------------------
 3834|  20.4k|            SCN_UNLIKELY_ATTR
 3835|  20.4k|            return invalid_code_point;
 3836|  20.4k|        }
 3837|       |
 3838|   272k|        char32_t cp{};
 3839|   272k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|   272k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|   272k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|   272k|        return cp;
 3843|   292k|    }
 3844|       |
 3845|  34.1k|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 34.1k, False: 0]
  ------------------
 3846|  34.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 34.1k]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|  34.1k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 7.75k, False: 26.3k]
  ------------------
 3851|  7.75k|            SCN_UNLIKELY_ATTR
 3852|  7.75k|            return invalid_code_point;
 3853|  7.75k|        }
 3854|  26.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 2.86k, False: 23.4k]
  ------------------
 3855|  26.3k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 204, False: 23.2k]
  ------------------
 3856|  26.3k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 203, False: 23.0k]
  ------------------
 3857|  3.27k|            SCN_UNLIKELY_ATTR
 3858|  3.27k|            return invalid_code_point;
 3859|  3.27k|        }
 3860|       |
 3861|  23.0k|        char32_t cp{};
 3862|  23.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|  23.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|  23.0k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|  23.0k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|  23.0k|        return cp;
 3867|  26.3k|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|   858k|    const auto is_trailing_code_unit = [](char ch) {
 3800|   858k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|   858k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  5.02M|{
 3670|  5.02M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  5.02M|                                          decltype(first), decltype(last)> &&
 3672|  5.02M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  5.02M|        return {first, last};
 3674|  5.02M|    }
 3675|  5.02M|    else {
 3676|  5.02M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  5.02M|                                       to_address(first), to_address(last)))};
 3678|  5.02M|    }
 3679|  5.02M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  15.4M|{
  322|  15.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  15.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  15.4M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  15.7M|{
  302|  15.7M|    return p;
  303|  15.7M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  2.40M|{
 3701|  2.40M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  2.40M|                      typename std::basic_string_view<CharT>::iterator,
 3703|  2.40M|                      decltype(it)> &&
 3704|  2.40M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  2.40M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  2.40M|        return it;
 3707|  2.40M|    }
 3708|  2.40M|    else {
 3709|  2.40M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  2.40M|    }
 3711|  2.40M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  20.0k|    {
 2695|  20.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  20.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  20.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  20.0k|    {
 2676|  20.0k|        return decay_copy(t.begin());
 2677|  20.0k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|  2.46M|{
 1920|  2.46M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  2.46M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8827|  64.4k|{
 8828|  64.4k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  64.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  64.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  64.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  64.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|   259k|{
 5357|   259k|    detail::check_scan_arg_types<Args...>();
 5358|   259k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   259k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5095|   320k|{
 5096|   320k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|   320k|                  "Scan argument types must be default constructible");
 5098|   320k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|   320k|                  "Scan argument types must be Destructible");
 5100|   320k|    static_assert(
 5101|   320k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|   320k|        "Scan argument types must not be references");
 5103|   320k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|   259k|    {
 5310|   259k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|   259k|    {
 5321|   259k|        return {detail::make_arg<
 5322|   259k|            kind, Context,
 5323|   259k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   259k|                                 typename Context::char_type>::value>(args)...};
 5325|   259k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|   259k|{
 5131|   259k|    return make_value<Context>(value).ref_value;
 5132|   259k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|   320k|{
 5081|   320k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   320k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   320k|                                  needs_context_tag>) {
 5085|   320k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   320k|    }
 5087|   320k|    else {
 5088|   320k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   320k|            value, context_tag<Context>{}));
 5090|   320k|    }
 5091|   320k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|   320k|    {                                                                        \
 4920|   320k|        return val;                                                          \
 4921|   320k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5049|   320k|{
 5050|   320k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|   320k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|   320k|    constexpr bool scannable_char =
 5054|   320k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|   320k|    static_assert(scannable_char,
 5056|   320k|                  "Cannot scan an argument of an unsupported character "
 5057|   320k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|   320k|    constexpr bool scannable_const =
 5060|   320k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|   320k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|   320k|    constexpr bool scannable_disabled =
 5064|   320k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|   320k|    static_assert(scannable_disabled,
 5066|   320k|                  "Cannot scan an argument that has been disabled by "
 5067|   320k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|   320k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|   320k|    static_assert(
 5071|   320k|        scannable,
 5072|   320k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|   320k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|   320k|    return arg_value{arg};
 5076|   320k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4862|   320k|    {
 4863|   320k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|   128k|{
 8615|   128k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|   128k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|   128k|{
 8552|   128k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   128k|    auto result = vscan_impl(buffer, format, args);
 8555|   128k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 119k]
  |  |  ------------------
  ------------------
 8556|  8.89k|        return unexpected(result.error());
 8557|  8.89k|    }
 8558|   119k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   128k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4680|   318k|{
 4681|   318k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   318k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   318k|                  "\n"
 4685|   318k|                  "Unsupported range type given as input to a scanning "
 4686|   318k|                  "function.\n"
 4687|   318k|                  "A range needs to have a character type (value type) "
 4688|   318k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   318k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   318k|                  "to be included.\n"
 4691|   318k|                  "See the scnlib documentation for more details.");
 4692|   318k|    static_assert(
 4693|   318k|        !std::is_same_v<T, custom_char_traits>,
 4694|   318k|        "\n"
 4695|   318k|        "Unsupported range type given as input to a scanning "
 4696|   318k|        "function.\n"
 4697|   318k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   318k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   318k|        "not supported.");
 4700|   318k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   318k|                  "\n"
 4702|   318k|                  "Unsupported range type given as input to a scanning "
 4703|   318k|                  "function.\n"
 4704|   318k|                  "file_marker_found cannot be used as an "
 4705|   318k|                  "source range type to scn::scan.\n"
 4706|   318k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   318k|                  "and do not provide an explicit source range, "
 4708|   318k|                  "or use scn::scan with a FILE* directly.");
 4709|   318k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   318k|                  "\n"
 4711|   318k|                  "Unsupported range type given as input to a scanning "
 4712|   318k|                  "function.\n"
 4713|   318k|                  "In order to be scannable, a range needs to satisfy "
 4714|   318k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   318k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   318k|                  "\n"
 4717|   318k|                  "Unsupported range type given as input to a scanning "
 4718|   318k|                  "function.\n"
 4719|   318k|                  "A range needs to model forward_range and have a valid "
 4720|   318k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   318k|                  "Examples of scannable ranges are std::string, "
 4722|   318k|                  "std::string_view, "
 4723|   318k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   318k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   318k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   318k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|   318k|{
 4620|   318k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|   318k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|   318k|    }
 4623|   318k|    else {
 4624|   318k|        return invalid_char_type{};
 4625|   318k|    }
 4626|   318k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   318k|    {
 2826|   318k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   318k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   318k|    {
 2807|   318k|        return t.data();
 2808|   318k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3201|   318k|    {
 3202|   318k|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 1.82k, False: 316k]
  ------------------
 3203|   318k|                   ? nullptr
 3204|   318k|                   : std::addressof(*ranges::begin(derived()));
 3205|   318k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   318k|    {
 2976|   318k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   318k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   318k|    {
 2949|   318k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   318k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|  1.22M|    {
 3310|  1.22M|        return m_iterator == m_sentinel;
 3311|  1.22M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3155|   635k|    {
 3156|   635k|        return static_cast<const D&>(*this);
 3157|   635k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   616k|    {
 2695|   616k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   616k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   616k|    {
 2676|   616k|        return decay_copy(t.begin());
 2677|   616k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  3.48M|    {
 3301|  3.48M|        return m_iterator;
 3302|  3.48M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|   318k|    {
 2901|   318k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|   318k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|   318k|    {
 2867|   318k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|   318k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|  38.0M|{
 1920|  38.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  38.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  38.0M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|  1.22M|    {
 3317|  1.22M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  1.22M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|  76.0M|    {
 1569|  76.0M|        return has_value();
 1570|  76.0M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   152M|    {
  481|   152M|        return m_has_value;
  482|   152M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|  86.6k|    {
 1575|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  86.6k|        return this->get_unexpected().error();
 1577|  86.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  86.6k|    {
  464|  86.6k|        return m_unexpected;
  465|  86.6k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|   653k|    {
  357|   653k|        return m_unexpected;
  358|   653k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|   333k|    {
  343|   333k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   333k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   333k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  19.2k|    {
 1447|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  19.2k|    {
  443|  19.2k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   380k|    {
  352|   380k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   380k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   380k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   318k|    {
 1148|   318k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|   299k|{
 5884|   299k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|   299k|                      ranges::iterator_t<SourceRange>>) {
 5886|   299k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|   299k|    }
 5888|   299k|    else {
 5889|   299k|        auto it = ranges::begin(source);
 5890|   299k|        while (n > 0) {
 5891|   299k|            --n;
 5892|   299k|            ++it;
 5893|   299k|        }
 5894|   299k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|   299k|    }
 5896|   299k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  1.20M|    {
 2695|  1.20M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  1.20M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  1.20M|    {
 2676|  1.20M|        return decay_copy(t.begin());
 2677|  1.20M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5870|   299k|{
 5871|   299k|    return ranges::end(source);
 5872|   299k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   299k|    {
 2752|   299k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   299k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   299k|    {
 2734|   299k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   299k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  1.89M|    {
 3305|  1.89M|        return m_sentinel;
 3306|  1.89M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|  75.9M|    {
 1624|  75.9M|        return value();
 1625|  75.9M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|  75.9M|    {
 1598|  75.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  75.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  75.9M|        return this->get_value();
 1600|  75.9M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  75.9M|    {
  447|  75.9M|        return m_value;
  448|  75.9M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   299k|    {
 1401|   299k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|   299k|    {
  433|   299k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7935|   128k|    {
 7936|   128k|        return m_str;
 7937|   128k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   259k|    {
 5387|   259k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|   259k|    {
 5340|   259k|        return m_argptrs;
 5341|   259k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|   387k|    {
 5439|   387k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|   128k|{
 8781|   128k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 119k]
  |  |  ------------------
  ------------------
 8782|  8.89k|        return unexpected(result.error());
 8783|  8.89k|    }
 8784|   119k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   119k|    static_cast<    \
  |  |  929|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   119k|    static_cast<    \
  |  |  929|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   128k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|   318k|    {
 1569|   318k|        return has_value();
 1570|   318k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   637k|    {
  481|   637k|        return m_has_value;
  482|   637k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|  19.2k|    {
 1575|  19.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  19.2k|        return this->get_unexpected().error();
 1577|  19.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  19.2k|    {
  464|  19.2k|        return m_unexpected;
  465|  19.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  9.63k|    {
 1447|  9.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  9.63k|    {
  622|  9.63k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  9.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  9.63k|    {
  685|  9.63k|        scn::detail::construct_at(unexpected_ptr(),
  686|  9.63k|                                  std::forward<Args>(args)...);
  687|  9.63k|        m_has_value = false;
  688|  9.63k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  57.7k|{
  388|  57.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  57.7k|        T(std::forward<Args>(args)...);
  390|  57.7k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  19.2k|    {
  714|  19.2k|        return reinterpret_cast<unexpected<E>*>(
  715|  19.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  19.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  19.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   159k|    {
 1148|   159k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|   239k|    {
 1624|   239k|        return value();
 1625|   239k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   299k|    {
 1598|   299k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   299k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   299k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   299k|        return this->get_value();
 1600|   299k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|   299k|    {
  447|   299k|        return m_value;
  448|   299k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|   149k|    {
 5791|   149k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|   299k|    {
 5642|   299k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|   301k|    {
 5577|   301k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|   149k|    {
 1401|   149k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|   149k|    {
  612|   149k|        construct(std::forward<Args>(args)...);
  613|   149k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|   149k|    {
  678|   149k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|   149k|        m_has_value = true;
  680|   149k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|   149k|{
  388|   149k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|   149k|        T(std::forward<Args>(args)...);
  390|   149k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|   149k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|   449k|    {
  702|   449k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   449k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|   449k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|   299k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|   259k|    {
 5335|   259k|        return m_args;
 5336|   259k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|   259k|    ~scan_arg_store() = default;
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   319k|    {
 2752|   319k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   319k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   319k|    {
 2734|   319k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   319k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|  2.09M|    {
 3287|  2.09M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|   387k|{
 7652|   387k|    return s;
 7653|   387k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|   387k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   128k|    {
 7932|   128k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1568|   159k|    {
 1569|   159k|        return has_value();
 1570|   159k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|   468k|    {
  671|   468k|        return m_has_value;
  672|   468k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1643|   149k|    {
 1644|   149k|        return &value();
 1645|   149k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1597|   149k|    {
 1598|   149k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   149k|        return this->get_value();
 1600|   149k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|   149k|    {
  637|   149k|        return *value_ptr();
  638|   149k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5658|   299k|    {
 5659|   299k|        return ranges::begin(m_range);
 5660|   299k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|   159k|    {
  627|   159k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 149k, False: 9.63k]
  ------------------
  628|   149k|            destroy_value();
  629|   149k|        }
  630|  9.63k|        else {
  631|  9.63k|            destroy_unexpected();
  632|  9.63k|        }
  633|   159k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|   149k|    {
  692|   149k|        scn::detail::destroy_at(value_ptr());
  693|   149k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|   149k|{
  394|   149k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|   149k|        for (auto& elem : *p) {
  396|   149k|            scn::detail::destroy_at(&elem);
  397|   149k|        }
  398|   149k|    }
  399|   149k|    else {
  400|   149k|        p->~T();
  401|   149k|    }
  402|   149k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  9.63k|    {
  696|  9.63k|        scn::detail::destroy_at(unexpected_ptr());
  697|  9.63k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  57.7k|{
  394|  57.7k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  57.7k|        for (auto& elem : *p) {
  396|  57.7k|            scn::detail::destroy_at(&elem);
  397|  57.7k|        }
  398|  57.7k|    }
  399|  57.7k|    else {
  400|  57.7k|        p->~T();
  401|  57.7k|    }
  402|  57.7k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8894|  64.4k|{
 8895|  64.4k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  64.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  64.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  64.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  64.4k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|   128k|{
 8633|   128k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   128k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|   128k|{
 8568|   128k|#if !SCN_DISABLE_LOCALE
 8569|   128k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   128k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   128k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   128k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   128k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 119k]
  |  |  ------------------
  ------------------
 8576|  8.89k|        return unexpected(result.error());
 8577|  8.89k|    }
 8578|   119k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   128k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8933|  30.5k|{
 8934|  30.5k|    T value;
 8935|  30.5k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  30.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 741, False: 29.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    741|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    741|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    741|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    741|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    741|    }                                                  \
  |  |  |  | 3642|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  29.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  30.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5115|  61.4k|{
 5116|  61.4k|    check_scan_arg_types<T>();
 5117|       |
 5118|  61.4k|    basic_scan_arg<Context> arg;
 5119|  61.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  61.4k|    arg.m_value = make_value<Context>(value);
 5121|  61.4k|    return arg;
 5122|  61.4k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|   479k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|  57.0M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|  61.0k|{
 8646|  61.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  61.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|  61.0k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  61.0k|{
 8592|  61.0k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  61.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  61.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 59.5k]
  |  |  ------------------
  ------------------
 8596|  1.48k|        return unexpected(result.error());
 8597|  1.48k|    }
 8598|  59.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  61.0k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  59.5k|    {
 1634|  59.5k|        return std::move(value());
 1635|  59.5k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8827|  64.4k|{
 8828|  64.4k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  64.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  64.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  64.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  64.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5356|   128k|{
 5357|   128k|    detail::check_scan_arg_types<Args...>();
 5358|   128k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   128k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5095|   159k|{
 5096|   159k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|   159k|                  "Scan argument types must be default constructible");
 5098|   159k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|   159k|                  "Scan argument types must be Destructible");
 5100|   159k|    static_assert(
 5101|   159k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|   159k|        "Scan argument types must not be references");
 5103|   159k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5309|   128k|    {
 5310|   128k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|   128k|    {
 5321|   128k|        return {detail::make_arg<
 5322|   128k|            kind, Context,
 5323|   128k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   128k|                                 typename Context::char_type>::value>(args)...};
 5325|   128k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5130|   128k|{
 5131|   128k|    return make_value<Context>(value).ref_value;
 5132|   128k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5080|   159k|{
 5081|   159k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   159k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   159k|                                  needs_context_tag>) {
 5085|   159k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   159k|    }
 5087|   159k|    else {
 5088|   159k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   159k|            value, context_tag<Context>{}));
 5090|   159k|    }
 5091|   159k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4919|   159k|    {                                                                        \
 4920|   159k|        return val;                                                          \
 4921|   159k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5049|   159k|{
 5050|   159k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|   159k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|   159k|    constexpr bool scannable_char =
 5054|   159k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|   159k|    static_assert(scannable_char,
 5056|   159k|                  "Cannot scan an argument of an unsupported character "
 5057|   159k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|   159k|    constexpr bool scannable_const =
 5060|   159k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|   159k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|   159k|    constexpr bool scannable_disabled =
 5064|   159k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|   159k|    static_assert(scannable_disabled,
 5066|   159k|                  "Cannot scan an argument that has been disabled by "
 5067|   159k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|   159k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|   159k|    static_assert(
 5071|   159k|        scannable,
 5072|   159k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|   159k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|   159k|    return arg_value{arg};
 5076|   159k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4862|   159k|    {
 4863|   159k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7935|   128k|    {
 7936|   128k|        return m_str;
 7937|   128k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   128k|    {
 5387|   128k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5339|   128k|    {
 5340|   128k|        return m_argptrs;
 5341|   128k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|   128k|{
 8781|   128k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 119k]
  |  |  ------------------
  ------------------
 8782|  8.89k|        return unexpected(result.error());
 8783|  8.89k|    }
 8784|   119k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   119k|    static_cast<    \
  |  |  929|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   119k|    static_cast<    \
  |  |  929|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   128k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  9.63k|    {
 1447|  9.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  9.63k|    {
  443|  9.63k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   159k|    {
 1148|   159k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|   149k|    {
 5791|   149k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|   149k|    {
 5577|   149k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|   149k|    {
 1401|   149k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|   149k|    {
  433|   149k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5334|   128k|    {
 5335|   128k|        return m_args;
 5336|   128k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   128k|    {
 7932|   128k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1568|   159k|    {
 1569|   159k|        return has_value();
 1570|   159k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   309k|    {
  481|   309k|        return m_has_value;
  482|   309k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1643|   149k|    {
 1644|   149k|        return &value();
 1645|   149k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1597|   149k|    {
 1598|   149k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   149k|        return this->get_value();
 1600|   149k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   149k|    {
  447|   149k|        return m_value;
  448|   149k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8894|  64.4k|{
 8895|  64.4k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  64.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  64.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  64.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  64.4k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8933|  30.5k|{
 8934|  30.5k|    T value;
 8935|  30.5k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  30.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 741, False: 29.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    741|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    741|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    741|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    741|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    741|    }                                                  \
  |  |  |  | 3642|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  29.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.7k|    static_cast<    \
  |  |  929|  29.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  30.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5115|  30.5k|{
 5116|  30.5k|    check_scan_arg_types<T>();
 5117|       |
 5118|  30.5k|    basic_scan_arg<Context> arg;
 5119|  30.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  30.5k|    arg.m_value = make_value<Context>(value);
 5121|  30.5k|    return arg;
 5122|  30.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  9.63k|    {
 2695|  9.63k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  9.63k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  9.63k|    {
 2676|  9.63k|        return decay_copy(t.begin());
 2677|  9.63k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1919|  2.79M|{
 1920|  2.79M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  2.79M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8827|  65.1k|{
 8828|  65.1k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  65.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  65.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  65.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  65.1k|    static_cast<    \
  |  |  929|  65.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  65.1k|    static_cast<    \
  |  |  929|  65.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  65.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  65.1k|{
 8615|  65.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  65.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  65.1k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|  65.1k|{
 8552|  65.1k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  65.1k|    auto result = vscan_impl(buffer, format, args);
 8555|  65.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.44k, False: 60.6k]
  |  |  ------------------
  ------------------
 8556|  4.44k|        return unexpected(result.error());
 8557|  4.44k|    }
 8558|  60.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  60.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  65.1k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4680|   161k|{
 4681|   161k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   161k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   161k|                  "\n"
 4685|   161k|                  "Unsupported range type given as input to a scanning "
 4686|   161k|                  "function.\n"
 4687|   161k|                  "A range needs to have a character type (value type) "
 4688|   161k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   161k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   161k|                  "to be included.\n"
 4691|   161k|                  "See the scnlib documentation for more details.");
 4692|   161k|    static_assert(
 4693|   161k|        !std::is_same_v<T, custom_char_traits>,
 4694|   161k|        "\n"
 4695|   161k|        "Unsupported range type given as input to a scanning "
 4696|   161k|        "function.\n"
 4697|   161k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   161k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   161k|        "not supported.");
 4700|   161k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   161k|                  "\n"
 4702|   161k|                  "Unsupported range type given as input to a scanning "
 4703|   161k|                  "function.\n"
 4704|   161k|                  "file_marker_found cannot be used as an "
 4705|   161k|                  "source range type to scn::scan.\n"
 4706|   161k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   161k|                  "and do not provide an explicit source range, "
 4708|   161k|                  "or use scn::scan with a FILE* directly.");
 4709|   161k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   161k|                  "\n"
 4711|   161k|                  "Unsupported range type given as input to a scanning "
 4712|   161k|                  "function.\n"
 4713|   161k|                  "In order to be scannable, a range needs to satisfy "
 4714|   161k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   161k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   161k|                  "\n"
 4717|   161k|                  "Unsupported range type given as input to a scanning "
 4718|   161k|                  "function.\n"
 4719|   161k|                  "A range needs to model forward_range and have a valid "
 4720|   161k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   161k|                  "Examples of scannable ranges are std::string, "
 4722|   161k|                  "std::string_view, "
 4723|   161k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   161k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   161k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   161k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|   161k|{
 4651|   161k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|   161k|        return file_marker_found{};
 4653|   161k|    }
 4654|   161k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|   161k|        if constexpr (ranges::range<Range>) {
 4656|   161k|            return insufficient_range{};
 4657|   161k|        }
 4658|   161k|        else {
 4659|   161k|            return invalid_input_range{};
 4660|   161k|        }
 4661|   161k|    }
 4662|   161k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|   161k|        return invalid_char_type{};
 4664|   161k|    }
 4665|   161k|    else {
 4666|   161k|        return make_forward_scan_buffer(r);
 4667|   161k|    }
 4668|   161k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4484|   161k|{
 4485|   161k|    return basic_scan_forward_buffer_impl(range);
 4486|   161k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|   161k|    {
 4378|   161k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4352|   161k|    {
 4353|   161k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4121|   161k|    {
 4122|   161k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4036|   161k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   312k|    {
 2695|   312k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   312k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   312k|    {
 2676|   312k|        return decay_copy(t.begin());
 2677|   312k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3300|   464k|    {
 3301|   464k|        return m_iterator;
 3302|   464k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4381|  2.00M|    {
 4382|  2.00M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 15.4k, False: 1.99M]
  ------------------
 4383|  15.4k|            return false;
 4384|  15.4k|        }
 4385|  1.99M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 1.83M, False: 155k]
  ------------------
 4386|  1.83M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|  1.83M|                                          this->m_current_view.begin(),
 4388|  1.83M|                                          this->m_current_view.end());
 4389|  1.83M|        }
 4390|  1.99M|        m_latest = *m_cursor;
 4391|  1.99M|        ++m_cursor;
 4392|  1.99M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|  1.99M|        return true;
 4394|  2.00M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.00M|    {
 2752|  2.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.00M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.00M|    {
 2734|  2.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3304|  2.15M|    {
 3305|  2.15M|        return m_sentinel;
 3306|  2.15M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4041|   161k|    {
 4042|   161k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   161k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|   161k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|  9.63k|    {
 1447|  9.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|  9.63k|    {
  443|  9.63k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   161k|    {
 1148|   161k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|   151k|{
 5884|   151k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|   151k|                      ranges::iterator_t<SourceRange>>) {
 5886|   151k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|   151k|    }
 5888|   151k|    else {
 5889|   151k|        auto it = ranges::begin(source);
 5890|   151k|        while (n > 0) {
 5891|   151k|            --n;
 5892|   151k|            ++it;
 5893|   151k|        }
 5894|   151k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|   151k|    }
 5896|   151k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   151k|    {
 2695|   151k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   151k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   151k|    {
 2676|   151k|        return decay_copy(t.begin());
 2677|   151k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5870|   151k|{
 5871|   151k|    return ranges::end(source);
 5872|   151k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   151k|    {
 2752|   151k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   151k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   151k|    {
 2734|   151k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   151k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|   151k|    {
 1401|   151k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|   151k|    {
  433|   151k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7935|   130k|    {
 7936|   130k|        return m_str;
 7937|   130k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8780|   130k|{
 8781|   130k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 121k]
  |  |  ------------------
  ------------------
 8782|  8.89k|        return unexpected(result.error());
 8783|  8.89k|    }
 8784|   121k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   130k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1568|   161k|    {
 1569|   161k|        return has_value();
 1570|   161k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   322k|    {
  481|   322k|        return m_has_value;
  482|   322k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1574|  9.63k|    {
 1575|  9.63k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  9.63k|        return this->get_unexpected().error();
 1577|  9.63k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  9.63k|    {
  464|  9.63k|        return m_unexpected;
  465|  9.63k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1446|  9.63k|    {
 1447|  9.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  621|  9.63k|    {
  622|  9.63k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  9.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  684|  9.63k|    {
  685|  9.63k|        scn::detail::construct_at(unexpected_ptr(),
  686|  9.63k|                                  std::forward<Args>(args)...);
  687|  9.63k|        m_has_value = false;
  688|  9.63k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  19.2k|    {
  714|  19.2k|        return reinterpret_cast<unexpected<E>*>(
  715|  19.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  19.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  19.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   161k|    {
 1148|   161k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|   121k|    {
 1624|   121k|        return value();
 1625|   121k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|   151k|    {
 1598|   151k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   151k|        return this->get_value();
 1600|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|   151k|    {
  447|   151k|        return m_value;
  448|   151k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5790|   151k|    {
 5791|   151k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5641|   151k|    {
 5642|   151k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1400|   151k|    {
 1401|   151k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  611|   151k|    {
  612|   151k|        construct(std::forward<Args>(args)...);
  613|   151k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  677|   151k|    {
  678|   151k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|   151k|        m_has_value = true;
  680|   151k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  387|   151k|{
  388|   151k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|   151k|        T(std::forward<Args>(args)...);
  390|   151k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5782|   151k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|   454k|    {
  702|   454k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   454k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|   454k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5786|   303k|    ~scan_result() = default;
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   161k|    {
 2752|   161k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   161k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   161k|    {
 2734|   161k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   161k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3286|   312k|    {
 3287|   312k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   130k|    {
 7932|   130k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1568|   161k|    {
 1569|   161k|        return has_value();
 1570|   161k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|   473k|    {
  671|   473k|        return m_has_value;
  672|   473k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1643|   151k|    {
 1644|   151k|        return &value();
 1645|   151k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1597|   151k|    {
 1598|   151k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   151k|        return this->get_value();
 1600|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|   151k|    {
  637|   151k|        return *value_ptr();
  638|   151k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5658|   151k|    {
 5659|   151k|        return ranges::begin(m_range);
 5660|   151k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|   161k|    {
  627|   161k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 151k, False: 9.63k]
  ------------------
  628|   151k|            destroy_value();
  629|   151k|        }
  630|  9.63k|        else {
  631|  9.63k|            destroy_unexpected();
  632|  9.63k|        }
  633|   161k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|   151k|    {
  692|   151k|        scn::detail::destroy_at(value_ptr());
  693|   151k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  393|   151k|{
  394|   151k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|   151k|        for (auto& elem : *p) {
  396|   151k|            scn::detail::destroy_at(&elem);
  397|   151k|        }
  398|   151k|    }
  399|   151k|    else {
  400|   151k|        p->~T();
  401|   151k|    }
  402|   151k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  9.63k|    {
  696|  9.63k|        scn::detail::destroy_at(unexpected_ptr());
  697|  9.63k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8894|  65.1k|{
 8895|  65.1k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  65.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  65.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  65.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  65.1k|    static_cast<    \
  |  |  929|  65.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  65.1k|    static_cast<    \
  |  |  929|  65.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  65.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  65.1k|{
 8633|  65.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  65.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  65.1k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|  65.1k|{
 8568|  65.1k|#if !SCN_DISABLE_LOCALE
 8569|  65.1k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  65.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  65.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  65.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  65.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.44k, False: 60.6k]
  |  |  ------------------
  ------------------
 8576|  4.44k|        return unexpected(result.error());
 8577|  4.44k|    }
 8578|  60.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  60.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  65.1k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8933|  30.9k|{
 8934|  30.9k|    T value;
 8935|  30.9k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  30.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  30.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  30.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  30.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 741, False: 30.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    741|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    741|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    741|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    741|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    741|    }                                                  \
  |  |  |  | 3642|  30.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  30.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.1k|    static_cast<    \
  |  |  929|  30.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.1k|    static_cast<    \
  |  |  929|  30.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  30.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|  30.9k|{
 8646|  30.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|  30.9k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  30.9k|{
 8592|  30.9k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  30.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  30.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 741, False: 30.1k]
  |  |  ------------------
  ------------------
 8596|    741|        return unexpected(result.error());
 8597|    741|    }
 8598|  30.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  30.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|  30.1k|    {
 1634|  30.1k|        return std::move(value());
 1635|  30.1k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  40.0k|    {
 2695|  40.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  40.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  40.0k|    {
 2676|  40.0k|        return decay_copy(t.begin());
 2677|  40.0k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|   226M|{
 1920|   226M|    return SCN_FWD(t);
  ------------------
  |  |  930|   226M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   226M|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  30.1M|{
 5357|  30.1M|    detail::check_scan_arg_types<Args...>();
 5358|  30.1M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  30.1M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5095|  37.7M|{
 5096|  37.7M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  37.7M|                  "Scan argument types must be default constructible");
 5098|  37.7M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  37.7M|                  "Scan argument types must be Destructible");
 5100|  37.7M|    static_assert(
 5101|  37.7M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  37.7M|        "Scan argument types must not be references");
 5103|  37.7M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  30.1M|    {
 5310|  30.1M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  30.1M|    {
 5321|  30.1M|        return {detail::make_arg<
 5322|  30.1M|            kind, Context,
 5323|  30.1M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  30.1M|                                 typename Context::char_type>::value>(args)...};
 5325|  30.1M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  30.1M|{
 5131|  30.1M|    return make_value<Context>(value).ref_value;
 5132|  30.1M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  37.7M|{
 5081|  37.7M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  37.7M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  37.7M|                                  needs_context_tag>) {
 5085|  37.7M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  37.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  37.7M|    }
 5087|  37.7M|    else {
 5088|  37.7M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  37.7M|            value, context_tag<Context>{}));
 5090|  37.7M|    }
 5091|  37.7M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  37.7M|    {                                                                        \
 4920|  37.7M|        return val;                                                          \
 4921|  37.7M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5049|  37.7M|{
 5050|  37.7M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  37.7M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  37.7M|    constexpr bool scannable_char =
 5054|  37.7M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  37.7M|    static_assert(scannable_char,
 5056|  37.7M|                  "Cannot scan an argument of an unsupported character "
 5057|  37.7M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  37.7M|    constexpr bool scannable_const =
 5060|  37.7M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  37.7M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  37.7M|    constexpr bool scannable_disabled =
 5064|  37.7M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  37.7M|    static_assert(scannable_disabled,
 5066|  37.7M|                  "Cannot scan an argument that has been disabled by "
 5067|  37.7M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  37.7M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  37.7M|    static_assert(
 5071|  37.7M|        scannable,
 5072|  37.7M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  37.7M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  37.7M|    return arg_value{arg};
 5076|  37.7M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4862|  37.7M|    {
 4863|  37.7M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|  15.0M|{
 8552|  15.0M|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  15.0M|    auto result = vscan_impl(buffer, format, args);
 8555|  15.0M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  15.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.7k, False: 15.0M]
  |  |  ------------------
  ------------------
 8556|  17.7k|        return unexpected(result.error());
 8557|  17.7k|    }
 8558|  15.0M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  15.0M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4680|  37.7M|{
 4681|  37.7M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  37.7M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  37.7M|                  "\n"
 4685|  37.7M|                  "Unsupported range type given as input to a scanning "
 4686|  37.7M|                  "function.\n"
 4687|  37.7M|                  "A range needs to have a character type (value type) "
 4688|  37.7M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  37.7M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  37.7M|                  "to be included.\n"
 4691|  37.7M|                  "See the scnlib documentation for more details.");
 4692|  37.7M|    static_assert(
 4693|  37.7M|        !std::is_same_v<T, custom_char_traits>,
 4694|  37.7M|        "\n"
 4695|  37.7M|        "Unsupported range type given as input to a scanning "
 4696|  37.7M|        "function.\n"
 4697|  37.7M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  37.7M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  37.7M|        "not supported.");
 4700|  37.7M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  37.7M|                  "\n"
 4702|  37.7M|                  "Unsupported range type given as input to a scanning "
 4703|  37.7M|                  "function.\n"
 4704|  37.7M|                  "file_marker_found cannot be used as an "
 4705|  37.7M|                  "source range type to scn::scan.\n"
 4706|  37.7M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  37.7M|                  "and do not provide an explicit source range, "
 4708|  37.7M|                  "or use scn::scan with a FILE* directly.");
 4709|  37.7M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  37.7M|                  "\n"
 4711|  37.7M|                  "Unsupported range type given as input to a scanning "
 4712|  37.7M|                  "function.\n"
 4713|  37.7M|                  "In order to be scannable, a range needs to satisfy "
 4714|  37.7M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  37.7M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  37.7M|                  "\n"
 4717|  37.7M|                  "Unsupported range type given as input to a scanning "
 4718|  37.7M|                  "function.\n"
 4719|  37.7M|                  "A range needs to model forward_range and have a valid "
 4720|  37.7M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  37.7M|                  "Examples of scannable ranges are std::string, "
 4722|  37.7M|                  "std::string_view, "
 4723|  37.7M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  37.7M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  37.7M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  37.7M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|  37.7M|{
 4620|  37.7M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|  37.7M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|  37.7M|    }
 4623|  37.7M|    else {
 4624|  37.7M|        return invalid_char_type{};
 4625|  37.7M|    }
 4626|  37.7M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  37.7M|    {
 2826|  37.7M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  37.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  37.7M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  37.7M|    {
 2807|  37.7M|        return t.data();
 2808|  37.7M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3201|  37.7M|    {
 3202|  37.7M|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 4.22k, False: 37.7M]
  ------------------
 3203|  37.7M|                   ? nullptr
 3204|  37.7M|                   : std::addressof(*ranges::begin(derived()));
 3205|  37.7M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  37.7M|    {
 2976|  37.7M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  37.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  37.7M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  37.7M|    {
 2949|  37.7M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  37.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  37.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|  75.4M|    {
 3310|  75.4M|        return m_iterator == m_sentinel;
 3311|  75.4M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3155|  75.4M|    {
 3156|  75.4M|        return static_cast<const D&>(*this);
 3157|  75.4M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  75.4M|    {
 2695|  75.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  75.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  75.4M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  75.4M|    {
 2676|  75.4M|        return decay_copy(t.begin());
 2677|  75.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|  1.72G|    {
 3301|  1.72G|        return m_iterator;
 3302|  1.72G|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|  37.7M|    {
 2901|  37.7M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|  37.7M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|  37.7M|    {
 2867|  37.7M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  37.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|  37.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|  75.4M|    {
 3317|  75.4M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  75.4M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  38.5k|    {
 1447|  38.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  38.5k|    {
  443|  38.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  37.7M|    {
 1148|  37.7M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|  37.6M|{
 5884|  37.6M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  37.6M|                      ranges::iterator_t<SourceRange>>) {
 5886|  37.6M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  37.6M|    }
 5888|  37.6M|    else {
 5889|  37.6M|        auto it = ranges::begin(source);
 5890|  37.6M|        while (n > 0) {
 5891|  37.6M|            --n;
 5892|  37.6M|            ++it;
 5893|  37.6M|        }
 5894|  37.6M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  37.6M|    }
 5896|  37.6M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  75.3M|    {
 2695|  75.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  75.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  75.3M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  75.3M|    {
 2676|  75.3M|        return decay_copy(t.begin());
 2677|  75.3M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5870|  37.6M|{
 5871|  37.6M|    return ranges::end(source);
 5872|  37.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  37.6M|    {
 2752|  37.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  37.6M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  37.6M|    {
 2734|  37.6M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  37.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  37.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|  1.56G|    {
 3305|  1.56G|        return m_sentinel;
 3306|  1.56G|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  37.6M|    {
 1401|  37.6M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  37.6M|    {
  433|  37.6M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7935|  15.0M|    {
 7936|  15.0M|        return m_str;
 7937|  15.0M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  30.1M|    {
 5387|  30.1M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  30.1M|    {
 5340|  30.1M|        return m_argptrs;
 5341|  30.1M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|  45.2M|    {
 5439|  45.2M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  15.0M|{
 8781|  15.0M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  15.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.7k, False: 15.0M]
  |  |  ------------------
  ------------------
 8782|  17.7k|        return unexpected(result.error());
 8783|  17.7k|    }
 8784|  15.0M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0M|    static_cast<    \
  |  |  929|  15.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0M|    static_cast<    \
  |  |  929|  15.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  15.0M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|  37.7M|    {
 1569|  37.7M|        return has_value();
 1570|  37.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  75.4M|    {
  481|  75.4M|        return m_has_value;
  482|  75.4M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|  38.5k|    {
 1575|  38.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  38.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  38.5k|        return this->get_unexpected().error();
 1577|  38.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  38.5k|    {
  464|  38.5k|        return m_unexpected;
  465|  38.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  19.2k|    {
 1447|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  19.2k|    {
  622|  19.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  19.2k|    {
  685|  19.2k|        scn::detail::construct_at(unexpected_ptr(),
  686|  19.2k|                                  std::forward<Args>(args)...);
  687|  19.2k|        m_has_value = false;
  688|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  38.5k|    {
  714|  38.5k|        return reinterpret_cast<unexpected<E>*>(
  715|  38.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  38.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  38.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.8M|    {
 1148|  18.8M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  30.1M|    {
 1624|  30.1M|        return value();
 1625|  30.1M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  37.6M|    {
 1598|  37.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  37.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  37.6M|        return this->get_value();
 1600|  37.6M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  37.6M|    {
  447|  37.6M|        return m_value;
  448|  37.6M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|  18.8M|    {
 5791|  18.8M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5641|  37.6M|    {
 5642|  37.6M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|  37.6M|    {
 5577|  37.6M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|  18.8M|    {
 1401|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|  18.8M|    {
  612|  18.8M|        construct(std::forward<Args>(args)...);
  613|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|  18.8M|    {
  678|  18.8M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|  18.8M|        m_has_value = true;
  680|  18.8M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|  18.8M|{
  388|  18.8M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  18.8M|        T(std::forward<Args>(args)...);
  390|  18.8M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|  18.8M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  56.5M|    {
  702|  56.5M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  56.5M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  56.5M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|  37.6M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  30.1M|    {
 5335|  30.1M|        return m_args;
 5336|  30.1M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  30.1M|    ~scan_arg_store() = default;
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  37.7M|    {
 2752|  37.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  37.7M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  37.7M|    {
 2734|  37.7M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  37.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  37.7M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|   725M|    {
 3287|   725M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|  45.2M|{
 7657|  45.2M|    return s;
 7658|  45.2M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|  45.2M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  15.0M|    {
 7932|  15.0M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1568|  18.8M|    {
 1569|  18.8M|        return has_value();
 1570|  18.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  56.5M|    {
  671|  56.5M|        return m_has_value;
  672|  56.5M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1643|  18.8M|    {
 1644|  18.8M|        return &value();
 1645|  18.8M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1597|  18.8M|    {
 1598|  18.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  18.8M|        return this->get_value();
 1600|  18.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|  18.8M|    {
  637|  18.8M|        return *value_ptr();
  638|  18.8M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5658|  37.6M|    {
 5659|  37.6M|        return ranges::begin(m_range);
 5660|  37.6M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  18.8M|    {
  627|  18.8M|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 18.8M, False: 19.2k]
  ------------------
  628|  18.8M|            destroy_value();
  629|  18.8M|        }
  630|  19.2k|        else {
  631|  19.2k|            destroy_unexpected();
  632|  19.2k|        }
  633|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|  18.8M|    {
  692|  18.8M|        scn::detail::destroy_at(value_ptr());
  693|  18.8M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|  18.8M|{
  394|  18.8M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  18.8M|        for (auto& elem : *p) {
  396|  18.8M|            scn::detail::destroy_at(&elem);
  397|  18.8M|        }
  398|  18.8M|    }
  399|  18.8M|    else {
  400|  18.8M|        p->~T();
  401|  18.8M|    }
  402|  18.8M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  19.2k|    {
  696|  19.2k|        scn::detail::destroy_at(unexpected_ptr());
  697|  19.2k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|  15.0M|{
 8568|  15.0M|#if !SCN_DISABLE_LOCALE
 8569|  15.0M|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  15.0M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  15.0M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  15.0M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  15.0M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  15.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.7k, False: 15.0M]
  |  |  ------------------
  ------------------
 8576|  17.7k|        return unexpected(result.error());
 8577|  17.7k|    }
 8578|  15.0M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  15.0M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5115|  7.54M|{
 5116|  7.54M|    check_scan_arg_types<T>();
 5117|       |
 5118|  7.54M|    basic_scan_arg<Context> arg;
 5119|  7.54M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  7.54M|    arg.m_value = make_value<Context>(value);
 5121|  7.54M|    return arg;
 5122|  7.54M|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|  56.5M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  7.54M|{
 8592|  7.54M|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  7.54M|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  7.54M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 7.53M]
  |  |  ------------------
  ------------------
 8596|  2.96k|        return unexpected(result.error());
 8597|  2.96k|    }
 8598|  7.53M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  7.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  7.54M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  7.53M|    {
 1634|  7.53M|        return std::move(value());
 1635|  7.53M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5356|  15.0M|{
 5357|  15.0M|    detail::check_scan_arg_types<Args...>();
 5358|  15.0M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  15.0M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5095|  18.8M|{
 5096|  18.8M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  18.8M|                  "Scan argument types must be default constructible");
 5098|  18.8M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  18.8M|                  "Scan argument types must be Destructible");
 5100|  18.8M|    static_assert(
 5101|  18.8M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  18.8M|        "Scan argument types must not be references");
 5103|  18.8M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5309|  15.0M|    {
 5310|  15.0M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  15.0M|    {
 5321|  15.0M|        return {detail::make_arg<
 5322|  15.0M|            kind, Context,
 5323|  15.0M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  15.0M|                                 typename Context::char_type>::value>(args)...};
 5325|  15.0M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5130|  15.0M|{
 5131|  15.0M|    return make_value<Context>(value).ref_value;
 5132|  15.0M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5080|  18.8M|{
 5081|  18.8M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.8M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.8M|                                  needs_context_tag>) {
 5085|  18.8M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.8M|    }
 5087|  18.8M|    else {
 5088|  18.8M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.8M|            value, context_tag<Context>{}));
 5090|  18.8M|    }
 5091|  18.8M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4919|  18.8M|    {                                                                        \
 4920|  18.8M|        return val;                                                          \
 4921|  18.8M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5049|  18.8M|{
 5050|  18.8M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  18.8M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  18.8M|    constexpr bool scannable_char =
 5054|  18.8M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  18.8M|    static_assert(scannable_char,
 5056|  18.8M|                  "Cannot scan an argument of an unsupported character "
 5057|  18.8M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  18.8M|    constexpr bool scannable_const =
 5060|  18.8M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  18.8M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  18.8M|    constexpr bool scannable_disabled =
 5064|  18.8M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  18.8M|    static_assert(scannable_disabled,
 5066|  18.8M|                  "Cannot scan an argument that has been disabled by "
 5067|  18.8M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  18.8M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  18.8M|    static_assert(
 5071|  18.8M|        scannable,
 5072|  18.8M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  18.8M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  18.8M|    return arg_value{arg};
 5076|  18.8M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4862|  18.8M|    {
 4863|  18.8M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7935|  15.0M|    {
 7936|  15.0M|        return m_str;
 7937|  15.0M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  15.0M|    {
 5387|  15.0M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5339|  15.0M|    {
 5340|  15.0M|        return m_argptrs;
 5341|  15.0M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  15.0M|{
 8781|  15.0M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  15.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.7k, False: 15.0M]
  |  |  ------------------
  ------------------
 8782|  17.7k|        return unexpected(result.error());
 8783|  17.7k|    }
 8784|  15.0M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0M|    static_cast<    \
  |  |  929|  15.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0M|    static_cast<    \
  |  |  929|  15.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  15.0M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  19.2k|    {
 1447|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  19.2k|    {
  443|  19.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.8M|    {
 1148|  18.8M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|  18.8M|    {
 5791|  18.8M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|  18.8M|    {
 5577|  18.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|  18.8M|    {
 1401|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|  18.8M|    {
  433|  18.8M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5334|  15.0M|    {
 5335|  15.0M|        return m_args;
 5336|  15.0M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  15.0M|    {
 7932|  15.0M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1568|  18.8M|    {
 1569|  18.8M|        return has_value();
 1570|  18.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  37.7M|    {
  481|  37.7M|        return m_has_value;
  482|  37.7M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1643|  18.8M|    {
 1644|  18.8M|        return &value();
 1645|  18.8M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1597|  18.8M|    {
 1598|  18.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  18.8M|        return this->get_value();
 1600|  18.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  18.8M|    {
  447|  18.8M|        return m_value;
  448|  18.8M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5115|  3.77M|{
 5116|  3.77M|    check_scan_arg_types<T>();
 5117|       |
 5118|  3.77M|    basic_scan_arg<Context> arg;
 5119|  3.77M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  3.77M|    arg.m_value = make_value<Context>(value);
 5121|  3.77M|    return arg;
 5122|  3.77M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  19.2k|    {
 2695|  19.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  19.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  19.2k|    {
 2676|  19.2k|        return decay_copy(t.begin());
 2677|  19.2k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1919|   309M|{
 1920|   309M|    return SCN_FWD(t);
  ------------------
  |  |  930|   309M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   309M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|  7.54M|{
 8552|  7.54M|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  7.54M|    auto result = vscan_impl(buffer, format, args);
 8555|  7.54M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 7.53M]
  |  |  ------------------
  ------------------
 8556|  8.89k|        return unexpected(result.error());
 8557|  8.89k|    }
 8558|  7.53M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  7.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  7.54M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4680|  18.8M|{
 4681|  18.8M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  18.8M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  18.8M|                  "\n"
 4685|  18.8M|                  "Unsupported range type given as input to a scanning "
 4686|  18.8M|                  "function.\n"
 4687|  18.8M|                  "A range needs to have a character type (value type) "
 4688|  18.8M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  18.8M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  18.8M|                  "to be included.\n"
 4691|  18.8M|                  "See the scnlib documentation for more details.");
 4692|  18.8M|    static_assert(
 4693|  18.8M|        !std::is_same_v<T, custom_char_traits>,
 4694|  18.8M|        "\n"
 4695|  18.8M|        "Unsupported range type given as input to a scanning "
 4696|  18.8M|        "function.\n"
 4697|  18.8M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  18.8M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  18.8M|        "not supported.");
 4700|  18.8M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  18.8M|                  "\n"
 4702|  18.8M|                  "Unsupported range type given as input to a scanning "
 4703|  18.8M|                  "function.\n"
 4704|  18.8M|                  "file_marker_found cannot be used as an "
 4705|  18.8M|                  "source range type to scn::scan.\n"
 4706|  18.8M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  18.8M|                  "and do not provide an explicit source range, "
 4708|  18.8M|                  "or use scn::scan with a FILE* directly.");
 4709|  18.8M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  18.8M|                  "\n"
 4711|  18.8M|                  "Unsupported range type given as input to a scanning "
 4712|  18.8M|                  "function.\n"
 4713|  18.8M|                  "In order to be scannable, a range needs to satisfy "
 4714|  18.8M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  18.8M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  18.8M|                  "\n"
 4717|  18.8M|                  "Unsupported range type given as input to a scanning "
 4718|  18.8M|                  "function.\n"
 4719|  18.8M|                  "A range needs to model forward_range and have a valid "
 4720|  18.8M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  18.8M|                  "Examples of scannable ranges are std::string, "
 4722|  18.8M|                  "std::string_view, "
 4723|  18.8M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  18.8M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  18.8M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  18.8M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|  18.8M|{
 4651|  18.8M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|  18.8M|        return file_marker_found{};
 4653|  18.8M|    }
 4654|  18.8M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|  18.8M|        if constexpr (ranges::range<Range>) {
 4656|  18.8M|            return insufficient_range{};
 4657|  18.8M|        }
 4658|  18.8M|        else {
 4659|  18.8M|            return invalid_input_range{};
 4660|  18.8M|        }
 4661|  18.8M|    }
 4662|  18.8M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|  18.8M|        return invalid_char_type{};
 4664|  18.8M|    }
 4665|  18.8M|    else {
 4666|  18.8M|        return make_forward_scan_buffer(r);
 4667|  18.8M|    }
 4668|  18.8M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4484|  18.8M|{
 4485|  18.8M|    return basic_scan_forward_buffer_impl(range);
 4486|  18.8M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|  18.8M|    {
 4378|  18.8M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4352|  18.8M|    {
 4353|  18.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4121|  18.8M|    {
 4122|  18.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4036|  18.8M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  37.7M|    {
 2695|  37.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  37.7M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  37.7M|    {
 2676|  37.7M|        return decay_copy(t.begin());
 2677|  37.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3300|  56.5M|    {
 3301|  56.5M|        return m_iterator;
 3302|  56.5M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4381|   215M|    {
 4382|   215M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 27.9k, False: 215M]
  ------------------
 4383|  27.9k|            return false;
 4384|  27.9k|        }
 4385|   215M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 196M, False: 18.8M]
  ------------------
 4386|   196M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|   196M|                                          this->m_current_view.begin(),
 4388|   196M|                                          this->m_current_view.end());
 4389|   196M|        }
 4390|   215M|        m_latest = *m_cursor;
 4391|   215M|        ++m_cursor;
 4392|   215M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|   215M|        return true;
 4394|   215M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   215M|    {
 2752|   215M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   215M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   215M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   215M|    {
 2734|   215M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   215M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   215M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3304|   234M|    {
 3305|   234M|        return m_sentinel;
 3306|   234M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4041|  18.8M|    {
 4042|  18.8M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  18.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|  18.8M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|  19.2k|    {
 1447|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|  19.2k|    {
  443|  19.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.8M|    {
 1148|  18.8M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|  18.8M|{
 5884|  18.8M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  18.8M|                      ranges::iterator_t<SourceRange>>) {
 5886|  18.8M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  18.8M|    }
 5888|  18.8M|    else {
 5889|  18.8M|        auto it = ranges::begin(source);
 5890|  18.8M|        while (n > 0) {
 5891|  18.8M|            --n;
 5892|  18.8M|            ++it;
 5893|  18.8M|        }
 5894|  18.8M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  18.8M|    }
 5896|  18.8M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  18.8M|    {
 2695|  18.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  18.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  18.8M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  18.8M|    {
 2676|  18.8M|        return decay_copy(t.begin());
 2677|  18.8M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5870|  18.8M|{
 5871|  18.8M|    return ranges::end(source);
 5872|  18.8M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  18.8M|    {
 2752|  18.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  18.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  18.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  18.8M|    {
 2734|  18.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  18.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  18.8M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|  18.8M|    {
 1401|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  18.8M|    {
  433|  18.8M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7935|  15.0M|    {
 7936|  15.0M|        return m_str;
 7937|  15.0M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8780|  15.0M|{
 8781|  15.0M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  15.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.7k, False: 15.0M]
  |  |  ------------------
  ------------------
 8782|  17.7k|        return unexpected(result.error());
 8783|  17.7k|    }
 8784|  15.0M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0M|    static_cast<    \
  |  |  929|  15.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0M|    static_cast<    \
  |  |  929|  15.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  15.0M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1568|  18.8M|    {
 1569|  18.8M|        return has_value();
 1570|  18.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  37.7M|    {
  481|  37.7M|        return m_has_value;
  482|  37.7M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1574|  19.2k|    {
 1575|  19.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  19.2k|        return this->get_unexpected().error();
 1577|  19.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  19.2k|    {
  464|  19.2k|        return m_unexpected;
  465|  19.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1446|  19.2k|    {
 1447|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  621|  19.2k|    {
  622|  19.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  684|  19.2k|    {
  685|  19.2k|        scn::detail::construct_at(unexpected_ptr(),
  686|  19.2k|                                  std::forward<Args>(args)...);
  687|  19.2k|        m_has_value = false;
  688|  19.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  38.5k|    {
  714|  38.5k|        return reinterpret_cast<unexpected<E>*>(
  715|  38.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  38.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  38.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.8M|    {
 1148|  18.8M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|  15.0M|    {
 1624|  15.0M|        return value();
 1625|  15.0M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|  18.8M|    {
 1598|  18.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  18.8M|        return this->get_value();
 1600|  18.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  18.8M|    {
  447|  18.8M|        return m_value;
  448|  18.8M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5790|  18.8M|    {
 5791|  18.8M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5641|  18.8M|    {
 5642|  18.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1400|  18.8M|    {
 1401|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  611|  18.8M|    {
  612|  18.8M|        construct(std::forward<Args>(args)...);
  613|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  677|  18.8M|    {
  678|  18.8M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|  18.8M|        m_has_value = true;
  680|  18.8M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  387|  18.8M|{
  388|  18.8M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  18.8M|        T(std::forward<Args>(args)...);
  390|  18.8M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5782|  18.8M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  56.5M|    {
  702|  56.5M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  56.5M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  56.5M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5786|  37.6M|    ~scan_result() = default;
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  18.8M|    {
 2752|  18.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  18.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  18.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  18.8M|    {
 2734|  18.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  18.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  18.8M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3286|  37.7M|    {
 3287|  37.7M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  15.0M|    {
 7932|  15.0M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1568|  18.8M|    {
 1569|  18.8M|        return has_value();
 1570|  18.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  56.5M|    {
  671|  56.5M|        return m_has_value;
  672|  56.5M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1643|  18.8M|    {
 1644|  18.8M|        return &value();
 1645|  18.8M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1597|  18.8M|    {
 1598|  18.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  18.8M|        return this->get_value();
 1600|  18.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  636|  18.8M|    {
  637|  18.8M|        return *value_ptr();
  638|  18.8M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5658|  18.8M|    {
 5659|  18.8M|        return ranges::begin(m_range);
 5660|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  18.8M|    {
  627|  18.8M|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 18.8M, False: 19.2k]
  ------------------
  628|  18.8M|            destroy_value();
  629|  18.8M|        }
  630|  19.2k|        else {
  631|  19.2k|            destroy_unexpected();
  632|  19.2k|        }
  633|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|  18.8M|    {
  692|  18.8M|        scn::detail::destroy_at(value_ptr());
  693|  18.8M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  393|  18.8M|{
  394|  18.8M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  18.8M|        for (auto& elem : *p) {
  396|  18.8M|            scn::detail::destroy_at(&elem);
  397|  18.8M|        }
  398|  18.8M|    }
  399|  18.8M|    else {
  400|  18.8M|        p->~T();
  401|  18.8M|    }
  402|  18.8M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  19.2k|    {
  696|  19.2k|        scn::detail::destroy_at(unexpected_ptr());
  697|  19.2k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|  7.54M|{
 8568|  7.54M|#if !SCN_DISABLE_LOCALE
 8569|  7.54M|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  7.54M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  7.54M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  7.54M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  7.54M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 7.53M]
  |  |  ------------------
  ------------------
 8576|  8.89k|        return unexpected(result.error());
 8577|  8.89k|    }
 8578|  7.53M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  7.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  7.54M|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  3.77M|{
 8592|  3.77M|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  3.77M|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  3.77M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  3.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 3.76M]
  |  |  ------------------
  ------------------
 8596|  1.48k|        return unexpected(result.error());
 8597|  1.48k|    }
 8598|  3.76M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  3.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  3.77M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|  3.76M|    {
 1634|  3.76M|        return std::move(value());
 1635|  3.76M|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|   113k|    {
 3539|   113k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   113k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|   113k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|   175M|    {
 3545|   175M|        return m_code == good;
 3546|   175M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|  40.0k|    {
 3556|  40.0k|        return m_code;
 3557|  40.0k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|  6.63M|    {
 3301|  6.63M|        return m_iterator;
 3302|  6.63M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|   805M|    {
 3301|   805M|        return m_iterator;
 3302|   805M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|  22.8M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6242|  26.6k|    {
 6243|  26.6k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6243:13): [True: 0, False: 26.6k]
  |  Branch (6243:39): [True: 0, False: 0]
  ------------------
 6244|       |            // clang-format off
 6245|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6246|       |            // clang-format on
 6247|      0|        }
 6248|       |
 6249|  26.6k|        m_specs.width = width;
 6250|  26.6k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|  22.8M|    {
 6264|  22.8M|        m_specs.type = type;
 6265|  22.8M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6280|  31.6k|    {
 6281|  31.6k|        const auto begin_value = static_cast<unsigned>(begin);
 6282|  31.6k|        const auto end_value = static_cast<unsigned>(end);
 6283|  31.6k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  31.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6284|       |
 6285|  31.6k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  31.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 31.6k, False: 0]
  |  |  ------------------
  ------------------
 6286|       |            // No need to bit-twiddle with a mask, because with the
 6287|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6288|  31.6k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  31.6k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6289|   855k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6289:40): [True: 823k, False: 31.6k]
  ------------------
 6290|   823k|                m_specs.charset_literals[v / 8] |=
 6291|   823k|                    static_cast<unsigned char>(1ul << (v % 8));
 6292|   823k|            }
 6293|  31.6k|        }
 6294|      0|        else {
 6295|      0|            m_specs.charset_has_nonascii = true;
 6296|      0|        }
 6297|  31.6k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6325|  26.6k|    {
 6326|  26.6k|        SCN_UNLIKELY_ATTR
 6327|  26.6k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6328|  26.6k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|  22.9M|    {
 6337|  22.9M|        return static_cast<bool>(m_error);
 6338|  22.9M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|  40.0k|{
 3580|  40.0k|    return a.code() == b;
 3581|  40.0k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|  40.0k|{
 3584|  40.0k|    return !(a == b);
 3585|  40.0k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|  13.3k|{
 7024|  13.3k|    switch (type) {
 7025|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 0, False: 13.3k]
  ------------------
 7026|      0|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 13.3k]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 13.3k]
  ------------------
 7030|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 0, False: 13.3k]
  ------------------
 7031|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 13.3k]
  ------------------
 7032|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 13.3k]
  ------------------
 7033|      0|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 13.3k]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 13.3k]
  ------------------
 7037|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 0, False: 13.3k]
  ------------------
 7038|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 13.3k]
  ------------------
 7039|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 13.3k]
  ------------------
 7040|      0|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 0, False: 13.3k]
  ------------------
 7043|      0|            return arg_type_category::pointer;
 7044|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 0, False: 13.3k]
  ------------------
 7045|      0|            return arg_type_category::boolean;
 7046|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 0, False: 13.3k]
  ------------------
 7047|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 0, False: 13.3k]
  ------------------
 7048|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 13.3k]
  ------------------
 7049|      0|            return arg_type_category::character;
 7050|       |
 7051|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 0, False: 13.3k]
  ------------------
 7052|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 0, False: 13.3k]
  ------------------
 7053|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 0, False: 13.3k]
  ------------------
 7054|      0|            return arg_type_category::floating;
 7055|       |
 7056|  1.48k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 1.48k, False: 11.8k]
  ------------------
 7057|  4.44k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 2.96k, False: 10.3k]
  ------------------
 7058|  7.41k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 2.96k, False: 10.3k]
  ------------------
 7059|  13.3k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 5.92k, False: 7.41k]
  ------------------
 7060|  13.3k|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 13.3k]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 13.3k]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|  13.3k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|  13.3k|            SCN_CLANG_POP
 7071|  13.3k|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|  13.3k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3624|  13.3k|{
 3625|  13.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  13.3k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3624|  8.89k|{
 3625|  8.89k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  8.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  8.89k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3624|  4.47k|{
 3625|  4.47k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  4.47k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7165|  22.8M|{
 7166|  22.8M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7166:9): [True: 0, False: 22.8M]
  ------------------
 7167|  22.8M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7167:9): [True: 22.8M, False: 29.1k]
  ------------------
 7168|  22.8M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7168:9): [True: 15.8k, False: 13.3k]
  ------------------
 7169|  22.8M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7169:9): [True: 0, False: 13.3k]
  ------------------
 7170|  22.8M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7170:9): [True: 0, False: 13.3k]
  ------------------
 7171|  22.8M|        return;
 7172|  22.8M|    }
 7173|  13.3k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7173:9): [True: 13.3k, False: 0]
  ------------------
 7174|  13.3k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 0]
  |  |  ------------------
  ------------------
 7175|       |            // clang-format off
 7176|  13.3k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7177|       |            // clang-format on
 7178|  13.3k|        }
 7179|      0|        return;
 7180|  13.3k|    }
 7181|      0|    SCN_UNLIKELY_ATTR
 7182|      0|    handler.on_error("Invalid type specifier for string");
 7183|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4165|  36.4M|    {
 4166|  36.4M|        return m_end == nullptr;
 4167|  36.4M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   149k|{
 3686|   149k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   149k|                                          const CharT*, const CharT*>) {
 3688|   149k|        return {first, last};
 3689|   149k|    }
 3690|   149k|    else {
 3691|   149k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   149k|    }
 3693|   149k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4181|   767k|    {
 4182|   767k|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 767k]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|   767k|        return parent()->get_segment_starting_at(position());
 4188|   767k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4175|  21.2M|    {
 4176|  21.2M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  21.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  21.2M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|  21.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4071|   767k|    {
 4072|   767k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 449k, False: 318k]
  |  |  ------------------
  ------------------
 4073|   767k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|   449k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|   449k|        }
 4076|   318k|        const auto start = pos - m_putback_buffer.size();
 4077|   318k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|   318k|        return m_current_view.substr(start);
 4079|   318k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4160|   865k|    {
 4161|   865k|        return m_position;
 4162|   865k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4093|   483k|    {
 4094|   483k|        return m_is_contiguous;
 4095|   483k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4165|  4.00G|    {
 4166|  4.00G|        return m_end == nullptr;
 4167|  4.00G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|  18.8M|{
 3686|  18.8M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|  18.8M|                                          const CharT*, const CharT*>) {
 3688|  18.8M|        return {first, last};
 3689|  18.8M|    }
 3690|  18.8M|    else {
 3691|  18.8M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|  18.8M|    }
 3693|  18.8M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4181|  56.5M|    {
 4182|  56.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 56.5M]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|  56.5M|        return parent()->get_segment_starting_at(position());
 4188|  56.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4175|  2.32G|    {
 4176|  2.32G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  2.32G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.32G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  2.32G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|  2.32G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4071|  56.5M|    {
 4072|  56.5M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  56.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.6M, False: 18.8M]
  |  |  ------------------
  ------------------
 4073|  56.5M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|  37.6M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|  37.6M|        }
 4076|  18.8M|        const auto start = pos - m_putback_buffer.size();
 4077|  18.8M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  18.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|  18.8M|        return m_current_view.substr(start);
 4079|  18.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4160|  67.8M|    {
 4161|  67.8M|        return m_position;
 4162|  67.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4093|  56.5M|    {
 4094|  56.5M|        return m_is_contiguous;
 4095|  56.5M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|  1.81M|    {
 3151|  1.81M|        return static_cast<D&>(*this);
 3152|  1.81M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   906k|    {
 2949|   906k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   906k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   906k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   906k|    {
 2976|   906k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   906k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   906k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|   906k|    {
 3192|   906k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 716, False: 905k]
  ------------------
 3193|   906k|                   ? nullptr
 3194|   906k|                   : std::addressof(*ranges::begin(derived()));
 3195|   906k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|  75.3M|    {
 3151|  75.3M|        return static_cast<D&>(*this);
 3152|  75.3M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  37.6M|    {
 2949|  37.6M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  37.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  37.6M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  37.6M|    {
 2976|  37.6M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  37.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  37.6M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|  37.6M|    {
 3192|  37.6M|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 0, False: 37.6M]
  ------------------
 3193|  37.6M|                   ? nullptr
 3194|  37.6M|                   : std::addressof(*ranges::begin(derived()));
 3195|  37.6M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8129|  65.3k|    {
 8130|  65.3k|        return ranges::subrange{begin(), end()};
 8131|  65.3k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8113|   194k|    {
 8114|   194k|        return m_current;
 8115|   194k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8121|  65.3k|    {
 8122|  65.3k|        return ranges::default_sentinel;
 8123|  65.3k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  2.43M|    {
 3287|  2.43M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|  57.0M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   154k|    {
 1808|   154k|        return detail::transform_error_impl(std::move(*this),
 1809|   154k|                                            std::forward<F>(f));
 1810|   154k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   154k|{
 1294|   154k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   154k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   154k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   154k|            return result(*std::forward<Exp>(exp));
 1298|   154k|        }
 1299|       |
 1300|   154k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   154k|        return result(unexpect, monostate{});
 1302|   154k|    }
 1303|   154k|    else {
 1304|   154k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   154k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   154k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 151k, False: 2.53k]
  |  |  ------------------
  ------------------
 1306|   154k|                   ? result(*std::forward<Exp>(exp))
 1307|   154k|                   : result(unexpect,
 1308|  2.53k|                            trivial_invoke(std::forward<F>(f),
 1309|  2.53k|                                           std::forward<Exp>(exp).error()));
 1310|   154k|    }
 1311|   154k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   308k|    {
  481|   308k|        return m_has_value;
  482|   308k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|   151k|    {
 1634|   151k|        return std::move(value());
 1635|   151k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|   151k|    {
 1598|   151k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   151k|        return this->get_value();
 1600|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   151k|    {
  447|   151k|        return m_value;
  448|   151k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|   303k|    {
 1401|   303k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   303k|    {
  433|   303k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   377k|    {
 1148|   377k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|  19.9k|{
 1182|  19.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  19.9k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  2.53k|    {
 1585|  2.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  2.53k|        return std::move(this->get_unexpected().error());
 1587|  2.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  2.53k|    {
  464|  2.53k|        return m_unexpected;
  465|  2.53k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|  39.9k|    {
  357|  39.9k|        return m_unexpected;
  358|  39.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|  2.53k|    {
 1457|  2.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  12.6k|    {
  443|  12.6k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8129|  7.54M|    {
 8130|  7.54M|        return ranges::subrange{begin(), end()};
 8131|  7.54M|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8113|  22.6M|    {
 8114|  22.6M|        return m_current;
 8115|  22.6M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8121|  7.54M|    {
 8122|  7.54M|        return ranges::default_sentinel;
 8123|  7.54M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|   306M|    {
 3287|   306M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  18.8M|    {
 1808|  18.8M|        return detail::transform_error_impl(std::move(*this),
 1809|  18.8M|                                            std::forward<F>(f));
 1810|  18.8M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  18.8M|{
 1294|  18.8M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  18.8M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  18.8M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  18.8M|            return result(*std::forward<Exp>(exp));
 1298|  18.8M|        }
 1299|       |
 1300|  18.8M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  18.8M|        return result(unexpect, monostate{});
 1302|  18.8M|    }
 1303|  18.8M|    else {
 1304|  18.8M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  18.8M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  18.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.8M, False: 4.16k]
  |  |  ------------------
  ------------------
 1306|  18.8M|                   ? result(*std::forward<Exp>(exp))
 1307|  18.8M|                   : result(unexpect,
 1308|  4.16k|                            trivial_invoke(std::forward<F>(f),
 1309|  4.16k|                                           std::forward<Exp>(exp).error()));
 1310|  18.8M|    }
 1311|  18.8M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  37.7M|    {
  481|  37.7M|        return m_has_value;
  482|  37.7M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|  18.8M|    {
 1634|  18.8M|        return std::move(value());
 1635|  18.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|  18.8M|    {
 1598|  18.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  18.8M|        return this->get_value();
 1600|  18.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  18.8M|    {
  447|  18.8M|        return m_value;
  448|  18.8M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|  37.6M|    {
 1401|  37.6M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  37.6M|    {
  433|  37.6M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  45.2M|    {
 1148|  45.2M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  4.16k|    {
 1585|  4.16k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  4.16k|        return std::move(this->get_unexpected().error());
 1587|  4.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  4.16k|    {
  464|  4.16k|        return m_unexpected;
  465|  4.16k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|  4.16k|    {
 1457|  4.16k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  24.7k|    {
  443|  24.7k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  26.7k|    {
  343|  26.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  26.7k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  20.2k|    {
 1447|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  25.2k|    {
  443|  25.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   747k|    {
 1148|   747k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|   599k|    {
 1401|   599k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   599k|    {
  433|   599k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|   747k|    {
 1569|   747k|        return has_value();
 1570|   747k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  1.49M|    {
  481|  1.49M|        return m_has_value;
  482|  1.49M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|  25.2k|    {
 1575|  25.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  25.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  25.2k|        return this->get_unexpected().error();
 1577|  25.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  25.2k|    {
  464|  25.2k|        return m_unexpected;
  465|  25.2k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|   599k|    {
 1634|   599k|        return std::move(value());
 1635|   599k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|   722k|    {
 1598|   722k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   722k|        return this->get_value();
 1600|   722k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|   722k|    {
  447|   722k|        return m_value;
  448|   722k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  41.1k|    {
 1447|  41.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  49.4k|    {
  443|  49.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  90.5M|    {
 1148|  90.5M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  75.3M|    {
 1401|  75.3M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  75.3M|    {
  433|  75.3M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|  90.5M|    {
 1569|  90.5M|        return has_value();
 1570|  90.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|   181M|    {
  481|   181M|        return m_has_value;
  482|   181M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|  49.4k|    {
 1575|  49.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  49.4k|        return this->get_unexpected().error();
 1577|  49.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  49.4k|    {
  464|  49.4k|        return m_unexpected;
  465|  49.4k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  75.3M|    {
 1634|  75.3M|        return std::move(value());
 1635|  75.3M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  90.4M|    {
 1598|  90.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  90.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  90.4M|        return this->get_value();
 1600|  90.4M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|  90.4M|    {
  447|  90.4M|        return m_value;
  448|  90.4M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|   305k|    {
 1808|   305k|        return detail::transform_error_impl(std::move(*this),
 1809|   305k|                                            std::forward<F>(f));
 1810|   305k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|   305k|{
 1294|   305k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   305k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   305k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   305k|            return result(*std::forward<Exp>(exp));
 1298|   305k|        }
 1299|       |
 1300|   305k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   305k|        return result(unexpect, monostate{});
 1302|   305k|    }
 1303|   305k|    else {
 1304|   305k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   305k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   305k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 300k, False: 4.95k]
  |  |  ------------------
  ------------------
 1306|   305k|                   ? result(*std::forward<Exp>(exp))
 1307|   305k|                   : result(unexpect,
 1308|  4.95k|                            trivial_invoke(std::forward<F>(f),
 1309|  4.95k|                                           std::forward<Exp>(exp).error()));
 1310|   305k|    }
 1311|   305k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   610k|    {
  481|   610k|        return m_has_value;
  482|   610k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|   300k|    {
 1634|   300k|        return std::move(value());
 1635|   300k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|   300k|    {
 1598|   300k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   300k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   300k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   300k|        return this->get_value();
 1600|   300k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   300k|    {
  447|   300k|        return m_value;
  448|   300k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|  4.95k|    {
 1585|  4.95k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  4.95k|        return std::move(this->get_unexpected().error());
 1587|  4.95k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  4.95k|    {
  464|  4.95k|        return m_unexpected;
  465|  4.95k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  4.95k|    {
 1457|  4.95k|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|   129M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  10.0k|    {
 1447|  10.0k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4209|  3.61M|    {
 4210|  3.61M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  3.61M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 3.61M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  3.61M|        auto res = read_at_position();
 4219|  3.61M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  3.61M|        return parent()->get_character_at(m_position);
 4221|  3.61M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4274|  10.8M|    {
 4275|  10.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|  10.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 10.8M]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|  10.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  10.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.84M, False: 2.00M]
  |  |  ------------------
  ------------------
 4282|  8.84M|            return true;
 4283|  8.84M|        }
 4284|       |
 4285|  4.00M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 2.00M, False: 1.99M]
  ------------------
 4286|  2.00M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 15.4k, False: 1.99M]
  ------------------
 4287|  15.4k|                return false;
 4288|  15.4k|            }
 4289|  2.00M|        }
 4290|  1.99M|        return true;
 4291|  2.00M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4051|  14.8M|    {
 4052|  14.8M|        return m_putback_buffer.size() + m_current_view.size();
 4053|  14.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4082|  3.61M|    {
 4083|  3.61M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.99M, False: 1.62M]
  |  |  ------------------
  ------------------
 4084|  3.61M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  1.99M|            return m_putback_buffer[pos];
 4086|  1.99M|        }
 4087|  1.62M|        const auto start = pos - m_putback_buffer.size();
 4088|  1.62M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|  1.62M|        return m_current_view[start];
 4090|  1.62M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4195|  3.31M|    {
 4196|  3.31M|        ++m_position;
 4197|  3.31M|        (void)read_at_position();
 4198|  3.31M|        return *this;
 4199|  3.31M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4244|  1.43M|    {
 4245|  1.43M|        return !(lhs == rhs);
 4246|  1.43M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4239|  1.43M|    {
 4240|  1.43M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 1.43M, False: 0]
  |  Branch (4240:46): [True: 236k, False: 1.20M]
  ------------------
 4241|  1.43M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  1.92M|    {
 4251|  1.92M|        return x.is_at_end();
 4252|  1.92M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4294|  3.92M|    {
 4295|  3.92M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 3.92M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  3.92M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 3.92M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  3.92M|        return !read_at_position();
 4302|  3.92M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|   151k|    {
 1401|   151k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   151k|    {
  433|   151k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   154k|    {
 1148|   154k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  2.53k|    {
 1447|  2.53k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.53k|    {
  443|  2.53k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  19.9k|    {
  352|  19.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  19.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  19.9k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  19.9k|    {
  343|  19.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  19.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  19.9k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  1.02k|    {
 1447|  1.02k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.02k|    {
  443|  1.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   124k|    {
 1148|   124k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   123k|    {
 1401|   123k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   123k|    {
  433|   123k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|   124k|    {
 1569|   124k|        return has_value();
 1570|   124k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   248k|    {
  481|   248k|        return m_has_value;
  482|   248k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|  1.02k|    {
 1575|  1.02k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.02k|        return this->get_unexpected().error();
 1577|  1.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.02k|    {
  464|  1.02k|        return m_unexpected;
  465|  1.02k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   123k|    {
 1634|   123k|        return std::move(value());
 1635|   123k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   123k|    {
 1598|   123k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   123k|        return this->get_value();
 1600|   123k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   123k|    {
  447|   123k|        return m_value;
  448|   123k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  5.98M|    {
 3305|  5.98M|        return m_sentinel;
 3306|  5.98M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3300|   160k|    {
 3301|   160k|        return m_iterator;
 3302|   160k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3304|   160k|    {
 3305|   160k|        return m_sentinel;
 3306|   160k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|   377k|    {
 1569|   377k|        return has_value();
 1570|   377k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|   755k|    {
  481|   755k|        return m_has_value;
  482|   755k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|  12.6k|    {
 1575|  12.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  12.6k|        return this->get_unexpected().error();
 1577|  12.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  12.6k|    {
  464|  12.6k|        return m_unexpected;
  465|  12.6k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|   303k|    {
 1634|   303k|        return std::move(value());
 1635|   303k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|   365k|    {
 1598|   365k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   365k|        return this->get_value();
 1600|   365k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   365k|    {
  447|   365k|        return m_value;
  448|   365k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   305k|{
  322|   305k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   305k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|   152k|    {
 3287|   152k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|  1.99M|    {
 4262|  1.99M|        return !x.is_at_end();
 4263|  1.99M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  60.9k|    {
 1401|  60.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  60.9k|    {
  433|  60.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  4.95k|    {
 1447|  4.95k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  4.95k|    {
  443|  4.95k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   305k|    {
 1148|   305k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|   300k|    {
 1401|   300k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   300k|    {
  433|   300k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  1.98k|    {
 1447|  1.98k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.98k|    {
  443|  1.98k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   246k|    {
 1148|   246k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|   244k|    {
 1401|   244k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   244k|    {
  433|   244k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|   246k|    {
 1569|   246k|        return has_value();
 1570|   246k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|   493k|    {
  481|   493k|        return m_has_value;
  482|   493k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1574|  1.98k|    {
 1575|  1.98k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.98k|        return this->get_unexpected().error();
 1577|  1.98k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.98k|    {
  464|  1.98k|        return m_unexpected;
  465|  1.98k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|   244k|    {
 1634|   244k|        return std::move(value());
 1635|   244k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|   244k|    {
 1598|   244k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   244k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   244k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   244k|        return this->get_value();
 1600|   244k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|   244k|    {
  447|   244k|        return m_value;
  448|   244k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   906k|    {
 2826|   906k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   906k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   906k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   906k|    {
 2807|   906k|        return t.data();
 2808|   906k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|   120k|    {
 1401|   120k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   120k|    {
  433|   120k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|  86.6k|    {
 1447|  86.6k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  86.6k|    {
  443|  86.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  57.0M|    {
 1148|  57.0M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|  56.9M|    {
 1401|  56.9M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  56.9M|    {
  433|  56.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  61.7k|    {
 1624|  61.7k|        return value();
 1625|  61.7k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|   122k|    {
 1624|   122k|        return value();
 1625|   122k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1400|    804|    {
 1401|    804|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  432|    804|    {
  433|    804|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1400|  1.60k|    {
 1401|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.60k|    {
  433|  1.60k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  20.5k|    {
 1447|  20.5k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4209|   431M|    {
 4210|   431M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   431M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   431M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|   431M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 431M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|   431M|        auto res = read_at_position();
 4219|   431M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   431M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   431M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|   431M|        return parent()->get_character_at(m_position);
 4221|   431M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4274|  1.18G|    {
 4275|  1.18G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  1.18G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|  1.18G|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 1.18G]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|  1.18G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  1.18G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 972M, False: 215M]
  |  |  ------------------
  ------------------
 4282|   972M|            return true;
 4283|   972M|        }
 4284|       |
 4285|   431M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 215M, False: 215M]
  ------------------
 4286|   215M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 27.9k, False: 215M]
  ------------------
 4287|  27.9k|                return false;
 4288|  27.9k|            }
 4289|   215M|        }
 4290|   215M|        return true;
 4291|   215M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4051|  1.61G|    {
 4052|  1.61G|        return m_putback_buffer.size() + m_current_view.size();
 4053|  1.61G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4082|   431M|    {
 4083|   431M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   431M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 235M, False: 196M]
  |  |  ------------------
  ------------------
 4084|   431M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|   235M|            return m_putback_buffer[pos];
 4086|   235M|        }
 4087|   196M|        const auto start = pos - m_putback_buffer.size();
 4088|   196M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   196M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   196M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|   196M|        return m_current_view[start];
 4090|   196M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4195|   287M|    {
 4196|   287M|        ++m_position;
 4197|   287M|        (void)read_at_position();
 4198|   287M|        return *this;
 4199|   287M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4244|  79.2M|    {
 4245|  79.2M|        return !(lhs == rhs);
 4246|  79.2M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4239|  79.2M|    {
 4240|  79.2M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 79.2M, False: 0]
  |  Branch (4240:46): [True: 7.54M, False: 71.7M]
  ------------------
 4241|  79.2M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|   245M|    {
 4251|   245M|        return x.is_at_end();
 4252|   245M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4294|   468M|    {
 4295|   468M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 468M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|   468M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 468M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|   468M|        return !read_at_position();
 4302|   468M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|  1.07G|{
 3778|  1.07G|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  1.07G|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  1.07G|    }
 3781|  1.07G|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|  1.07G|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  1.07G|    }
 3784|  1.07G|    else {
 3785|       |        // utf-32
 3786|  1.07G|        static_assert(sizeof(U) == 4);
 3787|  1.07G|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.07G|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|  1.07G|        return 1;
 3789|  1.07G|    }
 3790|  1.07G|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|  18.8M|    {
 1401|  18.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  18.8M|    {
  433|  18.8M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.8M|    {
 1148|  18.8M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  4.16k|    {
 1447|  4.16k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  4.16k|    {
  443|  4.16k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  1.07G|{
 3984|  1.07G|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  1.07G|        return decode_utf8_code_point_exhaustive(input);
 3986|  1.07G|    }
 3987|  1.07G|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|  1.07G|        return decode_utf16_code_point_exhaustive(input);
 3989|  1.07G|    }
 3990|  1.07G|    else {
 3991|  1.07G|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.07G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|  1.07G|        auto cp = static_cast<char32_t>(input.front());
 3993|  1.07G|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.07G|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.09M, False: 1.07G]
  |  |  ------------------
  ------------------
 3994|  1.09M|            return invalid_code_point;
 3995|  1.09M|        }
 3996|  1.07G|        return cp;
 3997|  1.07G|    }
 3998|  1.07G|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  1.66k|    {
 1447|  1.66k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.66k|    {
  443|  1.66k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  15.0M|    {
 1148|  15.0M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  15.0M|    {
 1401|  15.0M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  15.0M|    {
  433|  15.0M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|  15.0M|    {
 1569|  15.0M|        return has_value();
 1570|  15.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  30.1M|    {
  481|  30.1M|        return m_has_value;
  482|  30.1M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|  1.66k|    {
 1575|  1.66k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.66k|        return this->get_unexpected().error();
 1577|  1.66k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.66k|    {
  464|  1.66k|        return m_unexpected;
  465|  1.66k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  15.0M|    {
 1634|  15.0M|        return std::move(value());
 1635|  15.0M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  15.0M|    {
 1598|  15.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  15.0M|        return this->get_value();
 1600|  15.0M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  15.0M|    {
  447|  15.0M|        return m_value;
  448|  15.0M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|   748M|    {
 3305|   748M|        return m_sentinel;
 3306|   748M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3300|  18.8M|    {
 3301|  18.8M|        return m_iterator;
 3302|  18.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3304|  18.8M|    {
 3305|  18.8M|        return m_sentinel;
 3306|  18.8M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|  45.2M|    {
 1569|  45.2M|        return has_value();
 1570|  45.2M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  90.5M|    {
  481|  90.5M|        return m_has_value;
  482|  90.5M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|  24.7k|    {
 1575|  24.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  24.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  24.7k|        return this->get_unexpected().error();
 1577|  24.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  24.7k|    {
  464|  24.7k|        return m_unexpected;
  465|  24.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|  37.6M|    {
 1634|  37.6M|        return std::move(value());
 1635|  37.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|  45.2M|    {
 1598|  45.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  45.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  45.2M|        return this->get_value();
 1600|  45.2M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  45.2M|    {
  447|  45.2M|        return m_value;
  448|  45.2M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|   424M|{
 3670|   424M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|   424M|                                          decltype(first), decltype(last)> &&
 3672|   424M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|   424M|        return {first, last};
 3674|   424M|    }
 3675|   424M|    else {
 3676|   424M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|   424M|                                       to_address(first), to_address(last)))};
 3678|   424M|    }
 3679|   424M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  1.27G|{
  322|  1.27G|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.27G|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.27G|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  1.31G|{
  302|  1.31G|    return p;
  303|  1.31G|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  37.6M|{
  322|  37.6M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  37.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  37.6M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|  18.8M|    {
 3287|  18.8M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|   223M|    {
 4262|   223M|        return !x.is_at_end();
 4263|   223M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  7.53M|    {
 1401|  7.53M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  7.53M|    {
  433|  7.53M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  8.33k|    {
 1447|  8.33k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  8.33k|    {
  443|  8.33k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  37.7M|    {
 1148|  37.7M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  37.6M|    {
 1401|  37.6M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  37.6M|    {
  433|  37.6M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  75.4M|    {
  481|  75.4M|        return m_has_value;
  482|  75.4M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  37.6M|    {
 1598|  37.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  37.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  37.6M|        return this->get_value();
 1600|  37.6M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  37.6M|    {
  447|  37.6M|        return m_value;
  448|  37.6M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  3.33k|    {
 1447|  3.33k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  3.33k|    {
  443|  3.33k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  30.1M|    {
 1148|  30.1M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  30.1M|    {
 1401|  30.1M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  30.1M|    {
  433|  30.1M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  37.7M|    {
 1808|  37.7M|        return detail::transform_error_impl(std::move(*this),
 1809|  37.7M|                                            std::forward<F>(f));
 1810|  37.7M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  37.7M|{
 1294|  37.7M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  37.7M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  37.7M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  37.7M|            return result(*std::forward<Exp>(exp));
 1298|  37.7M|        }
 1299|       |
 1300|  37.7M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  37.7M|        return result(unexpect, monostate{});
 1302|  37.7M|    }
 1303|  37.7M|    else {
 1304|  37.7M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  37.7M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  37.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 37.6M, False: 8.33k]
  |  |  ------------------
  ------------------
 1306|  37.7M|                   ? result(*std::forward<Exp>(exp))
 1307|  37.7M|                   : result(unexpect,
 1308|  8.33k|                            trivial_invoke(std::forward<F>(f),
 1309|  8.33k|                                           std::forward<Exp>(exp).error()));
 1310|  37.7M|    }
 1311|  37.7M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  37.6M|    {
 1634|  37.6M|        return std::move(value());
 1635|  37.6M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1584|  8.33k|    {
 1585|  8.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  8.33k|        return std::move(this->get_unexpected().error());
 1587|  8.33k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  8.33k|    {
  464|  8.33k|        return m_unexpected;
  465|  8.33k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  8.33k|    {
 1457|  8.33k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|  30.1M|    {
 1569|  30.1M|        return has_value();
 1570|  30.1M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  60.3M|    {
  481|  60.3M|        return m_has_value;
  482|  60.3M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1574|  3.33k|    {
 1575|  3.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  3.33k|        return this->get_unexpected().error();
 1577|  3.33k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  3.33k|    {
  464|  3.33k|        return m_unexpected;
  465|  3.33k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  30.1M|    {
 1634|  30.1M|        return std::move(value());
 1635|  30.1M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  30.1M|    {
 1598|  30.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  30.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  30.1M|        return this->get_value();
 1600|  30.1M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  30.1M|    {
  447|  30.1M|        return m_value;
  448|  30.1M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  37.6M|    {
 2826|  37.6M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  37.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  37.6M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  37.6M|    {
 2807|  37.6M|        return t.data();
 2808|  37.6M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  15.0M|    {
 1401|  15.0M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  15.0M|    {
  433|  15.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  7.53M|    {
 1624|  7.53M|        return value();
 1625|  7.53M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  15.0M|    {
 1624|  15.0M|        return value();
 1625|  15.0M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1400|     32|    {
 1401|     32|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  432|     32|    {
  433|     32|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1400|     64|    {
 1401|     64|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|     64|    {
  433|     64|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|   387k|    {
 5427|   387k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 387k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   387k|        return static_cast<std::size_t>(m_desc &
 5432|   387k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   387k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|   775k|    {
 5452|   775k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   775k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|   387k|    {
 5395|   387k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 387k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|   387k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 387k]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|   387k|        const auto t = type(id);
 5407|   387k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 387k]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|   387k|        basic_scan_arg<Context> arg;
 5412|   387k|        arg.m_type = t;
 5413|   387k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 387k, False: 0]
  ------------------
 5414|   387k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|   387k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|   387k|        return arg;
 5420|   387k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|   387k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|   387k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|   387k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|   387k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|   387k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|   387k|    {
 5456|   387k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|   387k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|   674k|    {
 5208|   674k|        return m_type != detail::arg_type::none_type;
 5209|   674k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   183k|{
 8378|   183k|#define SCN_VISIT(Type)                                         \
 8379|   183k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   183k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   183k|    }                                                           \
 8382|   183k|    else {                                                      \
 8383|   183k|        return vis(monostate_val);                              \
 8384|   183k|    }
 8385|       |
 8386|   183k|    monostate monostate_val{};
 8387|       |
 8388|   183k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 183k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 183k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 183k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 183k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 183k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 183k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 183k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 183k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 183k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 183k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 183k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 183k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 183k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 183k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 183k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 183k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 183k]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 183k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  91.5k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 91.5k, False: 91.5k]
  ------------------
 8426|  91.5k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  91.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  91.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  91.5k|    }                                                           \
  |  | 8382|  91.5k|    else {                                                      \
  |  | 8383|  91.5k|        return vis(monostate_val);                              \
  |  | 8384|  91.5k|    }
  ------------------
 8427|  91.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 91.5k, False: 91.5k]
  ------------------
 8428|  91.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  91.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  91.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  91.5k|    }                                                           \
  |  | 8382|  91.5k|    else {                                                      \
  |  | 8383|  91.5k|        return vis(monostate_val);                              \
  |  | 8384|  91.5k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 183k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 183k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 183k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 183k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 183k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 183k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 183k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   183k|            SCN_CLANG_POP
 8456|   183k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|   203k|    {
 5506|   203k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|  68.3k|    {
 8099|  68.3k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|   203k|    {
 8017|   203k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4314|   161k|{
 4315|   161k|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 161k]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|   161k|    return ranges::subrange{forward_iterator{this, 0},
 4320|   161k|                            ranges::default_sentinel};
 4321|   161k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4147|   161k|    {
 4148|   161k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|   161k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|   161k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  92.8k|{
 8378|  92.8k|#define SCN_VISIT(Type)                                         \
 8379|  92.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  92.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  92.8k|    }                                                           \
 8382|  92.8k|    else {                                                      \
 8383|  92.8k|        return vis(monostate_val);                              \
 8384|  92.8k|    }
 8385|       |
 8386|  92.8k|    monostate monostate_val{};
 8387|       |
 8388|  92.8k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 92.8k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 92.8k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 92.8k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 92.8k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 92.8k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 92.8k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 92.8k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 92.8k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 92.8k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 92.8k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 92.8k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 92.8k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 92.8k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 92.8k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 92.8k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 92.8k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 92.8k]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 92.8k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 92.8k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|  92.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 92.8k, False: 0]
  ------------------
 8428|  92.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  92.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  92.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  92.8k|    }                                                           \
  |  | 8382|  92.8k|    else {                                                      \
  |  | 8383|  92.8k|        return vis(monostate_val);                              \
  |  | 8384|  92.8k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 92.8k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 92.8k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 92.8k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 92.8k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 92.8k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 92.8k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 92.8k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  92.8k|            SCN_CLANG_POP
 8456|  92.8k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   135k|{
 7005|   135k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   135k|    handler.check_args_exhausted();
 7007|   135k|    return handler.get_error();
 7008|   135k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   135k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   135k|    auto begin = format.data();
 6974|   135k|    auto it = begin;
 6975|   135k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   256k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 135k, False: 120k]
  ------------------
 6978|   135k|        const auto ch = *it++;
 6979|   135k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 135k, False: 0]
  ------------------
 6980|   135k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   135k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   135k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 14.8k, False: 120k]
  ------------------
 6984|  14.8k|                return;
 6985|  14.8k|            }
 6986|   135k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|   135k|    }
 6997|       |
 6998|   120k|    handler.on_literal_text(begin, end);
 6999|   120k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|   135k|{
 6903|   135k|    struct id_adapter {
 6904|   135k|        constexpr void operator()()
 6905|   135k|        {
 6906|   135k|            arg_id = handler.on_arg_id();
 6907|   135k|        }
 6908|   135k|        constexpr void operator()(std::size_t id)
 6909|   135k|        {
 6910|   135k|            arg_id = handler.on_arg_id(id);
 6911|   135k|        }
 6912|       |
 6913|   135k|        constexpr void on_error(const char* msg)
 6914|   135k|        {
 6915|   135k|            SCN_UNLIKELY_ATTR
 6916|   135k|            handler.on_error(msg);
 6917|   135k|        }
 6918|       |
 6919|   135k|        Handler& handler;
 6920|   135k|        std::size_t arg_id;
 6921|   135k|    };
 6922|       |
 6923|   135k|    ++begin;
 6924|   135k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|   135k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 135k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|   135k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 135k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|   135k|    else {
 6936|   135k|        auto adapter = id_adapter{handler, 0};
 6937|   135k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|   135k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|   135k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 135k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|   135k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 135k, False: 0]
  ------------------
 6948|   135k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|   135k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|   135k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.92k, False: 129k]
  |  |  |  Branch (859:45): [True: 0, False: 135k]
  |  |  |  Branch (859:45): [True: 5.92k, False: 129k]
  |  |  ------------------
  ------------------
 6954|  5.92k|                handler.on_error("Unknown format specifier");
 6955|  5.92k|                return begin;
 6956|  5.92k|            }
 6957|   135k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|   135k|    }
 6964|   129k|    return begin + 1;
 6965|   135k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|   203k|    {
 8000|   203k|        return m_args.get(id);
 8001|   203k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|   195k|    {
 8010|   195k|        return m_locale;
 8011|   195k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|   203k|    {
 5527|   203k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 203k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|   203k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|   203k|        do_check_arg_id(id);
 5535|   203k|        return id;
 5536|   203k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|   203k|{
 6015|   203k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|   203k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|   203k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|   135k|{
 6404|   135k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|   135k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 135k, False: 0]
  |  Branch (6405:26): [True: 0, False: 135k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|   135k|    handler();
 6410|   135k|    return begin;
 6411|   135k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6352|  8.89k|{
 6353|  8.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  8.89k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  8.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  8.89k|    unsigned long long value = 0;
 6357|  17.7k|    do {
 6358|  17.7k|        value *= 10;
 6359|  17.7k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  17.7k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 0, False: 17.7k]
  ------------------
 6361|  17.7k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|      0|            return -1;
 6363|      0|        }
 6364|  17.7k|        ++begin;
 6365|  17.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 17.7k, False: 0]
  |  Branch (6365:30): [True: 17.7k, False: 0]
  |  Branch (6365:47): [True: 8.89k, False: 8.89k]
  ------------------
 6366|  8.89k|    return static_cast<int>(value);
 6367|  8.89k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|   135k|        {
 6906|   135k|            arg_id = handler.on_arg_id();
 6907|   135k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|   407k|    {
 5213|   407k|        return m_type;
 5214|   407k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|   195k|    {
 5522|   195k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|   195k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|   398k|    {
 5511|   398k|        return m_format.data();
 5512|   398k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|   135k|    {
 7083|   135k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|   135k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|   135k|{
 6819|   135k|    auto do_presentation = [&]() -> const CharT* {
 6820|   135k|        if (*begin == CharT{'['}) {
 6821|   135k|            auto set = parse_presentation_set(begin, end, handler);
 6822|   135k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|   135k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|   135k|                return begin;
 6827|   135k|            }
 6828|   135k|            handler.on_character_set_string(set);
 6829|   135k|            return begin;
 6830|   135k|        }
 6831|   135k|        if (*begin == CharT{'/'}) {
 6832|   135k|            return parse_presentation_regex(begin, end, handler);
 6833|   135k|        }
 6834|   135k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   135k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|   135k|            handler.on_error("Invalid type specifier in format string");
 6837|   135k|            return begin;
 6838|   135k|        }
 6839|   135k|        handler.on_type(type);
 6840|   135k|        return begin;
 6841|   135k|    };
 6842|       |
 6843|   135k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 135k, False: 0]
  |  Branch (6843:28): [True: 125k, False: 10.5k]
  ------------------
 6844|   135k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 125k, False: 0]
  |  Branch (6844:36): [True: 122k, False: 2.96k]
  ------------------
 6845|   122k|        return do_presentation();
 6846|   122k|    }
 6847|       |
 6848|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  13.4k|    begin = parse_align(begin, end, handler);
 6854|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  13.4k|    begin = parse_width(begin, end, handler);
 6860|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  13.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 13.4k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  13.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 2.96k, False: 10.5k]
  ------------------
 6879|  2.96k|        handler.on_localized();
 6880|  2.96k|        ++begin;
 6881|  2.96k|    }
 6882|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  13.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 13.4k, False: 0]
  |  Branch (6887:25): [True: 10.5k, False: 2.96k]
  ------------------
 6888|  10.5k|        do_presentation();
 6889|  10.5k|    }
 6890|  13.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  13.4k|    return begin;
 6896|  13.4k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|   188k|{
 6468|   188k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 183k, False: 4.44k]
  |  Branch (6468:33): [True: 183k, False: 0]
  ------------------
 6469|   188k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 4.44k, False: 0]
  |  Branch (6469:33): [True: 4.44k, False: 0]
  ------------------
 6470|   188k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|   132k|    auto do_presentation = [&]() -> const CharT* {
 6820|   132k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 4.57k, False: 128k]
  ------------------
 6821|  4.57k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  4.57k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.57k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|  4.57k|            handler.on_character_set_string(set);
 6829|  4.57k|            return begin;
 6830|  4.57k|        }
 6831|   128k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 128k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|   128k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   128k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 125k]
  |  |  ------------------
  ------------------
 6836|  2.96k|            handler.on_error("Invalid type specifier in format string");
 6837|  2.96k|            return begin;
 6838|  2.96k|        }
 6839|   125k|        handler.on_type(type);
 6840|   125k|        return begin;
 6841|   128k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|  4.57k|{
 6658|  4.57k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  4.57k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  4.57k|    auto start = begin;
 6662|  4.57k|    ++begin;
 6663|       |
 6664|  4.57k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.57k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  4.57k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 0, False: 4.57k]
  ------------------
 6671|      0|        handler.on_charset_inverted();
 6672|      0|        ++begin;
 6673|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 0]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|      0|    }
 6684|  4.57k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 4.57k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  13.7k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 13.7k, False: 0]
  ------------------
 6689|  13.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|  13.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 4.57k, False: 9.14k]
  ------------------
 6694|  4.57k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  4.57k|        }
 6696|       |
 6697|  9.14k|        parse_presentation_set_literal(begin, end, handler);
 6698|  9.14k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  4.57k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6621|  9.14k|{
 6622|  9.14k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  9.14k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  9.14k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  9.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.14k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|  9.14k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 9.14k, False: 0]
  |  Branch (6629:25): [True: 9.14k, False: 0]
  |  Branch (6629:49): [True: 9.14k, False: 0]
  ------------------
 6630|  9.14k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 9.14k, False: 0]
  ------------------
 6631|  9.14k|        ++begin;
 6632|       |
 6633|  9.14k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  9.14k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  9.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.14k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  9.14k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  9.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.14k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  9.14k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  9.14k|        return;
 6647|  9.14k|    }
 6648|       |
 6649|      0|    handler.on_charset_single(cp_first);
 6650|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6597|  18.2k|{
 6598|  18.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  18.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  18.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.2k]
  |  |  |  Branch (859:45): [True: 0, False: 18.2k]
  |  |  |  Branch (859:45): [True: 0, False: 18.2k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  18.2k|    const auto cp =
 6607|  18.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  18.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.2k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|  18.2k|    begin += len;
 6614|  18.2k|    return cp;
 6615|  18.2k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|  6.85k|    {
 6307|  6.85k|        m_specs.charset_string_data = fmt.data();
 6308|  6.85k|        m_specs.charset_string_size = fmt.size();
 6309|  6.85k|        on_type(presentation_type::string_set);
 6310|  6.85k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|   192k|{
 6416|   192k|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 192k]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 192k]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 192k]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 192k]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 192k]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 192k]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 192k]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 192k]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 192k]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 192k]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|      0|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 0, False: 192k]
  ------------------
 6435|      0|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 192k]
  ------------------
 6436|      0|            return presentation_type::float_hex;
 6437|      0|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 0, False: 192k]
  ------------------
 6438|      0|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 192k]
  ------------------
 6439|      0|            return presentation_type::float_scientific;
 6440|      0|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 0, False: 192k]
  ------------------
 6441|      0|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 192k]
  ------------------
 6442|      0|            return presentation_type::float_fixed;
 6443|      0|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 0, False: 192k]
  ------------------
 6444|      0|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 192k]
  ------------------
 6445|      0|            return presentation_type::float_general;
 6446|   183k|        case 's':
  ------------------
  |  Branch (6446:9): [True: 183k, False: 8.89k]
  ------------------
 6447|   183k|            return presentation_type::string;
 6448|  4.44k|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 4.44k, False: 188k]
  ------------------
 6449|  4.44k|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 192k]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 192k]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 192k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 192k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|  4.44k|        default:
  ------------------
  |  Branch (6460:9): [True: 4.44k, False: 188k]
  ------------------
 6461|  4.44k|            return presentation_type::none;
 6462|   192k|    }
 6463|   192k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|  13.4k|{
 6493|  13.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  13.4k|    auto check_align = [](wchar_t ch) {
 6496|  13.4k|        switch (ch) {
 6497|  13.4k|            case L'<':
 6498|  13.4k|                return align_type::left;
 6499|  13.4k|            case L'>':
 6500|  13.4k|                return align_type::right;
 6501|  13.4k|            case L'^':
 6502|  13.4k|                return align_type::center;
 6503|  13.4k|            default:
 6504|  13.4k|                return align_type::none;
 6505|  13.4k|        }
 6506|  13.4k|    };
 6507|       |
 6508|  13.4k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  13.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  |  Branch (859:45): [True: 0, False: 13.4k]
  |  |  |  Branch (859:45): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6510|  13.4k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  13.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  13.4k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  13.4k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  13.4k|    const auto begin_before_fill = begin;
 6520|  13.4k|    begin += potential_fill_len;
 6521|       |
 6522|  13.4k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 13.4k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  13.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  13.4k|    const auto begin_after_fill = begin;
 6528|  13.4k|    ++begin;
 6529|       |
 6530|  13.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 13.4k, False: 0]
  ------------------
 6531|  13.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  13.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 4.57k, False: 8.89k]
  ------------------
 6536|  4.57k|            return begin_before_fill;
 6537|  4.57k|        }
 6538|  13.4k|    }
 6539|       |
 6540|  8.89k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 8.89k, False: 0]
  ------------------
 6541|  8.89k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 8.89k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  8.89k|        return begin_before_fill;
 6546|  8.89k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  8.89k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|  20.1k|{
 6475|  20.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  20.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  20.1k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  20.1k|        return 1;
 6478|  20.1k|    }
 6479|  20.1k|    else {
 6480|  20.1k|        const auto lengths =
 6481|  20.1k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  20.1k|            "\3\4";
 6483|  20.1k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  20.1k|        return len;
 6485|  20.1k|    }
 6486|  20.1k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  26.9k|    auto check_align = [](wchar_t ch) {
 6496|  26.9k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 26.9k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 26.9k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 26.9k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  26.9k|            default:
  ------------------
  |  Branch (6503:13): [True: 26.9k, False: 0]
  ------------------
 6504|  26.9k|                return align_type::none;
 6505|  26.9k|        }
 6506|  26.9k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|  13.4k|{
 6558|  13.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  13.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 13.4k, False: 0]
  |  Branch (6560:33): [True: 5.92k, False: 7.53k]
  ------------------
 6561|  5.92k|        int width = parse_simple_int(begin, end);
 6562|  5.92k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.92k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.92k, False: 0]
  |  |  ------------------
  ------------------
 6563|  5.92k|            handler.on_width(width);
 6564|  5.92k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  5.92k|    }
 6570|  13.4k|    return begin;
 6571|  13.4k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|  2.96k|    {
 7088|  2.96k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  2.96k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 2.96k, False: 0]
  ------------------
 7090|  2.96k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 2.96k, False: 0]
  ------------------
 7091|  2.96k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 2.96k, False: 0]
  ------------------
 7092|  2.96k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 2.96k, False: 0]
  ------------------
 7093|  2.96k|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|  2.96k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|  2.96k|        }
 7098|       |
 7099|      0|        Handler::on_localized();
 7100|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   129k|{
 8378|   129k|#define SCN_VISIT(Type)                                         \
 8379|   129k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   129k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   129k|    }                                                           \
 8382|   129k|    else {                                                      \
 8383|   129k|        return vis(monostate_val);                              \
 8384|   129k|    }
 8385|       |
 8386|   129k|    monostate monostate_val{};
 8387|       |
 8388|   129k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 129k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 129k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 129k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 129k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 129k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 129k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 129k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 129k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 129k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 129k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 129k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 129k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 129k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 129k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 129k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 129k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 129k]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 129k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  64.8k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 64.8k, False: 64.8k]
  ------------------
 8426|  64.8k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  64.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  64.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  64.8k|    }                                                           \
  |  | 8382|  64.8k|    else {                                                      \
  |  | 8383|  64.8k|        return vis(monostate_val);                              \
  |  | 8384|  64.8k|    }
  ------------------
 8427|  64.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 64.8k, False: 64.8k]
  ------------------
 8428|  64.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  64.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  64.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  64.8k|    }                                                           \
  |  | 8382|  64.8k|    else {                                                      \
  |  | 8383|  64.8k|        return vis(monostate_val);                              \
  |  | 8384|  64.8k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 129k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 129k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 129k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 129k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 129k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 129k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 129k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   129k|            SCN_CLANG_POP
 8456|   129k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  68.3k|{
 7005|  68.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  68.3k|    handler.check_args_exhausted();
 7007|  68.3k|    return handler.get_error();
 7008|  68.3k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  68.3k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  68.3k|    auto begin = format.data();
 6974|  68.3k|    auto it = begin;
 6975|  68.3k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   129k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 68.3k, False: 60.9k]
  ------------------
 6978|  68.3k|        const auto ch = *it++;
 6979|  68.3k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 68.3k, False: 0]
  ------------------
 6980|  68.3k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  68.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  68.3k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 7.41k, False: 60.9k]
  ------------------
 6984|  7.41k|                return;
 6985|  7.41k|            }
 6986|  68.3k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  68.3k|    }
 6997|       |
 6998|  60.9k|    handler.on_literal_text(begin, end);
 6999|  60.9k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8135|  60.9k|    {
 8136|  60.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  60.9k|    static_cast<    \
  |  |  929|  60.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  60.9k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6902|  68.3k|{
 6903|  68.3k|    struct id_adapter {
 6904|  68.3k|        constexpr void operator()()
 6905|  68.3k|        {
 6906|  68.3k|            arg_id = handler.on_arg_id();
 6907|  68.3k|        }
 6908|  68.3k|        constexpr void operator()(std::size_t id)
 6909|  68.3k|        {
 6910|  68.3k|            arg_id = handler.on_arg_id(id);
 6911|  68.3k|        }
 6912|       |
 6913|  68.3k|        constexpr void on_error(const char* msg)
 6914|  68.3k|        {
 6915|  68.3k|            SCN_UNLIKELY_ATTR
 6916|  68.3k|            handler.on_error(msg);
 6917|  68.3k|        }
 6918|       |
 6919|  68.3k|        Handler& handler;
 6920|  68.3k|        std::size_t arg_id;
 6921|  68.3k|    };
 6922|       |
 6923|  68.3k|    ++begin;
 6924|  68.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  68.3k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 68.3k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  68.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 68.3k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  68.3k|    else {
 6936|  68.3k|        auto adapter = id_adapter{handler, 0};
 6937|  68.3k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  68.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  68.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 68.3k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  68.3k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 68.3k, False: 0]
  ------------------
 6948|  68.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  68.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  68.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 65.3k]
  |  |  |  Branch (859:45): [True: 0, False: 68.3k]
  |  |  |  Branch (859:45): [True: 2.96k, False: 65.3k]
  |  |  ------------------
  ------------------
 6954|  2.96k|                handler.on_error("Unknown format specifier");
 6955|  2.96k|                return begin;
 6956|  2.96k|            }
 6957|  68.3k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  68.3k|    }
 6964|  65.3k|    return begin + 1;
 6965|  68.3k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  68.3k|{
 6404|  68.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  68.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  68.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 68.3k, False: 0]
  |  Branch (6405:26): [True: 0, False: 68.3k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  68.3k|    handler();
 6410|  68.3k|    return begin;
 6411|  68.3k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  68.3k|        {
 6906|  68.3k|            arg_id = handler.on_arg_id();
 6907|  68.3k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|  68.3k|    {
 7083|  68.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  68.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  68.3k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6818|  68.3k|{
 6819|  68.3k|    auto do_presentation = [&]() -> const CharT* {
 6820|  68.3k|        if (*begin == CharT{'['}) {
 6821|  68.3k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  68.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  68.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  68.3k|                return begin;
 6827|  68.3k|            }
 6828|  68.3k|            handler.on_character_set_string(set);
 6829|  68.3k|            return begin;
 6830|  68.3k|        }
 6831|  68.3k|        if (*begin == CharT{'/'}) {
 6832|  68.3k|            return parse_presentation_regex(begin, end, handler);
 6833|  68.3k|        }
 6834|  68.3k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  68.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  68.3k|            handler.on_error("Invalid type specifier in format string");
 6837|  68.3k|            return begin;
 6838|  68.3k|        }
 6839|  68.3k|        handler.on_type(type);
 6840|  68.3k|        return begin;
 6841|  68.3k|    };
 6842|       |
 6843|  68.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 68.3k, False: 0]
  |  Branch (6843:28): [True: 63.0k, False: 5.25k]
  ------------------
 6844|  68.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 63.0k, False: 0]
  |  Branch (6844:36): [True: 61.6k, False: 1.48k]
  ------------------
 6845|  61.6k|        return do_presentation();
 6846|  61.6k|    }
 6847|       |
 6848|  6.73k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.73k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  6.73k|    begin = parse_align(begin, end, handler);
 6854|  6.73k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.73k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  6.73k|    begin = parse_width(begin, end, handler);
 6860|  6.73k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.73k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  6.73k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 6.73k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  6.73k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 1.48k, False: 5.25k]
  ------------------
 6879|  1.48k|        handler.on_localized();
 6880|  1.48k|        ++begin;
 6881|  1.48k|    }
 6882|  6.73k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.73k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  6.73k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 6.73k, False: 0]
  |  Branch (6887:25): [True: 5.25k, False: 1.48k]
  ------------------
 6888|  5.25k|        do_presentation();
 6889|  5.25k|    }
 6890|  6.73k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.73k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  6.73k|    return begin;
 6896|  6.73k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|  66.8k|    auto do_presentation = [&]() -> const CharT* {
 6820|  66.8k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 2.28k, False: 64.5k]
  ------------------
 6821|  2.28k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  2.28k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.28k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|  2.28k|            handler.on_character_set_string(set);
 6829|  2.28k|            return begin;
 6830|  2.28k|        }
 6831|  64.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 64.5k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  64.5k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  64.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  64.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 63.0k]
  |  |  ------------------
  ------------------
 6836|  1.48k|            handler.on_error("Invalid type specifier in format string");
 6837|  1.48k|            return begin;
 6838|  1.48k|        }
 6839|  63.0k|        handler.on_type(type);
 6840|  63.0k|        return begin;
 6841|  64.5k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6657|  2.28k|{
 6658|  2.28k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  2.28k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  2.28k|    auto start = begin;
 6662|  2.28k|    ++begin;
 6663|       |
 6664|  2.28k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.28k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  2.28k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 0, False: 2.28k]
  ------------------
 6671|      0|        handler.on_charset_inverted();
 6672|      0|        ++begin;
 6673|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 0]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|      0|    }
 6684|  2.28k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 2.28k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  6.85k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 6.85k, False: 0]
  ------------------
 6689|  6.85k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  6.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.85k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|  6.85k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 2.28k, False: 4.57k]
  ------------------
 6694|  2.28k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  2.28k|        }
 6696|       |
 6697|  4.57k|        parse_presentation_set_literal(begin, end, handler);
 6698|  4.57k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  2.28k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6621|  4.57k|{
 6622|  4.57k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  4.57k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  4.57k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.57k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|  4.57k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 4.57k, False: 0]
  |  Branch (6629:25): [True: 4.57k, False: 0]
  |  Branch (6629:49): [True: 4.57k, False: 0]
  ------------------
 6630|  4.57k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 4.57k, False: 0]
  ------------------
 6631|  4.57k|        ++begin;
 6632|       |
 6633|  4.57k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  4.57k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.57k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  4.57k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.57k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  4.57k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  4.57k|        return;
 6647|  4.57k|    }
 6648|       |
 6649|      0|    handler.on_charset_single(cp_first);
 6650|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6597|  9.14k|{
 6598|  9.14k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  9.14k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  9.14k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.14k]
  |  |  |  Branch (859:45): [True: 0, False: 9.14k]
  |  |  |  Branch (859:45): [True: 0, False: 9.14k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  9.14k|    const auto cp =
 6607|  9.14k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  9.14k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  9.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.14k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|  9.14k|    begin += len;
 6614|  9.14k|    return cp;
 6615|  9.14k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6492|  6.73k|{
 6493|  6.73k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  6.73k|    auto check_align = [](wchar_t ch) {
 6496|  6.73k|        switch (ch) {
 6497|  6.73k|            case L'<':
 6498|  6.73k|                return align_type::left;
 6499|  6.73k|            case L'>':
 6500|  6.73k|                return align_type::right;
 6501|  6.73k|            case L'^':
 6502|  6.73k|                return align_type::center;
 6503|  6.73k|            default:
 6504|  6.73k|                return align_type::none;
 6505|  6.73k|        }
 6506|  6.73k|    };
 6507|       |
 6508|  6.73k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  6.73k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.73k]
  |  |  |  Branch (859:45): [True: 0, False: 6.73k]
  |  |  |  Branch (859:45): [True: 0, False: 6.73k]
  |  |  ------------------
  ------------------
 6510|  6.73k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  6.73k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  6.73k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  6.73k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  6.73k|    const auto begin_before_fill = begin;
 6520|  6.73k|    begin += potential_fill_len;
 6521|       |
 6522|  6.73k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 6.73k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  6.73k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  6.73k|    const auto begin_after_fill = begin;
 6528|  6.73k|    ++begin;
 6529|       |
 6530|  6.73k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 6.73k, False: 0]
  ------------------
 6531|  6.73k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  6.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.73k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  6.73k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 2.28k, False: 4.44k]
  ------------------
 6536|  2.28k|            return begin_before_fill;
 6537|  2.28k|        }
 6538|  6.73k|    }
 6539|       |
 6540|  4.44k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 4.44k, False: 0]
  ------------------
 6541|  4.44k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 4.44k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  4.44k|        return begin_before_fill;
 6546|  4.44k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  4.44k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|  13.4k|    auto check_align = [](wchar_t ch) {
 6496|  13.4k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 13.4k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 13.4k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 13.4k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  13.4k|            default:
  ------------------
  |  Branch (6503:13): [True: 13.4k, False: 0]
  ------------------
 6504|  13.4k|                return align_type::none;
 6505|  13.4k|        }
 6506|  13.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6557|  6.73k|{
 6558|  6.73k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  6.73k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 6.73k, False: 0]
  |  Branch (6560:33): [True: 2.96k, False: 3.76k]
  ------------------
 6561|  2.96k|        int width = parse_simple_int(begin, end);
 6562|  2.96k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  2.96k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.96k, False: 0]
  |  |  ------------------
  ------------------
 6563|  2.96k|            handler.on_width(width);
 6564|  2.96k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  2.96k|    }
 6570|  6.73k|    return begin;
 6571|  6.73k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7087|  1.48k|    {
 7088|  1.48k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  1.48k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 1.48k, False: 0]
  ------------------
 7090|  1.48k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 1.48k, False: 0]
  ------------------
 7091|  1.48k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 1.48k, False: 0]
  ------------------
 7092|  1.48k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 1.48k, False: 0]
  ------------------
 7093|  1.48k|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|  1.48k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|  1.48k|        }
 7098|       |
 7099|      0|        Handler::on_localized();
 7100|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  65.3k|{
 8378|  65.3k|#define SCN_VISIT(Type)                                         \
 8379|  65.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  65.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  65.3k|    }                                                           \
 8382|  65.3k|    else {                                                      \
 8383|  65.3k|        return vis(monostate_val);                              \
 8384|  65.3k|    }
 8385|       |
 8386|  65.3k|    monostate monostate_val{};
 8387|       |
 8388|  65.3k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 65.3k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 65.3k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 65.3k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 65.3k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 65.3k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 65.3k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 65.3k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 65.3k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 65.3k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 65.3k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 65.3k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 65.3k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 65.3k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 65.3k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 65.3k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 65.3k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 65.3k]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 65.3k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 65.3k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|  65.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 65.3k, False: 0]
  ------------------
 8428|  65.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  65.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  65.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  65.3k|    }                                                           \
  |  | 8382|  65.3k|    else {                                                      \
  |  | 8383|  65.3k|        return vis(monostate_val);                              \
  |  | 8384|  65.3k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 65.3k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 65.3k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 65.3k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 65.3k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 65.3k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 65.3k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 65.3k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  65.3k|            SCN_CLANG_POP
 8456|  65.3k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4046|  9.63k|    {
 4047|  9.63k|        sync(0);
 4048|  9.63k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|  45.2M|    {
 5427|  45.2M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  45.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.2M]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|  45.2M|        return static_cast<std::size_t>(m_desc &
 5432|  45.2M|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|  45.2M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|  90.5M|    {
 5452|  90.5M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|  90.5M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|  45.2M|    {
 5395|  45.2M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  45.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.2M]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  45.2M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  45.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.2M]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|  45.2M|        const auto t = type(id);
 5407|  45.2M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  45.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.2M]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|  45.2M|        basic_scan_arg<Context> arg;
 5412|  45.2M|        arg.m_type = t;
 5413|  45.2M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 45.2M, False: 0]
  ------------------
 5414|  45.2M|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  45.2M|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  45.2M|        return arg;
 5420|  45.2M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|  45.2M|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  45.2M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  45.2M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  45.2M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  45.2M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|  45.2M|    {
 5456|  45.2M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  45.2M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|  79.2M|    {
 5208|  79.2M|        return m_type != detail::arg_type::none_type;
 5209|  79.2M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  22.6M|{
 8378|  22.6M|#define SCN_VISIT(Type)                                         \
 8379|  22.6M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  22.6M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  22.6M|    }                                                           \
 8382|  22.6M|    else {                                                      \
 8383|  22.6M|        return vis(monostate_val);                              \
 8384|  22.6M|    }
 8385|       |
 8386|  22.6M|    monostate monostate_val{};
 8387|       |
 8388|  22.6M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 22.6M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 22.6M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 22.6M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 22.6M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 22.6M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 22.6M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 22.6M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 22.6M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 22.6M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 22.6M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 22.6M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 22.6M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 22.6M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 22.6M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 22.6M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 22.6M]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 22.6M]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 22.6M]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 22.6M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 22.6M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|  11.3M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 11.3M, False: 11.3M]
  ------------------
 8430|  11.3M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|  11.3M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  11.3M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  11.3M|    }                                                           \
  |  | 8382|  11.3M|    else {                                                      \
  |  | 8383|  11.3M|        return vis(monostate_val);                              \
  |  | 8384|  11.3M|    }
  ------------------
 8431|  11.3M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 11.3M, False: 11.3M]
  ------------------
 8432|  11.3M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  11.3M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  11.3M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  11.3M|    }                                                           \
  |  | 8382|  11.3M|    else {                                                      \
  |  | 8383|  11.3M|        return vis(monostate_val);                              \
  |  | 8384|  11.3M|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 22.6M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 22.6M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 22.6M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 22.6M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 22.6M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  22.6M|            SCN_CLANG_POP
 8456|  22.6M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|  22.6M|    {
 5506|  22.6M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|  7.55M|    {
 8099|  7.55M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|  22.6M|    {
 8017|  22.6M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  15.1M|{
 7005|  15.1M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  15.1M|    handler.check_args_exhausted();
 7007|  15.1M|    return handler.get_error();
 7008|  15.1M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  15.1M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  15.1M|    auto begin = format.data();
 6974|  15.1M|    auto it = begin;
 6975|  15.1M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  30.1M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 15.1M, False: 15.0M]
  ------------------
 6978|  15.1M|        const auto ch = *it++;
 6979|  15.1M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 15.1M, False: 0]
  ------------------
 6980|  15.1M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  15.1M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  15.1M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 29.6k, False: 15.0M]
  ------------------
 6984|  29.6k|                return;
 6985|  29.6k|            }
 6986|  15.1M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  15.1M|    }
 6997|       |
 6998|  15.0M|    handler.on_literal_text(begin, end);
 6999|  15.0M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|  15.1M|{
 6903|  15.1M|    struct id_adapter {
 6904|  15.1M|        constexpr void operator()()
 6905|  15.1M|        {
 6906|  15.1M|            arg_id = handler.on_arg_id();
 6907|  15.1M|        }
 6908|  15.1M|        constexpr void operator()(std::size_t id)
 6909|  15.1M|        {
 6910|  15.1M|            arg_id = handler.on_arg_id(id);
 6911|  15.1M|        }
 6912|       |
 6913|  15.1M|        constexpr void on_error(const char* msg)
 6914|  15.1M|        {
 6915|  15.1M|            SCN_UNLIKELY_ATTR
 6916|  15.1M|            handler.on_error(msg);
 6917|  15.1M|        }
 6918|       |
 6919|  15.1M|        Handler& handler;
 6920|  15.1M|        std::size_t arg_id;
 6921|  15.1M|    };
 6922|       |
 6923|  15.1M|    ++begin;
 6924|  15.1M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.1M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  15.1M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 15.1M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  15.1M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 15.1M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  15.1M|    else {
 6936|  15.1M|        auto adapter = id_adapter{handler, 0};
 6937|  15.1M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  15.1M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.1M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  15.1M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 15.1M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  15.1M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 15.1M, False: 0]
  ------------------
 6948|  15.1M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  15.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.1M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  15.1M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  15.1M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  30.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 15.0M]
  |  |  |  Branch (859:45): [True: 0, False: 15.1M]
  |  |  |  Branch (859:45): [True: 11.8k, False: 15.0M]
  |  |  ------------------
  ------------------
 6954|  11.8k|                handler.on_error("Unknown format specifier");
 6955|  11.8k|                return begin;
 6956|  11.8k|            }
 6957|  15.1M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  15.1M|    }
 6964|  15.0M|    return begin + 1;
 6965|  15.1M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|  22.6M|    {
 8000|  22.6M|        return m_args.get(id);
 8001|  22.6M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|  22.6M|    {
 8010|  22.6M|        return m_locale;
 8011|  22.6M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|  22.6M|    {
 5527|  22.6M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  22.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6M]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  22.6M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  22.6M|        do_check_arg_id(id);
 5535|  22.6M|        return id;
 5536|  22.6M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|  22.6M|{
 6015|  22.6M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  22.6M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  22.6M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  15.1M|{
 6404|  15.1M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  15.1M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 15.1M, False: 0]
  |  Branch (6405:26): [True: 0, False: 15.1M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  15.1M|    handler();
 6410|  15.1M|    return begin;
 6411|  15.1M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6352|  17.7k|{
 6353|  17.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  17.7k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  17.7k|    unsigned long long value = 0;
 6357|  35.5k|    do {
 6358|  35.5k|        value *= 10;
 6359|  35.5k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  35.5k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 0, False: 35.5k]
  ------------------
 6361|  35.5k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|      0|            return -1;
 6363|      0|        }
 6364|  35.5k|        ++begin;
 6365|  35.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 35.5k, False: 0]
  |  Branch (6365:30): [True: 35.5k, False: 0]
  |  Branch (6365:47): [True: 17.7k, False: 17.7k]
  ------------------
 6366|  17.7k|    return static_cast<int>(value);
 6367|  17.7k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  15.1M|        {
 6906|  15.1M|            arg_id = handler.on_arg_id();
 6907|  15.1M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|  45.3M|    {
 5213|  45.3M|        return m_type;
 5214|  45.3M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|  22.6M|    {
 5522|  22.6M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  22.6M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4314|  18.8M|{
 4315|  18.8M|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 18.8M]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|  18.8M|    return ranges::subrange{forward_iterator{this, 0},
 4320|  18.8M|                            ranges::default_sentinel};
 4321|  18.8M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4147|  18.8M|    {
 4148|  18.8M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  18.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|  18.8M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  18.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|  18.8M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|  45.2M|    {
 5511|  45.2M|        return m_format.data();
 5512|  45.2M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  15.1M|    {
 7083|  15.1M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  15.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  15.1M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|  15.1M|{
 6819|  15.1M|    auto do_presentation = [&]() -> const CharT* {
 6820|  15.1M|        if (*begin == CharT{'['}) {
 6821|  15.1M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  15.1M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  15.1M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  15.1M|                return begin;
 6827|  15.1M|            }
 6828|  15.1M|            handler.on_character_set_string(set);
 6829|  15.1M|            return begin;
 6830|  15.1M|        }
 6831|  15.1M|        if (*begin == CharT{'/'}) {
 6832|  15.1M|            return parse_presentation_regex(begin, end, handler);
 6833|  15.1M|        }
 6834|  15.1M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  15.1M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  15.1M|            handler.on_error("Invalid type specifier in format string");
 6837|  15.1M|            return begin;
 6838|  15.1M|        }
 6839|  15.1M|        handler.on_type(type);
 6840|  15.1M|        return begin;
 6841|  15.1M|    };
 6842|       |
 6843|  15.1M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 15.1M, False: 0]
  |  Branch (6843:28): [True: 15.0M, False: 17.8k]
  ------------------
 6844|  15.1M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 15.0M, False: 0]
  |  Branch (6844:36): [True: 15.0M, False: 5.92k]
  ------------------
 6845|  15.0M|        return do_presentation();
 6846|  15.0M|    }
 6847|       |
 6848|  23.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  23.7k|    begin = parse_align(begin, end, handler);
 6854|  23.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  23.7k|    begin = parse_width(begin, end, handler);
 6860|  23.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  23.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 23.7k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  23.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 5.92k, False: 17.8k]
  ------------------
 6879|  5.92k|        handler.on_localized();
 6880|  5.92k|        ++begin;
 6881|  5.92k|    }
 6882|  23.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  23.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 23.7k, False: 0]
  |  Branch (6887:25): [True: 17.8k, False: 5.92k]
  ------------------
 6888|  17.8k|        do_presentation();
 6889|  17.8k|    }
 6890|  23.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  23.7k|    return begin;
 6896|  23.7k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|  22.6M|{
 6468|  22.6M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 22.6M, False: 8.89k]
  |  Branch (6468:33): [True: 22.6M, False: 0]
  ------------------
 6469|  22.6M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 8.89k, False: 0]
  |  Branch (6469:33): [True: 8.89k, False: 0]
  ------------------
 6470|  22.6M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  15.0M|    auto do_presentation = [&]() -> const CharT* {
 6820|  15.0M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 5.99k, False: 15.0M]
  ------------------
 6821|  5.99k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  5.99k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.99k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|  5.99k|            handler.on_character_set_string(set);
 6829|  5.99k|            return begin;
 6830|  5.99k|        }
 6831|  15.0M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 15.0M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  15.0M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  15.0M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  15.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.92k, False: 15.0M]
  |  |  ------------------
  ------------------
 6836|  5.92k|            handler.on_error("Invalid type specifier in format string");
 6837|  5.92k|            return begin;
 6838|  5.92k|        }
 6839|  15.0M|        handler.on_type(type);
 6840|  15.0M|        return begin;
 6841|  15.0M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|  5.99k|{
 6658|  5.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  5.99k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  5.99k|    auto start = begin;
 6662|  5.99k|    ++begin;
 6663|       |
 6664|  5.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.99k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  5.99k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 0, False: 5.99k]
  ------------------
 6671|      0|        handler.on_charset_inverted();
 6672|      0|        ++begin;
 6673|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 0]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|      0|    }
 6684|  5.99k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 5.99k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  17.9k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 17.9k, False: 0]
  ------------------
 6689|  17.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.9k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|  17.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 5.99k, False: 11.9k]
  ------------------
 6694|  5.99k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  5.99k|        }
 6696|       |
 6697|  11.9k|        parse_presentation_set_literal(begin, end, handler);
 6698|  11.9k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  5.99k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6621|  11.9k|{
 6622|  11.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  11.9k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  11.9k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|  11.9k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 11.9k, False: 0]
  |  Branch (6629:25): [True: 11.9k, False: 0]
  |  Branch (6629:49): [True: 11.9k, False: 0]
  ------------------
 6630|  11.9k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 11.9k, False: 0]
  ------------------
 6631|  11.9k|        ++begin;
 6632|       |
 6633|  11.9k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  11.9k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  11.9k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  11.9k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  11.9k|        return;
 6647|  11.9k|    }
 6648|       |
 6649|      0|    handler.on_charset_single(cp_first);
 6650|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6597|  23.9k|{
 6598|  23.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  23.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  23.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  |  Branch (859:45): [True: 0, False: 23.9k]
  |  |  |  Branch (859:45): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  23.9k|    const auto cp =
 6607|  23.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  23.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|  23.9k|    begin += len;
 6614|  23.9k|    return cp;
 6615|  23.9k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|  8.98k|    {
 6307|  8.98k|        m_specs.charset_string_data = fmt.data();
 6308|  8.98k|        m_specs.charset_string_size = fmt.size();
 6309|  8.98k|        on_type(presentation_type::string_set);
 6310|  8.98k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|  22.6M|{
 6416|  22.6M|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 22.6M]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 22.6M]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 22.6M]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 22.6M]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 22.6M]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 22.6M]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 22.6M]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 22.6M]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 22.6M]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 22.6M]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|      0|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 0, False: 22.6M]
  ------------------
 6435|      0|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 22.6M]
  ------------------
 6436|      0|            return presentation_type::float_hex;
 6437|      0|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 0, False: 22.6M]
  ------------------
 6438|      0|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 22.6M]
  ------------------
 6439|      0|            return presentation_type::float_scientific;
 6440|      0|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 0, False: 22.6M]
  ------------------
 6441|      0|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 22.6M]
  ------------------
 6442|      0|            return presentation_type::float_fixed;
 6443|      0|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 0, False: 22.6M]
  ------------------
 6444|      0|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 22.6M]
  ------------------
 6445|      0|            return presentation_type::float_general;
 6446|  22.6M|        case 's':
  ------------------
  |  Branch (6446:9): [True: 22.6M, False: 17.7k]
  ------------------
 6447|  22.6M|            return presentation_type::string;
 6448|  8.89k|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 8.89k, False: 22.6M]
  ------------------
 6449|  8.89k|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 22.6M]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 22.6M]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 22.6M]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 22.6M]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|  8.89k|        default:
  ------------------
  |  Branch (6460:9): [True: 8.89k, False: 22.6M]
  ------------------
 6461|  8.89k|            return presentation_type::none;
 6462|  22.6M|    }
 6463|  22.6M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|  23.7k|{
 6493|  23.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  23.7k|    auto check_align = [](wchar_t ch) {
 6496|  23.7k|        switch (ch) {
 6497|  23.7k|            case L'<':
 6498|  23.7k|                return align_type::left;
 6499|  23.7k|            case L'>':
 6500|  23.7k|                return align_type::right;
 6501|  23.7k|            case L'^':
 6502|  23.7k|                return align_type::center;
 6503|  23.7k|            default:
 6504|  23.7k|                return align_type::none;
 6505|  23.7k|        }
 6506|  23.7k|    };
 6507|       |
 6508|  23.7k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  23.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.7k]
  |  |  |  Branch (859:45): [True: 0, False: 23.7k]
  |  |  |  Branch (859:45): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
 6510|  23.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  23.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  23.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  23.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  23.7k|    const auto begin_before_fill = begin;
 6520|  23.7k|    begin += potential_fill_len;
 6521|       |
 6522|  23.7k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 23.7k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  23.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  23.7k|    const auto begin_after_fill = begin;
 6528|  23.7k|    ++begin;
 6529|       |
 6530|  23.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 23.7k, False: 0]
  ------------------
 6531|  23.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  23.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 5.99k, False: 17.7k]
  ------------------
 6536|  5.99k|            return begin_before_fill;
 6537|  5.99k|        }
 6538|  23.7k|    }
 6539|       |
 6540|  17.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 17.7k, False: 0]
  ------------------
 6541|  17.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 17.7k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  17.7k|        return begin_before_fill;
 6546|  17.7k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  17.7k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|  35.6k|{
 6475|  35.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  35.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  35.6k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  35.6k|        return 1;
 6478|  35.6k|    }
 6479|  35.6k|    else {
 6480|  35.6k|        const auto lengths =
 6481|  35.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  35.6k|            "\3\4";
 6483|  35.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  35.6k|        return len;
 6485|  35.6k|    }
 6486|  35.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  47.5k|    auto check_align = [](wchar_t ch) {
 6496|  47.5k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 47.5k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 47.5k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 47.5k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  47.5k|            default:
  ------------------
  |  Branch (6503:13): [True: 47.5k, False: 0]
  ------------------
 6504|  47.5k|                return align_type::none;
 6505|  47.5k|        }
 6506|  47.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|  23.7k|{
 6558|  23.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  23.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 23.7k, False: 0]
  |  Branch (6560:33): [True: 11.8k, False: 11.9k]
  ------------------
 6561|  11.8k|        int width = parse_simple_int(begin, end);
 6562|  11.8k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  11.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.8k, False: 0]
  |  |  ------------------
  ------------------
 6563|  11.8k|            handler.on_width(width);
 6564|  11.8k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  11.8k|    }
 6570|  23.7k|    return begin;
 6571|  23.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7087|  5.92k|    {
 7088|  5.92k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  5.92k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 5.92k, False: 0]
  ------------------
 7090|  5.92k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 5.92k, False: 0]
  ------------------
 7091|  5.92k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 5.92k, False: 0]
  ------------------
 7092|  5.92k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 5.92k, False: 0]
  ------------------
 7093|  5.92k|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|  5.92k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|  5.92k|        }
 7098|       |
 7099|      0|        Handler::on_localized();
 7100|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  15.0M|{
 8378|  15.0M|#define SCN_VISIT(Type)                                         \
 8379|  15.0M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  15.0M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  15.0M|    }                                                           \
 8382|  15.0M|    else {                                                      \
 8383|  15.0M|        return vis(monostate_val);                              \
 8384|  15.0M|    }
 8385|       |
 8386|  15.0M|    monostate monostate_val{};
 8387|       |
 8388|  15.0M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 15.0M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 15.0M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 15.0M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 15.0M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 15.0M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 15.0M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 15.0M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 15.0M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 15.0M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 15.0M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 15.0M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 15.0M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 15.0M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 15.0M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 15.0M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 15.0M]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 15.0M]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 15.0M]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 15.0M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 15.0M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|  7.54M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 7.54M, False: 7.54M]
  ------------------
 8430|  7.54M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|  7.54M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.54M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.54M|    }                                                           \
  |  | 8382|  7.54M|    else {                                                      \
  |  | 8383|  7.54M|        return vis(monostate_val);                              \
  |  | 8384|  7.54M|    }
  ------------------
 8431|  7.54M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 7.54M, False: 7.54M]
  ------------------
 8432|  7.54M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  7.54M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.54M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.54M|    }                                                           \
  |  | 8382|  7.54M|    else {                                                      \
  |  | 8383|  7.54M|        return vis(monostate_val);                              \
  |  | 8384|  7.54M|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 15.0M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 15.0M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 15.0M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 15.0M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 15.0M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  15.0M|            SCN_CLANG_POP
 8456|  15.0M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  11.3M|{
 8378|  11.3M|#define SCN_VISIT(Type)                                         \
 8379|  11.3M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  11.3M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  11.3M|    }                                                           \
 8382|  11.3M|    else {                                                      \
 8383|  11.3M|        return vis(monostate_val);                              \
 8384|  11.3M|    }
 8385|       |
 8386|  11.3M|    monostate monostate_val{};
 8387|       |
 8388|  11.3M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 11.3M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 11.3M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 11.3M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 11.3M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 11.3M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 11.3M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 11.3M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 11.3M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 11.3M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 11.3M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 11.3M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 11.3M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 11.3M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 11.3M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 11.3M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 11.3M]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 11.3M]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 11.3M]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 11.3M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 11.3M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 11.3M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  11.3M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 11.3M, False: 0]
  ------------------
 8432|  11.3M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  11.3M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  11.3M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  11.3M|    }                                                           \
  |  | 8382|  11.3M|    else {                                                      \
  |  | 8383|  11.3M|        return vis(monostate_val);                              \
  |  | 8384|  11.3M|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 11.3M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 11.3M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 11.3M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 11.3M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 11.3M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  11.3M|            SCN_CLANG_POP
 8456|  11.3M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  7.55M|{
 7005|  7.55M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  7.55M|    handler.check_args_exhausted();
 7007|  7.55M|    return handler.get_error();
 7008|  7.55M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  7.55M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  7.55M|    auto begin = format.data();
 6974|  7.55M|    auto it = begin;
 6975|  7.55M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  15.0M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 7.55M, False: 7.53M]
  ------------------
 6978|  7.55M|        const auto ch = *it++;
 6979|  7.55M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 7.55M, False: 0]
  ------------------
 6980|  7.55M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  7.55M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  7.55M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 14.8k, False: 7.53M]
  ------------------
 6984|  14.8k|                return;
 6985|  14.8k|            }
 6986|  7.55M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  7.55M|    }
 6997|       |
 6998|  7.53M|    handler.on_literal_text(begin, end);
 6999|  7.53M|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8135|  7.53M|    {
 8136|  7.53M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  7.53M|    static_cast<    \
  |  |  929|  7.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  7.53M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6902|  7.55M|{
 6903|  7.55M|    struct id_adapter {
 6904|  7.55M|        constexpr void operator()()
 6905|  7.55M|        {
 6906|  7.55M|            arg_id = handler.on_arg_id();
 6907|  7.55M|        }
 6908|  7.55M|        constexpr void operator()(std::size_t id)
 6909|  7.55M|        {
 6910|  7.55M|            arg_id = handler.on_arg_id(id);
 6911|  7.55M|        }
 6912|       |
 6913|  7.55M|        constexpr void on_error(const char* msg)
 6914|  7.55M|        {
 6915|  7.55M|            SCN_UNLIKELY_ATTR
 6916|  7.55M|            handler.on_error(msg);
 6917|  7.55M|        }
 6918|       |
 6919|  7.55M|        Handler& handler;
 6920|  7.55M|        std::size_t arg_id;
 6921|  7.55M|    };
 6922|       |
 6923|  7.55M|    ++begin;
 6924|  7.55M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.55M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  7.55M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 7.55M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  7.55M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 7.55M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  7.55M|    else {
 6936|  7.55M|        auto adapter = id_adapter{handler, 0};
 6937|  7.55M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  7.55M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.55M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  7.55M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 7.55M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  7.55M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 7.55M, False: 0]
  ------------------
 6948|  7.55M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.55M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  7.55M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  7.55M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  15.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.92k, False: 7.54M]
  |  |  |  Branch (859:45): [True: 0, False: 7.55M]
  |  |  |  Branch (859:45): [True: 5.92k, False: 7.54M]
  |  |  ------------------
  ------------------
 6954|  5.92k|                handler.on_error("Unknown format specifier");
 6955|  5.92k|                return begin;
 6956|  5.92k|            }
 6957|  7.55M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  7.55M|    }
 6964|  7.54M|    return begin + 1;
 6965|  7.55M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  7.55M|{
 6404|  7.55M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  7.55M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 7.55M, False: 0]
  |  Branch (6405:26): [True: 0, False: 7.55M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  7.55M|    handler();
 6410|  7.55M|    return begin;
 6411|  7.55M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  7.55M|        {
 6906|  7.55M|            arg_id = handler.on_arg_id();
 6907|  7.55M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|  7.55M|    {
 7083|  7.55M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  7.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  7.55M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6818|  7.55M|{
 6819|  7.55M|    auto do_presentation = [&]() -> const CharT* {
 6820|  7.55M|        if (*begin == CharT{'['}) {
 6821|  7.55M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  7.55M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  7.55M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  7.55M|                return begin;
 6827|  7.55M|            }
 6828|  7.55M|            handler.on_character_set_string(set);
 6829|  7.55M|            return begin;
 6830|  7.55M|        }
 6831|  7.55M|        if (*begin == CharT{'/'}) {
 6832|  7.55M|            return parse_presentation_regex(begin, end, handler);
 6833|  7.55M|        }
 6834|  7.55M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  7.55M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  7.55M|            handler.on_error("Invalid type specifier in format string");
 6837|  7.55M|            return begin;
 6838|  7.55M|        }
 6839|  7.55M|        handler.on_type(type);
 6840|  7.55M|        return begin;
 6841|  7.55M|    };
 6842|       |
 6843|  7.55M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 7.55M, False: 0]
  |  Branch (6843:28): [True: 7.54M, False: 8.92k]
  ------------------
 6844|  7.55M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 7.54M, False: 0]
  |  Branch (6844:36): [True: 7.54M, False: 2.96k]
  ------------------
 6845|  7.54M|        return do_presentation();
 6846|  7.54M|    }
 6847|       |
 6848|  11.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  11.8k|    begin = parse_align(begin, end, handler);
 6854|  11.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  11.8k|    begin = parse_width(begin, end, handler);
 6860|  11.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  11.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 11.8k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  11.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 2.96k, False: 8.92k]
  ------------------
 6879|  2.96k|        handler.on_localized();
 6880|  2.96k|        ++begin;
 6881|  2.96k|    }
 6882|  11.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  11.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 11.8k, False: 0]
  |  Branch (6887:25): [True: 8.92k, False: 2.96k]
  ------------------
 6888|  8.92k|        do_presentation();
 6889|  8.92k|    }
 6890|  11.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  11.8k|    return begin;
 6896|  11.8k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|  7.54M|    auto do_presentation = [&]() -> const CharT* {
 6820|  7.54M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 2.99k, False: 7.54M]
  ------------------
 6821|  2.99k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  2.99k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.99k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|  2.99k|            handler.on_character_set_string(set);
 6829|  2.99k|            return begin;
 6830|  2.99k|        }
 6831|  7.54M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 7.54M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  7.54M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  7.54M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 7.54M]
  |  |  ------------------
  ------------------
 6836|  2.96k|            handler.on_error("Invalid type specifier in format string");
 6837|  2.96k|            return begin;
 6838|  2.96k|        }
 6839|  7.54M|        handler.on_type(type);
 6840|  7.54M|        return begin;
 6841|  7.54M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6657|  2.99k|{
 6658|  2.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  2.99k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  2.99k|    auto start = begin;
 6662|  2.99k|    ++begin;
 6663|       |
 6664|  2.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.99k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  2.99k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 0, False: 2.99k]
  ------------------
 6671|      0|        handler.on_charset_inverted();
 6672|      0|        ++begin;
 6673|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 0]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|      0|    }
 6684|  2.99k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 2.99k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|  8.98k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 8.98k, False: 0]
  ------------------
 6689|  8.98k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.98k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|  8.98k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 2.99k, False: 5.99k]
  ------------------
 6694|  2.99k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  2.99k|        }
 6696|       |
 6697|  5.99k|        parse_presentation_set_literal(begin, end, handler);
 6698|  5.99k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  2.99k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6621|  5.99k|{
 6622|  5.99k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  5.99k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  5.99k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.99k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|  5.99k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 5.99k, False: 0]
  |  Branch (6629:25): [True: 5.99k, False: 0]
  |  Branch (6629:49): [True: 5.99k, False: 0]
  ------------------
 6630|  5.99k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 5.99k, False: 0]
  ------------------
 6631|  5.99k|        ++begin;
 6632|       |
 6633|  5.99k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  5.99k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.99k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  5.99k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.99k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  5.99k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  5.99k|        return;
 6647|  5.99k|    }
 6648|       |
 6649|      0|    handler.on_charset_single(cp_first);
 6650|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6597|  11.9k|{
 6598|  11.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  11.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  11.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  |  Branch (859:45): [True: 0, False: 11.9k]
  |  |  |  Branch (859:45): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  11.9k|    const auto cp =
 6607|  11.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  11.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|  11.9k|    begin += len;
 6614|  11.9k|    return cp;
 6615|  11.9k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6492|  11.8k|{
 6493|  11.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  11.8k|    auto check_align = [](wchar_t ch) {
 6496|  11.8k|        switch (ch) {
 6497|  11.8k|            case L'<':
 6498|  11.8k|                return align_type::left;
 6499|  11.8k|            case L'>':
 6500|  11.8k|                return align_type::right;
 6501|  11.8k|            case L'^':
 6502|  11.8k|                return align_type::center;
 6503|  11.8k|            default:
 6504|  11.8k|                return align_type::none;
 6505|  11.8k|        }
 6506|  11.8k|    };
 6507|       |
 6508|  11.8k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  11.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  |  Branch (859:45): [True: 0, False: 11.8k]
  |  |  |  Branch (859:45): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6510|  11.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  11.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  11.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  11.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  11.8k|    const auto begin_before_fill = begin;
 6520|  11.8k|    begin += potential_fill_len;
 6521|       |
 6522|  11.8k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 11.8k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  11.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  11.8k|    const auto begin_after_fill = begin;
 6528|  11.8k|    ++begin;
 6529|       |
 6530|  11.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 11.8k, False: 0]
  ------------------
 6531|  11.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  11.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 2.99k, False: 8.89k]
  ------------------
 6536|  2.99k|            return begin_before_fill;
 6537|  2.99k|        }
 6538|  11.8k|    }
 6539|       |
 6540|  8.89k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 8.89k, False: 0]
  ------------------
 6541|  8.89k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 8.89k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  8.89k|        return begin_before_fill;
 6546|  8.89k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  8.89k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|  23.7k|    auto check_align = [](wchar_t ch) {
 6496|  23.7k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 23.7k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 23.7k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 23.7k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  23.7k|            default:
  ------------------
  |  Branch (6503:13): [True: 23.7k, False: 0]
  ------------------
 6504|  23.7k|                return align_type::none;
 6505|  23.7k|        }
 6506|  23.7k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6557|  11.8k|{
 6558|  11.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  11.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 11.8k, False: 0]
  |  Branch (6560:33): [True: 5.92k, False: 5.96k]
  ------------------
 6561|  5.92k|        int width = parse_simple_int(begin, end);
 6562|  5.92k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.92k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.92k, False: 0]
  |  |  ------------------
  ------------------
 6563|  5.92k|            handler.on_width(width);
 6564|  5.92k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  5.92k|    }
 6570|  11.8k|    return begin;
 6571|  11.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7087|  2.96k|    {
 7088|  2.96k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  2.96k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 2.96k, False: 0]
  ------------------
 7090|  2.96k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 2.96k, False: 0]
  ------------------
 7091|  2.96k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 2.96k, False: 0]
  ------------------
 7092|  2.96k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 2.96k, False: 0]
  ------------------
 7093|  2.96k|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|  2.96k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|  2.96k|        }
 7098|       |
 7099|      0|        Handler::on_localized();
 7100|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  7.54M|{
 8378|  7.54M|#define SCN_VISIT(Type)                                         \
 8379|  7.54M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  7.54M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  7.54M|    }                                                           \
 8382|  7.54M|    else {                                                      \
 8383|  7.54M|        return vis(monostate_val);                              \
 8384|  7.54M|    }
 8385|       |
 8386|  7.54M|    monostate monostate_val{};
 8387|       |
 8388|  7.54M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 7.54M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 7.54M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 7.54M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 7.54M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 7.54M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 7.54M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 7.54M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 7.54M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 7.54M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 7.54M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 7.54M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 7.54M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 7.54M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 7.54M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 7.54M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 7.54M]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 0, False: 7.54M]
  ------------------
 8422|      0|            SCN_VISIT(double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 7.54M]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 7.54M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 7.54M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 7.54M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  7.54M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 7.54M, False: 0]
  ------------------
 8432|  7.54M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  7.54M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.54M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.54M|    }                                                           \
  |  | 8382|  7.54M|    else {                                                      \
  |  | 8383|  7.54M|        return vis(monostate_val);                              \
  |  | 8384|  7.54M|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 7.54M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 7.54M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 7.54M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 7.54M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 7.54M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  7.54M|            SCN_CLANG_POP
 8456|  7.54M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4046|  19.2k|    {
 4047|  19.2k|        sync(0);
 4048|  19.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5380|  92.0k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5380|  11.3M|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  7.54M|{
   89|  7.54M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  7.54M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.54M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  7.54M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  15.0M|{
   44|  15.0M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  15.0M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNSQ_13type_identityISL_E4typeEJDpNS15_ISW_E4typeEEEE:
  126|  7.54M|{
  127|  7.54M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  7.54M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  7.54M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  7.54M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  15.0M|{
   60|  15.0M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  15.0M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  162|  3.77M|{
  163|  3.77M|    T value;
  164|  3.77M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.77M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  3.77M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.77M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.77M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 3.76M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.48k|    }                                                  \
  |  |  |  | 3642|  3.77M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.76M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.76M|    static_cast<    \
  |  |  929|  3.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.76M|    static_cast<    \
  |  |  929|  3.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.77M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  7.54M|{
   72|  7.54M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  7.54M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  7.54M|{
   89|  7.54M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  7.54M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.54M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  7.54M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EELPv0ELSF_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
  126|  7.54M|{
  127|  7.54M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  7.54M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  7.54M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  7.54M|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
  162|  3.77M|{
  163|  3.77M|    T value;
  164|  3.77M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.77M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  3.77M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.77M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.77M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 3.76M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.48k|    }                                                  \
  |  |  |  | 3642|  3.77M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.76M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.76M|    static_cast<    \
  |  |  929|  3.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.76M|    static_cast<    \
  |  |  929|  3.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.77M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEEOSP_NS0_24basic_scan_format_stringIwNSU_13type_identityISP_E4typeEJDpNS16_IS10_E4typeEEEE:
   88|  7.54M|{
   89|  7.54M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  7.54M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.54M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  7.54M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  7.54M|{
   44|  7.54M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  7.54M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EELPv0ELSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSQ_NS0_24basic_scan_format_stringIwNSV_13type_identityISQ_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|  7.54M|{
  127|  7.54M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  7.54M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  7.54M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  7.54M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  7.54M|{
   60|  7.54M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  7.54M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJT_EEEEEOSP_:
  162|  3.77M|{
  163|  3.77M|    T value;
  164|  3.77M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  3.77M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  3.77M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.77M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.77M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 3.76M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.48k|    }                                                  \
  |  |  |  | 3642|  3.77M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  3.76M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.76M|    static_cast<    \
  |  |  929|  3.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.76M|    static_cast<    \
  |  |  929|  3.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  3.77M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  3.77M|{
   72|  3.77M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  3.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  3.77M|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  22.8M|{
  653|  22.8M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  22.8M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|   128k|{
 2176|   128k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|   128k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  65.1k|{
 2184|  65.1k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  65.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  65.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 60.6k, False: 4.44k]
  |  |  ------------------
  ------------------
 2186|  60.6k|        source.sync(*n);
 2187|  60.6k|    }
 2188|  4.44k|    else {
 2189|  4.44k|        source.sync_all();
 2190|  4.44k|    }
 2191|  65.1k|    return n;
 2192|  65.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  15.0M|{
 2200|  15.0M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  15.0M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  7.54M|{
 2208|  7.54M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  7.54M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  7.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.53M, False: 8.89k]
  |  |  ------------------
  ------------------
 2210|  7.53M|        source.sync(*n);
 2211|  7.53M|    }
 2212|  8.89k|    else {
 2213|  8.89k|        source.sync_all();
 2214|  8.89k|    }
 2215|  7.54M|    return n;
 2216|  7.54M|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   452k|{
  194|   452k|    return find_classic_impl(
  195|   452k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   452k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   452k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   458k|{
  202|   458k|    return find_classic_impl(
  203|   458k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   458k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   458k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|   128k|{
 2133|   128k|    return vscan_internal(source, format, args);
 2134|   128k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  65.1k|{
 2139|  65.1k|    auto n = vscan_internal(source, format, args);
 2140|  65.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  65.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 60.6k, False: 4.44k]
  |  |  ------------------
  ------------------
 2141|  60.6k|        source.sync(*n);
 2142|  60.6k|    }
 2143|  4.44k|    else {
 2144|  4.44k|        source.sync_all();
 2145|  4.44k|    }
 2146|  65.1k|    return n;
 2147|  65.1k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  15.0M|{
 2153|  15.0M|    return vscan_internal(source, format, args);
 2154|  15.0M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|  7.54M|{
 2159|  7.54M|    auto n = vscan_internal(source, format, args);
 2160|  7.54M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  7.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.53M, False: 8.89k]
  |  |  ------------------
  ------------------
 2161|  7.53M|        source.sync(*n);
 2162|  7.53M|    }
 2163|  8.89k|    else {
 2164|  8.89k|        source.sync_all();
 2165|  8.89k|    }
 2166|  7.54M|    return n;
 2167|  7.54M|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|  61.0k|{
 2243|  61.0k|    return vscan_value_internal(source, arg);
 2244|  61.0k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|  30.9k|{
 2248|  30.9k|    auto n = vscan_value_internal(source, arg);
 2249|  30.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  30.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.1k, False: 741]
  |  |  ------------------
  ------------------
 2250|  30.1k|        source.sync(*n);
 2251|  30.1k|    }
 2252|    741|    else {
 2253|    741|        source.sync_all();
 2254|    741|    }
 2255|  30.9k|    return n;
 2256|  30.9k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  7.54M|{
 2262|  7.54M|    return vscan_value_internal(source, arg);
 2263|  7.54M|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  3.77M|{
 2268|  3.77M|    auto n = vscan_value_internal(source, arg);
 2269|  3.77M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  3.77M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.76M, False: 1.48k]
  |  |  ------------------
  ------------------
 2270|  3.76M|        source.sync(*n);
 2271|  3.76M|    }
 2272|  1.48k|    else {
 2273|  1.48k|        source.sync_all();
 2274|  1.48k|    }
 2275|  3.77M|    return n;
 2276|  3.77M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   452k|{
  118|   452k|    auto it = source.begin();
  119|       |
  120|   809k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 654k, False: 154k]
  ------------------
  121|   654k|        auto sv =
  122|   654k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   654k|                .substr(0, 8);
  124|       |
  125|   654k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 492k, False: 161k]
  ------------------
  126|   492k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   492k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   492k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 239k, False: 253k]
  ------------------
  129|   239k|                break;
  130|   239k|            }
  131|   253k|            continue;
  132|   492k|        }
  133|       |
  134|   486k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 383k, False: 103k]
  ------------------
  135|   383k|            auto tmp =
  136|   383k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   383k|            auto res = get_next_code_point(tmp);
  138|   383k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 58.0k, False: 325k]
  ------------------
  139|  58.0k|                return it;
  140|  58.0k|            }
  141|   325k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   325k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   325k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   325k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   325k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   325k|        }
  145|   161k|    }
  146|       |
  147|   394k|    return detail::make_string_view_iterator(source, it);
  148|   452k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  1.11M|{
  105|  1.11M|    static_assert(sizeof(*source.data()) == 1);
  106|  1.11M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  1.11M|    uint64_t word{};
  108|  1.11M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  1.11M|    return has_byte_greater(word, 127) != 0;
  111|  1.11M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  2.16M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   383k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   458k|{
  118|   458k|    auto it = source.begin();
  119|       |
  120|   617k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 463k, False: 154k]
  ------------------
  121|   463k|        auto sv =
  122|   463k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   463k|                .substr(0, 8);
  124|       |
  125|   463k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 398k, False: 64.8k]
  ------------------
  126|   398k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   398k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   398k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 240k, False: 157k]
  ------------------
  129|   240k|                break;
  130|   240k|            }
  131|   157k|            continue;
  132|   398k|        }
  133|       |
  134|   134k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 132k, False: 1.85k]
  ------------------
  135|   132k|            auto tmp =
  136|   132k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   132k|            auto res = get_next_code_point(tmp);
  138|   132k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 63.0k, False: 69.2k]
  ------------------
  139|  63.0k|                return it;
  140|  63.0k|            }
  141|  69.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  69.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  69.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  69.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  69.2k|        }
  145|  64.8k|    }
  146|       |
  147|   395k|    return detail::make_string_view_iterator(source, it);
  148|   458k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.20M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   132k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   130k|{
 2065|   130k|    const auto argcount = args.size();
 2066|   130k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 61.8k, False: 68.3k]
  |  Branch (2066:60): [True: 61.8k, False: 0]
  ------------------
 2067|  61.8k|        auto arg = args.get(0);
 2068|  61.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  61.8k|    static_cast<    \
  |  |  929|  61.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  61.8k|    }
 2070|       |
 2071|  68.3k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 68.3k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  68.3k|    SCN_UNLIKELY_ATTR
 2079|  68.3k|    {
 2080|  68.3k|        auto handler = format_handler<false, CharT>{
 2081|  68.3k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  68.3k|    static_cast<    \
  |  |  929|  68.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  68.3k|    static_cast<    \
  |  |  929|  68.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  68.3k|        return vscan_parse_format_string(format, handler);
 2083|  68.3k|    }
 2084|  68.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   387k|{
 1625|   387k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 203k, False: 184k]
  ------------------
 1626|   203k|        return false;
 1627|   203k|    }
 1628|   184k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 184k, False: 0]
  |  Branch (1628:39): [True: 184k, False: 0]
  ------------------
 1629|   387k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  92.8k|{
 1658|  92.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  92.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  92.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  92.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  92.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  92.8k|    static_cast<    \
  |  |  929|  92.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  92.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  92.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.22k, False: 90.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.22k|    }                                                  \
  |  |  |  | 3642|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  90.5k|    return it.position();
 1675|  92.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   135k|    {
 1903|   135k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  22.8M|    {
 1722|  22.8M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  22.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.8M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  22.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   135k|    {
 1853|   135k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   135k|{
 2030|   135k|    const auto beg = handler.get_ctx().begin();
 2031|   135k|    detail::parse_format_string<false>(format, handler);
 2032|   135k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 120k]
  |  |  ------------------
  ------------------
 2033|  14.8k|        return unexpected(handler.error);
 2034|  14.8k|    }
 2035|   120k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   135k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|   907k|    {
 2014|   907k|        return ctx.get();
 2015|   907k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   907k|    {
 1857|   907k|        return contiguous_ctx;
 1858|   907k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   256k|    {
 1907|   256k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 256k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   256k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   135k|{
 1681|   135k|    auto arg = ctx.arg(id);
 1682|   135k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   135k|    return arg;
 1686|   135k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  22.8M|    {
 1797|  22.8M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  22.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.8M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  22.8M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  22.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.8M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  22.8M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  22.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22.8M, False: 0]
  |  |  ------------------
  ------------------
 1807|  22.8M|            visited_args_lower64 |= (1ull << id);
 1808|  22.8M|            return;
 1809|  22.8M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  22.8M|    {
 1782|  22.8M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  22.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.8M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  22.8M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  22.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22.8M, False: 0]
  |  |  ------------------
  ------------------
 1788|  22.8M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  22.8M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  22.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  40.0k|    {
 1766|  40.0k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.0k, False: 0]
  |  |  ------------------
  ------------------
 1767|  40.0k|            error = err;
 1768|  40.0k|        }
 1769|  40.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|   135k|    {
 1936|   135k|        return parse_ctx.next_arg_id();
 1937|   135k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|   135k|    {
 1977|   135k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   135k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   135k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 135k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   135k|        auto specs = detail::format_specs{};
 1990|   135k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   135k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   135k|            arg.type()};
 1993|       |
 1994|   135k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   135k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 135k]
  |  Branch (1995:29): [True: 0, False: 135k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   135k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.92k, False: 129k]
  |  |  ------------------
  ------------------
 2001|  5.92k|            return parse_ctx.begin();
 2002|  5.92k|        }
 2003|   129k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   129k|        on_visit_scan_arg(
 2006|   129k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   129k|                                           get_ctx().locale()},
 2008|   129k|            arg);
 2009|   129k|        return parse_ctx.begin();
 2010|   135k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   135k|    {
 1701|   135k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|   129k|    {
 1948|   129k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 129k]
  |  Branch (1948:23): [True: 0, False: 129k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   129k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   129k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 120k]
  |  |  ------------------
  ------------------
 1955|  8.89k|            on_error(r.error());
 1956|  8.89k|        }
 1957|   120k|        else {
 1958|   120k|            get_ctx().advance_to(*r);
 1959|   120k|        }
 1960|   129k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  26.6k|    {
 1761|  26.6k|        SCN_UNLIKELY_ATTR
 1762|  26.6k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  26.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  22.8M|    {
 1729|  22.8M|        {
 1730|  22.8M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 22.8M]
  ------------------
 1731|  22.8M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 22.8M]
  ------------------
 1732|  22.8M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  22.8M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  22.8M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 22.8M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  22.8M|        }
 1739|       |
 1740|  22.8M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 22.8M, False: 0]
  ------------------
 1741|  22.8M|            return;
 1742|  22.8M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  22.8M|    {
 1777|  22.8M|        return error;
 1778|  22.8M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  68.5M|    {
 1773|  68.5M|        return static_cast<bool>(error);
 1774|  68.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  68.3k|    {
 1903|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  68.3k|    {
 1830|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  68.3k|{
 2030|  68.3k|    const auto beg = handler.get_ctx().begin();
 2031|  68.3k|    detail::parse_format_string<false>(format, handler);
 2032|  68.3k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.41k, False: 60.9k]
  |  |  ------------------
  ------------------
 2033|  7.41k|        return unexpected(handler.error);
 2034|  7.41k|    }
 2035|  60.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  68.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|   457k|    {
 2014|   457k|        return ctx.get();
 2015|   457k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   457k|    {
 1834|   457k|        return ctx;
 1835|   457k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   129k|    {
 1907|   129k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 129k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   129k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  68.3k|{
 1681|  68.3k|    auto arg = ctx.arg(id);
 1682|  68.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.3k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  68.3k|    return arg;
 1686|  68.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  68.3k|    {
 1936|  68.3k|        return parse_ctx.next_arg_id();
 1937|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  68.3k|    {
 1977|  68.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  68.3k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  68.3k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 68.3k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  68.3k|        auto specs = detail::format_specs{};
 1990|  68.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  68.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  68.3k|            arg.type()};
 1993|       |
 1994|  68.3k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  68.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 68.3k]
  |  Branch (1995:29): [True: 0, False: 68.3k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  68.3k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 65.3k]
  |  |  ------------------
  ------------------
 2001|  2.96k|            return parse_ctx.begin();
 2002|  2.96k|        }
 2003|  65.3k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  65.3k|        on_visit_scan_arg(
 2006|  65.3k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  65.3k|                                           get_ctx().locale()},
 2008|  65.3k|            arg);
 2009|  65.3k|        return parse_ctx.begin();
 2010|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  68.3k|    {
 1701|  68.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  65.3k|    {
 1948|  65.3k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 65.3k]
  |  Branch (1948:23): [True: 0, False: 65.3k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  65.3k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  65.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  65.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.44k, False: 60.9k]
  |  |  ------------------
  ------------------
 1955|  4.44k|            on_error(r.error());
 1956|  4.44k|        }
 1957|  60.9k|        else {
 1958|  60.9k|            get_ctx().advance_to(*r);
 1959|  60.9k|        }
 1960|  65.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   257k|{
 2045|   257k|    const auto argcount = args.size();
 2046|   257k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 122k, False: 135k]
  |  Branch (2046:60): [True: 122k, False: 0]
  ------------------
 2047|   122k|        auto arg = args.get(0);
 2048|   122k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   122k|    }
 2050|       |
 2051|   135k|    auto handler = format_handler<true, CharT>{
 2052|   135k|        ranges::subrange<const CharT*>{source.data(),
 2053|   135k|                                       source.data() + source.size()},
 2054|   135k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   135k|    static_cast<    \
  |  |  929|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   135k|    static_cast<    \
  |  |  929|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   135k|    return vscan_parse_format_string(format, handler);
 2056|   257k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   183k|{
 1638|   183k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   183k|    auto reader =
 1644|   183k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   183k|            ranges::subrange<const CharT*>{source.data(),
 1646|   183k|                                           source.data() + source.size()},
 1647|   183k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   183k|    static_cast<    \
  |  |  929|   183k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   183k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.44k, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  4.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  4.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  4.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  4.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  4.44k|    }                                                  \
  |  |  |  | 3642|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   178k|    return ranges::distance(source.data(), it);
 1650|   183k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  30.1M|{
 2045|  30.1M|    const auto argcount = args.size();
 2046|  30.1M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 15.0M, False: 15.1M]
  |  Branch (2046:60): [True: 15.0M, False: 0]
  ------------------
 2047|  15.0M|        auto arg = args.get(0);
 2048|  15.0M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  15.0M|    static_cast<    \
  |  |  929|  15.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  15.0M|    }
 2050|       |
 2051|  15.1M|    auto handler = format_handler<true, CharT>{
 2052|  15.1M|        ranges::subrange<const CharT*>{source.data(),
 2053|  15.1M|                                       source.data() + source.size()},
 2054|  15.1M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  15.1M|    static_cast<    \
  |  |  929|  15.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  15.1M|    static_cast<    \
  |  |  929|  15.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  15.1M|    return vscan_parse_format_string(format, handler);
 2056|  30.1M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  45.2M|{
 1625|  45.2M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 22.6M, False: 22.6M]
  ------------------
 1626|  22.6M|        return false;
 1627|  22.6M|    }
 1628|  22.6M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 22.6M, False: 0]
  |  Branch (1628:39): [True: 22.6M, False: 0]
  ------------------
 1629|  45.2M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  22.6M|{
 1638|  22.6M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  22.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  22.6M|    auto reader =
 1644|  22.6M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  22.6M|            ranges::subrange<const CharT*>{source.data(),
 1646|  22.6M|                                           source.data() + source.size()},
 1647|  22.6M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  22.6M|    static_cast<    \
  |  |  929|  22.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  22.6M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  22.6M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  22.6M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  22.6M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.89k, False: 22.6M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  8.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  8.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  8.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  8.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  8.89k|    }                                                  \
  |  |  |  | 3642|  22.6M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  22.6M|    return ranges::distance(source.data(), it);
 1650|  22.6M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|  15.1M|    {
 1903|  15.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|  15.1M|    {
 1853|  15.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  15.1M|{
 2030|  15.1M|    const auto beg = handler.get_ctx().begin();
 2031|  15.1M|    detail::parse_format_string<false>(format, handler);
 2032|  15.1M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  15.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.6k, False: 15.0M]
  |  |  ------------------
  ------------------
 2033|  29.6k|        return unexpected(handler.error);
 2034|  29.6k|    }
 2035|  15.0M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  15.1M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|   105M|    {
 2014|   105M|        return ctx.get();
 2015|   105M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   105M|    {
 1857|   105M|        return contiguous_ctx;
 1858|   105M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  30.1M|    {
 1907|  30.1M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 30.1M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  30.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  15.1M|{
 1681|  15.1M|    auto arg = ctx.arg(id);
 1682|  15.1M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  15.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.1M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  15.1M|    return arg;
 1686|  15.1M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  15.1M|    {
 1936|  15.1M|        return parse_ctx.next_arg_id();
 1937|  15.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  15.1M|    {
 1977|  15.1M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  15.1M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  15.1M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 15.1M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  15.1M|        auto specs = detail::format_specs{};
 1990|  15.1M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  15.1M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  15.1M|            arg.type()};
 1993|       |
 1994|  15.1M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  15.1M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 15.1M]
  |  Branch (1995:29): [True: 0, False: 15.1M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  15.1M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  15.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 15.0M]
  |  |  ------------------
  ------------------
 2001|  11.8k|            return parse_ctx.begin();
 2002|  11.8k|        }
 2003|  15.0M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  15.0M|        on_visit_scan_arg(
 2006|  15.0M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  15.0M|                                           get_ctx().locale()},
 2008|  15.0M|            arg);
 2009|  15.0M|        return parse_ctx.begin();
 2010|  15.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  15.1M|    {
 1701|  15.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  15.0M|    {
 1948|  15.0M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 15.0M]
  |  Branch (1948:23): [True: 0, False: 15.0M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  15.0M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  15.0M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  15.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.7k, False: 15.0M]
  |  |  ------------------
  ------------------
 1955|  17.7k|            on_error(r.error());
 1956|  17.7k|        }
 1957|  15.0M|        else {
 1958|  15.0M|            get_ctx().advance_to(*r);
 1959|  15.0M|        }
 1960|  15.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  15.0M|{
 2065|  15.0M|    const auto argcount = args.size();
 2066|  15.0M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 7.54M, False: 7.55M]
  |  Branch (2066:60): [True: 7.54M, False: 0]
  ------------------
 2067|  7.54M|        auto arg = args.get(0);
 2068|  7.54M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  7.54M|    static_cast<    \
  |  |  929|  7.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  7.54M|    }
 2070|       |
 2071|  7.55M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 7.55M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  7.55M|    SCN_UNLIKELY_ATTR
 2079|  7.55M|    {
 2080|  7.55M|        auto handler = format_handler<false, CharT>{
 2081|  7.55M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  7.55M|    static_cast<    \
  |  |  929|  7.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  7.55M|    static_cast<    \
  |  |  929|  7.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  7.55M|        return vscan_parse_format_string(format, handler);
 2083|  7.55M|    }
 2084|  7.55M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  11.3M|{
 1658|  11.3M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3M]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  11.3M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  11.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 11.3M]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  11.3M|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  11.3M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  11.3M|    static_cast<    \
  |  |  929|  11.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  11.3M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  11.3M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  11.3M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  11.3M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.44k, False: 11.3M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  4.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  4.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  4.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  4.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  4.44k|    }                                                  \
  |  |  |  | 3642|  11.3M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  11.3M|    return it.position();
 1675|  11.3M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|  7.55M|    {
 1903|  7.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|  7.55M|    {
 1830|  7.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  7.55M|{
 2030|  7.55M|    const auto beg = handler.get_ctx().begin();
 2031|  7.55M|    detail::parse_format_string<false>(format, handler);
 2032|  7.55M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 7.53M]
  |  |  ------------------
  ------------------
 2033|  14.8k|        return unexpected(handler.error);
 2034|  14.8k|    }
 2035|  7.53M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  7.55M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  52.8M|    {
 2014|  52.8M|        return ctx.get();
 2015|  52.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  52.8M|    {
 1834|  52.8M|        return ctx;
 1835|  52.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  15.0M|    {
 1907|  15.0M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 15.0M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  15.0M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  7.55M|{
 1681|  7.55M|    auto arg = ctx.arg(id);
 1682|  7.55M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.55M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  7.55M|    return arg;
 1686|  7.55M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|  7.55M|    {
 1936|  7.55M|        return parse_ctx.next_arg_id();
 1937|  7.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|  7.55M|    {
 1977|  7.55M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  7.55M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  7.55M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 7.55M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  7.55M|        auto specs = detail::format_specs{};
 1990|  7.55M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  7.55M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  7.55M|            arg.type()};
 1993|       |
 1994|  7.55M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  7.55M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 7.55M]
  |  Branch (1995:29): [True: 0, False: 7.55M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  7.55M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  7.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.92k, False: 7.54M]
  |  |  ------------------
  ------------------
 2001|  5.92k|            return parse_ctx.begin();
 2002|  5.92k|        }
 2003|  7.54M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  7.54M|        on_visit_scan_arg(
 2006|  7.54M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  7.54M|                                           get_ctx().locale()},
 2008|  7.54M|            arg);
 2009|  7.54M|        return parse_ctx.begin();
 2010|  7.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|  7.55M|    {
 1701|  7.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  7.54M|    {
 1948|  7.54M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 7.54M]
  |  Branch (1948:23): [True: 0, False: 7.54M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  7.54M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  7.54M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 7.53M]
  |  |  ------------------
  ------------------
 1955|  8.89k|            on_error(r.error());
 1956|  8.89k|        }
 1957|  7.53M|        else {
 1958|  7.53M|            get_ctx().advance_to(*r);
 1959|  7.53M|        }
 1960|  7.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  61.0k|{
 2091|  61.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  61.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  61.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  30.9k|{
 2091|  30.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  30.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  7.54M|{
 2091|  7.54M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  7.54M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  3.77M|{
 2091|  3.77M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  3.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  3.77M|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|    741|{
 1363|    741|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|    741|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|    741|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|    741|            std::u32string tmp;
 1368|    741|            transcode_to_string_impl_to32(src, tmp);
 1369|    741|            return transcode_to_string_impl_32to16<false>(
 1370|    741|                std::u32string_view{tmp}, dest);
 1371|    741|        }
 1372|    741|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|    741|            return transcode_to_string_impl_to32(src, dest);
 1374|    741|        }
 1375|    741|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|    741|{
 1256|    741|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|    741|    auto it = src.begin();
 1259|   330k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 329k, False: 741]
  ------------------
 1260|   329k|        auto res = get_next_code_point(
 1261|   329k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   329k|                                                                 src.end()));
 1263|   329k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.90k, False: 325k]
  |  |  ------------------
  ------------------
 1264|  3.90k|            dest.push_back(DestCharT{0xfffd});
 1265|  3.90k|        }
 1266|   325k|        else {
 1267|   325k|            dest.push_back(res.value);
 1268|   325k|        }
 1269|   329k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   329k|    }
 1271|    741|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   845k|{
 1169|   845k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   845k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   845k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   845k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   845k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.0k, False: 832k]
  |  |  ------------------
  ------------------
 1173|  13.0k|        return {get_start_for_next_code_point(input),
 1174|  13.0k|                detail::invalid_code_point};
 1175|  13.0k|    }
 1176|   832k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.76k, False: 828k]
  |  |  ------------------
  ------------------
 1177|  3.76k|        return {input.end(), detail::invalid_code_point};
 1178|  3.76k|    }
 1179|       |
 1180|   828k|    return {input.begin() + len,
 1181|   828k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   832k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  13.0k|{
 1155|  13.0k|    auto it = input.begin();
 1156|  56.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 56.5k, False: 368]
  ------------------
 1157|  56.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 12.6k, False: 43.8k]
  ------------------
 1158|  12.6k|            break;
 1159|  12.6k|        }
 1160|  56.5k|    }
 1161|  13.0k|    return it;
 1162|  13.0k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  13.3k|    {
 2931|  13.3k|        SCN_UNLIKELY_ATTR
 2932|  13.3k|        m_msg = msg;
 2933|  13.3k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  22.8M|    {
 2936|  22.8M|        return m_msg == nullptr;
 2937|  22.8M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  3.36M|{
  458|  3.36M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  3.36M|        static_cast<unsigned char>(ch))];
  460|  3.36M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  38.2k|{
  469|  38.2k|    return static_cast<unsigned char>(ch) <= 127;
  470|  38.2k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  9.02k|{
  474|  9.02k|#if WCHAR_MIN < 0
  475|  9.02k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 8.28k, False: 738]
  |  Branch (475:23): [True: 4.99k, False: 3.28k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  9.02k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  1.11M|{
  539|  1.11M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  1.11M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  91.2M|{
  784|  91.2M|    return e != eof_error::good;
  785|  91.2M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  19.9k|{
  798|  19.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  19.9k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  19.9k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   649M|{
 1200|       |    // Pattern_White_Space property
 1201|   649M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 530M, False: 118M]
  |  Branch (1201:27): [True: 74.4M, False: 455M]
  ------------------
 1202|   649M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 88.5M, False: 486M]
  ------------------
 1203|   649M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 1.38M, False: 484M]
  ------------------
 1204|   649M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 309k, False: 484M]
  ------------------
 1205|   649M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 301k, False: 484M]
  ------------------
 1206|   649M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 533k, False: 483M]
  ------------------
 1207|   649M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 483M]
  ------------------
 1208|   649M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6008|  22.7M|{
 6009|  22.7M|    if (specs.width != 0) {
  ------------------
  |  Branch (6009:9): [True: 0, False: 22.7M]
  ------------------
 6010|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6010:13): [True: 0, False: 0]
  ------------------
 6011|      0|            return {scan_error::invalid_scanned_value,
 6012|      0|                    "Scanned value too narrow, width did not exceed what "
 6013|      0|                    "was specified in the format string"};
 6014|      0|        }
 6015|      0|    }
 6016|  22.7M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6016:9): [True: 0, False: 22.7M]
  ------------------
 6017|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6017:13): [True: 0, False: 0]
  ------------------
 6018|      0|            return {scan_error::invalid_scanned_value,
 6019|      0|                    "Scanned value too wide, width exceeded the specified "
 6020|      0|                    "precision"};
 6021|      0|        }
 6022|      0|    }
 6023|  22.7M|    return {};
 6024|  22.7M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   604k|    {
  304|   604k|        ranges::advance(x, n);
  305|   604k|        return x;
  306|   604k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   604k|    {
  268|   604k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   604k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   604k|    {
  151|   604k|        i += n;
  152|   604k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.30M|    {
  108|  1.30M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.30M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.30M|    {
   87|  1.30M|        return s - i;
   88|  1.30M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  37.6M|    {
  108|  37.6M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  37.6M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  37.6M|    {
   87|  37.6M|        return s - i;
   88|  37.6M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   156k|{
  981|   156k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   156k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   156k|        return true;
  984|   156k|    }
  985|   156k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   156k|                           ranges::const_iterator_t<Range>,
  987|   156k|                           typename detail::basic_scan_buffer<
  988|   156k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   156k|        auto beg = r.begin();
  990|   156k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 156k, False: 0]
  ------------------
  991|   156k|            return false;
  992|   156k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   156k|    else {
 1006|   156k|        return false;
 1007|   156k|    }
 1008|   156k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6037|  63.8k|    {
 6038|  63.8k|        const bool need_skipped_width =
 6039|  63.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 63.8k]
  |  Branch (6039:33): [True: 0, False: 63.8k]
  ------------------
 6040|  63.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  63.8k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 63.8k]
  ------------------
 6044|  63.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 63.8k]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|  63.8k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 63.8k, False: 0]
  |  Branch (6048:56): [True: 61.6k, False: 2.28k]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  61.6k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 61.6k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|   122k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  61.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  61.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  61.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 60.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.02k|    }                                                  \
  |  |  |  | 3642|  61.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|   122k|                            make_eof_scan_error));
 6059|       |
 6060|   122k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 60.5k]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|  60.5k|            return result_type{it, 0};
 6068|   122k|        }
 6069|       |
 6070|  2.28k|        return result_type{rng.begin(), 0};
 6071|  63.8k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.28k|{
 1976|  2.28k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.28k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.28k|{
 1957|  2.28k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.28k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.28k|    }
 1960|  2.28k|    else {
 1961|  2.28k|        auto first = range.begin();
 1962|  5.75k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 5.72k, False: 36]
  ------------------
 1963|  5.72k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.25k, False: 3.47k]
  ------------------
 1964|  2.25k|                return first;
 1965|  2.25k|            }
 1966|  5.72k|        }
 1967|     36|        return first;
 1968|  2.28k|    }
 1969|  2.28k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  34.3k|    {
  763|  34.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  34.3k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  6.85k|    {
  754|  6.85k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  17.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.1k|              cvref<T> obj = *get<T>(fn);
  745|  17.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.1k|              }
  748|  17.1k|              else {
  749|  17.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.1k|              }
  751|  17.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  17.1k|    {
  684|  17.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.1k|            return static_cast<T*>(s.m_cp);
  686|  17.1k|        }
  687|  17.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.1k|            return static_cast<T*>(s.m_p);
  689|  17.1k|        }
  690|  17.1k|        else {
  691|  17.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.1k|        }
  693|  17.1k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  6.85k|        {
  662|  6.85k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  60.9k|    {
  108|  60.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  60.9k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  60.9k|    {
   94|  60.9k|        iter_difference_t<I> counter{0};
   95|   703k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 642k, False: 60.9k]
  ------------------
   96|   642k|            ++i;
   97|   642k|            ++counter;
   98|   642k|        }
   99|  60.9k|        return counter;
  100|  60.9k|    }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   813M|    {
  763|   813M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   813M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   813M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  56.7M|    {
  754|  56.7M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   165M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   165M|              cvref<T> obj = *get<T>(fn);
  745|   165M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   165M|                  obj(static_cast<decltype(args)>(args)...);
  747|   165M|              }
  748|   165M|              else {
  749|   165M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   165M|              }
  751|   165M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   165M|    {
  684|   165M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   165M|            return static_cast<T*>(s.m_cp);
  686|   165M|        }
  687|   165M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   165M|            return static_cast<T*>(s.m_p);
  689|   165M|        }
  690|   165M|        else {
  691|   165M|            return reinterpret_cast<T*>(s.m_fp);
  692|   165M|        }
  693|   165M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  56.7M|        {
  662|  56.7M|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   246k|{
  950|   246k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.53k, False: 244k]
  |  |  ------------------
  ------------------
  951|  2.53k|        return eof_error::eof;
  952|  2.53k|    }
  953|   244k|    return eof_error::good;
  954|   246k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.92M|{
  944|  1.92M|    return is_range_eof(r.begin(), r.end());
  945|  1.92M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.92M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.92M|    {
  937|  1.92M|        return begin == end;
  938|  1.92M|    }
  939|  1.92M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|   152k|{
 1683|   152k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   152k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   152k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   152k|        return string_view_wrapper{SCN_FWD(range)};
 1687|   152k|    }
 1688|   152k|    else {
 1689|   152k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   152k|    }
 1691|   152k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|   152k|    {
 1537|   152k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   152k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|   152k|    {
 1621|   152k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   152k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   152k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   152k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   152k|            m_storage.reset();
 1627|   152k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   152k|        }
 1629|   152k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   152k|                                          std::basic_string<CharT>>) {
 1631|   152k|            m_storage.emplace(SCN_FWD(range));
 1632|   152k|            m_view = string_view_type{*m_storage};
 1633|   152k|        }
 1634|   152k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   152k|                                          typename detail::basic_scan_buffer<
 1636|   152k|                                              value_t>::forward_iterator> &&
 1637|   152k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   152k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   152k|            auto end_seg = range.end().contiguous_segment();
 1640|   152k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.65k, False: 149k]
  |  |  ------------------
  ------------------
 1641|   152k|                             detail::to_address(end_seg.end()))) {
 1642|  3.65k|                auto& str = m_storage.emplace();
 1643|  3.65k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.65k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.65k|                m_view = string_view_type{str};
 1646|  3.65k|                return;
 1647|  3.65k|            }
 1648|       |
 1649|   149k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   149k|                                                            end_seg.data());
 1651|   149k|            m_storage.reset();
 1652|   149k|        }
 1653|   152k|        else {
 1654|   152k|            auto& str = m_storage.emplace();
 1655|   152k|            if constexpr (ranges::sized_range<Range>) {
 1656|   152k|                str.reserve(range.size());
 1657|   152k|            }
 1658|   152k|            if constexpr (ranges::common_range<Range>) {
 1659|   152k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   152k|                          std::back_inserter(str));
 1661|   152k|            }
 1662|   152k|            else {
 1663|   152k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   152k|                     ++it) {
 1665|   152k|                    str.push_back(*it);
 1666|   152k|                }
 1667|   152k|            }
 1668|   152k|            m_view = string_view_type{str};
 1669|   152k|        }
 1670|   152k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   301k|    {
 1582|   301k|        return m_view;
 1583|   301k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|   152k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6079|  60.5k|    {
 6080|  60.5k|        const bool need_skipped_width =
 6081|  60.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 60.5k]
  |  Branch (6081:33): [True: 0, False: 60.5k]
  ------------------
 6082|  60.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  60.5k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 60.5k]
  ------------------
 6085|  60.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 60.5k]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  60.5k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 60.5k, False: 0]
  ------------------
 6090|  60.5k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 786, False: 59.7k]
  ------------------
 6091|  60.5k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 786]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|    786|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 786]
  ------------------
 6093|    786|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  60.5k|        return result_type{rng.begin(), 0};
 6115|  60.5k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   487k|{
  950|   487k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.95k, False: 482k]
  |  |  ------------------
  ------------------
  951|  4.95k|        return eof_error::eof;
  952|  4.95k|    }
  953|   482k|    return eof_error::good;
  954|   487k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   487k|{
  944|   487k|    return is_range_eof(r.begin(), r.end());
  945|   487k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   487k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   487k|    {
  937|   487k|        return begin == end;
  938|   487k|    }
  939|   487k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   301k|{
 1683|   301k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   301k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   301k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   301k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   301k|    }
 1688|   301k|    else {
 1689|   301k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   301k|    }
 1691|   301k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   301k|    {
 1490|   301k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  1.66M|    {
 1503|  1.66M|        return sv;
 1504|  1.66M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  4.57k|{
 1976|  4.57k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.57k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  4.57k|{
 1957|  4.57k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.57k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.57k|    }
 1960|  4.57k|    else {
 1961|  4.57k|        auto first = range.begin();
 1962|  4.57k|        for (; first != range.end(); ++first) {
 1963|  4.57k|            if (pred(*first)) {
 1964|  4.57k|                return first;
 1965|  4.57k|            }
 1966|  4.57k|        }
 1967|  4.57k|        return first;
 1968|  4.57k|    }
 1969|  4.57k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   304k|{
 2951|   304k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 304k, False: 0]
  ------------------
 2952|   304k|        auto it = read_while_classic_space(range);
 2953|   304k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   304k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.87k, False: 300k]
  |  |  ------------------
  ------------------
 2955|  3.87k|            return unexpected(e);
 2956|  3.87k|        }
 2957|       |
 2958|   300k|        return it;
 2959|   304k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   304k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   304k|{
 2117|   304k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   304k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   304k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   304k|        auto buf = make_contiguous_buffer(range);
 2121|   304k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   304k|        return ranges::next(range.begin(),
 2123|   304k|                            ranges::distance(buf.view().begin(), it));
 2124|   304k|    }
 2125|   304k|    else {
 2126|   304k|        auto it = range.begin();
 2127|       |
 2128|   304k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   304k|            auto seg = get_contiguous_beginning(range);
 2130|   304k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   304k|                seg_it != seg.end()) {
 2132|   304k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   304k|            }
 2134|   304k|            ranges::advance(it, seg.size());
 2135|   304k|        }
 2136|       |
 2137|   304k|        return read_while_code_point(
 2138|   304k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   304k|    }
 2140|   304k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   604k|{
 1683|   604k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   604k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   604k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   604k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   604k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   604k|    }
 1688|   604k|    else {
 1689|   604k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   604k|    }
 1691|   604k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   604k|    {
 1490|   604k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.36k|    {
  304|  3.36k|        ranges::advance(x, n);
  305|  3.36k|        return x;
  306|  3.36k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   305k|    {
  268|   305k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   305k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   305k|    {
  181|   581k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 275k, False: 305k]
  ------------------
  182|   275k|            ++i;
  183|   275k|        }
  184|   305k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|   154k|    {
 1587|   154k|        return m_storage.has_value();
 1588|   154k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.01k|    {
 1592|  3.01k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.01k|        return *m_storage;
 1594|  3.01k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|  65.3k|    {
 6179|  65.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  65.3k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  65.3k|            auto rd = make_reader<T, char_type>();
 6184|  65.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  65.3k|                return unexpected(e);
 6186|  65.3k|            }
 6187|       |
 6188|  65.3k|            return impl(rd, range, value);
 6189|  65.3k|        }
 6190|  65.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  65.3k|            auto rd = make_reader<T, char_type>();
 6192|  65.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 63.8k]
  |  |  ------------------
  ------------------
 6193|  1.48k|                return unexpected(e);
 6194|  1.48k|            }
 6195|       |
 6196|  63.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 63.8k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  63.8k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  63.8k|                return impl(rd, range, value);
 6199|  63.8k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  65.3k|        else {
 6207|  65.3k|            SCN_EXPECT(false);
 6208|  65.3k|            SCN_UNREACHABLE;
 6209|  65.3k|        }
 6210|  65.3k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5809|   314k|{
 5810|   314k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|   314k|        return reader_impl_for_bool<CharT>{};
 5812|   314k|    }
 5813|   314k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|   314k|        return reader_impl_for_char<CharT>{};
 5815|   314k|    }
 5816|   314k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|   314k|        return reader_impl_for_wchar<CharT>{};
 5818|   314k|    }
 5819|   314k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|   314k|        return reader_impl_for_code_point<CharT>{};
 5821|   314k|    }
 5822|   314k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   314k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|   314k|        return reader_impl_for_string<CharT>{};
 5825|   314k|    }
 5826|   314k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|   314k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|   314k|        return reader_impl_for_string<CharT>{};
 5829|   314k|    }
 5830|   314k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|   314k|                       std::is_same_v<T, wregex_matches>) {
 5832|   314k|        return reader_impl_for_regex_matches<CharT>{};
 5833|   314k|    }
 5834|   314k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|   314k|        return reader_impl_for_voidptr<CharT>{};
 5836|   314k|    }
 5837|   314k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|   314k|        return reader_impl_for_float<CharT>{};
 5839|   314k|    }
 5840|   314k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|   314k|                       !std::is_same_v<T, wchar_t> &&
 5842|   314k|                       !std::is_same_v<T, char32_t> &&
 5843|   314k|                       !std::is_same_v<T, bool>) {
 5844|   314k|        return reader_impl_for_int<CharT>{};
 5845|   314k|    }
 5846|   314k|    else {
 5847|   314k|        return reader_impl_for_monostate<CharT>{};
 5848|   314k|    }
 5849|   314k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5206|   471k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   195k|    {
 3040|   195k|        reader_error_handler eh{};
 3041|   195k|        get_derived().check_specs_impl(specs, eh);
 3042|   195k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.44k, False: 190k]
  |  |  ------------------
  ------------------
 3043|  4.44k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.44k|        }
 3045|   190k|        return {};
 3046|   195k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   195k|    {
 3051|   195k|        return static_cast<Derived&>(*this);
 3052|   195k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5210|   195k|    {
 5211|   195k|        detail::check_string_type_specs(specs, eh);
 5212|       |
 5213|   195k|        SCN_GCC_PUSH
 5214|   195k|        SCN_GCC_IGNORE("-Wswitch")
 5215|   195k|        SCN_GCC_IGNORE("-Wswitch-default")
 5216|       |
 5217|   195k|        SCN_CLANG_PUSH
 5218|   195k|        SCN_CLANG_IGNORE("-Wswitch")
 5219|   195k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5220|       |
 5221|   195k|        switch (specs.type) {
  ------------------
  |  Branch (5221:17): [True: 0, False: 195k]
  ------------------
 5222|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5222:13): [True: 0, False: 195k]
  ------------------
 5223|      0|                m_type = reader_type::word;
 5224|      0|                break;
 5225|       |
 5226|   183k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5226:13): [True: 183k, False: 11.3k]
  ------------------
 5227|   183k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5227:21): [True: 0, False: 183k]
  ------------------
 5228|   183k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5228:21): [True: 0, False: 183k]
  ------------------
 5229|      0|                    m_type = reader_type::custom_word;
 5230|      0|                }
 5231|   183k|                else {
 5232|   183k|                    m_type = reader_type::word;
 5233|   183k|                }
 5234|   183k|                break;
 5235|      0|            }
 5236|       |
 5237|  4.44k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5237:13): [True: 4.44k, False: 190k]
  ------------------
 5238|  4.44k|                m_type = reader_type::character;
 5239|  4.44k|                break;
 5240|       |
 5241|  6.85k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5241:13): [True: 6.85k, False: 188k]
  ------------------
 5242|  6.85k|                m_type = reader_type::character_set;
 5243|  6.85k|                break;
 5244|       |
 5245|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5245:13): [True: 0, False: 195k]
  ------------------
 5246|      0|                m_type = reader_type::regex;
 5247|      0|                break;
 5248|       |
 5249|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5249:13): [True: 0, False: 195k]
  ------------------
 5250|      0|                m_type = reader_type::regex_escaped;
 5251|      0|                break;
 5252|   195k|        }
 5253|       |
 5254|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5255|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5256|   195k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6120|  63.8k|    {
 6121|  63.8k|        const bool need_skipped_width =
 6122|  63.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 63.8k]
  |  Branch (6122:33): [True: 0, False: 63.8k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  63.8k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  63.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  63.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  63.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.02k|    }                                                  \
  |  |  |  | 3642|  63.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  62.8k|        auto [it, prefix_width] = prefix_result;
 6127|  62.8k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  62.8k|        std::ptrdiff_t value_width = 0;
 6131|  62.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 62.8k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  62.8k|        else {
 6147|  62.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  62.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  62.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 60.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  1.94k|    }                                                  \
  |  | 3642|  62.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  60.9k|                                             specs, value, loc));
 6149|       |
 6150|  60.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 60.9k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  60.9k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  60.9k|        std::ptrdiff_t postfix_width = 0;
 6159|  60.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 60.5k, False: 392]
  ------------------
 6160|  60.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 60.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  60.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  60.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  60.5k|                                 value_width));
 6164|  60.5k|            std::tie(it, postfix_width) = postfix_result;
 6165|  60.5k|        }
 6166|       |
 6167|  60.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  60.9k|                                                 value_width, postfix_width);
 6169|  60.9k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 60.9k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  60.9k|        return it;
 6174|  60.9k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5259|   647k|    {
 5260|   647k|        return m_type == reader_type::word;
 5261|   647k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   454k|{
 1132|   454k|    auto it = src.begin();
 1133|  3.51M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 3.06M, False: 451k]
  ------------------
 1134|  3.06M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  3.06M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.48k, False: 3.06M]
  ------------------
 1136|  1.48k|            return false;
 1137|  1.48k|        }
 1138|  3.06M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 257, False: 3.06M]
  ------------------
 1139|    257|            return false;
 1140|    257|        }
 1141|  3.06M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  3.06M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  3.06M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.89k, False: 3.06M]
  ------------------
 1144|  1.89k|            return false;
 1145|  1.89k|        }
 1146|  3.06M|        it += len;
 1147|  3.06M|    }
 1148|   451k|    return true;
 1149|   454k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   151k|{
 2993|   151k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|   151k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 3.01k, False: 148k]
  ------------------
 2995|  3.01k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.01k|    static_cast<    \
  |  |  929|  3.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  3.01k|        }
 2997|   148k|        else {
 2998|   148k|            dest.assign(source.view());
 2999|   148k|        }
 3000|   151k|    }
 3001|   151k|    else {
 3002|   151k|        return transcode_impl(source.view(), dest);
 3003|   151k|    }
 3004|       |
 3005|   151k|    return {};
 3006|   151k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5103|  6.85k|        {
 5104|  6.85k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5104:17): [True: 6.85k, False: 0]
  ------------------
 5105|  6.85k|                return {};
 5106|  6.85k|            }
 5107|       |
 5108|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5109|      0|            auto it = detail::to_address(charset_string.begin());
 5110|      0|            auto set = detail::parse_presentation_set(
 5111|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5112|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5113|      0|                return nonascii.err;
 5114|      0|            }
 5115|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5117|       |
 5118|      0|            std::sort(nonascii.extra_ranges.begin(),
 5119|      0|                      nonascii.extra_ranges.end());
 5120|      0|            return {};
 5121|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5076|  16.0k|        {
 5077|  16.0k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5078|  16.0k|            const auto val =
 5079|  16.0k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5080|  16.0k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5081|  16.0k|                    (val % 8)) &
 5082|  16.0k|                   1u;
 5083|  16.0k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5129|  17.1k|        {
 5130|  17.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5130:17): [True: 1.06k, False: 16.0k]
  ------------------
 5131|  1.06k|                return false;
 5132|  1.06k|            }
 5133|       |
 5134|  16.0k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5135|  17.1k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5073|  6.85k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5277|  62.8k|    {
 5278|  62.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  62.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  62.8k|        return read_impl(range, specs, value);
 5280|  62.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5295|  62.8k|    {
 5296|  62.8k|        SCN_CLANG_PUSH
 5297|  62.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  62.8k|        switch (m_type) {
 5300|  60.5k|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 60.5k, False: 2.28k]
  ------------------
 5301|  60.5k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 62.8k]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 62.8k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  2.28k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 2.28k, False: 60.5k]
  ------------------
 5311|  2.28k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  2.28k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 62.8k]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 62.8k]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 62.8k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  62.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  62.8k|        }
 5332|       |
 5333|  62.8k|        SCN_CLANG_POP
 5334|  62.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4820|   151k|    {
 4821|   151k|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|   151k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4752|   151k|{
 4753|   151k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|   151k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|   151k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 1.17k, False: 150k]
  ------------------
 4757|  1.17k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|  1.17k|                                     "Invalid encoding in scanned string");
 4759|  1.17k|    }
 4760|   150k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|   150k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|   150k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|   150k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   151k|{
 2088|   151k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   151k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   151k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   151k|        auto buf = make_contiguous_buffer(range);
 2092|   151k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   151k|        return ranges::next(range.begin(),
 2094|   151k|                            ranges::distance(buf.view().begin(), it));
 2095|   151k|    }
 2096|   151k|    else {
 2097|   151k|        auto it = range.begin();
 2098|       |
 2099|   151k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   151k|            auto seg = get_contiguous_beginning(range);
 2101|   151k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   151k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 151k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|   151k|            ranges::advance(it, seg.size());
 2106|   151k|        }
 2107|       |
 2108|   151k|        return read_until_code_point(
 2109|   151k|            ranges::subrange{it, range.end()},
 2110|   151k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   151k|    }
 2112|   151k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   305k|{
 1039|   305k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   305k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   305k|        return r;
 1042|   305k|    }
 1043|   305k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   305k|                           ranges::const_iterator_t<Range>,
 1045|   305k|                           typename detail::basic_scan_buffer<
 1046|   305k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   305k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   305k|            auto seg = r.begin().contiguous_segment();
 1049|   305k|            auto dist =
 1050|   305k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   305k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   305k|        }
 1053|   305k|        else {
 1054|   305k|            return r.begin().contiguous_segment();
 1055|   305k|        }
 1056|   305k|    }
 1057|   305k|    else {
 1058|   305k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   305k|    }
 1060|   305k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   302k|{
 2061|   302k|    auto it = range.begin();
 2062|  1.68M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.67M, False: 3.47k]
  ------------------
 2063|  1.67M|        const auto val =
 2064|  1.67M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.67M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.67M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.66M, False: 7.09k]
  |  |  ------------------
  ------------------
 2066|  1.66M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.66M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.66M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 298k, False: 1.37M]
  ------------------
 2069|   298k|                return it;
 2070|   298k|            }
 2071|  1.66M|        }
 2072|  1.37M|        it = val.iterator;
 2073|  1.37M|    }
 2074|       |
 2075|  3.47k|    return it;
 2076|   302k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.67M|{
 1899|  1.67M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.67M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.67M|    auto it = range.begin();
 1903|  1.67M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.67M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.09k, False: 1.66M]
  |  |  ------------------
  ------------------
 1906|  7.09k|        ++it;
 1907|  7.09k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  7.09k|        return {it, {}};
 1909|  7.09k|    }
 1910|       |
 1911|  1.66M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.58M, False: 85.1k]
  ------------------
 1912|  1.58M|        ++it;
 1913|  1.58M|        return {it, string_type(1, *range.begin())};
 1914|  1.58M|    }
 1915|       |
 1916|  85.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  85.1k|    return {it, string_type{range.begin(), it}};
 1918|  1.66M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  7.09k|{
 1155|  7.09k|    auto it = input.begin();
 1156|  21.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 21.3k, False: 157]
  ------------------
 1157|  21.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 6.93k, False: 14.3k]
  ------------------
 1158|  6.93k|            break;
 1159|  6.93k|        }
 1160|  21.3k|    }
 1161|  7.09k|    return it;
 1162|  7.09k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  85.1k|    {
  283|  85.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  85.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  85.1k|    {
  252|  85.1k|        constexpr iter_difference_t<I> zero{0};
  253|  85.1k|        iter_difference_t<I> counter{0};
  254|       |
  255|   313k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 228k, False: 84.9k]
  |  Branch (255:30): [True: 228k, False: 214]
  ------------------
  256|   228k|            ++i;
  257|   228k|            ++counter;
  258|   228k|        }
  259|       |
  260|  85.1k|        return counter;
  261|  85.1k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  1.67M|    {
 1890|  1.67M|        return !codepoint.empty();
 1891|  1.67M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   151k|    {
  754|   151k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04M|              cvref<T> obj = *get<T>(fn);
  745|  1.04M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.04M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.04M|              }
  748|  1.04M|              else {
  749|  1.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04M|              }
  751|  1.04M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.04M|    {
  684|  1.04M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.04M|            return static_cast<T*>(s.m_cp);
  686|  1.04M|        }
  687|  1.04M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.04M|            return static_cast<T*>(s.m_p);
  689|  1.04M|        }
  690|  1.04M|        else {
  691|  1.04M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.04M|        }
  693|  1.04M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  1.04M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   151k|        {
  662|   151k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5048|  2.28k|    {
 5049|  2.28k|        auto it = read_source_impl(range, {specs});
 5050|  2.28k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 804]
  |  |  ------------------
  ------------------
 5051|  1.48k|            return unexpected(it.error());
 5052|  1.48k|        }
 5053|       |
 5054|    804|        return read_string_impl(range, *it, value);
 5055|  2.28k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5153|  2.28k|    {
 5154|  2.28k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|  2.28k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|  2.28k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.28k]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|  2.28k|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|  2.28k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 0, False: 2.28k]
  ------------------
 5164|      0|            const auto cb = [&](char32_t cp) {
 5165|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|      0|            };
 5167|       |
 5168|      0|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 0, False: 0]
  ------------------
 5169|      0|                auto it = read_until_code_point(range, cb);
 5170|      0|                return check_nonempty(it, range);
 5171|      0|            }
 5172|      0|            auto it = read_while_code_point(range, cb);
 5173|      0|            return check_nonempty(it, range);
 5174|      0|        }
 5175|       |
 5176|  2.28k|        const auto cb = [&](SourceCharT ch) {
 5177|  2.28k|            return cb_wrapper.on_ascii_only(ch);
 5178|  2.28k|        };
 5179|       |
 5180|  2.28k|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 0, False: 2.28k]
  ------------------
 5181|      0|            auto it = read_until_code_unit(range, cb);
 5182|      0|            return check_nonempty(it, range);
 5183|      0|        }
 5184|  2.28k|        auto it = read_while_code_unit(range, cb);
 5185|  2.28k|        return check_nonempty(it, range);
 5186|  2.28k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5191|  2.28k|    {
 5192|  2.28k|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 1.48k, False: 804]
  ------------------
 5193|  1.48k|            return unexpected_scan_error(
 5194|  1.48k|                scan_error::invalid_scanned_value,
 5195|  1.48k|                "No characters matched in [character set]");
 5196|  1.48k|        }
 5197|       |
 5198|    804|        return it;
 5199|  2.28k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   150k|{
 2082|   150k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   150k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_:
  753|  2.28k|    {
  754|  2.28k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  5.72k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.72k|              cvref<T> obj = *get<T>(fn);
  745|  5.72k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.72k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.72k|              }
  748|  5.72k|              else {
  749|  5.72k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.72k|              }
  751|  5.72k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.72k|    {
  684|  5.72k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.72k|            return static_cast<T*>(s.m_cp);
  686|  5.72k|        }
  687|  5.72k|        else if constexpr (std::is_object_v<T>) {
  688|  5.72k|            return static_cast<T*>(s.m_p);
  689|  5.72k|        }
  690|  5.72k|        else {
  691|  5.72k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.72k|        }
  693|  5.72k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5176|  5.72k|        const auto cb = [&](SourceCharT ch) {
 5177|  5.72k|            return cb_wrapper.on_ascii_only(ch);
 5178|  5.72k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  666|  2.28k|        {
  667|  2.28k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4752|    804|{
 4753|    804|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    804|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    804|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 0, False: 804]
  ------------------
 4757|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|      0|                                     "Invalid encoding in scanned string");
 4759|      0|    }
 4760|    804|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    804|    static_cast<    \
  |  |  929|    804|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    804|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    804|    return SCN_MOVE(result);
  ------------------
  |  |  928|    804|    static_cast<    \
  |  |  929|    804|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    804|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|  62.3k|    {
 5278|  62.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  62.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  62.3k|        return read_impl(range, specs, value);
 5280|  62.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|  62.3k|    {
 5296|  62.3k|        SCN_CLANG_PUSH
 5297|  62.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  62.3k|        switch (m_type) {
 5300|  60.0k|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 60.0k, False: 2.28k]
  ------------------
 5301|  60.0k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 62.3k]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 62.3k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  2.28k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 2.28k, False: 60.0k]
  ------------------
 5311|  2.28k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  2.28k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 62.3k]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 62.3k]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 62.3k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  62.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  62.3k|        }
 5332|       |
 5333|  62.3k|        SCN_CLANG_POP
 5334|  62.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|   150k|    {
 4821|   150k|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|   150k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|   150k|{
 4753|   150k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|   150k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|   150k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 1.23k, False: 148k]
  ------------------
 4757|  1.23k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|  1.23k|                                     "Invalid encoding in scanned string");
 4759|  1.23k|    }
 4760|   148k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   148k|    static_cast<    \
  |  |  929|   148k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|   148k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|   148k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   148k|    static_cast<    \
  |  |  929|   148k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|   148k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   149k|{
 3012|   149k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|   149k|        dest.assign(source.view());
 3014|   149k|    }
 3015|   149k|    else {
 3016|   149k|        return transcode_impl(source.view(), dest);
 3017|   149k|    }
 3018|       |
 3019|   149k|    return {};
 3020|   149k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   300k|{
 2088|   300k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   300k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   300k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   300k|        auto buf = make_contiguous_buffer(range);
 2092|   300k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   300k|        return ranges::next(range.begin(),
 2094|   300k|                            ranges::distance(buf.view().begin(), it));
 2095|   300k|    }
 2096|   300k|    else {
 2097|   300k|        auto it = range.begin();
 2098|       |
 2099|   300k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   300k|            auto seg = get_contiguous_beginning(range);
 2101|   300k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   300k|                seg_it != seg.end()) {
 2103|   300k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   300k|            }
 2105|   300k|            ranges::advance(it, seg.size());
 2106|   300k|        }
 2107|       |
 2108|   300k|        return read_until_code_point(
 2109|   300k|            ranges::subrange{it, range.end()},
 2110|   300k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   300k|    }
 2112|   300k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5048|  2.28k|    {
 5049|  2.28k|        auto it = read_source_impl(range, {specs});
 5050|  2.28k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 804]
  |  |  ------------------
  ------------------
 5051|  1.48k|            return unexpected(it.error());
 5052|  1.48k|        }
 5053|       |
 5054|    804|        return read_string_impl(range, *it, value);
 5055|  2.28k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5153|  4.57k|    {
 5154|  4.57k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|  4.57k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|  4.57k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.57k]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|  4.57k|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|  4.57k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 0, False: 4.57k]
  ------------------
 5164|      0|            const auto cb = [&](char32_t cp) {
 5165|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|      0|            };
 5167|       |
 5168|      0|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 0, False: 0]
  ------------------
 5169|      0|                auto it = read_until_code_point(range, cb);
 5170|      0|                return check_nonempty(it, range);
 5171|      0|            }
 5172|      0|            auto it = read_while_code_point(range, cb);
 5173|      0|            return check_nonempty(it, range);
 5174|      0|        }
 5175|       |
 5176|  4.57k|        const auto cb = [&](SourceCharT ch) {
 5177|  4.57k|            return cb_wrapper.on_ascii_only(ch);
 5178|  4.57k|        };
 5179|       |
 5180|  4.57k|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 0, False: 4.57k]
  ------------------
 5181|      0|            auto it = read_until_code_unit(range, cb);
 5182|      0|            return check_nonempty(it, range);
 5183|      0|        }
 5184|  4.57k|        auto it = read_while_code_unit(range, cb);
 5185|  4.57k|        return check_nonempty(it, range);
 5186|  4.57k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5191|  4.57k|    {
 5192|  4.57k|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 2.96k, False: 1.60k]
  ------------------
 5193|  2.96k|            return unexpected_scan_error(
 5194|  2.96k|                scan_error::invalid_scanned_value,
 5195|  2.96k|                "No characters matched in [character set]");
 5196|  2.96k|        }
 5197|       |
 5198|  1.60k|        return it;
 5199|  4.57k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|  4.57k|    {
  754|  4.57k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  11.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.4k|              cvref<T> obj = *get<T>(fn);
  745|  11.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  11.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.4k|              }
  748|  11.4k|              else {
  749|  11.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.4k|              }
  751|  11.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  11.4k|    {
  684|  11.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  11.4k|            return static_cast<T*>(s.m_cp);
  686|  11.4k|        }
  687|  11.4k|        else if constexpr (std::is_object_v<T>) {
  688|  11.4k|            return static_cast<T*>(s.m_p);
  689|  11.4k|        }
  690|  11.4k|        else {
  691|  11.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  11.4k|        }
  693|  11.4k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5176|  11.4k|        const auto cb = [&](SourceCharT ch) {
 5177|  11.4k|            return cb_wrapper.on_ascii_only(ch);
 5178|  11.4k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|  4.57k|        {
  667|  4.57k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4752|    804|{
 4753|    804|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    804|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    804|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 0, False: 804]
  ------------------
 4757|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|      0|                                     "Invalid encoding in scanned string");
 4759|      0|    }
 4760|    804|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    804|    static_cast<    \
  |  |  929|    804|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    804|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    804|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 804]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    804|    return SCN_MOVE(result);
  ------------------
  |  |  928|    804|    static_cast<    \
  |  |  929|    804|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    804|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5809|   156k|{
 5810|   156k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|   156k|        return reader_impl_for_bool<CharT>{};
 5812|   156k|    }
 5813|   156k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|   156k|        return reader_impl_for_char<CharT>{};
 5815|   156k|    }
 5816|   156k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|   156k|        return reader_impl_for_wchar<CharT>{};
 5818|   156k|    }
 5819|   156k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|   156k|        return reader_impl_for_code_point<CharT>{};
 5821|   156k|    }
 5822|   156k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   156k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|   156k|        return reader_impl_for_string<CharT>{};
 5825|   156k|    }
 5826|   156k|    else if constexpr (std::is_same_v<T, std::string> ||
 5827|   156k|                       std::is_same_v<T, std::wstring>) {
 5828|   156k|        return reader_impl_for_string<CharT>{};
 5829|   156k|    }
 5830|   156k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|   156k|                       std::is_same_v<T, wregex_matches>) {
 5832|   156k|        return reader_impl_for_regex_matches<CharT>{};
 5833|   156k|    }
 5834|   156k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|   156k|        return reader_impl_for_voidptr<CharT>{};
 5836|   156k|    }
 5837|   156k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|   156k|        return reader_impl_for_float<CharT>{};
 5839|   156k|    }
 5840|   156k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|   156k|                       !std::is_same_v<T, wchar_t> &&
 5842|   156k|                       !std::is_same_v<T, char32_t> &&
 5843|   156k|                       !std::is_same_v<T, bool>) {
 5844|   156k|        return reader_impl_for_int<CharT>{};
 5845|   156k|    }
 5846|   156k|    else {
 5847|   156k|        return reader_impl_for_monostate<CharT>{};
 5848|   156k|    }
 5849|   156k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5277|  62.3k|    {
 5278|  62.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  62.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  62.3k|        return read_impl(range, specs, value);
 5280|  62.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5295|  62.3k|    {
 5296|  62.3k|        SCN_CLANG_PUSH
 5297|  62.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  62.3k|        switch (m_type) {
 5300|  60.0k|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 60.0k, False: 2.28k]
  ------------------
 5301|  60.0k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 62.3k]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 62.3k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  2.28k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 2.28k, False: 60.0k]
  ------------------
 5311|  2.28k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  2.28k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 62.3k]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 62.3k]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 62.3k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  62.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  62.3k|        }
 5332|       |
 5333|  62.3k|        SCN_CLANG_POP
 5334|  62.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4827|   150k|    {
 4828|   150k|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|   150k|                                     value);
 4830|   150k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4773|   150k|{
 4774|   150k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|   150k|    auto src = [&]() {
 4777|   150k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|   150k|            return make_contiguous_buffer(
 4779|   150k|                ranges::subrange{range.begin().base(), result.base()});
 4780|   150k|        }
 4781|   150k|        else {
 4782|   150k|            return make_contiguous_buffer(
 4783|   150k|                ranges::subrange{range.begin(), result});
 4784|   150k|        }
 4785|   150k|    }();
 4786|   150k|    using src_type = decltype(src);
 4787|       |
 4788|   150k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|   150k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|   150k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|   150k|                                     "Cannot read a string_view from "
 4797|   150k|                                     "this source range (would require "
 4798|   150k|                                     "transcoding)");
 4799|   150k|    }
 4800|   150k|    else {
 4801|   150k|        const auto view = src.view();
 4802|   150k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|   150k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 1.23k, False: 148k]
  ------------------
 4805|  1.23k|            return unexpected_scan_error(
 4806|  1.23k|                scan_error::invalid_scanned_value,
 4807|  1.23k|                "Invalid encoding in scanned string_view");
 4808|  1.23k|        }
 4809|       |
 4810|   148k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   148k|    static_cast<    \
  |  |  929|   148k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|   150k|    }
 4812|   150k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4776|   150k|    auto src = [&]() {
 4777|   150k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|   150k|            return make_contiguous_buffer(
 4779|   150k|                ranges::subrange{range.begin().base(), result.base()});
 4780|   150k|        }
 4781|   150k|        else {
 4782|   150k|            return make_contiguous_buffer(
 4783|   150k|                ranges::subrange{range.begin(), result});
 4784|   150k|        }
 4785|   150k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5062|  2.28k|    {
 5063|  2.28k|        auto it = read_source_impl(range, {specs});
 5064|  2.28k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 804]
  |  |  ------------------
  ------------------
 5065|  1.48k|            return unexpected(it.error());
 5066|  1.48k|        }
 5067|       |
 5068|    804|        return read_string_view_impl(range, *it, value);
 5069|  2.28k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4773|    804|{
 4774|    804|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|    804|    auto src = [&]() {
 4777|    804|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|    804|            return make_contiguous_buffer(
 4779|    804|                ranges::subrange{range.begin().base(), result.base()});
 4780|    804|        }
 4781|    804|        else {
 4782|    804|            return make_contiguous_buffer(
 4783|    804|                ranges::subrange{range.begin(), result});
 4784|    804|        }
 4785|    804|    }();
 4786|    804|    using src_type = decltype(src);
 4787|       |
 4788|    804|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|    804|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|    804|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|    804|                                     "Cannot read a string_view from "
 4797|    804|                                     "this source range (would require "
 4798|    804|                                     "transcoding)");
 4799|    804|    }
 4800|    804|    else {
 4801|    804|        const auto view = src.view();
 4802|    804|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|    804|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 0, False: 804]
  ------------------
 4805|      0|            return unexpected_scan_error(
 4806|      0|                scan_error::invalid_scanned_value,
 4807|      0|                "Invalid encoding in scanned string_view");
 4808|      0|        }
 4809|       |
 4810|    804|        return SCN_MOVE(result);
  ------------------
  |  |  928|    804|    static_cast<    \
  |  |  929|    804|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|    804|    }
 4812|    804|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4776|    804|    auto src = [&]() {
 4777|    804|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|    804|            return make_contiguous_buffer(
 4779|    804|                ranges::subrange{range.begin().base(), result.base()});
 4780|    804|        }
 4781|    804|        else {
 4782|    804|            return make_contiguous_buffer(
 4783|    804|                ranges::subrange{range.begin(), result});
 4784|    804|        }
 4785|    804|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   153k|{
 2951|   153k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 153k, False: 0]
  ------------------
 2952|   153k|        auto it = read_while_classic_space(range);
 2953|   153k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   153k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.96k, False: 151k]
  |  |  ------------------
  ------------------
 2955|  1.96k|            return unexpected(e);
 2956|  1.96k|        }
 2957|       |
 2958|   151k|        return it;
 2959|   153k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   153k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   153k|{
 2117|   153k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   153k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   153k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   153k|        auto buf = make_contiguous_buffer(range);
 2121|   153k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   153k|        return ranges::next(range.begin(),
 2123|   153k|                            ranges::distance(buf.view().begin(), it));
 2124|   153k|    }
 2125|   153k|    else {
 2126|   153k|        auto it = range.begin();
 2127|       |
 2128|   153k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   153k|            auto seg = get_contiguous_beginning(range);
 2130|   153k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   153k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 3.36k, False: 150k]
  ------------------
 2132|  3.36k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  3.36k|            }
 2134|   150k|            ranges::advance(it, seg.size());
 2135|   150k|        }
 2136|       |
 2137|   150k|        return read_while_code_point(
 2138|   150k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   153k|    }
 2140|   153k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   150k|    {
  754|   150k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   621k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   621k|              cvref<T> obj = *get<T>(fn);
  745|   621k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   621k|                  obj(static_cast<decltype(args)>(args)...);
  747|   621k|              }
  748|   621k|              else {
  749|   621k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   621k|              }
  751|   621k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   621k|    {
  684|   621k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   621k|            return static_cast<T*>(s.m_cp);
  686|   621k|        }
  687|   621k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   621k|            return static_cast<T*>(s.m_p);
  689|   621k|        }
  690|   621k|        else {
  691|   621k|            return reinterpret_cast<T*>(s.m_fp);
  692|   621k|        }
  693|   621k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   621k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   150k|        {
  662|   150k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  18.8M|{
  981|  18.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  18.8M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  18.8M|        return true;
  984|  18.8M|    }
  985|  18.8M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  18.8M|                           ranges::const_iterator_t<Range>,
  987|  18.8M|                           typename detail::basic_scan_buffer<
  988|  18.8M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  18.8M|        auto beg = r.begin();
  990|  18.8M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 18.8M, False: 0]
  ------------------
  991|  18.8M|            return false;
  992|  18.8M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  18.8M|    else {
 1006|  18.8M|        return false;
 1007|  18.8M|    }
 1008|  18.8M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6037|  7.54M|    {
 6038|  7.54M|        const bool need_skipped_width =
 6039|  7.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 7.54M]
  |  Branch (6039:33): [True: 0, False: 7.54M]
  ------------------
 6040|  7.54M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  7.54M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 7.54M]
  ------------------
 6044|  7.54M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 7.54M]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|  7.54M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 7.54M, False: 0]
  |  Branch (6048:56): [True: 7.54M, False: 2.99k]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  7.54M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 7.54M]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  15.0M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  7.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 7.53M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.66k|    }                                                  \
  |  |  |  | 3642|  7.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  15.0M|                            make_eof_scan_error));
 6059|       |
 6060|  15.0M|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 7.53M]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|  7.53M|            return result_type{it, 0};
 6068|  15.0M|        }
 6069|       |
 6070|  2.99k|        return result_type{rng.begin(), 0};
 6071|  7.54M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.99k|{
 1976|  2.99k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.99k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.99k|{
 1957|  2.99k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.99k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.99k|    }
 1960|  2.99k|    else {
 1961|  2.99k|        auto first = range.begin();
 1962|  3.02k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 3.00k, False: 20]
  ------------------
 1963|  3.00k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.97k, False: 32]
  ------------------
 1964|  2.97k|                return first;
 1965|  2.97k|            }
 1966|  3.00k|        }
 1967|     20|        return first;
 1968|  2.99k|    }
 1969|  2.99k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  18.0k|    {
  763|  18.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  18.0k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  8.98k|    {
  754|  8.98k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  9.02k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.02k|              cvref<T> obj = *get<T>(fn);
  745|  9.02k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.02k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.02k|              }
  748|  9.02k|              else {
  749|  9.02k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.02k|              }
  751|  9.02k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  9.02k|    {
  684|  9.02k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.02k|            return static_cast<T*>(s.m_cp);
  686|  9.02k|        }
  687|  9.02k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.02k|            return static_cast<T*>(s.m_p);
  689|  9.02k|        }
  690|  9.02k|        else {
  691|  9.02k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.02k|        }
  693|  9.02k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  8.98k|        {
  662|  8.98k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  7.53M|    {
  108|  7.53M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  7.53M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  7.53M|    {
   94|  7.53M|        iter_difference_t<I> counter{0};
   95|  78.5M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 71.0M, False: 7.53M]
  ------------------
   96|  71.0M|            ++i;
   97|  71.0M|            ++counter;
   98|  71.0M|        }
   99|  7.53M|        return counter;
  100|  7.53M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  30.1M|{
  950|  30.1M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  30.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.16k, False: 30.1M]
  |  |  ------------------
  ------------------
  951|  4.16k|        return eof_error::eof;
  952|  4.16k|    }
  953|  30.1M|    return eof_error::good;
  954|  30.1M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   245M|{
  944|   245M|    return is_range_eof(r.begin(), r.end());
  945|   245M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   245M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   245M|    {
  937|   245M|        return begin == end;
  938|   245M|    }
  939|   245M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  18.8M|{
 1683|  18.8M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  18.8M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  18.8M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  18.8M|        return string_view_wrapper{SCN_FWD(range)};
 1687|  18.8M|    }
 1688|  18.8M|    else {
 1689|  18.8M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  18.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  18.8M|    }
 1691|  18.8M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  18.8M|    {
 1537|  18.8M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  18.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  18.8M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  18.8M|    {
 1621|  18.8M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  18.8M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  18.8M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  18.8M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  18.8M|            m_storage.reset();
 1627|  18.8M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  18.8M|        }
 1629|  18.8M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  18.8M|                                          std::basic_string<CharT>>) {
 1631|  18.8M|            m_storage.emplace(SCN_FWD(range));
 1632|  18.8M|            m_view = string_view_type{*m_storage};
 1633|  18.8M|        }
 1634|  18.8M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  18.8M|                                          typename detail::basic_scan_buffer<
 1636|  18.8M|                                              value_t>::forward_iterator> &&
 1637|  18.8M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  18.8M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  18.8M|            auto end_seg = range.end().contiguous_segment();
 1640|  18.8M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  18.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.21k, False: 18.8M]
  |  |  ------------------
  ------------------
 1641|  18.8M|                             detail::to_address(end_seg.end()))) {
 1642|  6.21k|                auto& str = m_storage.emplace();
 1643|  6.21k|                str.reserve(range.end().position() - range.begin().position());
 1644|  6.21k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  6.21k|                m_view = string_view_type{str};
 1646|  6.21k|                return;
 1647|  6.21k|            }
 1648|       |
 1649|  18.8M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  18.8M|                                                            end_seg.data());
 1651|  18.8M|            m_storage.reset();
 1652|  18.8M|        }
 1653|  18.8M|        else {
 1654|  18.8M|            auto& str = m_storage.emplace();
 1655|  18.8M|            if constexpr (ranges::sized_range<Range>) {
 1656|  18.8M|                str.reserve(range.size());
 1657|  18.8M|            }
 1658|  18.8M|            if constexpr (ranges::common_range<Range>) {
 1659|  18.8M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  18.8M|                          std::back_inserter(str));
 1661|  18.8M|            }
 1662|  18.8M|            else {
 1663|  18.8M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  18.8M|                     ++it) {
 1665|  18.8M|                    str.push_back(*it);
 1666|  18.8M|                }
 1667|  18.8M|            }
 1668|  18.8M|            m_view = string_view_type{str};
 1669|  18.8M|        }
 1670|  18.8M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  37.6M|    {
 1582|  37.6M|        return m_view;
 1583|  37.6M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  18.8M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6079|  7.53M|    {
 6080|  7.53M|        const bool need_skipped_width =
 6081|  7.53M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 7.53M]
  |  Branch (6081:33): [True: 0, False: 7.53M]
  ------------------
 6082|  7.53M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  7.53M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 7.53M]
  ------------------
 6085|  7.53M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 7.53M]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  7.53M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 7.53M, False: 0]
  ------------------
 6090|  7.53M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 22, False: 7.53M]
  ------------------
 6091|  7.53M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 22]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|     22|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 22]
  ------------------
 6093|     22|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  7.53M|        return result_type{rng.begin(), 0};
 6115|  7.53M|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   431M|{
 1899|   431M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   431M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   431M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   431M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   431M|    auto it = range.begin();
 1903|   431M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   431M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   431M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 431M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   431M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 431M, False: 0]
  ------------------
 1912|   431M|        ++it;
 1913|   431M|        return {it, string_type(1, *range.begin())};
 1914|   431M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   431M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   491M|{
  944|   491M|    return is_range_eof(r.begin(), r.end());
  945|   491M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   491M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   491M|    {
  937|   491M|        return begin == end;
  938|   491M|    }
  939|   491M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   431M|    {
 1890|   431M|        return !codepoint.empty();
 1891|   431M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  60.3M|{
  950|  60.3M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  60.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.33k, False: 60.3M]
  |  |  ------------------
  ------------------
  951|  8.33k|        return eof_error::eof;
  952|  8.33k|    }
  953|  60.3M|    return eof_error::good;
  954|  60.3M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  37.6M|{
 1683|  37.6M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  37.6M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  37.6M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  37.6M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  37.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  37.6M|    }
 1688|  37.6M|    else {
 1689|  37.6M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  37.6M|    }
 1691|  37.6M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  37.6M|    {
 1490|  37.6M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  56.5M|    {
 1503|  56.5M|        return sv;
 1504|  56.5M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  5.99k|{
 1976|  5.99k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  5.99k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  5.99k|{
 1957|  5.99k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.99k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.99k|    }
 1960|  5.99k|    else {
 1961|  5.99k|        auto first = range.begin();
 1962|  5.99k|        for (; first != range.end(); ++first) {
 1963|  5.99k|            if (pred(*first)) {
 1964|  5.99k|                return first;
 1965|  5.99k|            }
 1966|  5.99k|        }
 1967|  5.99k|        return first;
 1968|  5.99k|    }
 1969|  5.99k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  37.7M|{
 2951|  37.7M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 37.7M, False: 0]
  ------------------
 2952|  37.7M|        auto it = read_while_classic_space(range);
 2953|  37.7M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  37.7M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  37.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.81k, False: 37.6M]
  |  |  ------------------
  ------------------
 2955|  5.81k|            return unexpected(e);
 2956|  5.81k|        }
 2957|       |
 2958|  37.6M|        return it;
 2959|  37.7M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  37.7M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  37.7M|{
 2117|  37.7M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  37.7M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  37.7M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  37.7M|        auto buf = make_contiguous_buffer(range);
 2121|  37.7M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  37.7M|        return ranges::next(range.begin(),
 2123|  37.7M|                            ranges::distance(buf.view().begin(), it));
 2124|  37.7M|    }
 2125|  37.7M|    else {
 2126|  37.7M|        auto it = range.begin();
 2127|       |
 2128|  37.7M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  37.7M|            auto seg = get_contiguous_beginning(range);
 2130|  37.7M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  37.7M|                seg_it != seg.end()) {
 2132|  37.7M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  37.7M|            }
 2134|  37.7M|            ranges::advance(it, seg.size());
 2135|  37.7M|        }
 2136|       |
 2137|  37.7M|        return read_while_code_point(
 2138|  37.7M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  37.7M|    }
 2140|  37.7M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  37.7M|{
 2082|  37.7M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  37.7M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  75.3M|{
 2061|  75.3M|    auto it = range.begin();
 2062|   431M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 431M, False: 15.8k]
  ------------------
 2063|   431M|        const auto val =
 2064|   431M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   431M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   431M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 431M, False: 0]
  |  |  ------------------
  ------------------
 2066|   431M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   431M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   431M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 75.3M, False: 355M]
  ------------------
 2069|  75.3M|                return it;
 2070|  75.3M|            }
 2071|   431M|        }
 2072|   355M|        it = val.iterator;
 2073|   355M|    }
 2074|       |
 2075|  15.8k|    return it;
 2076|  75.3M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  37.7M|    {
  754|  37.7M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   109M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109M|              cvref<T> obj = *get<T>(fn);
  745|   109M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   109M|                  obj(static_cast<decltype(args)>(args)...);
  747|   109M|              }
  748|   109M|              else {
  749|   109M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109M|              }
  751|   109M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   109M|    {
  684|   109M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   109M|            return static_cast<T*>(s.m_cp);
  686|   109M|        }
  687|   109M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   109M|            return static_cast<T*>(s.m_p);
  689|   109M|        }
  690|   109M|        else {
  691|   109M|            return reinterpret_cast<T*>(s.m_fp);
  692|   109M|        }
  693|   109M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   109M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  37.7M|        {
  662|  37.7M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  18.8M|    {
 1587|  18.8M|        return m_storage.has_value();
 1588|  18.8M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  3.52k|    {
 1592|  3.52k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.52k|        return *m_storage;
 1594|  3.52k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5206|  56.5M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  22.6M|    {
 3040|  22.6M|        reader_error_handler eh{};
 3041|  22.6M|        get_derived().check_specs_impl(specs, eh);
 3042|  22.6M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  22.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.89k, False: 22.6M]
  |  |  ------------------
  ------------------
 3043|  8.89k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  8.89k|        }
 3045|  22.6M|        return {};
 3046|  22.6M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  22.6M|    {
 3051|  22.6M|        return static_cast<Derived&>(*this);
 3052|  22.6M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5210|  22.6M|    {
 5211|  22.6M|        detail::check_string_type_specs(specs, eh);
 5212|       |
 5213|  22.6M|        SCN_GCC_PUSH
 5214|  22.6M|        SCN_GCC_IGNORE("-Wswitch")
 5215|  22.6M|        SCN_GCC_IGNORE("-Wswitch-default")
 5216|       |
 5217|  22.6M|        SCN_CLANG_PUSH
 5218|  22.6M|        SCN_CLANG_IGNORE("-Wswitch")
 5219|  22.6M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5220|       |
 5221|  22.6M|        switch (specs.type) {
  ------------------
  |  Branch (5221:17): [True: 0, False: 22.6M]
  ------------------
 5222|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5222:13): [True: 0, False: 22.6M]
  ------------------
 5223|      0|                m_type = reader_type::word;
 5224|      0|                break;
 5225|       |
 5226|  22.6M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5226:13): [True: 22.6M, False: 17.8k]
  ------------------
 5227|  22.6M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5227:21): [True: 0, False: 22.6M]
  ------------------
 5228|  22.6M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5228:21): [True: 0, False: 22.6M]
  ------------------
 5229|      0|                    m_type = reader_type::custom_word;
 5230|      0|                }
 5231|  22.6M|                else {
 5232|  22.6M|                    m_type = reader_type::word;
 5233|  22.6M|                }
 5234|  22.6M|                break;
 5235|      0|            }
 5236|       |
 5237|  8.89k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5237:13): [True: 8.89k, False: 22.6M]
  ------------------
 5238|  8.89k|                m_type = reader_type::character;
 5239|  8.89k|                break;
 5240|       |
 5241|  8.98k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5241:13): [True: 8.98k, False: 22.6M]
  ------------------
 5242|  8.98k|                m_type = reader_type::character_set;
 5243|  8.98k|                break;
 5244|       |
 5245|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5245:13): [True: 0, False: 22.6M]
  ------------------
 5246|      0|                m_type = reader_type::regex;
 5247|      0|                break;
 5248|       |
 5249|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5249:13): [True: 0, False: 22.6M]
  ------------------
 5250|      0|                m_type = reader_type::regex_escaped;
 5251|      0|                break;
 5252|  22.6M|        }
 5253|       |
 5254|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5255|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5256|  22.6M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5259|  79.1M|    {
 5260|  79.1M|        return m_type == reader_type::word;
 5261|  79.1M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  56.5M|{
 1132|  56.5M|    auto it = src.begin();
 1133|   480M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 424M, False: 56.5M]
  ------------------
 1134|   424M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   424M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 424M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   424M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 424M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   424M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   424M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   424M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 9.73k, False: 424M]
  ------------------
 1144|  9.73k|            return false;
 1145|  9.73k|        }
 1146|   424M|        it += len;
 1147|   424M|    }
 1148|  56.5M|    return true;
 1149|  56.5M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5103|  8.98k|        {
 5104|  8.98k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5104:17): [True: 8.98k, False: 0]
  ------------------
 5105|  8.98k|                return {};
 5106|  8.98k|            }
 5107|       |
 5108|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5109|      0|            auto it = detail::to_address(charset_string.begin());
 5110|      0|            auto set = detail::parse_presentation_set(
 5111|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5112|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5113|      0|                return nonascii.err;
 5114|      0|            }
 5115|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5117|       |
 5118|      0|            std::sort(nonascii.extra_ranges.begin(),
 5119|      0|                      nonascii.extra_ranges.end());
 5120|      0|            return {};
 5121|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5076|  4.99k|        {
 5077|  4.99k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5078|  4.99k|            const auto val =
 5079|  4.99k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5080|  4.99k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5081|  4.99k|                    (val % 8)) &
 5082|  4.99k|                   1u;
 5083|  4.99k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5129|  9.02k|        {
 5130|  9.02k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5130:17): [True: 4.02k, False: 4.99k]
  ------------------
 5131|  4.02k|                return false;
 5132|  4.02k|            }
 5133|       |
 5134|  4.99k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5135|  9.02k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5073|  8.98k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  18.8M|{
 2088|  18.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  18.8M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  18.8M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  18.8M|        auto buf = make_contiguous_buffer(range);
 2092|  18.8M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  18.8M|        return ranges::next(range.begin(),
 2094|  18.8M|                            ranges::distance(buf.view().begin(), it));
 2095|  18.8M|    }
 2096|  18.8M|    else {
 2097|  18.8M|        auto it = range.begin();
 2098|       |
 2099|  18.8M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  18.8M|            auto seg = get_contiguous_beginning(range);
 2101|  18.8M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  18.8M|                seg_it != seg.end()) {
 2103|  18.8M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  18.8M|            }
 2105|  18.8M|            ranges::advance(it, seg.size());
 2106|  18.8M|        }
 2107|       |
 2108|  18.8M|        return read_until_code_point(
 2109|  18.8M|            ranges::subrange{it, range.end()},
 2110|  18.8M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  18.8M|    }
 2112|  18.8M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  37.6M|{
 2061|  37.6M|    auto it = range.begin();
 2062|   215M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 215M, False: 7.94k]
  ------------------
 2063|   215M|        const auto val =
 2064|   215M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   215M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   215M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 215M, False: 0]
  |  |  ------------------
  ------------------
 2066|   215M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   215M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   215M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 37.6M, False: 177M]
  ------------------
 2069|  37.6M|                return it;
 2070|  37.6M|            }
 2071|   215M|        }
 2072|   177M|        it = val.iterator;
 2073|   177M|    }
 2074|       |
 2075|  7.94k|    return it;
 2076|  37.6M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   215M|{
 1899|   215M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   215M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   215M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   215M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   215M|    auto it = range.begin();
 1903|   215M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   215M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   215M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 215M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   215M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 215M, False: 0]
  ------------------
 1912|   215M|        ++it;
 1913|   215M|        return {it, string_type(1, *range.begin())};
 1914|   215M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   215M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   215M|    {
 1890|   215M|        return !codepoint.empty();
 1891|   215M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  18.8M|    {
  754|  18.8M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   160M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160M|              cvref<T> obj = *get<T>(fn);
  745|   160M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   160M|                  obj(static_cast<decltype(args)>(args)...);
  747|   160M|              }
  748|   160M|              else {
  749|   160M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160M|              }
  751|   160M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   160M|    {
  684|   160M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   160M|            return static_cast<T*>(s.m_cp);
  686|   160M|        }
  687|   160M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   160M|            return static_cast<T*>(s.m_p);
  689|   160M|        }
  690|   160M|        else {
  691|   160M|            return reinterpret_cast<T*>(s.m_fp);
  692|   160M|        }
  693|   160M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|   160M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  18.8M|        {
  662|  18.8M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5153|  2.99k|    {
 5154|  2.99k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|  2.99k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|  2.99k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.99k]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|  2.99k|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|  2.99k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 0, False: 2.99k]
  ------------------
 5164|      0|            const auto cb = [&](char32_t cp) {
 5165|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|      0|            };
 5167|       |
 5168|      0|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 0, False: 0]
  ------------------
 5169|      0|                auto it = read_until_code_point(range, cb);
 5170|      0|                return check_nonempty(it, range);
 5171|      0|            }
 5172|      0|            auto it = read_while_code_point(range, cb);
 5173|      0|            return check_nonempty(it, range);
 5174|      0|        }
 5175|       |
 5176|  2.99k|        const auto cb = [&](SourceCharT ch) {
 5177|  2.99k|            return cb_wrapper.on_ascii_only(ch);
 5178|  2.99k|        };
 5179|       |
 5180|  2.99k|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 0, False: 2.99k]
  ------------------
 5181|      0|            auto it = read_until_code_unit(range, cb);
 5182|      0|            return check_nonempty(it, range);
 5183|      0|        }
 5184|  2.99k|        auto it = read_while_code_unit(range, cb);
 5185|  2.99k|        return check_nonempty(it, range);
 5186|  2.99k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5191|  2.99k|    {
 5192|  2.99k|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 2.96k, False: 32]
  ------------------
 5193|  2.96k|            return unexpected_scan_error(
 5194|  2.96k|                scan_error::invalid_scanned_value,
 5195|  2.96k|                "No characters matched in [character set]");
 5196|  2.96k|        }
 5197|       |
 5198|     32|        return it;
 5199|  2.99k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  18.8M|{
 2082|  18.8M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  18.8M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_:
  753|  2.99k|    {
  754|  2.99k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|  3.00k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.00k|              cvref<T> obj = *get<T>(fn);
  745|  3.00k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.00k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.00k|              }
  748|  3.00k|              else {
  749|  3.00k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.00k|              }
  751|  3.00k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  3.00k|    {
  684|  3.00k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.00k|            return static_cast<T*>(s.m_cp);
  686|  3.00k|        }
  687|  3.00k|        else if constexpr (std::is_object_v<T>) {
  688|  3.00k|            return static_cast<T*>(s.m_p);
  689|  3.00k|        }
  690|  3.00k|        else {
  691|  3.00k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.00k|        }
  693|  3.00k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5176|  3.00k|        const auto cb = [&](SourceCharT ch) {
 5177|  3.00k|            return cb_wrapper.on_ascii_only(ch);
 5178|  3.00k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  666|  2.99k|        {
  667|  2.99k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  37.6M|{
 2088|  37.6M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  37.6M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  37.6M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  37.6M|        auto buf = make_contiguous_buffer(range);
 2092|  37.6M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  37.6M|        return ranges::next(range.begin(),
 2094|  37.6M|                            ranges::distance(buf.view().begin(), it));
 2095|  37.6M|    }
 2096|  37.6M|    else {
 2097|  37.6M|        auto it = range.begin();
 2098|       |
 2099|  37.6M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  37.6M|            auto seg = get_contiguous_beginning(range);
 2101|  37.6M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  37.6M|                seg_it != seg.end()) {
 2103|  37.6M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  37.6M|            }
 2105|  37.6M|            ranges::advance(it, seg.size());
 2106|  37.6M|        }
 2107|       |
 2108|  37.6M|        return read_until_code_point(
 2109|  37.6M|            ranges::subrange{it, range.end()},
 2110|  37.6M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  37.6M|    }
 2112|  37.6M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  37.6M|    {
  754|  37.6M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   321M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   321M|              cvref<T> obj = *get<T>(fn);
  745|   321M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   321M|                  obj(static_cast<decltype(args)>(args)...);
  747|   321M|              }
  748|   321M|              else {
  749|   321M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   321M|              }
  751|   321M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   321M|    {
  684|   321M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   321M|            return static_cast<T*>(s.m_cp);
  686|   321M|        }
  687|   321M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   321M|            return static_cast<T*>(s.m_p);
  689|   321M|        }
  690|   321M|        else {
  691|   321M|            return reinterpret_cast<T*>(s.m_fp);
  692|   321M|        }
  693|   321M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   321M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  37.6M|        {
  662|  37.6M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5153|  5.99k|    {
 5154|  5.99k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|  5.99k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|  5.99k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.99k]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|  5.99k|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|  5.99k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 0, False: 5.99k]
  ------------------
 5164|      0|            const auto cb = [&](char32_t cp) {
 5165|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|      0|            };
 5167|       |
 5168|      0|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 0, False: 0]
  ------------------
 5169|      0|                auto it = read_until_code_point(range, cb);
 5170|      0|                return check_nonempty(it, range);
 5171|      0|            }
 5172|      0|            auto it = read_while_code_point(range, cb);
 5173|      0|            return check_nonempty(it, range);
 5174|      0|        }
 5175|       |
 5176|  5.99k|        const auto cb = [&](SourceCharT ch) {
 5177|  5.99k|            return cb_wrapper.on_ascii_only(ch);
 5178|  5.99k|        };
 5179|       |
 5180|  5.99k|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 0, False: 5.99k]
  ------------------
 5181|      0|            auto it = read_until_code_unit(range, cb);
 5182|      0|            return check_nonempty(it, range);
 5183|      0|        }
 5184|  5.99k|        auto it = read_while_code_unit(range, cb);
 5185|  5.99k|        return check_nonempty(it, range);
 5186|  5.99k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5191|  5.99k|    {
 5192|  5.99k|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 5.92k, False: 64]
  ------------------
 5193|  5.92k|            return unexpected_scan_error(
 5194|  5.92k|                scan_error::invalid_scanned_value,
 5195|  5.92k|                "No characters matched in [character set]");
 5196|  5.92k|        }
 5197|       |
 5198|     64|        return it;
 5199|  5.99k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|  5.99k|    {
  754|  5.99k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  6.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.01k|              cvref<T> obj = *get<T>(fn);
  745|  6.01k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.01k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.01k|              }
  748|  6.01k|              else {
  749|  6.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.01k|              }
  751|  6.01k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  6.01k|    {
  684|  6.01k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.01k|            return static_cast<T*>(s.m_cp);
  686|  6.01k|        }
  687|  6.01k|        else if constexpr (std::is_object_v<T>) {
  688|  6.01k|            return static_cast<T*>(s.m_p);
  689|  6.01k|        }
  690|  6.01k|        else {
  691|  6.01k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.01k|        }
  693|  6.01k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5176|  6.01k|        const auto cb = [&](SourceCharT ch) {
 5177|  6.01k|            return cb_wrapper.on_ascii_only(ch);
 5178|  6.01k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|  5.99k|        {
  667|  5.99k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  7.54M|    {
 6179|  7.54M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  7.54M|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  7.54M|            auto rd = make_reader<T, char_type>();
 6184|  7.54M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  7.54M|                return unexpected(e);
 6186|  7.54M|            }
 6187|       |
 6188|  7.54M|            return impl(rd, range, value);
 6189|  7.54M|        }
 6190|  7.54M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  7.54M|            auto rd = make_reader<T, char_type>();
 6192|  7.54M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 7.54M]
  |  |  ------------------
  ------------------
 6193|  2.96k|                return unexpected(e);
 6194|  2.96k|            }
 6195|       |
 6196|  7.54M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 7.54M, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  7.54M|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  7.54M|                return impl(rd, range, value);
 6199|  7.54M|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  7.54M|        else {
 6207|  7.54M|            SCN_EXPECT(false);
 6208|  7.54M|            SCN_UNREACHABLE;
 6209|  7.54M|        }
 6210|  7.54M|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5809|  37.7M|{
 5810|  37.7M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  37.7M|        return reader_impl_for_bool<CharT>{};
 5812|  37.7M|    }
 5813|  37.7M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  37.7M|        return reader_impl_for_char<CharT>{};
 5815|  37.7M|    }
 5816|  37.7M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  37.7M|        return reader_impl_for_wchar<CharT>{};
 5818|  37.7M|    }
 5819|  37.7M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  37.7M|        return reader_impl_for_code_point<CharT>{};
 5821|  37.7M|    }
 5822|  37.7M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  37.7M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  37.7M|        return reader_impl_for_string<CharT>{};
 5825|  37.7M|    }
 5826|  37.7M|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  37.7M|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  37.7M|        return reader_impl_for_string<CharT>{};
 5829|  37.7M|    }
 5830|  37.7M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  37.7M|                       std::is_same_v<T, wregex_matches>) {
 5832|  37.7M|        return reader_impl_for_regex_matches<CharT>{};
 5833|  37.7M|    }
 5834|  37.7M|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  37.7M|        return reader_impl_for_voidptr<CharT>{};
 5836|  37.7M|    }
 5837|  37.7M|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  37.7M|        return reader_impl_for_float<CharT>{};
 5839|  37.7M|    }
 5840|  37.7M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  37.7M|                       !std::is_same_v<T, wchar_t> &&
 5842|  37.7M|                       !std::is_same_v<T, char32_t> &&
 5843|  37.7M|                       !std::is_same_v<T, bool>) {
 5844|  37.7M|        return reader_impl_for_int<CharT>{};
 5845|  37.7M|    }
 5846|  37.7M|    else {
 5847|  37.7M|        return reader_impl_for_monostate<CharT>{};
 5848|  37.7M|    }
 5849|  37.7M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6120|  7.54M|    {
 6121|  7.54M|        const bool need_skipped_width =
 6122|  7.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 7.54M]
  |  Branch (6122:33): [True: 0, False: 7.54M]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  7.54M|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  7.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 7.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.66k|    }                                                  \
  |  |  |  | 3642|  7.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  7.54M|        auto [it, prefix_width] = prefix_result;
 6127|  7.54M|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  7.54M|        std::ptrdiff_t value_width = 0;
 6131|  7.54M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 7.54M]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  7.54M|        else {
 6147|  7.54M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  7.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  7.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 7.53M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  4.26k|    }                                                  \
  |  | 3642|  7.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  7.53M|                                             specs, value, loc));
 6149|       |
 6150|  7.53M|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 7.53M]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  7.53M|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  7.53M|        std::ptrdiff_t postfix_width = 0;
 6159|  7.53M|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 7.53M, False: 850]
  ------------------
 6160|  7.53M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  7.53M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 7.53M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  7.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  7.53M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  7.53M|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  7.53M|                                 value_width));
 6164|  7.53M|            std::tie(it, postfix_width) = postfix_result;
 6165|  7.53M|        }
 6166|       |
 6167|  7.53M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  7.53M|                                                 value_width, postfix_width);
 6169|  7.53M|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 7.53M]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  7.53M|        return it;
 6174|  7.53M|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  18.8M|{
 2993|  18.8M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|  18.8M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 3.52k, False: 18.8M]
  ------------------
 2995|  3.52k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.52k|    static_cast<    \
  |  |  929|  3.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  3.52k|        }
 2997|  18.8M|        else {
 2998|  18.8M|            dest.assign(source.view());
 2999|  18.8M|        }
 3000|  18.8M|    }
 3001|  18.8M|    else {
 3002|  18.8M|        return transcode_impl(source.view(), dest);
 3003|  18.8M|    }
 3004|       |
 3005|  18.8M|    return {};
 3006|  18.8M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5277|  7.54M|    {
 5278|  7.54M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  7.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  7.54M|        return read_impl(range, specs, value);
 5280|  7.54M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5295|  7.54M|    {
 5296|  7.54M|        SCN_CLANG_PUSH
 5297|  7.54M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  7.54M|        switch (m_type) {
 5300|  7.53M|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 7.53M, False: 2.99k]
  ------------------
 5301|  7.53M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 7.54M]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 7.54M]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  2.99k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 2.99k, False: 7.53M]
  ------------------
 5311|  2.99k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  2.99k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 7.54M]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 7.54M]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 7.54M]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  7.54M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  7.54M|        }
 5332|       |
 5333|  7.54M|        SCN_CLANG_POP
 5334|  7.54M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4820|  18.8M|    {
 4821|  18.8M|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|  18.8M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4752|  18.8M|{
 4753|  18.8M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  18.8M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  18.8M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 3.24k, False: 18.8M]
  ------------------
 4757|  3.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|  3.24k|                                     "Invalid encoding in scanned string");
 4759|  3.24k|    }
 4760|  18.8M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  18.8M|    static_cast<    \
  |  |  929|  18.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  18.8M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.8M]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  18.8M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  18.8M|    static_cast<    \
  |  |  929|  18.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  18.8M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5048|  2.99k|    {
 5049|  2.99k|        auto it = read_source_impl(range, {specs});
 5050|  2.99k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 32]
  |  |  ------------------
  ------------------
 5051|  2.96k|            return unexpected(it.error());
 5052|  2.96k|        }
 5053|       |
 5054|     32|        return read_string_impl(range, *it, value);
 5055|  2.99k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4752|     32|{
 4753|     32|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|     32|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|     32|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 0, False: 32]
  ------------------
 4757|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|      0|                                     "Invalid encoding in scanned string");
 4759|      0|    }
 4760|     32|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|     32|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|     32|    return SCN_MOVE(result);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|     32|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|  7.54M|    {
 5278|  7.54M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  7.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  7.54M|        return read_impl(range, specs, value);
 5280|  7.54M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|  7.54M|    {
 5296|  7.54M|        SCN_CLANG_PUSH
 5297|  7.54M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  7.54M|        switch (m_type) {
 5300|  7.53M|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 7.53M, False: 2.99k]
  ------------------
 5301|  7.53M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 7.54M]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 7.54M]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  2.99k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 2.99k, False: 7.53M]
  ------------------
 5311|  2.99k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  2.99k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 7.54M]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 7.54M]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 7.54M]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  7.54M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  7.54M|        }
 5332|       |
 5333|  7.54M|        SCN_CLANG_POP
 5334|  7.54M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|  18.8M|    {
 4821|  18.8M|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|  18.8M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  18.8M|{
 4753|  18.8M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  18.8M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  18.8M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 3.24k, False: 18.8M]
  ------------------
 4757|  3.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|  3.24k|                                     "Invalid encoding in scanned string");
 4759|  3.24k|    }
 4760|  18.8M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  18.8M|    static_cast<    \
  |  |  929|  18.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  18.8M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.8M]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  18.8M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  18.8M|    static_cast<    \
  |  |  929|  18.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  18.8M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  18.8M|{
 3012|  18.8M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  18.8M|        dest.assign(source.view());
 3014|  18.8M|    }
 3015|  18.8M|    else {
 3016|  18.8M|        return transcode_impl(source.view(), dest);
 3017|  18.8M|    }
 3018|       |
 3019|  18.8M|    return {};
 3020|  18.8M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5048|  2.99k|    {
 5049|  2.99k|        auto it = read_source_impl(range, {specs});
 5050|  2.99k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 32]
  |  |  ------------------
  ------------------
 5051|  2.96k|            return unexpected(it.error());
 5052|  2.96k|        }
 5053|       |
 5054|     32|        return read_string_impl(range, *it, value);
 5055|  2.99k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4752|     32|{
 4753|     32|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|     32|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|     32|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 0, False: 32]
  ------------------
 4757|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|      0|                                     "Invalid encoding in scanned string");
 4759|      0|    }
 4760|     32|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|     32|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|     32|    return SCN_MOVE(result);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|     32|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5809|  18.8M|{
 5810|  18.8M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  18.8M|        return reader_impl_for_bool<CharT>{};
 5812|  18.8M|    }
 5813|  18.8M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  18.8M|        return reader_impl_for_char<CharT>{};
 5815|  18.8M|    }
 5816|  18.8M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  18.8M|        return reader_impl_for_wchar<CharT>{};
 5818|  18.8M|    }
 5819|  18.8M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  18.8M|        return reader_impl_for_code_point<CharT>{};
 5821|  18.8M|    }
 5822|  18.8M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  18.8M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  18.8M|        return reader_impl_for_string<CharT>{};
 5825|  18.8M|    }
 5826|  18.8M|    else if constexpr (std::is_same_v<T, std::string> ||
 5827|  18.8M|                       std::is_same_v<T, std::wstring>) {
 5828|  18.8M|        return reader_impl_for_string<CharT>{};
 5829|  18.8M|    }
 5830|  18.8M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  18.8M|                       std::is_same_v<T, wregex_matches>) {
 5832|  18.8M|        return reader_impl_for_regex_matches<CharT>{};
 5833|  18.8M|    }
 5834|  18.8M|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  18.8M|        return reader_impl_for_voidptr<CharT>{};
 5836|  18.8M|    }
 5837|  18.8M|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  18.8M|        return reader_impl_for_float<CharT>{};
 5839|  18.8M|    }
 5840|  18.8M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  18.8M|                       !std::is_same_v<T, wchar_t> &&
 5842|  18.8M|                       !std::is_same_v<T, char32_t> &&
 5843|  18.8M|                       !std::is_same_v<T, bool>) {
 5844|  18.8M|        return reader_impl_for_int<CharT>{};
 5845|  18.8M|    }
 5846|  18.8M|    else {
 5847|  18.8M|        return reader_impl_for_monostate<CharT>{};
 5848|  18.8M|    }
 5849|  18.8M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5277|  7.54M|    {
 5278|  7.54M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  7.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  7.54M|        return read_impl(range, specs, value);
 5280|  7.54M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5295|  7.54M|    {
 5296|  7.54M|        SCN_CLANG_PUSH
 5297|  7.54M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  7.54M|        switch (m_type) {
 5300|  7.53M|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 7.53M, False: 2.99k]
  ------------------
 5301|  7.53M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 7.54M]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 7.54M]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  2.99k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 2.99k, False: 7.53M]
  ------------------
 5311|  2.99k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  2.99k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 7.54M]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 7.54M]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 7.54M]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  7.54M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  7.54M|        }
 5332|       |
 5333|  7.54M|        SCN_CLANG_POP
 5334|  7.54M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4827|  18.8M|    {
 4828|  18.8M|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|  18.8M|                                     value);
 4830|  18.8M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4773|  18.8M|{
 4774|  18.8M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|  18.8M|    auto src = [&]() {
 4777|  18.8M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|  18.8M|            return make_contiguous_buffer(
 4779|  18.8M|                ranges::subrange{range.begin().base(), result.base()});
 4780|  18.8M|        }
 4781|  18.8M|        else {
 4782|  18.8M|            return make_contiguous_buffer(
 4783|  18.8M|                ranges::subrange{range.begin(), result});
 4784|  18.8M|        }
 4785|  18.8M|    }();
 4786|  18.8M|    using src_type = decltype(src);
 4787|       |
 4788|  18.8M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|  18.8M|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|  18.8M|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|  18.8M|                                     "Cannot read a string_view from "
 4797|  18.8M|                                     "this source range (would require "
 4798|  18.8M|                                     "transcoding)");
 4799|  18.8M|    }
 4800|  18.8M|    else {
 4801|  18.8M|        const auto view = src.view();
 4802|  18.8M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|  18.8M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 3.24k, False: 18.8M]
  ------------------
 4805|  3.24k|            return unexpected_scan_error(
 4806|  3.24k|                scan_error::invalid_scanned_value,
 4807|  3.24k|                "Invalid encoding in scanned string_view");
 4808|  3.24k|        }
 4809|       |
 4810|  18.8M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  18.8M|    static_cast<    \
  |  |  929|  18.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|  18.8M|    }
 4812|  18.8M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4776|  18.8M|    auto src = [&]() {
 4777|  18.8M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|  18.8M|            return make_contiguous_buffer(
 4779|  18.8M|                ranges::subrange{range.begin().base(), result.base()});
 4780|  18.8M|        }
 4781|  18.8M|        else {
 4782|  18.8M|            return make_contiguous_buffer(
 4783|  18.8M|                ranges::subrange{range.begin(), result});
 4784|  18.8M|        }
 4785|  18.8M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5062|  2.99k|    {
 5063|  2.99k|        auto it = read_source_impl(range, {specs});
 5064|  2.99k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 32]
  |  |  ------------------
  ------------------
 5065|  2.96k|            return unexpected(it.error());
 5066|  2.96k|        }
 5067|       |
 5068|     32|        return read_string_view_impl(range, *it, value);
 5069|  2.99k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4773|     32|{
 4774|     32|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|     32|    auto src = [&]() {
 4777|     32|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|     32|            return make_contiguous_buffer(
 4779|     32|                ranges::subrange{range.begin().base(), result.base()});
 4780|     32|        }
 4781|     32|        else {
 4782|     32|            return make_contiguous_buffer(
 4783|     32|                ranges::subrange{range.begin(), result});
 4784|     32|        }
 4785|     32|    }();
 4786|     32|    using src_type = decltype(src);
 4787|       |
 4788|     32|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|     32|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|     32|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|     32|                                     "Cannot read a string_view from "
 4797|     32|                                     "this source range (would require "
 4798|     32|                                     "transcoding)");
 4799|     32|    }
 4800|     32|    else {
 4801|     32|        const auto view = src.view();
 4802|     32|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|     32|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 0, False: 32]
  ------------------
 4805|      0|            return unexpected_scan_error(
 4806|      0|                scan_error::invalid_scanned_value,
 4807|      0|                "Invalid encoding in scanned string_view");
 4808|      0|        }
 4809|       |
 4810|     32|        return SCN_MOVE(result);
  ------------------
  |  |  928|     32|    static_cast<    \
  |  |  929|     32|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|     32|    }
 4812|     32|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4776|     32|    auto src = [&]() {
 4777|     32|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|     32|            return make_contiguous_buffer(
 4779|     32|                ranges::subrange{range.begin().base(), result.base()});
 4780|     32|        }
 4781|     32|        else {
 4782|     32|            return make_contiguous_buffer(
 4783|     32|                ranges::subrange{range.begin(), result});
 4784|     32|        }
 4785|     32|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  18.8M|{
 2951|  18.8M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 18.8M, False: 0]
  ------------------
 2952|  18.8M|        auto it = read_while_classic_space(range);
 2953|  18.8M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  18.8M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.90k, False: 18.8M]
  |  |  ------------------
  ------------------
 2955|  2.90k|            return unexpected(e);
 2956|  2.90k|        }
 2957|       |
 2958|  18.8M|        return it;
 2959|  18.8M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  18.8M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  18.8M|{
 2117|  18.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  18.8M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  18.8M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  18.8M|        auto buf = make_contiguous_buffer(range);
 2121|  18.8M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  18.8M|        return ranges::next(range.begin(),
 2123|  18.8M|                            ranges::distance(buf.view().begin(), it));
 2124|  18.8M|    }
 2125|  18.8M|    else {
 2126|  18.8M|        auto it = range.begin();
 2127|       |
 2128|  18.8M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  18.8M|            auto seg = get_contiguous_beginning(range);
 2130|  18.8M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  18.8M|                seg_it != seg.end()) {
 2132|  18.8M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  18.8M|            }
 2134|  18.8M|            ranges::advance(it, seg.size());
 2135|  18.8M|        }
 2136|       |
 2137|  18.8M|        return read_while_code_point(
 2138|  18.8M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  18.8M|    }
 2140|  18.8M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  18.8M|    {
  754|  18.8M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  54.9M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.9M|              cvref<T> obj = *get<T>(fn);
  745|  54.9M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  54.9M|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.9M|              }
  748|  54.9M|              else {
  749|  54.9M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.9M|              }
  751|  54.9M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  54.9M|    {
  684|  54.9M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  54.9M|            return static_cast<T*>(s.m_cp);
  686|  54.9M|        }
  687|  54.9M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  54.9M|            return static_cast<T*>(s.m_p);
  689|  54.9M|        }
  690|  54.9M|        else {
  691|  54.9M|            return reinterpret_cast<T*>(s.m_fp);
  692|  54.9M|        }
  693|  54.9M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  54.9M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  18.8M|        {
  662|  18.8M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|   183k|{
 5796|   183k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 182k]
  |  |  ------------------
  ------------------
 5797|  1.07k|        return unexpected(e);
 5798|  1.07k|    }
 5799|       |
 5800|   182k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 182k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|   182k|    return skip_classic_whitespace(range);
 5805|   182k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|  91.5k|    {
 5872|  91.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  91.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  91.5k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  91.5k|            auto rd = make_reader<T, char_type>();
 5877|  91.5k|            return impl(rd, range, value);
 5878|  91.5k|        }
 5879|  91.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  91.5k|            auto rd = make_reader<T, char_type>();
 5881|  91.5k|            if (!is_segment_contiguous(range)) {
 5882|  91.5k|                return impl(rd, range, value);
 5883|  91.5k|            }
 5884|  91.5k|            auto crange = get_as_contiguous(range);
 5885|  91.5k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  91.5k|            return ranges::next(range.begin(),
 5887|  91.5k|                                ranges::distance(crange.begin(), it));
 5888|  91.5k|        }
 5889|  91.5k|        else {
 5890|  91.5k|            SCN_EXPECT(false);
 5891|  91.5k|            SCN_UNREACHABLE;
 5892|  91.5k|        }
 5893|  91.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5863|  91.5k|    {
 5864|  91.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  91.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  91.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  91.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 90.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.48k|    }                                                  \
  |  |  |  | 3642|  91.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  90.1k|                        .transform_error(make_eof_scan_error));
 5866|  90.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  91.5k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5266|  90.1k|    {
 5267|  90.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  90.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  90.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  90.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|  91.5k|    {
 5872|  91.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  91.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  91.5k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  91.5k|            auto rd = make_reader<T, char_type>();
 5877|  91.5k|            return impl(rd, range, value);
 5878|  91.5k|        }
 5879|  91.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  91.5k|            auto rd = make_reader<T, char_type>();
 5881|  91.5k|            if (!is_segment_contiguous(range)) {
 5882|  91.5k|                return impl(rd, range, value);
 5883|  91.5k|            }
 5884|  91.5k|            auto crange = get_as_contiguous(range);
 5885|  91.5k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  91.5k|            return ranges::next(range.begin(),
 5887|  91.5k|                                ranges::distance(crange.begin(), it));
 5888|  91.5k|        }
 5889|  91.5k|        else {
 5890|  91.5k|            SCN_EXPECT(false);
 5891|  91.5k|            SCN_UNREACHABLE;
 5892|  91.5k|        }
 5893|  91.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|  91.5k|    {
 5864|  91.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  91.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  91.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  91.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 90.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.48k|    }                                                  \
  |  |  |  | 3642|  91.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  90.1k|                        .transform_error(make_eof_scan_error));
 5866|  90.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  91.5k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|  90.1k|    {
 5267|  90.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  90.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  90.1k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  90.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5795|  92.8k|{
 5796|  92.8k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 564, False: 92.2k]
  |  |  ------------------
  ------------------
 5797|    564|        return unexpected(e);
 5798|    564|    }
 5799|       |
 5800|  92.2k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 92.2k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|  92.2k|    return skip_classic_whitespace(range);
 5805|  92.2k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|  92.8k|    {
 5872|  92.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  92.8k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  92.8k|            auto rd = make_reader<T, char_type>();
 5877|  92.8k|            return impl(rd, range, value);
 5878|  92.8k|        }
 5879|  92.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  92.8k|            auto rd = make_reader<T, char_type>();
 5881|  92.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 92.8k, False: 0]
  ------------------
 5882|  92.8k|                return impl(rd, range, value);
 5883|  92.8k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  92.8k|        else {
 5890|  92.8k|            SCN_EXPECT(false);
 5891|  92.8k|            SCN_UNREACHABLE;
 5892|  92.8k|        }
 5893|  92.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5863|  92.8k|    {
 5864|  92.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  92.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  92.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  92.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 91.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.50k|    }                                                  \
  |  |  |  | 3642|  92.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  91.3k|                        .transform_error(make_eof_scan_error));
 5866|  91.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  92.8k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5266|  91.3k|    {
 5267|  91.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  91.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  91.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  91.3k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   135k|    {
 2879|   135k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   386k|    {
 2883|   386k|        return m_current;
 2884|   386k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   250k|    {
 2888|   250k|        return m_range.end();
 2889|   250k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   120k|    {
 2903|   120k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   120k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   120k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 120k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   120k|        }
 2909|   120k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   120k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   129k|    {
 2893|   129k|        return ranges::subrange{begin(), end()};
 2894|   129k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|   126k|    {
 6038|   126k|        const bool need_skipped_width =
 6039|   126k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 126k]
  |  Branch (6039:33): [True: 0, False: 126k]
  ------------------
 6040|   126k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|   126k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 126k]
  ------------------
 6044|   126k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 126k]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|   126k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 126k, False: 0]
  |  Branch (6048:56): [True: 122k, False: 4.57k]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|   122k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 122k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|   242k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|   122k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   122k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   122k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.98k, False: 120k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.98k|    }                                                  \
  |  |  |  | 3642|   122k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|   242k|                            make_eof_scan_error));
 6059|       |
 6060|   242k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 120k]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|   120k|            return result_type{it, 0};
 6068|   242k|        }
 6069|       |
 6070|  4.57k|        return result_type{rng.begin(), 0};
 6071|   126k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|   120k|    {
 6080|   120k|        const bool need_skipped_width =
 6081|   120k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 120k]
  |  Branch (6081:33): [True: 0, False: 120k]
  ------------------
 6082|   120k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|   120k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 120k]
  ------------------
 6085|   120k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 120k]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|   120k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 120k, False: 0]
  ------------------
 6090|   120k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 1.57k, False: 118k]
  ------------------
 6091|   120k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 1.57k]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|  1.57k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 1.57k]
  ------------------
 6093|  1.57k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|   120k|        return result_type{rng.begin(), 0};
 6115|   120k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  64.8k|    {
 6179|  64.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  64.8k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  64.8k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  64.8k|            auto rd = make_reader<T, char_type>();
 6184|  64.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 63.3k]
  |  |  ------------------
  ------------------
 6185|  1.48k|                return unexpected(e);
 6186|  1.48k|            }
 6187|       |
 6188|  63.3k|            return impl(rd, range, value);
 6189|  64.8k|        }
 6190|  64.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  64.8k|            auto rd = make_reader<T, char_type>();
 6192|  64.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  64.8k|                return unexpected(e);
 6194|  64.8k|            }
 6195|       |
 6196|  64.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  64.8k|                specs.width != 0) {
 6198|  64.8k|                return impl(rd, range, value);
 6199|  64.8k|            }
 6200|       |
 6201|  64.8k|            auto crange = get_as_contiguous(range);
 6202|  64.8k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  64.8k|            return ranges::next(range.begin(),
 6204|  64.8k|                                ranges::distance(crange.begin(), it));
 6205|  64.8k|        }
 6206|  64.8k|        else {
 6207|  64.8k|            SCN_EXPECT(false);
 6208|  64.8k|            SCN_UNREACHABLE;
 6209|  64.8k|        }
 6210|  64.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6120|  63.3k|    {
 6121|  63.3k|        const bool need_skipped_width =
 6122|  63.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 63.3k]
  |  Branch (6122:33): [True: 0, False: 63.3k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  63.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  63.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  63.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  63.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 990, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    990|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    990|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    990|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    990|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    990|    }                                                  \
  |  |  |  | 3642|  63.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  62.3k|        auto [it, prefix_width] = prefix_result;
 6127|  62.3k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  62.3k|        std::ptrdiff_t value_width = 0;
 6131|  62.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 62.3k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  62.3k|        else {
 6147|  62.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.97k, False: 60.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  1.97k|    }                                                  \
  |  | 3642|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  60.3k|                                             specs, value, loc));
 6149|       |
 6150|  60.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 60.3k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  60.3k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  60.3k|        std::ptrdiff_t postfix_width = 0;
 6159|  60.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 60.0k, False: 376]
  ------------------
 6160|  60.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  60.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  60.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  60.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 60.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  60.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  60.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  60.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  60.0k|                                 value_width));
 6164|  60.0k|            std::tie(it, postfix_width) = postfix_result;
 6165|  60.0k|        }
 6166|       |
 6167|  60.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  60.3k|                                                 value_width, postfix_width);
 6169|  60.3k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 60.3k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  60.3k|        return it;
 6174|  60.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  64.8k|    {
 6179|  64.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  64.8k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  64.8k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  64.8k|            auto rd = make_reader<T, char_type>();
 6184|  64.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 63.3k]
  |  |  ------------------
  ------------------
 6185|  1.48k|                return unexpected(e);
 6186|  1.48k|            }
 6187|       |
 6188|  63.3k|            return impl(rd, range, value);
 6189|  64.8k|        }
 6190|  64.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  64.8k|            auto rd = make_reader<T, char_type>();
 6192|  64.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  64.8k|                return unexpected(e);
 6194|  64.8k|            }
 6195|       |
 6196|  64.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  64.8k|                specs.width != 0) {
 6198|  64.8k|                return impl(rd, range, value);
 6199|  64.8k|            }
 6200|       |
 6201|  64.8k|            auto crange = get_as_contiguous(range);
 6202|  64.8k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  64.8k|            return ranges::next(range.begin(),
 6204|  64.8k|                                ranges::distance(crange.begin(), it));
 6205|  64.8k|        }
 6206|  64.8k|        else {
 6207|  64.8k|            SCN_EXPECT(false);
 6208|  64.8k|            SCN_UNREACHABLE;
 6209|  64.8k|        }
 6210|  64.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|  63.3k|    {
 6121|  63.3k|        const bool need_skipped_width =
 6122|  63.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 63.3k]
  |  Branch (6122:33): [True: 0, False: 63.3k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  63.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  63.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  63.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  63.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 990, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    990|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    990|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    990|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    990|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    990|    }                                                  \
  |  |  |  | 3642|  63.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  62.3k|        auto [it, prefix_width] = prefix_result;
 6127|  62.3k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  62.3k|        std::ptrdiff_t value_width = 0;
 6131|  62.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 62.3k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  62.3k|        else {
 6147|  62.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.97k, False: 60.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  1.97k|    }                                                  \
  |  | 3642|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  60.3k|                                             specs, value, loc));
 6149|       |
 6150|  60.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 60.3k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  60.3k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  60.3k|        std::ptrdiff_t postfix_width = 0;
 6159|  60.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 60.0k, False: 376]
  ------------------
 6160|  60.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  60.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  60.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  60.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 60.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  60.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  60.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  60.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  60.0k|                                 value_width));
 6164|  60.0k|            std::tie(it, postfix_width) = postfix_result;
 6165|  60.0k|        }
 6166|       |
 6167|  60.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  60.3k|                                                 value_width, postfix_width);
 6169|  60.3k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 60.3k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  60.3k|        return it;
 6174|  60.3k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  22.6M|{
 5796|  22.6M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  22.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.52k, False: 22.6M]
  |  |  ------------------
  ------------------
 5797|  2.52k|        return unexpected(e);
 5798|  2.52k|    }
 5799|       |
 5800|  22.6M|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 22.6M]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|  22.6M|    return skip_classic_whitespace(range);
 5805|  22.6M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|  11.3M|    {
 5872|  11.3M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  11.3M|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  11.3M|                          basic_contiguous_scan_context<char_type>>) {
 5876|  11.3M|            auto rd = make_reader<T, char_type>();
 5877|  11.3M|            return impl(rd, range, value);
 5878|  11.3M|        }
 5879|  11.3M|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  11.3M|            auto rd = make_reader<T, char_type>();
 5881|  11.3M|            if (!is_segment_contiguous(range)) {
 5882|  11.3M|                return impl(rd, range, value);
 5883|  11.3M|            }
 5884|  11.3M|            auto crange = get_as_contiguous(range);
 5885|  11.3M|            SCN_TRY(it, impl(rd, crange, value));
 5886|  11.3M|            return ranges::next(range.begin(),
 5887|  11.3M|                                ranges::distance(crange.begin(), it));
 5888|  11.3M|        }
 5889|  11.3M|        else {
 5890|  11.3M|            SCN_EXPECT(false);
 5891|  11.3M|            SCN_UNREACHABLE;
 5892|  11.3M|        }
 5893|  11.3M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5863|  11.3M|    {
 5864|  11.3M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  11.3M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  11.3M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  11.3M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.49k, False: 11.3M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.49k|    }                                                  \
  |  |  |  | 3642|  11.3M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  11.3M|                        .transform_error(make_eof_scan_error));
 5866|  11.3M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  11.3M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5266|  11.3M|    {
 5267|  11.3M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  11.3M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  11.3M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|  11.3M|    {
 5872|  11.3M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  11.3M|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  11.3M|                          basic_contiguous_scan_context<char_type>>) {
 5876|  11.3M|            auto rd = make_reader<T, char_type>();
 5877|  11.3M|            return impl(rd, range, value);
 5878|  11.3M|        }
 5879|  11.3M|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  11.3M|            auto rd = make_reader<T, char_type>();
 5881|  11.3M|            if (!is_segment_contiguous(range)) {
 5882|  11.3M|                return impl(rd, range, value);
 5883|  11.3M|            }
 5884|  11.3M|            auto crange = get_as_contiguous(range);
 5885|  11.3M|            SCN_TRY(it, impl(rd, crange, value));
 5886|  11.3M|            return ranges::next(range.begin(),
 5887|  11.3M|                                ranges::distance(crange.begin(), it));
 5888|  11.3M|        }
 5889|  11.3M|        else {
 5890|  11.3M|            SCN_EXPECT(false);
 5891|  11.3M|            SCN_UNREACHABLE;
 5892|  11.3M|        }
 5893|  11.3M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|  11.3M|    {
 5864|  11.3M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  11.3M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  11.3M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  11.3M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.49k, False: 11.3M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.49k|    }                                                  \
  |  |  |  | 3642|  11.3M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  11.3M|                        .transform_error(make_eof_scan_error));
 5866|  11.3M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  11.3M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|  11.3M|    {
 5267|  11.3M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  11.3M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  11.3M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|  15.1M|    {
 2879|  15.1M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  45.2M|    {
 2883|  45.2M|        return m_current;
 2884|  45.2M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  30.1M|    {
 2888|  30.1M|        return m_range.end();
 2889|  30.1M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  15.0M|    {
 2903|  15.0M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  15.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  15.0M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  15.0M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 15.0M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  15.0M|        }
 2909|  15.0M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  15.0M|    static_cast<    \
  |  |  929|  15.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  15.0M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  15.0M|    {
 2893|  15.0M|        return ranges::subrange{begin(), end()};
 2894|  15.0M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  15.0M|    {
 6038|  15.0M|        const bool need_skipped_width =
 6039|  15.0M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 15.0M]
  |  Branch (6039:33): [True: 0, False: 15.0M]
  ------------------
 6040|  15.0M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  15.0M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 15.0M]
  ------------------
 6044|  15.0M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 15.0M]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|  15.0M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 15.0M, False: 0]
  |  Branch (6048:56): [True: 15.0M, False: 5.99k]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  15.0M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 15.0M]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  30.1M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  15.0M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  15.0M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  15.0M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.33k, False: 15.0M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  3.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  3.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  3.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  3.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  3.33k|    }                                                  \
  |  |  |  | 3642|  15.0M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  30.1M|                            make_eof_scan_error));
 6059|       |
 6060|  30.1M|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 15.0M]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|  15.0M|            return result_type{it, 0};
 6068|  30.1M|        }
 6069|       |
 6070|  5.99k|        return result_type{rng.begin(), 0};
 6071|  15.0M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  15.0M|    {
 6080|  15.0M|        const bool need_skipped_width =
 6081|  15.0M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 15.0M]
  |  Branch (6081:33): [True: 0, False: 15.0M]
  ------------------
 6082|  15.0M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  15.0M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 15.0M]
  ------------------
 6085|  15.0M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 15.0M]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  15.0M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 15.0M, False: 0]
  ------------------
 6090|  15.0M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 44, False: 15.0M]
  ------------------
 6091|  15.0M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 44]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|     44|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 44]
  ------------------
 6093|     44|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  15.0M|        return result_type{rng.begin(), 0};
 6115|  15.0M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|  7.54M|    {
 6179|  7.54M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  7.54M|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  7.54M|                          basic_contiguous_scan_context<char_type>>) {
 6183|  7.54M|            auto rd = make_reader<T, char_type>();
 6184|  7.54M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 7.54M]
  |  |  ------------------
  ------------------
 6185|  2.96k|                return unexpected(e);
 6186|  2.96k|            }
 6187|       |
 6188|  7.54M|            return impl(rd, range, value);
 6189|  7.54M|        }
 6190|  7.54M|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  7.54M|            auto rd = make_reader<T, char_type>();
 6192|  7.54M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  7.54M|                return unexpected(e);
 6194|  7.54M|            }
 6195|       |
 6196|  7.54M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  7.54M|                specs.width != 0) {
 6198|  7.54M|                return impl(rd, range, value);
 6199|  7.54M|            }
 6200|       |
 6201|  7.54M|            auto crange = get_as_contiguous(range);
 6202|  7.54M|            SCN_TRY(it, impl(rd, crange, value));
 6203|  7.54M|            return ranges::next(range.begin(),
 6204|  7.54M|                                ranges::distance(crange.begin(), it));
 6205|  7.54M|        }
 6206|  7.54M|        else {
 6207|  7.54M|            SCN_EXPECT(false);
 6208|  7.54M|            SCN_UNREACHABLE;
 6209|  7.54M|        }
 6210|  7.54M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6120|  7.54M|    {
 6121|  7.54M|        const bool need_skipped_width =
 6122|  7.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 7.54M]
  |  Branch (6122:33): [True: 0, False: 7.54M]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  7.54M|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  7.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 7.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.66k|    }                                                  \
  |  |  |  | 3642|  7.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  7.54M|        auto [it, prefix_width] = prefix_result;
 6127|  7.54M|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  7.54M|        std::ptrdiff_t value_width = 0;
 6131|  7.54M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 7.54M]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  7.54M|        else {
 6147|  7.54M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  7.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  7.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 7.53M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  4.26k|    }                                                  \
  |  | 3642|  7.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  7.53M|                                             specs, value, loc));
 6149|       |
 6150|  7.53M|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 7.53M]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  7.53M|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  7.53M|        std::ptrdiff_t postfix_width = 0;
 6159|  7.53M|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 7.53M, False: 850]
  ------------------
 6160|  7.53M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  7.53M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 7.53M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  7.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  7.53M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  7.53M|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  7.53M|                                 value_width));
 6164|  7.53M|            std::tie(it, postfix_width) = postfix_result;
 6165|  7.53M|        }
 6166|       |
 6167|  7.53M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  7.53M|                                                 value_width, postfix_width);
 6169|  7.53M|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 7.53M]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  7.53M|        return it;
 6174|  7.53M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|  7.54M|    {
 6179|  7.54M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  7.54M|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  7.54M|                          basic_contiguous_scan_context<char_type>>) {
 6183|  7.54M|            auto rd = make_reader<T, char_type>();
 6184|  7.54M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 7.54M]
  |  |  ------------------
  ------------------
 6185|  2.96k|                return unexpected(e);
 6186|  2.96k|            }
 6187|       |
 6188|  7.54M|            return impl(rd, range, value);
 6189|  7.54M|        }
 6190|  7.54M|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  7.54M|            auto rd = make_reader<T, char_type>();
 6192|  7.54M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  7.54M|                return unexpected(e);
 6194|  7.54M|            }
 6195|       |
 6196|  7.54M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  7.54M|                specs.width != 0) {
 6198|  7.54M|                return impl(rd, range, value);
 6199|  7.54M|            }
 6200|       |
 6201|  7.54M|            auto crange = get_as_contiguous(range);
 6202|  7.54M|            SCN_TRY(it, impl(rd, crange, value));
 6203|  7.54M|            return ranges::next(range.begin(),
 6204|  7.54M|                                ranges::distance(crange.begin(), it));
 6205|  7.54M|        }
 6206|  7.54M|        else {
 6207|  7.54M|            SCN_EXPECT(false);
 6208|  7.54M|            SCN_UNREACHABLE;
 6209|  7.54M|        }
 6210|  7.54M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|  7.54M|    {
 6121|  7.54M|        const bool need_skipped_width =
 6122|  7.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 7.54M]
  |  Branch (6122:33): [True: 0, False: 7.54M]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  7.54M|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  7.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 7.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.66k|    }                                                  \
  |  |  |  | 3642|  7.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  7.54M|        auto [it, prefix_width] = prefix_result;
 6127|  7.54M|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  7.54M|        std::ptrdiff_t value_width = 0;
 6131|  7.54M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 7.54M]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  7.54M|        else {
 6147|  7.54M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  7.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  7.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  7.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 7.53M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  4.26k|    }                                                  \
  |  | 3642|  7.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  7.53M|                                             specs, value, loc));
 6149|       |
 6150|  7.53M|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 7.53M]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  7.53M|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  7.53M|        std::ptrdiff_t postfix_width = 0;
 6159|  7.53M|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 7.53M, False: 850]
  ------------------
 6160|  7.53M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  7.53M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 7.53M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  7.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  7.53M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  7.53M|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  7.53M|                                 value_width));
 6164|  7.53M|            std::tie(it, postfix_width) = postfix_result;
 6165|  7.53M|        }
 6166|       |
 6167|  7.53M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  7.53M|                                                 value_width, postfix_width);
 6169|  7.53M|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 7.53M]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  7.53M|        return it;
 6174|  7.53M|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5795|  11.3M|{
 5796|  11.3M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.26k, False: 11.3M]
  |  |  ------------------
  ------------------
 5797|  1.26k|        return unexpected(e);
 5798|  1.26k|    }
 5799|       |
 5800|  11.3M|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 11.3M]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|  11.3M|    return skip_classic_whitespace(range);
 5805|  11.3M|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  11.3M|    {
 5872|  11.3M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  11.3M|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  11.3M|            auto rd = make_reader<T, char_type>();
 5877|  11.3M|            return impl(rd, range, value);
 5878|  11.3M|        }
 5879|  11.3M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  11.3M|            auto rd = make_reader<T, char_type>();
 5881|  11.3M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 11.3M, False: 0]
  ------------------
 5882|  11.3M|                return impl(rd, range, value);
 5883|  11.3M|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  11.3M|        else {
 5890|  11.3M|            SCN_EXPECT(false);
 5891|  11.3M|            SCN_UNREACHABLE;
 5892|  11.3M|        }
 5893|  11.3M|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5863|  11.3M|    {
 5864|  11.3M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  11.3M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  11.3M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  11.3M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.49k, False: 11.3M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.49k|    }                                                  \
  |  |  |  | 3642|  11.3M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  11.3M|                        .transform_error(make_eof_scan_error));
 5866|  11.3M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  11.3M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5266|  11.3M|    {
 5267|  11.3M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  11.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|  11.3M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|  11.3M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    741|{
   52|    741|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    741|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    741|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    741|    string_buffer.resize(size);
   56|    741|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    741|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    741|    const auto wsv_reinterpret_size =
   61|    741|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 76, False: 665]
  ------------------
   62|    741|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    741|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    741|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    741|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    741|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    741|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    741|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    741|{
  122|    741|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    741|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    741|    buf.resize(sizeof...(Args));
  125|    741|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    741|    return buf;
  127|    741|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    741|{
  108|    741|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    741|        return format_string_view_buffer;
  110|    741|    }
  111|    741|    else {
  112|    741|        return wformat_string_view_buffer;
  113|    741|    }
  114|    741|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|    741|{
  182|    741|    do_basic_run_for_source<CharT>(data, format_strings);
  183|    741|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|    741|                                   format_strings);
  185|    741|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|    741|{
  133|       |    // Regular scan
  134|  4.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.44k, False: 741]
  ------------------
  135|  4.44k|        auto it = scn::ranges::begin(source);
  136|  64.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  64.4k|            auto result = scn::scan<T>(
  138|  64.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  64.4k|                scn::runtime_format(f));
  140|  64.4k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 4.44k, False: 59.9k]
  ------------------
  141|  4.44k|                break;
  142|  4.44k|            }
  143|  59.9k|            it = result->begin();
  144|  59.9k|        }
  145|  4.44k|    }
  146|       |
  147|       |    // scan localized
  148|  4.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 4.44k, False: 741]
  ------------------
  149|  4.44k|        auto it = scn::ranges::begin(source);
  150|  64.4k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  64.4k|            auto result = scn::scan<T>(
  152|  64.4k|                global_locale,
  153|  64.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  64.4k|                scn::runtime_format(f));
  155|  64.4k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 4.44k, False: 59.9k]
  ------------------
  156|  4.44k|                break;
  157|  4.44k|            }
  158|  59.9k|            it = result->begin();
  159|  59.9k|        }
  160|  4.44k|    }
  161|       |
  162|       |    // scan_value
  163|    741|    {
  164|    741|        auto it = scn::ranges::begin(source);
  165|  30.5k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  30.5k|            auto result = scn::scan_value<T>(
  167|  30.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  30.5k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 741, False: 29.7k]
  ------------------
  169|    741|                break;
  170|    741|            }
  171|  29.7k|            it = result->begin();
  172|  29.7k|        }
  173|    741|    }
  174|    741|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    741|{
  133|       |    // Regular scan
  134|  4.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.44k, False: 741]
  ------------------
  135|  4.44k|        auto it = scn::ranges::begin(source);
  136|  64.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  64.4k|            auto result = scn::scan<T>(
  138|  64.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  64.4k|                scn::runtime_format(f));
  140|  64.4k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 4.44k, False: 59.9k]
  ------------------
  141|  4.44k|                break;
  142|  4.44k|            }
  143|  59.9k|            it = result->begin();
  144|  59.9k|        }
  145|  4.44k|    }
  146|       |
  147|       |    // scan localized
  148|  4.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 4.44k, False: 741]
  ------------------
  149|  4.44k|        auto it = scn::ranges::begin(source);
  150|  64.4k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  64.4k|            auto result = scn::scan<T>(
  152|  64.4k|                global_locale,
  153|  64.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  64.4k|                scn::runtime_format(f));
  155|  64.4k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 4.44k, False: 59.9k]
  ------------------
  156|  4.44k|                break;
  157|  4.44k|            }
  158|  59.9k|            it = result->begin();
  159|  59.9k|        }
  160|  4.44k|    }
  161|       |
  162|       |    // scan_value
  163|    741|    {
  164|    741|        auto it = scn::ranges::begin(source);
  165|  30.5k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  30.5k|            auto result = scn::scan_value<T>(
  167|  30.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  30.5k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 741, False: 29.7k]
  ------------------
  169|    741|                break;
  170|    741|            }
  171|  29.7k|            it = result->begin();
  172|  29.7k|        }
  173|    741|    }
  174|    741|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|    741|{
  133|       |    // Regular scan
  134|  4.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 4.44k, False: 741]
  ------------------
  135|  4.44k|        auto it = scn::ranges::begin(source);
  136|  65.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  65.1k|            auto result = scn::scan<T>(
  138|  65.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  65.1k|                scn::runtime_format(f));
  140|  65.1k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 4.44k, False: 60.6k]
  ------------------
  141|  4.44k|                break;
  142|  4.44k|            }
  143|  60.6k|            it = result->begin();
  144|  60.6k|        }
  145|  4.44k|    }
  146|       |
  147|       |    // scan localized
  148|  4.44k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 4.44k, False: 741]
  ------------------
  149|  4.44k|        auto it = scn::ranges::begin(source);
  150|  65.1k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  65.1k|            auto result = scn::scan<T>(
  152|  65.1k|                global_locale,
  153|  65.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  65.1k|                scn::runtime_format(f));
  155|  65.1k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 4.44k, False: 60.6k]
  ------------------
  156|  4.44k|                break;
  157|  4.44k|            }
  158|  60.6k|            it = result->begin();
  159|  60.6k|        }
  160|  4.44k|    }
  161|       |
  162|       |    // scan_value
  163|    741|    {
  164|    741|        auto it = scn::ranges::begin(source);
  165|  30.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  30.9k|            auto result = scn::scan_value<T>(
  167|  30.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  30.9k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 741, False: 30.1k]
  ------------------
  169|    741|                break;
  170|    741|            }
  171|  30.1k|            it = result->begin();
  172|  30.1k|        }
  173|    741|    }
  174|    741|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    741|{
   90|    741|    using char_type = ranges::range_value_t<Source>;
   91|    741|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    741|    deque.clear();
   93|    741|    std::copy(ranges::begin(source), ranges::end(source),
   94|    741|              std::back_inserter(deque));
   95|    741|    return deque;
   96|    741|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    741|{
   79|    741|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|    741|        return noncontiguous_buffer;
   81|    741|    }
   82|    741|    else {
   83|    741|        return wnoncontiguous_buffer;
   84|    741|    }
   85|    741|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    741|{
  122|    741|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    741|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    741|    buf.resize(sizeof...(Args));
  125|    741|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    741|    return buf;
  127|    741|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    741|{
  108|    741|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    741|        return format_string_view_buffer;
  110|    741|    }
  111|    741|    else {
  112|    741|        return wformat_string_view_buffer;
  113|    741|    }
  114|    741|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|  1.48k|{
  182|  1.48k|    do_basic_run_for_source<CharT>(data, format_strings);
  183|  1.48k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|  1.48k|                                   format_strings);
  185|  1.48k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.48k|{
  133|       |    // Regular scan
  134|  8.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.89k, False: 1.48k]
  ------------------
  135|  8.89k|        auto it = scn::ranges::begin(source);
  136|  7.54M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  7.54M|            auto result = scn::scan<T>(
  138|  7.54M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  7.54M|                scn::runtime_format(f));
  140|  7.54M|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 8.89k, False: 7.53M]
  ------------------
  141|  8.89k|                break;
  142|  8.89k|            }
  143|  7.53M|            it = result->begin();
  144|  7.53M|        }
  145|  8.89k|    }
  146|       |
  147|       |    // scan localized
  148|  8.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 8.89k, False: 1.48k]
  ------------------
  149|  8.89k|        auto it = scn::ranges::begin(source);
  150|  7.54M|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  7.54M|            auto result = scn::scan<T>(
  152|  7.54M|                global_locale,
  153|  7.54M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  7.54M|                scn::runtime_format(f));
  155|  7.54M|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 8.89k, False: 7.53M]
  ------------------
  156|  8.89k|                break;
  157|  8.89k|            }
  158|  7.53M|            it = result->begin();
  159|  7.53M|        }
  160|  8.89k|    }
  161|       |
  162|       |    // scan_value
  163|  1.48k|    {
  164|  1.48k|        auto it = scn::ranges::begin(source);
  165|  3.77M|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  3.77M|            auto result = scn::scan_value<T>(
  167|  3.77M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  3.77M|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 1.48k, False: 3.76M]
  ------------------
  169|  1.48k|                break;
  170|  1.48k|            }
  171|  3.76M|            it = result->begin();
  172|  3.76M|        }
  173|  1.48k|    }
  174|  1.48k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.48k|{
  133|       |    // Regular scan
  134|  8.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.89k, False: 1.48k]
  ------------------
  135|  8.89k|        auto it = scn::ranges::begin(source);
  136|  7.54M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  7.54M|            auto result = scn::scan<T>(
  138|  7.54M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  7.54M|                scn::runtime_format(f));
  140|  7.54M|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 8.89k, False: 7.53M]
  ------------------
  141|  8.89k|                break;
  142|  8.89k|            }
  143|  7.53M|            it = result->begin();
  144|  7.53M|        }
  145|  8.89k|    }
  146|       |
  147|       |    // scan localized
  148|  8.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 8.89k, False: 1.48k]
  ------------------
  149|  8.89k|        auto it = scn::ranges::begin(source);
  150|  7.54M|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  7.54M|            auto result = scn::scan<T>(
  152|  7.54M|                global_locale,
  153|  7.54M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  7.54M|                scn::runtime_format(f));
  155|  7.54M|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 8.89k, False: 7.53M]
  ------------------
  156|  8.89k|                break;
  157|  8.89k|            }
  158|  7.53M|            it = result->begin();
  159|  7.53M|        }
  160|  8.89k|    }
  161|       |
  162|       |    // scan_value
  163|  1.48k|    {
  164|  1.48k|        auto it = scn::ranges::begin(source);
  165|  3.77M|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  3.77M|            auto result = scn::scan_value<T>(
  167|  3.77M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  3.77M|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 1.48k, False: 3.76M]
  ------------------
  169|  1.48k|                break;
  170|  1.48k|            }
  171|  3.76M|            it = result->begin();
  172|  3.76M|        }
  173|  1.48k|    }
  174|  1.48k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.48k|{
  133|       |    // Regular scan
  134|  8.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.89k, False: 1.48k]
  ------------------
  135|  8.89k|        auto it = scn::ranges::begin(source);
  136|  7.54M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  7.54M|            auto result = scn::scan<T>(
  138|  7.54M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  7.54M|                scn::runtime_format(f));
  140|  7.54M|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 8.89k, False: 7.53M]
  ------------------
  141|  8.89k|                break;
  142|  8.89k|            }
  143|  7.53M|            it = result->begin();
  144|  7.53M|        }
  145|  8.89k|    }
  146|       |
  147|       |    // scan localized
  148|  8.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 8.89k, False: 1.48k]
  ------------------
  149|  8.89k|        auto it = scn::ranges::begin(source);
  150|  7.54M|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  7.54M|            auto result = scn::scan<T>(
  152|  7.54M|                global_locale,
  153|  7.54M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  7.54M|                scn::runtime_format(f));
  155|  7.54M|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 8.89k, False: 7.53M]
  ------------------
  156|  8.89k|                break;
  157|  8.89k|            }
  158|  7.53M|            it = result->begin();
  159|  7.53M|        }
  160|  8.89k|    }
  161|       |
  162|       |    // scan_value
  163|  1.48k|    {
  164|  1.48k|        auto it = scn::ranges::begin(source);
  165|  3.77M|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  3.77M|            auto result = scn::scan_value<T>(
  167|  3.77M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  3.77M|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 1.48k, False: 3.76M]
  ------------------
  169|  1.48k|                break;
  170|  1.48k|            }
  171|  3.76M|            it = result->begin();
  172|  3.76M|        }
  173|  1.48k|    }
  174|  1.48k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.48k|{
   90|  1.48k|    using char_type = ranges::range_value_t<Source>;
   91|  1.48k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.48k|    deque.clear();
   93|  1.48k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.48k|              std::back_inserter(deque));
   95|  1.48k|    return deque;
   96|  1.48k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.48k|{
   79|  1.48k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  1.48k|        return noncontiguous_buffer;
   81|  1.48k|    }
   82|  1.48k|    else {
   83|  1.48k|        return wnoncontiguous_buffer;
   84|  1.48k|    }
   85|  1.48k|}

LLVMFuzzerTestOneInput:
   57|    742|{
   58|    742|    scn::fuzz::run(data, size);
   59|    742|    return 0;
   60|    742|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    742|{
   36|    742|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 741]
  |  Branch (36:35): [True: 0, False: 741]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    741|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    741|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    741|                                             "{:64U}", "{:[A-Za-z]}");
   44|    741|    do_basic_run(sv, f);
   45|       |
   46|    741|    const auto& wf = get_format_strings<wchar_t>(
   47|    741|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    741|    do_basic_run(wsv_reinterpret, wf);
   49|    741|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 741, False: 0]
  ------------------
   50|    741|        do_basic_run(wsv_transcode, wf);
   51|    741|    }
   52|    741|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    741|{
   25|    741|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    741|                                                           format_strings);
   27|    741|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    741|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    741|            source, format_strings);
   30|    741|    }
   31|    741|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    741|{
   25|    741|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    741|                                                           format_strings);
   27|    741|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    741|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    741|            source, format_strings);
   30|    741|    }
   31|    741|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.48k|{
   25|  1.48k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.48k|                                                           format_strings);
   27|  1.48k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.48k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.48k|            source, format_strings);
   30|  1.48k|    }
   31|  1.48k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.48k|{
   25|  1.48k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.48k|                                                           format_strings);
   27|  1.48k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.48k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.48k|            source, format_strings);
   30|  1.48k|    }
   31|  1.48k|}

