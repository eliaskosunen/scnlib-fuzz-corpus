_ZN7simdutf6resultC2ENS_10error_codeEm:
   29|  7.12k|  simdutf_really_inline result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

_ZNK7simdutf14implementation25required_instruction_setsEv:
 1589|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2693|      7|  {
 2694|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2723|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2695|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2789|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2786|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2769|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2788|  1.39M|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  208|      1|static inline uint32_t detect_supported_architectures() {
  209|      1|  uint32_t eax;
  210|      1|  uint32_t ebx = 0;
  211|      1|  uint32_t ecx = 0;
  212|      1|  uint32_t edx = 0;
  213|      1|  uint32_t host_isa = 0x0;
  214|       |
  215|       |  // EBX for EAX=0x1
  216|      1|  eax = 0x1;
  217|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  218|       |
  219|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (219:7): [True: 1, False: 0]
  ------------------
  220|      1|    host_isa |= instruction_set::SSE42;
  221|      1|  }
  222|       |
  223|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (223:7): [True: 1, False: 0]
  ------------------
  224|      1|    host_isa |= instruction_set::PCLMULQDQ;
  225|      1|  }
  226|       |
  227|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (227:7): [True: 0, False: 1]
  ------------------
  228|      0|    return host_isa;
  229|      0|  }
  230|       |
  231|       |  // xgetbv for checking if the OS saves registers
  232|      1|  uint64_t xcr0 = xgetbv();
  233|       |
  234|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (234:7): [True: 0, False: 1]
  ------------------
  235|      0|    return host_isa;
  236|      0|  }
  237|       |  // ECX for EAX=0x7
  238|      1|  eax = 0x7;
  239|      1|  ecx = 0x0; // Sub-leaf = 0
  240|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  241|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (241:7): [True: 1, False: 0]
  ------------------
  242|      1|    host_isa |= instruction_set::AVX2;
  243|      1|  }
  244|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (244:7): [True: 1, False: 0]
  ------------------
  245|      1|    host_isa |= instruction_set::BMI1;
  246|      1|  }
  247|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (247:7): [True: 1, False: 0]
  ------------------
  248|      1|    host_isa |= instruction_set::BMI2;
  249|      1|  }
  250|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (250:7): [True: 1, False: 0]
  ------------------
  251|      1|    return host_isa;
  252|      1|  }
  253|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (253:7): [True: 0, False: 0]
  ------------------
  254|      0|    host_isa |= instruction_set::AVX512F;
  255|      0|  }
  256|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (256:7): [True: 0, False: 0]
  ------------------
  257|      0|    host_isa |= instruction_set::AVX512BW;
  258|      0|  }
  259|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (259:7): [True: 0, False: 0]
  ------------------
  260|      0|    host_isa |= instruction_set::AVX512CD;
  261|      0|  }
  262|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (262:7): [True: 0, False: 0]
  ------------------
  263|      0|    host_isa |= instruction_set::AVX512DQ;
  264|      0|  }
  265|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (265:7): [True: 0, False: 0]
  ------------------
  266|      0|    host_isa |= instruction_set::AVX512VL;
  267|      0|  }
  268|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|    host_isa |= instruction_set::AVX512VBMI2;
  270|      0|  }
  271|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (271:7): [True: 0, False: 0]
  ------------------
  272|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  273|      0|  }
  274|      0|  return host_isa;
  275|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  177|      2|                         uint32_t *edx) {
  178|       |#if defined(_MSC_VER)
  179|       |  int cpu_info[4];
  180|       |  __cpuidex(cpu_info, *eax, *ecx);
  181|       |  *eax = cpu_info[0];
  182|       |  *ebx = cpu_info[1];
  183|       |  *ecx = cpu_info[2];
  184|       |  *edx = cpu_info[3];
  185|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  186|       |  uint32_t level = *eax;
  187|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  188|       |#else
  189|      2|  uint32_t a = *eax, b, c = *ecx, d;
  190|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  191|      2|  *eax = a;
  192|      2|  *ebx = b;
  193|      2|  *ecx = c;
  194|      2|  *edx = d;
  195|      2|#endif
  196|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  198|      1|static inline uint64_t xgetbv() {
  199|       | #if defined(_MSC_VER)
  200|       |   return _xgetbv(0);
  201|       | #else
  202|      1|   uint32_t xcr0_lo, xcr0_hi;
  203|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  204|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  205|      1| #endif
  206|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   470k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  1.67M|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  1.67M|  return idx < lenminusstep;
   70|  1.67M|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  1.20M|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  1.20M|  return &buf[idx];
   75|  1.20M|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  1.67M|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  1.67M|  idx += STEP_SIZE;
   88|  1.67M|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   470k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   470k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 470k]
  ------------------
   80|   470k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   470k|  std::memcpy(dst, buf + idx, len - idx);
   82|   470k|  return len - idx;
   83|   470k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  21.7k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  21.7k|    size_t pos = 0;
   12|  21.7k|    size_t count = 0;
   13|  25.6k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 3.95k, False: 21.7k]
  ------------------
   14|  3.95k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  3.95k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  3.95k|      count += count_ones(utf8_continuation_mask);
   17|  3.95k|    }
   18|  21.7k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  21.7k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   486k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   482k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   482k|      size_t pos = 0;
  131|   482k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  137|       |      // to give us a good margin.
  138|   482k|      size_t leading_byte = 0;
  139|   482k|      size_t margin = size;
  140|  1.37M|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (140:13): [True: 890k, False: 482k]
  |  Branch (140:27): [True: 890k, False: 0]
  ------------------
  141|   890k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   890k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   482k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   482k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 482k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   482k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 482k]
  ------------------
  195|   482k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 482k, False: 0]
  ------------------
  196|   482k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   482k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 88.0k, False: 394k]
  ------------------
  198|   394k|        utf32_output += howmany;
  199|   394k|      }
  200|   394k|      return utf32_output - start;
  201|   482k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   486k|    simdutf_really_inline bool errors() const {
  291|   486k|      return this->error.any_bits_set_anywhere();
  292|   486k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|  3.56k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|  3.56k|      size_t pos = 0;
  205|  3.56k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  211|       |      // to give us a good margin.
  212|  3.56k|      size_t leading_byte = 0;
  213|  3.56k|      size_t margin = size;
  214|  7.12k|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (214:13): [True: 3.56k, False: 3.56k]
  |  Branch (214:27): [True: 3.56k, False: 0]
  ------------------
  215|  3.56k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|  3.56k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|  3.56k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|  3.56k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 3.56k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|  3.56k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 3.56k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|  3.56k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 3.56k, False: 0]
  ------------------
  279|  3.56k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|  3.56k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 0, False: 3.56k]
  ------------------
  281|      0|          res.count += pos;
  282|      0|          return res;
  283|  3.56k|        } else {    // In case of success, we want the number of word written
  284|  3.56k|          utf32_output += res.count;
  285|  3.56k|        }
  286|  3.56k|      }
  287|  3.56k|      return result(error_code::SUCCESS, utf32_output - start);
  288|  3.56k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  70.3k|    char32_t* utf32_output) noexcept {
   13|  70.3k|  size_t pos = 0;
   14|  70.3k|  char32_t* start{utf32_output};
   15|  70.3k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  74.3k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 4.03k, False: 70.3k]
  ------------------
   17|  4.03k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  4.03k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 2.59k, False: 1.44k]
  ------------------
   19|  2.59k|      in.store_ascii_as_utf32(utf32_output);
   20|  2.59k|      utf32_output += 64;
   21|  2.59k|      pos += 64;
   22|  2.59k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  1.44k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  1.44k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  1.44k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  1.44k|    size_t max_starting_point = (pos + 64) - 12;
   28|  9.19k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 7.75k, False: 1.44k]
  ------------------
   29|  7.75k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  7.75k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  7.75k|      pos += consumed;
   32|  7.75k|      utf8_end_of_code_point_mask >>= consumed;
   33|  7.75k|      }
   34|  1.44k|    }
   35|  4.03k|  }
   36|  70.3k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  70.3k|  return utf32_output - start;
   38|  70.3k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  1.67M|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  1.67M|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  1.67M|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 820k, False: 855k]
  |  |  ------------------
  ------------------
  154|   820k|        this->error |= this->prev_incomplete;
  155|   855k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|   855k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|   855k|            "We support either two or four chunks per 64-byte block.");
  159|   855k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|   855k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|   855k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|   855k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|   855k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|   855k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|   855k|      }
  172|  1.67M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  1.71M|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  1.71M|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  1.71M|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  1.71M|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  1.71M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  1.71M|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  1.71M|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  1.71M|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  1.71M|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  1.71M|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  1.71M|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  1.71M|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  1.71M|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  1.71M|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  1.71M|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  1.71M|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  1.71M|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  1.71M|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  1.71M|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  1.71M|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  1.71M|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  1.71M|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  1.71M|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  1.71M|    );
   51|  1.71M|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  1.71M|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  1.71M|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  1.71M|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  1.71M|      CARRY,
   59|  1.71M|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  1.71M|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  1.71M|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  1.71M|    );
   80|  1.71M|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  1.71M|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  1.71M|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  1.71M|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  1.71M|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  1.71M|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  1.71M|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  1.71M|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  1.71M|    );
   96|  1.71M|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  1.71M|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  1.71M|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  1.71M|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  1.71M|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  1.71M|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  1.71M|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  1.71M|    return must23_80 ^ sc;
  105|  1.71M|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|   855k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|   855k|    static const uint8_t max_array[32] = {
  115|   855k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|   855k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|   855k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|   855k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|   855k|    };
  120|   855k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|   855k|    return input.gt_bits(max_value);
  122|   855k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   470k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   470k|      this->error |= this->prev_incomplete;
  150|   470k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   470k|    simdutf_really_inline bool errors() const {
  176|   470k|      return this->error.any_bits_set_anywhere();
  177|   470k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   470k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   470k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   470k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   470k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   470k|    checker c{};
   12|   470k|    buf_block_reader<64> reader(input, length);
   13|  1.67M|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 1.20M, False: 470k]
  ------------------
   14|  1.20M|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  1.20M|      c.check_next_input(in);
   16|  1.20M|      reader.advance();
   17|  1.20M|    }
   18|   470k|    uint8_t block[64]{};
   19|   470k|    reader.get_remainder(block);
   20|   470k|    simd::simd8x64<uint8_t> in(block);
   21|   470k|    c.check_next_input(in);
   22|   470k|    reader.advance();
   23|   470k|    c.check_eof();
   24|   470k|    return !c.errors();
   25|   470k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  7.75k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  7.75k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  7.75k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  7.75k|      utf8_end_of_code_point_mask & 0xfff;
   24|  7.75k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 3.01k, False: 4.73k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  3.01k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  3.01k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  3.01k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  3.01k|    return 16; // We consumed 16 bytes.
   30|  3.01k|  }
   31|  4.73k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 77, False: 4.66k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     77|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     77|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     77|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     77|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     77|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     77|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     77|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     77|    return 16;
   42|     77|  }
   43|  4.66k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 203, False: 4.45k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|    203|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|    203|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|    203|    const __m128i ascii =
   49|    203|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|    203|    const __m128i middlebyte =
   51|    203|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|    203|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|    203|    const __m128i highbyte =
   54|    203|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|    203|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|    203|    const __m128i composed =
   57|    203|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|    203|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|    203|    utf32_output += 4;
   60|    203|    return 12;
   61|    203|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  4.45k|  const uint8_t idx =
   65|  4.45k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  4.45k|  const uint8_t consumed =
   67|  4.45k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  4.45k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 1.84k, False: 2.61k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  1.84k|    const __m128i sh =
   75|  1.84k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  1.84k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  1.84k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  1.84k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  1.84k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  1.84k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  1.84k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.61k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.64k, False: 967]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.64k|    const __m128i sh =
   86|  1.64k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.64k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.64k|    const __m128i ascii =
   89|  1.64k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.64k|    const __m128i middlebyte =
   91|  1.64k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.64k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.64k|    const __m128i highbyte =
   94|  1.64k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.64k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.64k|    const __m128i composed =
   97|  1.64k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.64k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.64k|    utf32_output += 4;
  100|  1.64k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 967, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    967|    const __m128i sh =
  103|    967|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    967|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    967|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    967|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    967|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    967|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    967|    const __m128i correct =
  111|    967|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    967|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    967|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    967|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    967|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    967|    const __m128i composed =
  117|    967|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    967|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    967|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    967|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    967|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  4.45k|  return consumed;
  125|  4.66k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_121avx2_validate_utf32leEPKDim:
    5|   350k|const char32_t* avx2_validate_utf32le(const char32_t* input, size_t size) {
    6|   350k|    const char32_t* end = input + size;
    7|       |
    8|   350k|    const __m256i standardmax = _mm256_set1_epi32(0x10ffff);
    9|   350k|    const __m256i offset = _mm256_set1_epi32(0xffff2000);
   10|   350k|    const __m256i standardoffsetmax = _mm256_set1_epi32(0xfffff7ff);
   11|   350k|    __m256i currentmax = _mm256_setzero_si256();
   12|   350k|    __m256i currentoffsetmax = _mm256_setzero_si256();
   13|       |
   14|  14.8M|    while (input + 8 < end) {
  ------------------
  |  Branch (14:12): [True: 14.4M, False: 350k]
  ------------------
   15|  14.4M|        const __m256i in = _mm256_loadu_si256((__m256i *)input);
   16|  14.4M|        currentmax = _mm256_max_epu32(in,currentmax);
   17|  14.4M|        currentoffsetmax = _mm256_max_epu32(_mm256_add_epi32(in, offset), currentoffsetmax);
   18|  14.4M|        input += 8;
   19|  14.4M|    }
   20|   350k|    __m256i is_zero = _mm256_xor_si256(_mm256_max_epu32(currentmax, standardmax), standardmax);
   21|   350k|    if(_mm256_testz_si256(is_zero, is_zero) == 0) {
  ------------------
  |  Branch (21:8): [True: 8.84k, False: 341k]
  ------------------
   22|  8.84k|        return nullptr;
   23|  8.84k|    }
   24|       |
   25|   341k|    is_zero = _mm256_xor_si256(_mm256_max_epu32(currentoffsetmax, standardoffsetmax), standardoffsetmax);
   26|   341k|    if(_mm256_testz_si256(is_zero, is_zero) == 0) {
  ------------------
  |  Branch (26:8): [True: 22, False: 341k]
  ------------------
   27|     22|        return nullptr;
   28|     22|    }
   29|       |
   30|   341k|    return input;
   31|   341k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  105|   470k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  106|   470k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  107|   470k|}
_ZNK7simdutf7haswell14implementation14validate_utf32EPKDim:
  159|   350k|simdutf_warn_unused bool implementation::validate_utf32(const char32_t *buf, size_t len) const noexcept {
  160|   350k|  const char32_t* tail = avx2_validate_utf32le(buf, len);
  161|   350k|  if (tail) {
  ------------------
  |  Branch (161:7): [True: 341k, False: 8.86k]
  ------------------
  162|   341k|    return scalar::utf32::validate(tail, len - (tail - buf));
  163|   341k|  } else {
  164|  8.86k|    return false;
  165|  8.86k|  }
  166|   350k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  275|   482k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  276|   482k|  utf8_to_utf32::validating_transcoder converter;
  277|   482k|  return converter.convert(buf, len, utf32_output);
  278|   482k|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  280|  3.56k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  281|  3.56k|  utf8_to_utf32::validating_transcoder converter;
  282|  3.56k|  return converter.convert_with_errors(buf, len, utf32_output);
  283|  3.56k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  286|  70.3k|    char32_t* utf32_output) const noexcept {
  287|  70.3k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  288|  70.3k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  777|  21.7k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  778|  21.7k|  return utf8::count_code_points(input, length);
  779|  21.7k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  1.67M|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  1.67M|  return input.reduce_or().is_ascii();
   25|  1.67M|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  1.71M|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  1.71M|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0xe0u-0x80); // Only 111_____ will be > 0x80
   37|  1.71M|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0xf0u-0x80); // Only 1111____ will be > 0x80
   38|  1.71M|  return simd8<bool>(is_third_byte | is_fourth_byte);
   39|  1.71M|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  861|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  862|       |  // They are prelisted in priority order, so we just go down the list
  863|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  864|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (864:35): [True: 2, False: 0]
  ------------------
  865|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  866|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (866:9): [True: 1, False: 1]
  ------------------
  867|      2|  }
  868|      0|  return &unsupported_singleton; // this should never happen?
  869|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  871|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  872|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  873|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  874|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  875|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  876|       |
  877|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (877:7): [True: 0, False: 1]
  ------------------
  878|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  879|      0|    if (force_implementation) {
  ------------------
  |  Branch (879:9): [True: 0, False: 0]
  ------------------
  880|      0|      return get_active_implementation() = force_implementation;
  881|      0|    } else {
  882|       |      // Note: abort() and stderr usage within the library is forbidden.
  883|      0|      return get_active_implementation() = &unsupported_singleton;
  884|      0|    }
  885|      0|  }
  886|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  887|      1|}
_ZN7simdutf29get_available_implementationsEv:
  896|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  897|      1|  static const internal::available_implementation_list available_implementations{};
  898|      1|  return available_implementations;
  899|      1|}
_ZN7simdutf25get_active_implementationEv:
  904|  1.39M|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  905|       |#if SIMDUTF_SINGLE_IMPLEMENTATION
  906|       |    // skip runtime detection
  907|       |    static internal::atomic_ptr<const implementation> active_implementation{internal::get_single_implementation()};
  908|       |    return active_implementation;
  909|       |#else
  910|  1.39M|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  911|  1.39M|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  912|  1.39M|    return active_implementation;
  913|  1.39M|#endif
  914|  1.39M|}
_ZN7simdutf26get_default_implementationEv:
  922|  1.39M|internal::atomic_ptr<const implementation>& get_default_implementation() {
  923|  1.39M|  return get_active_implementation();
  924|  1.39M|}
_ZN7simdutf13validate_utf8EPKcm:
  928|   470k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  929|   470k|  return get_default_implementation()->validate_utf8(buf, len);
  930|   470k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  987|   482k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  988|   482k|  return get_default_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  989|   482k|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  990|  3.56k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  991|  3.56k|  return get_default_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  992|  3.56k|}
_ZN7simdutf14validate_utf32EPKDim:
 1019|   350k|simdutf_warn_unused bool validate_utf32(const char32_t * buf, size_t len) noexcept {
 1020|   350k|  return get_default_implementation()->validate_utf32(buf, len);
 1021|   350k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
 1038|  70.3k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
 1039|  70.3k|  return get_default_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
 1040|  70.3k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1285|  21.7k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1286|  21.7k|  return get_default_implementation()->utf32_length_from_utf8(input, length);
 1287|  21.7k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  847|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  488|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  489|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  490|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  491|      1|    get_icelake_singleton(),
  492|      1|#endif
  493|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  494|      1|    get_haswell_singleton(),
  495|      1|#endif
  496|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  497|      1|    get_westmere_singleton(),
  498|      1|#endif
  499|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  500|       |    get_arm64_singleton(),
  501|       |#endif
  502|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  503|       |    get_ppc64_singleton(),
  504|       |#endif
  505|       |#if SIMDUTF_IMPLEMENTATION_RVV
  506|       |    get_rvv_singleton(),
  507|       |#endif
  508|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  509|      1|    get_fallback_singleton(),
  510|      1|#endif
  511|      1|  }; // available_implementation_pointers
  512|      1|  return available_implementation_pointers;
  513|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   83|      1|static const icelake::implementation* get_icelake_singleton() {
   84|      1|  static const icelake::implementation icelake_singleton{};
   85|      1|  return &icelake_singleton;
   86|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   89|      1|static const haswell::implementation* get_haswell_singleton() {
   90|      1|  static const haswell::implementation haswell_singleton{};
   91|      1|  return &haswell_singleton;
   92|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   95|      1|static const westmere::implementation* get_westmere_singleton() {
   96|      1|  static const westmere::implementation westmere_singleton{};
   97|      1|  return &westmere_singleton;
   98|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  119|      1|static const fallback::implementation* get_fallback_singleton() {
  120|      1|  static const fallback::implementation fallback_singleton{};
  121|      1|  return &fallback_singleton;
  122|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  482|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  162|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  163|      1|    return set_best()->validate_utf8(buf, len);
  164|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_15utf328validateEPKDim:
    9|   341k|inline simdutf_warn_unused bool validate(const char32_t *buf, size_t len) noexcept {
   10|   341k|  const uint32_t *data = reinterpret_cast<const uint32_t *>(buf);
   11|   341k|  uint64_t pos = 0;
   12|  1.55M|  for(;pos < len; pos++) {
  ------------------
  |  Branch (12:8): [True: 1.21M, False: 333k]
  ------------------
   13|  1.21M|    uint32_t word = data[pos];
   14|  1.21M|    if(word > 0x10FFFF || (word >= 0xD800 && word <= 0xDFFF)) {
  ------------------
  |  Branch (14:8): [True: 7.34k, False: 1.21M]
  |  Branch (14:28): [True: 14.3k, False: 1.19M]
  |  Branch (14:46): [True: 34, False: 14.3k]
  ------------------
   15|  7.38k|        return false;
   16|  7.38k|    }
   17|  1.21M|  }
   18|   333k|  return true;
   19|   341k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  21.7k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  21.7k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  21.7k|    size_t counter{0};
  171|  53.5k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 31.8k, False: 21.7k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  31.8k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 31.3k, False: 555]
  ------------------
  174|  31.8k|    }
  175|  21.7k|    return counter;
  176|  21.7k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   482k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   482k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   482k|  size_t pos = 0;
   12|   482k|  char32_t* start{utf32_output};
   13|   877k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 482k, False: 394k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   482k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 482k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   482k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   482k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 249k, False: 233k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   249k|      *utf32_output++ = char32_t(leading_byte);
   34|   249k|      pos++;
   35|   249k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 89.1k, False: 144k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  89.1k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 89.1k]
  ------------------
   38|  89.1k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 15.9k, False: 73.1k]
  ------------------
   39|       |      // range check
   40|  73.1k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  73.1k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 590, False: 72.6k]
  |  Branch (41:32): [True: 0, False: 72.6k]
  ------------------
   42|  72.6k|      *utf32_output++ = char32_t(code_point);
   43|  72.6k|      pos += 2;
   44|   144k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 113k, False: 30.4k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|   113k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 113k]
  ------------------
   47|       |
   48|   113k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 50.7k, False: 63.0k]
  ------------------
   49|  63.0k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 1.30k, False: 61.7k]
  ------------------
   50|       |      // range check
   51|  61.7k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  61.7k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  61.7k|                   (data[pos + 2] & 0b00111111);
   54|  61.7k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 150, False: 61.6k]
  |  Branch (54:33): [True: 0, False: 61.6k]
  ------------------
   55|  61.7k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 2.16k, False: 59.4k]
  |  Branch (55:35): [True: 70, False: 2.09k]
  ------------------
   56|    220|        return 0;
   57|    220|      }
   58|  61.5k|      *utf32_output++ = char32_t(code_point);
   59|  61.5k|      pos += 3;
   60|  61.5k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 30.4k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  30.4k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 30.4k]
  ------------------
   63|  30.4k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 14.9k, False: 15.4k]
  ------------------
   64|  15.4k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 1.53k, False: 13.8k]
  ------------------
   65|  13.8k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 610, False: 13.2k]
  ------------------
   66|       |
   67|       |      // range check
   68|  13.2k|      uint32_t code_point =
   69|  13.2k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  13.2k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  13.2k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 80, False: 13.2k]
  |  Branch (71:35): [True: 2.13k, False: 11.0k]
  ------------------
   72|  11.0k|      *utf32_output++ = char32_t(code_point);
   73|  11.0k|      pos += 4;
   74|  11.0k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   482k|  }
   78|   394k|  return utf32_output - start;
   79|   482k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|  3.56k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|  3.56k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|  3.56k|  size_t pos = 0;
   84|  3.56k|  char32_t* start{utf32_output};
   85|  7.12k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 3.56k, False: 3.56k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|  3.56k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 0, False: 3.56k]
  ------------------
   88|      0|      uint64_t v1;
   89|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|      0|      uint64_t v2;
   91|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|      0|      uint64_t v{v1 | v2};
   93|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 0, False: 0]
  ------------------
   94|      0|        size_t final_pos = pos + 16;
   95|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 0, False: 0]
  ------------------
   96|      0|          *utf32_output++ = char32_t(buf[pos]);
   97|      0|          pos++;
   98|      0|        }
   99|      0|        continue;
  100|      0|      }
  101|      0|    }
  102|  3.56k|    uint8_t leading_byte = data[pos]; // leading byte
  103|  3.56k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 3.56k, False: 0]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|  3.56k|      *utf32_output++ = char32_t(leading_byte);
  106|  3.56k|      pos++;
  107|  3.56k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 0, False: 0]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|      0|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 0, False: 0]
  ------------------
  110|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 0, False: 0]
  ------------------
  111|       |      // range check
  112|      0|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|      0|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  |  Branch (113:32): [True: 0, False: 0]
  ------------------
  114|      0|      *utf32_output++ = char32_t(code_point);
  115|      0|      pos += 2;
  116|      0|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 0, False: 0]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|      0|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 0, False: 0]
  ------------------
  119|       |
  120|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 0, False: 0]
  ------------------
  122|       |      // range check
  123|      0|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|      0|                   (data[pos + 1] & 0b00111111) << 6 |
  125|      0|                   (data[pos + 2] & 0b00111111);
  126|      0|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 0, False: 0]
  |  Branch (126:33): [True: 0, False: 0]
  ------------------
  127|      0|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 0, False: 0]
  |  Branch (127:34): [True: 0, False: 0]
  ------------------
  128|      0|      *utf32_output++ = char32_t(code_point);
  129|      0|      pos += 3;
  130|      0|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 0, False: 0]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|      0|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 0, False: 0]
  ------------------
  133|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 0, False: 0]
  ------------------
  134|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|       |
  137|       |      // range check
  138|      0|      uint32_t code_point =
  139|      0|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|      0|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|      0|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 0, False: 0]
  ------------------
  142|      0|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  ------------------
  143|      0|      *utf32_output++ = char32_t(code_point);
  144|      0|      pos += 4;
  145|      0|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|      0|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 0, False: 0]
  ------------------
  148|      0|      else { return result(error_code::HEADER_BITS, pos); }
  149|      0|    }
  150|  3.56k|  }
  151|  3.56k|  return result(error_code::SUCCESS, utf32_output - start);
  152|  3.56k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|  3.56k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|  3.56k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|  3.56k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|  3.56k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 3.56k, False: 0]
  ------------------
  172|  3.56k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|  3.56k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 3.56k, False: 0]
  ------------------
  175|  3.56k|    unsigned char byte = buf[0-i];
  176|  3.56k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|  3.56k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 3.56k, False: 0]
  ------------------
  178|  3.56k|      buf -= i;
  179|  3.56k|      extra_len = i;
  180|  3.56k|      break;
  181|  3.56k|    }
  182|  3.56k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|  3.56k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 0, False: 3.56k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|      0|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|      0|  }
  196|       |
  197|  3.56k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|  3.56k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 0, False: 3.56k]
  ------------------
  199|      0|    res.count -= extra_len;
  200|      0|  }
  201|  3.56k|  return res;
  202|  3.56k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  70.3k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  70.3k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  70.3k|  size_t pos = 0;
   12|  70.3k|  char32_t* start{utf32_output};
   13|   144k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 74.0k, False: 70.3k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  74.0k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 2.72k, False: 71.3k]
  ------------------
   16|  2.72k|      uint64_t v;
   17|  2.72k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  2.72k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 1.65k, False: 1.07k]
  ------------------
   19|  1.65k|        size_t final_pos = pos + 8;
   20|  14.9k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 13.2k, False: 1.65k]
  ------------------
   21|  13.2k|          *utf32_output++ = char32_t(buf[pos]);
   22|  13.2k|          pos++;
   23|  13.2k|        }
   24|  1.65k|        continue;
   25|  1.65k|      }
   26|  2.72k|    }
   27|  72.4k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  72.4k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 1.90k, False: 70.5k]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  1.90k|      *utf32_output++ = char32_t(leading_byte);
   31|  1.90k|      pos++;
   32|  70.5k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 36.7k, False: 33.7k]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|  36.7k|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 36.7k]
  ------------------
   35|  36.7k|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|  36.7k|      pos += 2;
   37|  36.7k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 27.1k, False: 6.62k]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|  27.1k|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 27.1k]
  ------------------
   40|  27.1k|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|  27.1k|      pos += 3;
   42|  27.1k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 6.62k, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|  6.62k|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 6.62k]
  ------------------
   45|  6.62k|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|  6.62k|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|  6.62k|      *utf32_output++ = char32_t(code_word);
   48|  6.62k|      pos += 4;
   49|  6.62k|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  72.4k|  }
   54|  70.3k|  return utf32_output - start;
   55|  70.3k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  3.95k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  3.95k|  return _popcnt64(input_num);
   16|  3.95k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  1.41M|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  1.41M|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  1.41M|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  1.41M|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  1.67M|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  4.20M|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  4.20M|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  4.20M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  58.1M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  58.1M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  58.1M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  58.1M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  1.67M|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  1.67M|      return this->chunks[0] | this->chunks[1];
  297|  1.67M|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  6.39M|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  72.8M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  1.67M|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  3.00M|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  1.71M|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  1.71M|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  1.71M|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  3.42M|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  5.13M|        L replace12, L replace13, L replace14, L replace15) const {
  139|  5.13M|      return lookup_16(simd8<L>::repeat_16(
  140|  5.13M|        replace0,  replace1,  replace2,  replace3,
  141|  5.13M|        replace4,  replace5,  replace6,  replace7,
  142|  5.13M|        replace8,  replace9,  replace10, replace11,
  143|  5.13M|        replace12, replace13, replace14, replace15
  144|  5.13M|      ));
  145|  5.13M|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  5.13M|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  5.13M|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  5.13M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  6.84M|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  5.13M|    ) {
  218|  5.13M|      return simd8<uint8_t>(
  219|  5.13M|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  5.13M|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  5.13M|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  5.13M|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  5.13M|      );
  224|  5.13M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  5.13M|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  10.2M|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  10.7M|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  10.7M|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  1.71M|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  1.71M|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  1.71M|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  1.71M|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  1.71M|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  1.71M|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  4.27M|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  1.72M|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  1.72M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  1.72M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  1.71M|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  1.71M|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|   855k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|   855k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   957k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   957k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  7.98k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  15.9k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  15.9k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  15.9k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  25.4k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  25.4k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  25.4k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  25.4k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  4.03k|    simdutf_really_inline bool is_ascii() const {
  300|  4.03k|      return this->reduce_or().is_ascii();
  301|  4.03k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  4.03k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  4.03k|      return this->chunks[0] | this->chunks[1];
  297|  4.03k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  4.03k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  54.4k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  4.03k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  1.44k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  1.44k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  1.44k|      return  simd8x64<bool>(
  365|  1.44k|        this->chunks[0] < mask,
  366|  1.44k|        this->chunks[1] < mask
  367|  1.44k|      ).to_bitmask();
  368|  1.44k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  5.39k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  2.89k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  5.39k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  5.39k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  5.39k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  5.39k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  5.39k|      return r_lo | (r_hi << 32);
  287|  5.39k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  10.7k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  10.7k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  2.59k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  2.59k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  2.59k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  2.59k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  5.18k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  5.18k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  5.18k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  5.18k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  5.18k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  5.18k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  3.95k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  3.95k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  3.95k|      return  simd8x64<bool>(
  373|  3.95k|        this->chunks[0] > mask,
  374|  3.95k|        this->chunks[1] > mask
  375|  3.95k|      ).to_bitmask();
  376|  3.95k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  7.90k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|   138k|{
  619|   138k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   138k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   138k|    static_cast<    \
  |  |  247|   138k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   138k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
  386|   167k|{
  387|   167k|    static_assert(
  388|   167k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   167k|        "Scan argument types must be default constructible");
  390|   167k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   167k|                  "Scan argument types must be Destructible");
  392|   167k|    static_assert(
  393|   167k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   167k|        "Scan argument types must not be references");
  395|   167k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|   138k|    {
  564|   138k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   138k|    {
  574|   138k|        return {
  575|   138k|            detail::make_arg<base::is_packed, Context,
  576|   138k|                             detail::mapped_type_constant<
  577|   138k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   138k|                args)...};
  579|   138k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEvEENS1_9arg_valueERT2_:
  414|   138k|{
  415|   138k|    return make_value<Context>(value);
  416|   138k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
  371|   167k|{
  372|   167k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   167k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   167k|                                  needs_context_tag>) {
  376|   167k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   167k|    }
  378|   167k|    else {
  379|   167k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   167k|            value, context_tag<Context>{}));
  381|   167k|    }
  382|   167k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
  216|   167k|    {                                                                        \
  217|   167k|        return val;                                                          \
  218|   167k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
  340|   167k|{
  341|   167k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   167k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   167k|    constexpr bool scannable_char =
  345|   167k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   167k|    static_assert(scannable_char,
  347|   167k|                  "Cannot scan an argument of an unsupported character "
  348|   167k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   167k|    constexpr bool scannable_const =
  351|   167k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   167k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   167k|    constexpr bool scannable_disabled =
  355|   167k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   167k|    static_assert(scannable_disabled,
  357|   167k|                  "Cannot scan an argument that has been disabled by "
  358|   167k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   167k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   167k|    static_assert(
  362|   167k|        scannable,
  363|   167k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   167k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   167k|    return arg_value{arg};
  367|   167k|}
_ZN3scn2v26detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
  159|   167k|    {
  160|   167k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   138k|    {
  647|   138k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|   266k|    {
  694|   266k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE4argsEv:
  553|   121k|    {
  554|   121k|        return m_args;
  555|   121k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
  399|  28.9k|{
  400|  28.9k|    check_scan_arg_types<T>();
  401|       |
  402|  28.9k|    basic_scan_arg<Context> arg;
  403|  28.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  28.9k|    arg.m_value = make_value<Context>(value);
  405|  28.9k|    return arg;
  406|  28.9k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|   324k|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|   703k|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|   128k|{
  619|   128k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   128k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   128k|    static_cast<    \
  |  |  247|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   128k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
  386|   156k|{
  387|   156k|    static_assert(
  388|   156k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   156k|        "Scan argument types must be default constructible");
  390|   156k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   156k|                  "Scan argument types must be Destructible");
  392|   156k|    static_assert(
  393|   156k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   156k|        "Scan argument types must not be references");
  395|   156k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEC2EONS4_5tupleIJS8_EEE:
  563|   128k|    {
  564|   128k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEE15make_data_arrayIJS8_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   128k|    {
  574|   128k|        return {
  575|   128k|            detail::make_arg<base::is_packed, Context,
  576|   128k|                             detail::mapped_type_constant<
  577|   128k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   128k|                args)...};
  579|   128k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEvEENS1_9arg_valueERT2_:
  414|   128k|{
  415|   128k|    return make_value<Context>(value);
  416|   128k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
  371|   156k|{
  372|   156k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   156k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   156k|                                  needs_context_tag>) {
  376|   156k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   156k|    }
  378|   156k|    else {
  379|   156k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   156k|            value, context_tag<Context>{}));
  381|   156k|    }
  382|   156k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  216|   156k|    {                                                                        \
  217|   156k|        return val;                                                          \
  218|   156k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
  340|   156k|{
  341|   156k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   156k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   156k|    constexpr bool scannable_char =
  345|   156k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   156k|    static_assert(scannable_char,
  347|   156k|                  "Cannot scan an argument of an unsupported character "
  348|   156k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   156k|    constexpr bool scannable_const =
  351|   156k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   156k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   156k|    constexpr bool scannable_disabled =
  355|   156k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   156k|    static_assert(scannable_disabled,
  357|   156k|                  "Cannot scan an argument that has been disabled by "
  358|   156k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   156k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   156k|    static_assert(
  362|   156k|        scannable,
  363|   156k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   156k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   156k|    return arg_value{arg};
  367|   156k|}
_ZN3scn2v26detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
  159|   156k|    {
  160|   156k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   128k|    {
  647|   128k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEE4argsEv:
  553|   119k|    {
  554|   119k|        return m_args;
  555|   119k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
  399|  28.2k|{
  400|  28.2k|    check_scan_arg_types<T>();
  401|       |
  402|  28.2k|    basic_scan_arg<Context> arg;
  403|  28.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  28.2k|    arg.m_value = make_value<Context>(value);
  405|  28.2k|    return arg;
  406|  28.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|   195k|{
  619|   195k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   195k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   195k|    static_cast<    \
  |  |  247|   195k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   195k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
  386|   237k|{
  387|   237k|    static_assert(
  388|   237k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   237k|        "Scan argument types must be default constructible");
  390|   237k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   237k|                  "Scan argument types must be Destructible");
  392|   237k|    static_assert(
  393|   237k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   237k|        "Scan argument types must not be references");
  395|   237k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|   195k|    {
  564|   195k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   195k|    {
  574|   195k|        return {
  575|   195k|            detail::make_arg<base::is_packed, Context,
  576|   195k|                             detail::mapped_type_constant<
  577|   195k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   195k|                args)...};
  579|   195k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEvEENS1_9arg_valueERT2_:
  414|   195k|{
  415|   195k|    return make_value<Context>(value);
  416|   195k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
  371|   237k|{
  372|   237k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   237k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   237k|                                  needs_context_tag>) {
  376|   237k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   237k|    }
  378|   237k|    else {
  379|   237k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   237k|            value, context_tag<Context>{}));
  381|   237k|    }
  382|   237k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
  216|   237k|    {                                                                        \
  217|   237k|        return val;                                                          \
  218|   237k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
  340|   237k|{
  341|   237k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   237k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   237k|    constexpr bool scannable_char =
  345|   237k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   237k|    static_assert(scannable_char,
  347|   237k|                  "Cannot scan an argument of an unsupported character "
  348|   237k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   237k|    constexpr bool scannable_const =
  351|   237k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   237k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   237k|    constexpr bool scannable_disabled =
  355|   237k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   237k|    static_assert(scannable_disabled,
  357|   237k|                  "Cannot scan an argument that has been disabled by "
  358|   237k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   237k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   237k|    static_assert(
  362|   237k|        scannable,
  363|   237k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   237k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   237k|    return arg_value{arg};
  367|   237k|}
_ZN3scn2v26detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
  159|   237k|    {
  160|   237k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   195k|    {
  647|   195k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|   312k|    {
  694|   312k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE4argsEv:
  553|   168k|    {
  554|   168k|        return m_args;
  555|   168k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
  399|  41.5k|{
  400|  41.5k|    check_scan_arg_types<T>();
  401|       |
  402|  41.5k|    basic_scan_arg<Context> arg;
  403|  41.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  41.5k|    arg.m_value = make_value<Context>(value);
  405|  41.5k|    return arg;
  406|  41.5k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|   379k|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|   117k|{
  619|   117k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   117k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   117k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
  386|   141k|{
  387|   141k|    static_assert(
  388|   141k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   141k|        "Scan argument types must be default constructible");
  390|   141k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   141k|                  "Scan argument types must be Destructible");
  392|   141k|    static_assert(
  393|   141k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   141k|        "Scan argument types must not be references");
  395|   141k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEC2EONS4_5tupleIJS8_EEE:
  563|   117k|    {
  564|   117k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEE15make_data_arrayIJS8_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   117k|    {
  574|   117k|        return {
  575|   117k|            detail::make_arg<base::is_packed, Context,
  576|   117k|                             detail::mapped_type_constant<
  577|   117k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   117k|                args)...};
  579|   117k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEvEENS1_9arg_valueERT2_:
  414|   117k|{
  415|   117k|    return make_value<Context>(value);
  416|   117k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
  371|   141k|{
  372|   141k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   141k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   141k|                                  needs_context_tag>) {
  376|   141k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   141k|    }
  378|   141k|    else {
  379|   141k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   141k|            value, context_tag<Context>{}));
  381|   141k|    }
  382|   141k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  216|   141k|    {                                                                        \
  217|   141k|        return val;                                                          \
  218|   141k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
  340|   141k|{
  341|   141k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   141k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   141k|    constexpr bool scannable_char =
  345|   141k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   141k|    static_assert(scannable_char,
  347|   141k|                  "Cannot scan an argument of an unsupported character "
  348|   141k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   141k|    constexpr bool scannable_const =
  351|   141k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   141k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   141k|    constexpr bool scannable_disabled =
  355|   141k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   141k|    static_assert(scannable_disabled,
  357|   141k|                  "Cannot scan an argument that has been disabled by "
  358|   141k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   141k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   141k|    static_assert(
  362|   141k|        scannable,
  363|   141k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   141k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   141k|    return arg_value{arg};
  367|   141k|}
_ZN3scn2v26detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
  159|   141k|    {
  160|   141k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   117k|    {
  647|   117k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEE4argsEv:
  553|   103k|    {
  554|   103k|        return m_args;
  555|   103k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
  399|  24.7k|{
  400|  24.7k|    check_scan_arg_types<T>();
  401|       |
  402|  24.7k|    basic_scan_arg<Context> arg;
  403|  24.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  24.7k|    arg.m_value = make_value<Context>(value);
  405|  24.7k|    return arg;
  406|  24.7k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|   266k|    {
  682|   266k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|   266k|        return static_cast<std::size_t>(m_desc &
  687|   266k|                                        ((1 << detail::packed_arg_bits) - 1));
  688|   266k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|   533k|    {
  702|   533k|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|   533k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|   266k|    {
  655|   266k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|   266k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|   266k|        const auto t = type(id);
  667|   266k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|   266k|        basic_scan_arg<Context> arg;
  672|   266k|        arg.m_type = t;
  673|   266k|        arg.m_value = m_values[id];
  674|   266k|        return arg;
  675|   266k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|   266k|    {
  707|       |        // First (0th) index is size, types start after that
  708|   266k|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|   266k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|   266k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|   266k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|   468k|    {
  483|   468k|        return m_type != detail::arg_type::none_type;
  484|   468k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|   305k|    {
  488|   305k|        return m_type;
  489|   305k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|   312k|    {
  682|   312k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 312k]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|   312k|        return static_cast<std::size_t>(m_desc &
  687|   312k|                                        ((1 << detail::packed_arg_bits) - 1));
  688|   312k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|   625k|    {
  702|   625k|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|   625k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|   312k|    {
  655|   312k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 312k]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|   312k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 312k]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|   312k|        const auto t = type(id);
  667|   312k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 312k]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|   312k|        basic_scan_arg<Context> arg;
  672|   312k|        arg.m_type = t;
  673|   312k|        arg.m_value = m_values[id];
  674|   312k|        return arg;
  675|   312k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|   312k|    {
  707|       |        // First (0th) index is size, types start after that
  708|   312k|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|   312k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|   312k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|   312k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|   545k|    {
  483|   545k|        return m_type != detail::arg_type::none_type;
  484|   545k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|   360k|    {
  488|   360k|        return m_type;
  489|   360k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|  57.2k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|  66.2k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|  8.54k|    {
  109|  8.54k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|   152k|    {
   60|   152k|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|  15.6k|    {
  124|  15.6k|        return m_current;
  125|  15.6k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|   152k|    {
   43|   152k|        return m_args.get(id);
   44|   152k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|   144k|    {
   53|   144k|        return m_locale;
   54|   144k|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|  5.70k|    {
  132|  5.70k|        return ranges_std::default_sentinel;
  133|  5.70k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|  1.42k|    {
  146|  1.42k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.42k|    static_cast<    \
  |  |  247|  1.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  1.42k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|  5.70k|    {
  140|  5.70k|        return ranges::subrange{begin(), end()};
  141|  5.70k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|  45.3k|    {
  109|  45.3k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|   180k|    {
   60|   180k|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   119k|    {
  124|   119k|        return m_current;
  125|   119k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|   180k|    {
   43|   180k|        return m_args.get(id);
   44|   180k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|   166k|    {
   53|   166k|        return m_locale;
   54|   166k|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|  40.6k|    {
  132|  40.6k|        return ranges_std::default_sentinel;
  133|  40.6k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|  33.7k|    {
  146|  33.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  33.7k|    static_cast<    \
  |  |  247|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  33.7k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|  40.6k|    {
  140|  40.6k|        return ranges::subrange{begin(), end()};
  141|  40.6k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  95.5k|    {
   69|  95.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  95.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  95.5k|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  2.04M|    {
   75|  2.04M|        return m_code == good;
   76|  2.04M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|  33.7k|    {
   86|  33.7k|        return m_code;
   87|  33.7k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|  33.7k|{
  111|  33.7k|    return a.code() == b;
  112|  33.7k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|  33.7k|{
  116|  33.7k|    return !(a == b);
  117|  33.7k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  1.36M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEcvNSA_17basic_string_viewIcSD_EEEv:
  674|   128k|    {
  675|   128k|        return m_str;
  676|   128k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|   266k|{
  385|   266k|    return s;
  386|   266k|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|   266k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   128k|    {
  671|   128k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEcvSE_Ev:
  674|   128k|    {
  675|   128k|        return m_str;
  676|   128k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   128k|    {
  671|   128k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSI_EEEv:
  674|  9.97k|    {
  675|  9.97k|        return m_str;
  676|  9.97k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.97k|    {
  671|  9.97k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEcvNSA_17basic_string_viewIwSD_EEEv:
  674|   117k|    {
  675|   117k|        return m_str;
  676|   117k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|   312k|{
  390|   312k|    return s;
  391|   312k|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|   312k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   117k|    {
  671|   117k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEcvSE_Ev:
  674|   117k|    {
  675|   117k|        return m_str;
  676|   117k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   117k|    {
  671|   117k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSI_EEEv:
  674|  78.8k|    {
  675|  78.8k|        return m_str;
  676|  78.8k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  78.8k|    {
  671|  78.8k|    }

_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|   333k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter8on_widthEi:
  254|  57.2k|    {
  255|  57.2k|        m_specs.width = width;
  256|  57.2k|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|   310k|    {
  260|   310k|        m_specs.type = type;
  261|   310k|    }
_ZN3scn2v26detail12specs_setter16on_charset_rangeEDiDi:
  276|  35.4k|    {
  277|  35.4k|        const auto begin_value = static_cast<unsigned>(begin);
  278|  35.4k|        const auto end_value = static_cast<unsigned>(end);
  279|  35.4k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  242|  35.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  35.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  280|       |
  281|  35.4k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  152|  35.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 35.4k, False: 0]
  |  |  ------------------
  ------------------
  282|       |            // No need to bit-twiddle with a mask, because with the
  283|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
  284|  35.4k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  172|  35.4k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
  285|   956k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (285:40): [True: 921k, False: 35.4k]
  ------------------
  286|   921k|                m_specs.charset_literals[v / 8] |=
  287|   921k|                    static_cast<unsigned char>(1ul << (v % 8));
  288|   921k|            }
  289|  35.4k|        }
  290|      0|        else {
  291|      0|            m_specs.charset_has_nonascii = true;
  292|      0|        }
  293|  35.4k|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|  22.4k|    {
  322|  22.4k|        SCN_UNLIKELY_ATTR
  323|  22.4k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|  22.4k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|   386k|    {
  333|   386k|        return static_cast<bool>(m_error);
  334|   386k|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  11.2k|{
  987|  11.2k|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 11.2k]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 0, False: 11.2k]
  ------------------
  992|      0|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 11.2k]
  ------------------
  993|      0|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 11.2k]
  ------------------
  994|      0|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 11.2k]
  ------------------
  995|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 11.2k]
  ------------------
  996|      0|            return arg_type_category::integer;
  997|       |
  998|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 0, False: 11.2k]
  ------------------
  999|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 11.2k]
  ------------------
 1000|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 0, False: 11.2k]
  ------------------
 1001|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 11.2k]
  ------------------
 1002|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 0, False: 11.2k]
  ------------------
 1003|      0|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 11.2k]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 11.2k]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 11.2k]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 11.2k]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 11.2k]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 11.2k]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 11.2k]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 11.2k]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|  1.42k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 1.42k, False: 9.82k]
  ------------------
 1020|  4.27k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 2.84k, False: 8.39k]
  ------------------
 1021|  6.59k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 2.32k, False: 8.92k]
  ------------------
 1022|  11.2k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 4.64k, False: 6.59k]
  ------------------
 1023|  11.2k|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 11.2k]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 11.2k]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  11.2k|            SCN_CLANG_POP
 1034|  11.2k|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  11.2k|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   144k|{
  968|   144k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   144k|    handler.check_args_exhausted();
  970|   144k|    return handler.get_error();
  971|   144k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   144k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   144k|    auto begin = format.data();
  937|   144k|    auto it = begin;
  938|   144k|    const auto end = format.data() + format.size();
  939|       |
  940|   273k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 144k, False: 129k]
  ------------------
  941|   144k|        const auto ch = *it++;
  942|   144k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 144k, False: 0]
  ------------------
  943|   144k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   144k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   144k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 14.2k, False: 129k]
  ------------------
  947|  14.2k|                return;
  948|  14.2k|            }
  949|   144k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   144k|    }
  960|       |
  961|   129k|    handler.on_literal_text(begin, end);
  962|   129k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|   144k|{
  866|   144k|    struct id_adapter {
  867|   144k|        constexpr void operator()()
  868|   144k|        {
  869|   144k|            arg_id = handler.on_arg_id();
  870|   144k|        }
  871|   144k|        constexpr void operator()(std::size_t id)
  872|   144k|        {
  873|   144k|            arg_id = handler.on_arg_id(id);
  874|   144k|        }
  875|       |
  876|   144k|        constexpr void on_error(const char* msg)
  877|   144k|        {
  878|   144k|            SCN_UNLIKELY_ATTR
  879|   144k|            handler.on_error(msg);
  880|   144k|        }
  881|       |
  882|   144k|        Handler& handler;
  883|   144k|        std::size_t arg_id;
  884|   144k|    };
  885|       |
  886|   144k|    ++begin;
  887|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   144k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 144k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   144k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 144k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   144k|    else {
  899|   144k|        auto adapter = id_adapter{handler, 0};
  900|   144k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   144k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   144k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 144k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   144k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 144k, False: 0]
  ------------------
  911|   144k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   144k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   144k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.69k, False: 138k]
  |  |  |  Branch (153:45): [True: 0, False: 144k]
  |  |  |  Branch (153:45): [True: 5.69k, False: 138k]
  |  |  ------------------
  ------------------
  917|  5.69k|                handler.on_error("Unknown format specifier");
  918|  5.69k|                return begin;
  919|  5.69k|            }
  920|   144k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   144k|    }
  927|   138k|    return begin + 1;
  928|   144k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   144k|{
  400|   144k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   144k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 144k, False: 0]
  |  Branch (401:26): [True: 0, False: 144k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   144k|    handler();
  406|   144k|    return begin;
  407|   144k|}
_ZN3scn2v26detail16parse_simple_intIcEEiRPKT_S5_:
  348|  26.6k|{
  349|  26.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  350|  26.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  242|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  351|       |
  352|      0|    unsigned long long value = 0;
  353|  53.2k|    do {
  354|  53.2k|        value *= 10;
  355|  53.2k|        value += static_cast<unsigned long long>(*begin - '0');
  356|  53.2k|        if (value >
  ------------------
  |  Branch (356:13): [True: 0, False: 53.2k]
  ------------------
  357|  53.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
  358|      0|            return -1;
  359|      0|        }
  360|  53.2k|        ++begin;
  361|  53.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (361:14): [True: 53.2k, False: 0]
  |  Branch (361:30): [True: 53.2k, False: 0]
  |  Branch (361:47): [True: 26.6k, False: 26.6k]
  ------------------
  362|  26.6k|    return static_cast<int>(value);
  363|  26.6k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   144k|        {
  869|   144k|            arg_id = handler.on_arg_id();
  870|   144k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|   144k|    {
 1046|   144k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   144k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|   144k|{
  795|   144k|    auto do_presentation = [&]() -> const CharT* {
  796|   144k|        if (*begin == CharT{'['}) {
  797|   144k|            auto set = parse_presentation_set(begin, end, handler);
  798|   144k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   144k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   144k|                return begin;
  803|   144k|            }
  804|   144k|            handler.on_character_set_string(set);
  805|   144k|            return begin;
  806|   144k|        }
  807|   144k|        if (*begin == CharT{'/'}) {
  808|   144k|            return parse_presentation_regex(begin, end, handler);
  809|   144k|        }
  810|   144k|        presentation_type type = parse_presentation_type(*begin++);
  811|   144k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   144k|            handler.on_error("Invalid type specifier in format string");
  813|   144k|            return begin;
  814|   144k|        }
  815|   144k|        handler.on_type(type);
  816|   144k|        return begin;
  817|   144k|    };
  818|       |
  819|   144k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 144k, False: 0]
  |  Branch (819:28): [True: 115k, False: 28.1k]
  ------------------
  820|   144k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 115k, False: 0]
  |  Branch (820:36): [True: 112k, False: 2.84k]
  ------------------
  821|   112k|        return do_presentation();
  822|   112k|    }
  823|       |
  824|  31.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  31.0k|    begin = parse_align(begin, end, handler);
  830|  31.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  31.0k|    begin = parse_width(begin, end, handler);
  836|  31.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  31.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 2.84k, False: 28.1k]
  ------------------
  842|  2.84k|        handler.on_localized();
  843|  2.84k|        ++begin;
  844|  2.84k|    }
  845|  31.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  31.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 31.0k, False: 0]
  |  Branch (850:25): [True: 28.1k, False: 2.84k]
  ------------------
  851|  28.1k|        do_presentation();
  852|  28.1k|    }
  853|  31.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  31.0k|    return begin;
  859|  31.0k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|   118k|{
  464|   118k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 114k, False: 4.27k]
  |  Branch (464:33): [True: 114k, False: 0]
  ------------------
  465|   118k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 4.27k, False: 0]
  |  Branch (465:33): [True: 4.27k, False: 0]
  ------------------
  466|   118k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|   141k|    auto do_presentation = [&]() -> const CharT* {
  796|   141k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 4.39k, False: 136k]
  ------------------
  797|  4.39k|            auto set = parse_presentation_set(begin, end, handler);
  798|  4.39k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.39k]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|  4.39k|            handler.on_character_set_string(set);
  805|  4.39k|            return begin;
  806|  4.39k|        }
  807|   136k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 136k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   136k|        presentation_type type = parse_presentation_type(*begin++);
  811|   136k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.84k, False: 133k]
  |  |  ------------------
  ------------------
  812|  2.84k|            handler.on_error("Invalid type specifier in format string");
  813|  2.84k|            return begin;
  814|  2.84k|        }
  815|   133k|        handler.on_type(type);
  816|   133k|        return begin;
  817|   136k|    };
vscan.cpp:_ZN3scn2v26detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
  633|  4.39k|{
  634|  4.39k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  4.39k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  4.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|      0|    auto start = begin;
  638|  4.39k|    ++begin;
  639|       |
  640|  4.39k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.39k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|      0|        return {};
  645|      0|    }
  646|  4.39k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 0, False: 4.39k]
  ------------------
  647|      0|        handler.on_charset_inverted();
  648|      0|        ++begin;
  649|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|      0|            return {};
  654|      0|        }
  655|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 0, False: 0]
  ------------------
  656|      0|            handler.on_charset_single(char32_t{']'});
  657|      0|            ++begin;
  658|      0|        }
  659|      0|    }
  660|  4.39k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 0, False: 4.39k]
  ------------------
  661|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|      0|    }
  663|       |
  664|  13.1k|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 13.1k, False: 0]
  ------------------
  665|  13.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 13.1k]
  |  |  ------------------
  ------------------
  666|      0|            break;
  667|      0|        }
  668|       |
  669|  13.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 4.39k, False: 8.78k]
  ------------------
  670|  4.39k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  4.39k|        }
  672|       |
  673|  8.78k|        parse_presentation_set_literal(begin, end, handler);
  674|  8.78k|    }
  675|       |
  676|      0|    SCN_UNLIKELY_ATTR
  677|      0|    handler.on_error("Invalid [character set] specifier in format string");
  678|      0|    return {};
  679|  4.39k|}
vscan.cpp:_ZN3scn2v26detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
  597|  8.78k|{
  598|  8.78k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  8.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|      0|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|  8.78k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|  8.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.78k]
  |  |  ------------------
  ------------------
  602|      0|        return;
  603|      0|    }
  604|       |
  605|  8.78k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 8.78k, False: 0]
  |  Branch (605:25): [True: 8.78k, False: 0]
  |  Branch (605:49): [True: 8.78k, False: 0]
  ------------------
  606|  8.78k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 8.78k, False: 0]
  ------------------
  607|  8.78k|        ++begin;
  608|       |
  609|  8.78k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  8.78k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  8.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.78k]
  |  |  ------------------
  ------------------
  611|      0|            return;
  612|      0|        }
  613|       |
  614|  8.78k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  8.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.78k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|      0|            return;
  619|      0|        }
  620|       |
  621|  8.78k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  8.78k|        return;
  623|  8.78k|    }
  624|       |
  625|      0|    handler.on_charset_single(cp_first);
  626|      0|}
vscan.cpp:_ZN3scn2v26detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
  573|  17.5k|{
  574|  17.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|      0|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|  17.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 17.5k]
  |  |  |  Branch (153:45): [True: 0, False: 17.5k]
  |  |  |  Branch (153:45): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|  17.5k|    const auto cp = decode_utf_code_point_exhaustive(
  583|  17.5k|        std::basic_string_view<CharT>{begin, len});
  584|  17.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
  585|      0|        handler.on_error("Invalid encoding in format string");
  586|      0|        return invalid_code_point;
  587|      0|    }
  588|       |
  589|  17.5k|    begin += len;
  590|  17.5k|    return cp;
  591|  17.5k|}
_ZN3scn2v26detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  302|  7.24k|    {
  303|  7.24k|        m_specs.charset_string_data = fmt.data();
  304|  7.24k|        m_specs.charset_string_size = fmt.size();
  305|  7.24k|        on_type(presentation_type::string_set);
  306|  7.24k|    }
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|   141k|{
  412|   141k|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 141k]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 141k]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 141k]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 141k]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 141k]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 141k]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 141k]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 141k]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 141k]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 141k]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 141k]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 141k]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 141k]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 141k]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 141k]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 141k]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 141k]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 141k]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|   114k|        case 's':
  ------------------
  |  Branch (442:9): [True: 114k, False: 26.6k]
  ------------------
  443|   114k|            return presentation_type::string;
  444|  22.3k|        case 'c':
  ------------------
  |  Branch (444:9): [True: 22.3k, False: 118k]
  ------------------
  445|  22.3k|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 141k]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 141k]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 141k]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 141k]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|  4.27k|        default:
  ------------------
  |  Branch (456:9): [True: 4.27k, False: 136k]
  ------------------
  457|  4.27k|            return presentation_type::none;
  458|   141k|    }
  459|   141k|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  31.0k|{
  489|  31.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  31.0k|        switch (ch) {
  493|  31.0k|            case L'<':
  494|  31.0k|                return align_type::left;
  495|  31.0k|            case L'>':
  496|  31.0k|                return align_type::right;
  497|  31.0k|            case L'^':
  498|  31.0k|                return align_type::center;
  499|  31.0k|            default:
  500|  31.0k|                return align_type::none;
  501|  31.0k|        }
  502|  31.0k|    };
  503|       |
  504|  31.0k|    auto potential_fill_len = code_point_length(begin, end);
  505|  31.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 31.0k]
  |  |  |  Branch (153:45): [True: 0, False: 31.0k]
  |  |  |  Branch (153:45): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
  506|  31.0k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  31.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  31.0k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  31.0k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  31.0k|    const auto begin_before_fill = begin;
  516|  31.0k|    begin += potential_fill_len;
  517|       |
  518|  31.0k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 31.0k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  31.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  31.0k|    const auto begin_after_fill = begin;
  524|  31.0k|    ++begin;
  525|       |
  526|  31.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 31.0k, False: 0]
  ------------------
  527|  31.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  31.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 4.39k, False: 26.6k]
  ------------------
  532|  4.39k|            return begin_before_fill;
  533|  4.39k|        }
  534|  31.0k|    }
  535|       |
  536|  26.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 26.6k, False: 0]
  ------------------
  537|  26.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 26.6k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  26.6k|        return begin_before_fill;
  542|  26.6k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  26.6k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  38.1k|{
  471|  38.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  38.1k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  38.1k|        return 1;
  474|  38.1k|    }
  475|  38.1k|    else {
  476|  38.1k|        const auto lengths =
  477|  38.1k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  38.1k|            "\3\4";
  479|  38.1k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  38.1k|        return len;
  481|  38.1k|    }
  482|  38.1k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  62.0k|    auto check_align = [](wchar_t ch) {
  492|  62.0k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 62.0k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 62.0k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 62.0k]
  ------------------
  498|      0|                return align_type::center;
  499|  62.0k|            default:
  ------------------
  |  Branch (499:13): [True: 62.0k, False: 0]
  ------------------
  500|  62.0k|                return align_type::none;
  501|  62.0k|        }
  502|  62.0k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  31.0k|{
  554|  31.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  31.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 31.0k, False: 0]
  |  Branch (556:33): [True: 23.7k, False: 7.24k]
  ------------------
  557|  23.7k|        int width = parse_simple_int(begin, end);
  558|  23.7k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|  23.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 23.7k, False: 0]
  |  |  ------------------
  ------------------
  559|  23.7k|            handler.on_width(width);
  560|  23.7k|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|  23.7k|    }
  566|  31.0k|    return begin;
  567|  31.0k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|  2.84k|    {
 1051|  2.84k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  2.84k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 2.84k, False: 0]
  ------------------
 1053|  2.84k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 2.84k, False: 0]
  ------------------
 1054|  2.84k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 2.84k, False: 0]
  ------------------
 1055|  2.84k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 2.84k, False: 0]
  ------------------
 1056|  2.84k|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|  2.84k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|  2.84k|        }
 1061|       |
 1062|      0|        Handler::on_localized();
 1063|      0|    }
_ZN3scn2v26detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1128|   310k|{
 1129|   310k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (1129:9): [True: 0, False: 310k]
  ------------------
 1130|   310k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (1130:9): [True: 246k, False: 63.6k]
  ------------------
 1131|   310k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (1131:9): [True: 17.7k, False: 45.9k]
  ------------------
 1132|   310k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (1132:9): [True: 0, False: 45.9k]
  ------------------
 1133|   310k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (1133:9): [True: 0, False: 45.9k]
  ------------------
 1134|   264k|        return;
 1135|   264k|    }
 1136|  45.9k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (1136:9): [True: 45.9k, False: 0]
  ------------------
 1137|  45.9k|        if (SCN_UNLIKELY(specs.width == 0)) {
  ------------------
  |  |  153|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.9k]
  |  |  ------------------
  ------------------
 1138|       |            // clang-format off
 1139|      0|            return handler.on_error("'c' type specifier for strings requires the field width to be specified");
 1140|       |            // clang-format on
 1141|      0|        }
 1142|  45.9k|        return;
 1143|  45.9k|    }
 1144|      0|    SCN_UNLIKELY_ATTR
 1145|      0|    handler.on_error("Invalid type specifier for string");
 1146|      0|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  8.54k|{
  968|  8.54k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  8.54k|    handler.check_args_exhausted();
  970|  8.54k|    return handler.get_error();
  971|  8.54k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  8.54k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  8.54k|    auto begin = format.data();
  937|  8.54k|    auto it = begin;
  938|  8.54k|    const auto end = format.data() + format.size();
  939|       |
  940|  9.97k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 8.54k, False: 1.42k]
  ------------------
  941|  8.54k|        const auto ch = *it++;
  942|  8.54k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 8.54k, False: 0]
  ------------------
  943|  8.54k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  8.54k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  8.54k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 7.12k, False: 1.42k]
  ------------------
  947|  7.12k|                return;
  948|  7.12k|            }
  949|  8.54k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  8.54k|    }
  960|       |
  961|  1.42k|    handler.on_literal_text(begin, end);
  962|  1.42k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|  8.54k|{
  866|  8.54k|    struct id_adapter {
  867|  8.54k|        constexpr void operator()()
  868|  8.54k|        {
  869|  8.54k|            arg_id = handler.on_arg_id();
  870|  8.54k|        }
  871|  8.54k|        constexpr void operator()(std::size_t id)
  872|  8.54k|        {
  873|  8.54k|            arg_id = handler.on_arg_id(id);
  874|  8.54k|        }
  875|       |
  876|  8.54k|        constexpr void on_error(const char* msg)
  877|  8.54k|        {
  878|  8.54k|            SCN_UNLIKELY_ATTR
  879|  8.54k|            handler.on_error(msg);
  880|  8.54k|        }
  881|       |
  882|  8.54k|        Handler& handler;
  883|  8.54k|        std::size_t arg_id;
  884|  8.54k|    };
  885|       |
  886|  8.54k|    ++begin;
  887|  8.54k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  8.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.54k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  8.54k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 8.54k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  8.54k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 8.54k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  8.54k|    else {
  899|  8.54k|        auto adapter = id_adapter{handler, 0};
  900|  8.54k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  8.54k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  8.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.54k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  8.54k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 8.54k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  8.54k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 8.54k, False: 0]
  ------------------
  911|  8.54k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  8.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.54k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  8.54k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  8.54k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.84k, False: 5.70k]
  |  |  |  Branch (153:45): [True: 0, False: 8.54k]
  |  |  |  Branch (153:45): [True: 2.84k, False: 5.70k]
  |  |  ------------------
  ------------------
  917|  2.84k|                handler.on_error("Unknown format specifier");
  918|  2.84k|                return begin;
  919|  2.84k|            }
  920|  8.54k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  8.54k|    }
  927|  5.70k|    return begin + 1;
  928|  8.54k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  8.54k|{
  400|  8.54k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  8.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  8.54k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 8.54k, False: 0]
  |  Branch (401:26): [True: 0, False: 8.54k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  8.54k|    handler();
  406|  8.54k|    return begin;
  407|  8.54k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  8.54k|        {
  869|  8.54k|            arg_id = handler.on_arg_id();
  870|  8.54k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|  8.54k|    {
 1046|  8.54k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  8.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  8.54k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|  8.54k|{
  795|  8.54k|    auto do_presentation = [&]() -> const CharT* {
  796|  8.54k|        if (*begin == CharT{'['}) {
  797|  8.54k|            auto set = parse_presentation_set(begin, end, handler);
  798|  8.54k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  8.54k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  8.54k|                return begin;
  803|  8.54k|            }
  804|  8.54k|            handler.on_character_set_string(set);
  805|  8.54k|            return begin;
  806|  8.54k|        }
  807|  8.54k|        if (*begin == CharT{'/'}) {
  808|  8.54k|            return parse_presentation_regex(begin, end, handler);
  809|  8.54k|        }
  810|  8.54k|        presentation_type type = parse_presentation_type(*begin++);
  811|  8.54k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  8.54k|            handler.on_error("Invalid type specifier in format string");
  813|  8.54k|            return begin;
  814|  8.54k|        }
  815|  8.54k|        handler.on_type(type);
  816|  8.54k|        return begin;
  817|  8.54k|    };
  818|       |
  819|  8.54k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 8.54k, False: 0]
  |  Branch (819:28): [True: 2.85k, False: 5.69k]
  ------------------
  820|  8.54k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.85k, False: 0]
  |  Branch (820:36): [True: 1.42k, False: 1.42k]
  ------------------
  821|  1.42k|        return do_presentation();
  822|  1.42k|    }
  823|       |
  824|  7.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  7.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.12k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  7.12k|    begin = parse_align(begin, end, handler);
  830|  7.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  7.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.12k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  7.12k|    begin = parse_width(begin, end, handler);
  836|  7.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  7.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.12k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  7.12k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 1.42k, False: 5.69k]
  ------------------
  842|  1.42k|        handler.on_localized();
  843|  1.42k|        ++begin;
  844|  1.42k|    }
  845|  7.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  7.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.12k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  7.12k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 7.12k, False: 0]
  |  Branch (850:25): [True: 5.69k, False: 1.42k]
  ------------------
  851|  5.69k|        do_presentation();
  852|  5.69k|    }
  853|  7.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  7.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.12k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  7.12k|    return begin;
  859|  7.12k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|  7.12k|    auto do_presentation = [&]() -> const CharT* {
  796|  7.12k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 2.84k, False: 4.27k]
  ------------------
  797|  2.84k|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.84k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.84k]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|  2.84k|            handler.on_character_set_string(set);
  805|  2.84k|            return begin;
  806|  2.84k|        }
  807|  4.27k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 4.27k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  4.27k|        presentation_type type = parse_presentation_type(*begin++);
  811|  4.27k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.42k, False: 2.85k]
  |  |  ------------------
  ------------------
  812|  1.42k|            handler.on_error("Invalid type specifier in format string");
  813|  1.42k|            return begin;
  814|  1.42k|        }
  815|  2.85k|        handler.on_type(type);
  816|  2.85k|        return begin;
  817|  4.27k|    };
vscan.cpp:_ZN3scn2v26detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
  633|  2.84k|{
  634|  2.84k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  2.84k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  2.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|      0|    auto start = begin;
  638|  2.84k|    ++begin;
  639|       |
  640|  2.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.84k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|      0|        return {};
  645|      0|    }
  646|  2.84k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 0, False: 2.84k]
  ------------------
  647|      0|        handler.on_charset_inverted();
  648|      0|        ++begin;
  649|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|      0|            return {};
  654|      0|        }
  655|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 0, False: 0]
  ------------------
  656|      0|            handler.on_charset_single(char32_t{']'});
  657|      0|            ++begin;
  658|      0|        }
  659|      0|    }
  660|  2.84k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 0, False: 2.84k]
  ------------------
  661|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|      0|    }
  663|       |
  664|  8.54k|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 8.54k, False: 0]
  ------------------
  665|  8.54k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  8.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.54k]
  |  |  ------------------
  ------------------
  666|      0|            break;
  667|      0|        }
  668|       |
  669|  8.54k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 2.84k, False: 5.69k]
  ------------------
  670|  2.84k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  2.84k|        }
  672|       |
  673|  5.69k|        parse_presentation_set_literal(begin, end, handler);
  674|  5.69k|    }
  675|       |
  676|      0|    SCN_UNLIKELY_ATTR
  677|      0|    handler.on_error("Invalid [character set] specifier in format string");
  678|      0|    return {};
  679|  2.84k|}
vscan.cpp:_ZN3scn2v26detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
  597|  5.69k|{
  598|  5.69k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  5.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|      0|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|  5.69k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|  5.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.69k]
  |  |  ------------------
  ------------------
  602|      0|        return;
  603|      0|    }
  604|       |
  605|  5.69k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 5.69k, False: 0]
  |  Branch (605:25): [True: 5.69k, False: 0]
  |  Branch (605:49): [True: 5.69k, False: 0]
  ------------------
  606|  5.69k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 5.69k, False: 0]
  ------------------
  607|  5.69k|        ++begin;
  608|       |
  609|  5.69k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  5.69k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  5.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.69k]
  |  |  ------------------
  ------------------
  611|      0|            return;
  612|      0|        }
  613|       |
  614|  5.69k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  5.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.69k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|      0|            return;
  619|      0|        }
  620|       |
  621|  5.69k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  5.69k|        return;
  623|  5.69k|    }
  624|       |
  625|      0|    handler.on_charset_single(cp_first);
  626|      0|}
vscan.cpp:_ZN3scn2v26detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
  573|  11.3k|{
  574|  11.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|      0|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|  11.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.3k]
  |  |  |  Branch (153:45): [True: 0, False: 11.3k]
  |  |  |  Branch (153:45): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|  11.3k|    const auto cp = decode_utf_code_point_exhaustive(
  583|  11.3k|        std::basic_string_view<CharT>{begin, len});
  584|  11.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
  585|      0|        handler.on_error("Invalid encoding in format string");
  586|      0|        return invalid_code_point;
  587|      0|    }
  588|       |
  589|  11.3k|    begin += len;
  590|  11.3k|    return cp;
  591|  11.3k|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  7.12k|{
  489|  7.12k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  7.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  7.12k|        switch (ch) {
  493|  7.12k|            case L'<':
  494|  7.12k|                return align_type::left;
  495|  7.12k|            case L'>':
  496|  7.12k|                return align_type::right;
  497|  7.12k|            case L'^':
  498|  7.12k|                return align_type::center;
  499|  7.12k|            default:
  500|  7.12k|                return align_type::none;
  501|  7.12k|        }
  502|  7.12k|    };
  503|       |
  504|  7.12k|    auto potential_fill_len = code_point_length(begin, end);
  505|  7.12k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.12k]
  |  |  |  Branch (153:45): [True: 0, False: 7.12k]
  |  |  |  Branch (153:45): [True: 0, False: 7.12k]
  |  |  ------------------
  ------------------
  506|  7.12k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  7.12k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  7.12k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  7.12k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  7.12k|    const auto begin_before_fill = begin;
  516|  7.12k|    begin += potential_fill_len;
  517|       |
  518|  7.12k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 7.12k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  7.12k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  7.12k|    const auto begin_after_fill = begin;
  524|  7.12k|    ++begin;
  525|       |
  526|  7.12k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 7.12k, False: 0]
  ------------------
  527|  7.12k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  7.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.12k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  7.12k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 2.84k, False: 4.27k]
  ------------------
  532|  2.84k|            return begin_before_fill;
  533|  2.84k|        }
  534|  7.12k|    }
  535|       |
  536|  4.27k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 4.27k, False: 0]
  ------------------
  537|  4.27k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 4.27k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  4.27k|        return begin_before_fill;
  542|  4.27k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  4.27k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|  14.2k|    auto check_align = [](wchar_t ch) {
  492|  14.2k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 14.2k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 14.2k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 14.2k]
  ------------------
  498|      0|                return align_type::center;
  499|  14.2k|            default:
  ------------------
  |  Branch (499:13): [True: 14.2k, False: 0]
  ------------------
  500|  14.2k|                return align_type::none;
  501|  14.2k|        }
  502|  14.2k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  7.12k|{
  554|  7.12k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  7.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  7.12k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 7.12k, False: 0]
  |  Branch (556:33): [True: 2.85k, False: 4.27k]
  ------------------
  557|  2.85k|        int width = parse_simple_int(begin, end);
  558|  2.85k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|  2.85k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.85k, False: 0]
  |  |  ------------------
  ------------------
  559|  2.85k|            handler.on_width(width);
  560|  2.85k|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|  2.85k|    }
  566|  7.12k|    return begin;
  567|  7.12k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  1.42k|    {
 1051|  1.42k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  1.42k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 1.42k, False: 0]
  ------------------
 1053|  1.42k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 1.42k, False: 0]
  ------------------
 1054|  1.42k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 1.42k, False: 0]
  ------------------
 1055|  1.42k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 1.42k, False: 0]
  ------------------
 1056|  1.42k|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|  1.42k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|  1.42k|        }
 1061|       |
 1062|      0|        Handler::on_localized();
 1063|      0|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   135k|{
  968|   135k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   135k|    handler.check_args_exhausted();
  970|   135k|    return handler.get_error();
  971|   135k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   135k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   135k|    auto begin = format.data();
  937|   135k|    auto it = begin;
  938|   135k|    const auto end = format.data() + format.size();
  939|       |
  940|   247k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 135k, False: 111k]
  ------------------
  941|   135k|        const auto ch = *it++;
  942|   135k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 135k, False: 0]
  ------------------
  943|   135k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   135k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   135k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 23.2k, False: 111k]
  ------------------
  947|  23.2k|                return;
  948|  23.2k|            }
  949|   135k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   135k|    }
  960|       |
  961|   111k|    handler.on_literal_text(begin, end);
  962|   111k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|   135k|{
  866|   135k|    struct id_adapter {
  867|   135k|        constexpr void operator()()
  868|   135k|        {
  869|   135k|            arg_id = handler.on_arg_id();
  870|   135k|        }
  871|   135k|        constexpr void operator()(std::size_t id)
  872|   135k|        {
  873|   135k|            arg_id = handler.on_arg_id(id);
  874|   135k|        }
  875|       |
  876|   135k|        constexpr void on_error(const char* msg)
  877|   135k|        {
  878|   135k|            SCN_UNLIKELY_ATTR
  879|   135k|            handler.on_error(msg);
  880|   135k|        }
  881|       |
  882|   135k|        Handler& handler;
  883|   135k|        std::size_t arg_id;
  884|   135k|    };
  885|       |
  886|   135k|    ++begin;
  887|   135k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   135k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 135k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   135k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 135k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   135k|    else {
  899|   135k|        auto adapter = id_adapter{handler, 0};
  900|   135k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   135k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   135k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 135k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   135k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 135k, False: 0]
  ------------------
  911|   135k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   135k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   135k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.29k, False: 125k]
  |  |  |  Branch (153:45): [True: 0, False: 135k]
  |  |  |  Branch (153:45): [True: 9.29k, False: 125k]
  |  |  ------------------
  ------------------
  917|  9.29k|                handler.on_error("Unknown format specifier");
  918|  9.29k|                return begin;
  919|  9.29k|            }
  920|   135k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   135k|    }
  927|   125k|    return begin + 1;
  928|   135k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   135k|{
  400|   135k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   135k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 135k, False: 0]
  |  Branch (401:26): [True: 0, False: 135k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   135k|    handler();
  406|   135k|    return begin;
  407|   135k|}
_ZN3scn2v26detail16parse_simple_intIwEEiRPKT_S5_:
  348|  30.5k|{
  349|  30.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  350|  30.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  242|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  351|       |
  352|      0|    unsigned long long value = 0;
  353|  61.1k|    do {
  354|  61.1k|        value *= 10;
  355|  61.1k|        value += static_cast<unsigned long long>(*begin - '0');
  356|  61.1k|        if (value >
  ------------------
  |  Branch (356:13): [True: 0, False: 61.1k]
  ------------------
  357|  61.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
  358|      0|            return -1;
  359|      0|        }
  360|  61.1k|        ++begin;
  361|  61.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (361:14): [True: 61.1k, False: 0]
  |  Branch (361:30): [True: 61.1k, False: 0]
  |  Branch (361:47): [True: 30.5k, False: 30.5k]
  ------------------
  362|  30.5k|    return static_cast<int>(value);
  363|  30.5k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   135k|        {
  869|   135k|            arg_id = handler.on_arg_id();
  870|   135k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|   135k|    {
 1046|   135k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   135k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|   135k|{
  795|   135k|    auto do_presentation = [&]() -> const CharT* {
  796|   135k|        if (*begin == CharT{'['}) {
  797|   135k|            auto set = parse_presentation_set(begin, end, handler);
  798|   135k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   135k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   135k|                return begin;
  803|   135k|            }
  804|   135k|            handler.on_character_set_string(set);
  805|   135k|            return begin;
  806|   135k|        }
  807|   135k|        if (*begin == CharT{'/'}) {
  808|   135k|            return parse_presentation_regex(begin, end, handler);
  809|   135k|        }
  810|   135k|        presentation_type type = parse_presentation_type(*begin++);
  811|   135k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   135k|            handler.on_error("Invalid type specifier in format string");
  813|   135k|            return begin;
  814|   135k|        }
  815|   135k|        handler.on_type(type);
  816|   135k|        return begin;
  817|   135k|    };
  818|       |
  819|   135k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 135k, False: 0]
  |  Branch (819:28): [True: 103k, False: 31.5k]
  ------------------
  820|   135k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 103k, False: 0]
  |  Branch (820:36): [True: 98.9k, False: 4.64k]
  ------------------
  821|  98.9k|        return do_presentation();
  822|  98.9k|    }
  823|       |
  824|  36.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  36.2k|    begin = parse_align(begin, end, handler);
  830|  36.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  36.2k|    begin = parse_width(begin, end, handler);
  836|  36.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  36.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 4.64k, False: 31.5k]
  ------------------
  842|  4.64k|        handler.on_localized();
  843|  4.64k|        ++begin;
  844|  4.64k|    }
  845|  36.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  36.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 36.2k, False: 0]
  |  Branch (850:25): [True: 31.5k, False: 4.64k]
  ------------------
  851|  31.5k|        do_presentation();
  852|  31.5k|    }
  853|  36.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  36.2k|    return begin;
  859|  36.2k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|   139k|{
  464|   139k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 132k, False: 6.97k]
  |  Branch (464:33): [True: 132k, False: 0]
  ------------------
  465|   139k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 6.97k, False: 0]
  |  Branch (465:33): [True: 6.97k, False: 0]
  ------------------
  466|   139k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|   130k|    auto do_presentation = [&]() -> const CharT* {
  796|   130k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 5.82k, False: 124k]
  ------------------
  797|  5.82k|            auto set = parse_presentation_set(begin, end, handler);
  798|  5.82k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.82k]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|  5.82k|            handler.on_character_set_string(set);
  805|  5.82k|            return begin;
  806|  5.82k|        }
  807|   124k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 124k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   124k|        presentation_type type = parse_presentation_type(*begin++);
  811|   124k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.64k, False: 120k]
  |  |  ------------------
  ------------------
  812|  4.64k|            handler.on_error("Invalid type specifier in format string");
  813|  4.64k|            return begin;
  814|  4.64k|        }
  815|   120k|        handler.on_type(type);
  816|   120k|        return begin;
  817|   124k|    };
vscan.cpp:_ZN3scn2v26detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
  633|  5.82k|{
  634|  5.82k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  5.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  5.82k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  5.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|      0|    auto start = begin;
  638|  5.82k|    ++begin;
  639|       |
  640|  5.82k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.82k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|      0|        return {};
  645|      0|    }
  646|  5.82k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 0, False: 5.82k]
  ------------------
  647|      0|        handler.on_charset_inverted();
  648|      0|        ++begin;
  649|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|      0|            return {};
  654|      0|        }
  655|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 0, False: 0]
  ------------------
  656|      0|            handler.on_charset_single(char32_t{']'});
  657|      0|            ++begin;
  658|      0|        }
  659|      0|    }
  660|  5.82k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 0, False: 5.82k]
  ------------------
  661|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|      0|    }
  663|       |
  664|  17.4k|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 17.4k, False: 0]
  ------------------
  665|  17.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 17.4k]
  |  |  ------------------
  ------------------
  666|      0|            break;
  667|      0|        }
  668|       |
  669|  17.4k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 5.82k, False: 11.6k]
  ------------------
  670|  5.82k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  5.82k|        }
  672|       |
  673|  11.6k|        parse_presentation_set_literal(begin, end, handler);
  674|  11.6k|    }
  675|       |
  676|      0|    SCN_UNLIKELY_ATTR
  677|      0|    handler.on_error("Invalid [character set] specifier in format string");
  678|      0|    return {};
  679|  5.82k|}
vscan.cpp:_ZN3scn2v26detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
  597|  11.6k|{
  598|  11.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|      0|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|  11.6k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
  602|      0|        return;
  603|      0|    }
  604|       |
  605|  11.6k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 11.6k, False: 0]
  |  Branch (605:25): [True: 11.6k, False: 0]
  |  Branch (605:49): [True: 11.6k, False: 0]
  ------------------
  606|  11.6k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 11.6k, False: 0]
  ------------------
  607|  11.6k|        ++begin;
  608|       |
  609|  11.6k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  11.6k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
  611|      0|            return;
  612|      0|        }
  613|       |
  614|  11.6k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|      0|            return;
  619|      0|        }
  620|       |
  621|  11.6k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  11.6k|        return;
  623|  11.6k|    }
  624|       |
  625|      0|    handler.on_charset_single(cp_first);
  626|      0|}
vscan.cpp:_ZN3scn2v26detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
  573|  23.3k|{
  574|  23.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|      0|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|  23.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 23.3k]
  |  |  |  Branch (153:45): [True: 0, False: 23.3k]
  |  |  |  Branch (153:45): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|  23.3k|    const auto cp = decode_utf_code_point_exhaustive(
  583|  23.3k|        std::basic_string_view<CharT>{begin, len});
  584|  23.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
  585|      0|        handler.on_error("Invalid encoding in format string");
  586|      0|        return invalid_code_point;
  587|      0|    }
  588|       |
  589|  23.3k|    begin += len;
  590|  23.3k|    return cp;
  591|  23.3k|}
_ZN3scn2v26detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  302|  10.4k|    {
  303|  10.4k|        m_specs.charset_string_data = fmt.data();
  304|  10.4k|        m_specs.charset_string_size = fmt.size();
  305|  10.4k|        on_type(presentation_type::string_set);
  306|  10.4k|    }
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|   163k|{
  412|   163k|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 163k]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 163k]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 163k]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 163k]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 163k]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 163k]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 163k]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 163k]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 163k]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 163k]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 163k]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 163k]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 163k]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 163k]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 163k]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 163k]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 163k]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 163k]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|   132k|        case 's':
  ------------------
  |  Branch (442:9): [True: 132k, False: 30.5k]
  ------------------
  443|   132k|            return presentation_type::string;
  444|  23.5k|        case 'c':
  ------------------
  |  Branch (444:9): [True: 23.5k, False: 139k]
  ------------------
  445|  23.5k|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 163k]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 163k]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 163k]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 163k]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|  6.97k|        default:
  ------------------
  |  Branch (456:9): [True: 6.97k, False: 156k]
  ------------------
  457|  6.97k|            return presentation_type::none;
  458|   163k|    }
  459|   163k|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|  36.2k|{
  489|  36.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  36.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  36.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  36.2k|        switch (ch) {
  493|  36.2k|            case L'<':
  494|  36.2k|                return align_type::left;
  495|  36.2k|            case L'>':
  496|  36.2k|                return align_type::right;
  497|  36.2k|            case L'^':
  498|  36.2k|                return align_type::center;
  499|  36.2k|            default:
  500|  36.2k|                return align_type::none;
  501|  36.2k|        }
  502|  36.2k|    };
  503|       |
  504|  36.2k|    auto potential_fill_len = code_point_length(begin, end);
  505|  36.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 36.2k]
  |  |  |  Branch (153:45): [True: 0, False: 36.2k]
  |  |  |  Branch (153:45): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  506|  36.2k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  36.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  36.2k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  36.2k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  36.2k|    const auto begin_before_fill = begin;
  516|  36.2k|    begin += potential_fill_len;
  517|       |
  518|  36.2k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 36.2k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  36.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  36.2k|    const auto begin_after_fill = begin;
  524|  36.2k|    ++begin;
  525|       |
  526|  36.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 36.2k, False: 0]
  ------------------
  527|  36.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  36.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 5.82k, False: 30.3k]
  ------------------
  532|  5.82k|            return begin_before_fill;
  533|  5.82k|        }
  534|  36.2k|    }
  535|       |
  536|  30.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 30.3k, False: 0]
  ------------------
  537|  30.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 30.3k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  30.3k|        return begin_before_fill;
  542|  30.3k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  30.3k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  48.0k|{
  471|  48.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  48.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  48.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  48.0k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  48.0k|        return 1;
  474|  48.0k|    }
  475|  48.0k|    else {
  476|  48.0k|        const auto lengths =
  477|  48.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  48.0k|            "\3\4";
  479|  48.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  48.0k|        return len;
  481|  48.0k|    }
  482|  48.0k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  72.4k|    auto check_align = [](wchar_t ch) {
  492|  72.4k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 72.4k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 72.4k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 72.4k]
  ------------------
  498|      0|                return align_type::center;
  499|  72.4k|            default:
  ------------------
  |  Branch (499:13): [True: 72.4k, False: 0]
  ------------------
  500|  72.4k|                return align_type::none;
  501|  72.4k|        }
  502|  72.4k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|  36.2k|{
  554|  36.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  36.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  36.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  36.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 36.2k, False: 0]
  |  Branch (556:33): [True: 25.7k, False: 10.4k]
  ------------------
  557|  25.7k|        int width = parse_simple_int(begin, end);
  558|  25.7k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|  25.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 25.7k, False: 0]
  |  |  ------------------
  ------------------
  559|  25.7k|            handler.on_width(width);
  560|  25.7k|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|  25.7k|    }
  566|  36.2k|    return begin;
  567|  36.2k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|  4.64k|    {
 1051|  4.64k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  4.64k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 4.64k, False: 0]
  ------------------
 1053|  4.64k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 4.64k, False: 0]
  ------------------
 1054|  4.64k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 4.64k, False: 0]
  ------------------
 1055|  4.64k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 4.64k, False: 0]
  ------------------
 1056|  4.64k|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|  4.64k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|  4.64k|        }
 1061|       |
 1062|      0|        Handler::on_localized();
 1063|      0|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  45.3k|{
  968|  45.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  45.3k|    handler.check_args_exhausted();
  970|  45.3k|    return handler.get_error();
  971|  45.3k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  45.3k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  45.3k|    auto begin = format.data();
  937|  45.3k|    auto it = begin;
  938|  45.3k|    const auto end = format.data() + format.size();
  939|       |
  940|  79.0k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 45.3k, False: 33.7k]
  ------------------
  941|  45.3k|        const auto ch = *it++;
  942|  45.3k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 45.3k, False: 0]
  ------------------
  943|  45.3k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  45.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  45.3k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 11.6k, False: 33.7k]
  ------------------
  947|  11.6k|                return;
  948|  11.6k|            }
  949|  45.3k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  45.3k|    }
  960|       |
  961|  33.7k|    handler.on_literal_text(begin, end);
  962|  33.7k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|  45.3k|{
  866|  45.3k|    struct id_adapter {
  867|  45.3k|        constexpr void operator()()
  868|  45.3k|        {
  869|  45.3k|            arg_id = handler.on_arg_id();
  870|  45.3k|        }
  871|  45.3k|        constexpr void operator()(std::size_t id)
  872|  45.3k|        {
  873|  45.3k|            arg_id = handler.on_arg_id(id);
  874|  45.3k|        }
  875|       |
  876|  45.3k|        constexpr void on_error(const char* msg)
  877|  45.3k|        {
  878|  45.3k|            SCN_UNLIKELY_ATTR
  879|  45.3k|            handler.on_error(msg);
  880|  45.3k|        }
  881|       |
  882|  45.3k|        Handler& handler;
  883|  45.3k|        std::size_t arg_id;
  884|  45.3k|    };
  885|       |
  886|  45.3k|    ++begin;
  887|  45.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.3k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  45.3k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 45.3k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  45.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 45.3k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  45.3k|    else {
  899|  45.3k|        auto adapter = id_adapter{handler, 0};
  900|  45.3k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  45.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.3k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  45.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 45.3k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  45.3k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 45.3k, False: 0]
  ------------------
  911|  45.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.3k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  45.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  45.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  90.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.64k, False: 40.6k]
  |  |  |  Branch (153:45): [True: 0, False: 45.3k]
  |  |  |  Branch (153:45): [True: 4.64k, False: 40.6k]
  |  |  ------------------
  ------------------
  917|  4.64k|                handler.on_error("Unknown format specifier");
  918|  4.64k|                return begin;
  919|  4.64k|            }
  920|  45.3k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  45.3k|    }
  927|  40.6k|    return begin + 1;
  928|  45.3k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  45.3k|{
  400|  45.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  45.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  45.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  45.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 45.3k, False: 0]
  |  Branch (401:26): [True: 0, False: 45.3k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  45.3k|    handler();
  406|  45.3k|    return begin;
  407|  45.3k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  45.3k|        {
  869|  45.3k|            arg_id = handler.on_arg_id();
  870|  45.3k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|  45.3k|    {
 1046|  45.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  45.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  45.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  45.3k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|  45.3k|{
  795|  45.3k|    auto do_presentation = [&]() -> const CharT* {
  796|  45.3k|        if (*begin == CharT{'['}) {
  797|  45.3k|            auto set = parse_presentation_set(begin, end, handler);
  798|  45.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  45.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  45.3k|                return begin;
  803|  45.3k|            }
  804|  45.3k|            handler.on_character_set_string(set);
  805|  45.3k|            return begin;
  806|  45.3k|        }
  807|  45.3k|        if (*begin == CharT{'/'}) {
  808|  45.3k|            return parse_presentation_regex(begin, end, handler);
  809|  45.3k|        }
  810|  45.3k|        presentation_type type = parse_presentation_type(*begin++);
  811|  45.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  45.3k|            handler.on_error("Invalid type specifier in format string");
  813|  45.3k|            return begin;
  814|  45.3k|        }
  815|  45.3k|        handler.on_type(type);
  816|  45.3k|        return begin;
  817|  45.3k|    };
  818|       |
  819|  45.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 45.3k, False: 0]
  |  Branch (819:28): [True: 35.8k, False: 9.46k]
  ------------------
  820|  45.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 35.8k, False: 0]
  |  Branch (820:36): [True: 33.5k, False: 2.32k]
  ------------------
  821|  33.5k|        return do_presentation();
  822|  33.5k|    }
  823|       |
  824|  11.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  11.7k|    begin = parse_align(begin, end, handler);
  830|  11.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  11.7k|    begin = parse_width(begin, end, handler);
  836|  11.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  11.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 2.32k, False: 9.46k]
  ------------------
  842|  2.32k|        handler.on_localized();
  843|  2.32k|        ++begin;
  844|  2.32k|    }
  845|  11.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  11.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 11.7k, False: 0]
  |  Branch (850:25): [True: 9.46k, False: 2.32k]
  ------------------
  851|  9.46k|        do_presentation();
  852|  9.46k|    }
  853|  11.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  11.7k|    return begin;
  859|  11.7k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|  43.0k|    auto do_presentation = [&]() -> const CharT* {
  796|  43.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 4.64k, False: 38.3k]
  ------------------
  797|  4.64k|            auto set = parse_presentation_set(begin, end, handler);
  798|  4.64k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.64k]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|  4.64k|            handler.on_character_set_string(set);
  805|  4.64k|            return begin;
  806|  4.64k|        }
  807|  38.3k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 38.3k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  38.3k|        presentation_type type = parse_presentation_type(*begin++);
  811|  38.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  38.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.32k, False: 36.0k]
  |  |  ------------------
  ------------------
  812|  2.32k|            handler.on_error("Invalid type specifier in format string");
  813|  2.32k|            return begin;
  814|  2.32k|        }
  815|  36.0k|        handler.on_type(type);
  816|  36.0k|        return begin;
  817|  38.3k|    };
vscan.cpp:_ZN3scn2v26detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
  633|  4.64k|{
  634|  4.64k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  4.64k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  4.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|      0|    auto start = begin;
  638|  4.64k|    ++begin;
  639|       |
  640|  4.64k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.64k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|      0|        return {};
  645|      0|    }
  646|  4.64k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 0, False: 4.64k]
  ------------------
  647|      0|        handler.on_charset_inverted();
  648|      0|        ++begin;
  649|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|      0|            return {};
  654|      0|        }
  655|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 0, False: 0]
  ------------------
  656|      0|            handler.on_charset_single(char32_t{']'});
  657|      0|            ++begin;
  658|      0|        }
  659|      0|    }
  660|  4.64k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 0, False: 4.64k]
  ------------------
  661|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|      0|    }
  663|       |
  664|  13.9k|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 13.9k, False: 0]
  ------------------
  665|  13.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
  666|      0|            break;
  667|      0|        }
  668|       |
  669|  13.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 4.64k, False: 9.29k]
  ------------------
  670|  4.64k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  4.64k|        }
  672|       |
  673|  9.29k|        parse_presentation_set_literal(begin, end, handler);
  674|  9.29k|    }
  675|       |
  676|      0|    SCN_UNLIKELY_ATTR
  677|      0|    handler.on_error("Invalid [character set] specifier in format string");
  678|      0|    return {};
  679|  4.64k|}
vscan.cpp:_ZN3scn2v26detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
  597|  9.29k|{
  598|  9.29k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  9.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|      0|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|  9.29k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|  9.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.29k]
  |  |  ------------------
  ------------------
  602|      0|        return;
  603|      0|    }
  604|       |
  605|  9.29k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 9.29k, False: 0]
  |  Branch (605:25): [True: 9.29k, False: 0]
  |  Branch (605:49): [True: 9.29k, False: 0]
  ------------------
  606|  9.29k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 9.29k, False: 0]
  ------------------
  607|  9.29k|        ++begin;
  608|       |
  609|  9.29k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  9.29k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  9.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.29k]
  |  |  ------------------
  ------------------
  611|      0|            return;
  612|      0|        }
  613|       |
  614|  9.29k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  9.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.29k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|      0|            return;
  619|      0|        }
  620|       |
  621|  9.29k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  9.29k|        return;
  623|  9.29k|    }
  624|       |
  625|      0|    handler.on_charset_single(cp_first);
  626|      0|}
vscan.cpp:_ZN3scn2v26detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
  573|  18.5k|{
  574|  18.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|      0|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|  18.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 18.5k]
  |  |  |  Branch (153:45): [True: 0, False: 18.5k]
  |  |  |  Branch (153:45): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|  18.5k|    const auto cp = decode_utf_code_point_exhaustive(
  583|  18.5k|        std::basic_string_view<CharT>{begin, len});
  584|  18.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
  585|      0|        handler.on_error("Invalid encoding in format string");
  586|      0|        return invalid_code_point;
  587|      0|    }
  588|       |
  589|  18.5k|    begin += len;
  590|  18.5k|    return cp;
  591|  18.5k|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|  11.7k|{
  489|  11.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  11.7k|        switch (ch) {
  493|  11.7k|            case L'<':
  494|  11.7k|                return align_type::left;
  495|  11.7k|            case L'>':
  496|  11.7k|                return align_type::right;
  497|  11.7k|            case L'^':
  498|  11.7k|                return align_type::center;
  499|  11.7k|            default:
  500|  11.7k|                return align_type::none;
  501|  11.7k|        }
  502|  11.7k|    };
  503|       |
  504|  11.7k|    auto potential_fill_len = code_point_length(begin, end);
  505|  11.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.7k]
  |  |  |  Branch (153:45): [True: 0, False: 11.7k]
  |  |  |  Branch (153:45): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
  506|  11.7k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  11.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  11.7k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  11.7k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  11.7k|    const auto begin_before_fill = begin;
  516|  11.7k|    begin += potential_fill_len;
  517|       |
  518|  11.7k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 11.7k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  11.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  11.7k|    const auto begin_after_fill = begin;
  524|  11.7k|    ++begin;
  525|       |
  526|  11.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 11.7k, False: 0]
  ------------------
  527|  11.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.7k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  11.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 4.64k, False: 7.14k]
  ------------------
  532|  4.64k|            return begin_before_fill;
  533|  4.64k|        }
  534|  11.7k|    }
  535|       |
  536|  7.14k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 7.14k, False: 0]
  ------------------
  537|  7.14k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 7.14k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  7.14k|        return begin_before_fill;
  542|  7.14k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  7.14k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|  23.5k|    auto check_align = [](wchar_t ch) {
  492|  23.5k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 23.5k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 23.5k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 23.5k]
  ------------------
  498|      0|                return align_type::center;
  499|  23.5k|            default:
  ------------------
  |  Branch (499:13): [True: 23.5k, False: 0]
  ------------------
  500|  23.5k|                return align_type::none;
  501|  23.5k|        }
  502|  23.5k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|  11.7k|{
  554|  11.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  11.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 11.7k, False: 0]
  |  Branch (556:33): [True: 4.81k, False: 6.97k]
  ------------------
  557|  4.81k|        int width = parse_simple_int(begin, end);
  558|  4.81k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|  4.81k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.81k, False: 0]
  |  |  ------------------
  ------------------
  559|  4.81k|            handler.on_width(width);
  560|  4.81k|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|  4.81k|    }
  566|  11.7k|    return begin;
  567|  11.7k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  2.32k|    {
 1051|  2.32k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  2.32k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 2.32k, False: 0]
  ------------------
 1053|  2.32k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 2.32k, False: 0]
  ------------------
 1054|  2.32k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 2.32k, False: 0]
  ------------------
 1055|  2.32k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 2.32k, False: 0]
  ------------------
 1056|  2.32k|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|  2.32k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|  2.32k|        }
 1061|       |
 1062|      0|        Handler::on_localized();
 1063|      0|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   313k|{
  226|   313k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   313k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   313k|                  "\n"
  230|   313k|                  "Unsupported range type given as input to a scanning "
  231|   313k|                  "function.\n"
  232|   313k|                  "A range needs to have a character type (value type) "
  233|   313k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   313k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   313k|                  "to be included.\n"
  236|   313k|                  "See the scnlib documentation for more details.");
  237|   313k|    static_assert(
  238|   313k|        !std::is_same_v<T, custom_char_traits>,
  239|   313k|        "\n"
  240|   313k|        "Unsupported range type given as input to a scanning "
  241|   313k|        "function.\n"
  242|   313k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   313k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   313k|        "not supported.");
  245|   313k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   313k|                  "\n"
  247|   313k|                  "Unsupported range type given as input to a scanning "
  248|   313k|                  "function.\n"
  249|   313k|                  "file_marker_found cannot be used as an "
  250|   313k|                  "source range type to scn::scan.\n"
  251|   313k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   313k|                  "and do not provide an explicit source range, "
  253|   313k|                  "or use scn::scan with a FILE* directly.");
  254|   313k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   313k|                  "\n"
  256|   313k|                  "Unsupported range type given as input to a scanning "
  257|   313k|                  "function.\n"
  258|   313k|                  "In order to be scannable, a range needs to satisfy "
  259|   313k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   313k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   313k|                  "\n"
  262|   313k|                  "Unsupported range type given as input to a scanning "
  263|   313k|                  "function.\n"
  264|   313k|                  "A range needs to model forward_range and have a valid "
  265|   313k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   313k|                  "Examples of scannable ranges are std::string, "
  267|   313k|                  "std::string_view, "
  268|   313k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   313k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   313k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   313k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|   313k|{
  153|   313k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|   313k|        return std::basic_string_view{ranges::data(r),
  155|   313k|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|   313k|    }
  162|   313k|    else {
  163|   313k|        return invalid_char_type{};
  164|   313k|    }
  165|   313k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  10.6k|{
  226|  10.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  10.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  10.6k|                  "\n"
  230|  10.6k|                  "Unsupported range type given as input to a scanning "
  231|  10.6k|                  "function.\n"
  232|  10.6k|                  "A range needs to have a character type (value type) "
  233|  10.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  10.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  10.6k|                  "to be included.\n"
  236|  10.6k|                  "See the scnlib documentation for more details.");
  237|  10.6k|    static_assert(
  238|  10.6k|        !std::is_same_v<T, custom_char_traits>,
  239|  10.6k|        "\n"
  240|  10.6k|        "Unsupported range type given as input to a scanning "
  241|  10.6k|        "function.\n"
  242|  10.6k|        "String types (std::basic_string, and std::basic_string_view) "
  243|  10.6k|        "need to use std::char_traits. Strings with custom Traits are "
  244|  10.6k|        "not supported.");
  245|  10.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  10.6k|                  "\n"
  247|  10.6k|                  "Unsupported range type given as input to a scanning "
  248|  10.6k|                  "function.\n"
  249|  10.6k|                  "file_marker_found cannot be used as an "
  250|  10.6k|                  "source range type to scn::scan.\n"
  251|  10.6k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  10.6k|                  "and do not provide an explicit source range, "
  253|  10.6k|                  "or use scn::scan with a FILE* directly.");
  254|  10.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  10.6k|                  "\n"
  256|  10.6k|                  "Unsupported range type given as input to a scanning "
  257|  10.6k|                  "function.\n"
  258|  10.6k|                  "In order to be scannable, a range needs to satisfy "
  259|  10.6k|                  "`forward_range`. `input_range` is not sufficient.");
  260|  10.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  10.6k|                  "\n"
  262|  10.6k|                  "Unsupported range type given as input to a scanning "
  263|  10.6k|                  "function.\n"
  264|  10.6k|                  "A range needs to model forward_range and have a valid "
  265|  10.6k|                  "character type (char or wchar_t) to be scannable.\n"
  266|  10.6k|                  "Examples of scannable ranges are std::string, "
  267|  10.6k|                  "std::string_view, "
  268|  10.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  10.6k|                  "See the scnlib documentation for more details.");
  270|       |
  271|  10.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  10.6k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|  10.6k|{
  196|  10.6k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|  10.6k|        return file_marker_found{};
  198|  10.6k|    }
  199|  10.6k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|  10.6k|        if constexpr (ranges::input_range<Range>) {
  201|  10.6k|            return insufficient_range{};
  202|  10.6k|        }
  203|  10.6k|        else {
  204|  10.6k|            return invalid_input_range{};
  205|  10.6k|        }
  206|  10.6k|    }
  207|  10.6k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|  10.6k|        return invalid_char_type{};
  209|  10.6k|    }
  210|  10.6k|    else {
  211|  10.6k|        return make_forward_scan_buffer(r);
  212|  10.6k|    }
  213|  10.6k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   283k|{
  226|   283k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   283k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   283k|                  "\n"
  230|   283k|                  "Unsupported range type given as input to a scanning "
  231|   283k|                  "function.\n"
  232|   283k|                  "A range needs to have a character type (value type) "
  233|   283k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   283k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   283k|                  "to be included.\n"
  236|   283k|                  "See the scnlib documentation for more details.");
  237|   283k|    static_assert(
  238|   283k|        !std::is_same_v<T, custom_char_traits>,
  239|   283k|        "\n"
  240|   283k|        "Unsupported range type given as input to a scanning "
  241|   283k|        "function.\n"
  242|   283k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   283k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   283k|        "not supported.");
  245|   283k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   283k|                  "\n"
  247|   283k|                  "Unsupported range type given as input to a scanning "
  248|   283k|                  "function.\n"
  249|   283k|                  "file_marker_found cannot be used as an "
  250|   283k|                  "source range type to scn::scan.\n"
  251|   283k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   283k|                  "and do not provide an explicit source range, "
  253|   283k|                  "or use scn::scan with a FILE* directly.");
  254|   283k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   283k|                  "\n"
  256|   283k|                  "Unsupported range type given as input to a scanning "
  257|   283k|                  "function.\n"
  258|   283k|                  "In order to be scannable, a range needs to satisfy "
  259|   283k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   283k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   283k|                  "\n"
  262|   283k|                  "Unsupported range type given as input to a scanning "
  263|   283k|                  "function.\n"
  264|   283k|                  "A range needs to model forward_range and have a valid "
  265|   283k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   283k|                  "Examples of scannable ranges are std::string, "
  267|   283k|                  "std::string_view, "
  268|   283k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   283k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   283k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   283k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|   283k|{
  153|   283k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|   283k|        return std::basic_string_view{ranges::data(r),
  155|   283k|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|   283k|    }
  162|   283k|    else {
  163|   283k|        return invalid_char_type{};
  164|   283k|    }
  165|   283k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  95.6k|{
  226|  95.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  95.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  95.6k|                  "\n"
  230|  95.6k|                  "Unsupported range type given as input to a scanning "
  231|  95.6k|                  "function.\n"
  232|  95.6k|                  "A range needs to have a character type (value type) "
  233|  95.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  95.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  95.6k|                  "to be included.\n"
  236|  95.6k|                  "See the scnlib documentation for more details.");
  237|  95.6k|    static_assert(
  238|  95.6k|        !std::is_same_v<T, custom_char_traits>,
  239|  95.6k|        "\n"
  240|  95.6k|        "Unsupported range type given as input to a scanning "
  241|  95.6k|        "function.\n"
  242|  95.6k|        "String types (std::basic_string, and std::basic_string_view) "
  243|  95.6k|        "need to use std::char_traits. Strings with custom Traits are "
  244|  95.6k|        "not supported.");
  245|  95.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  95.6k|                  "\n"
  247|  95.6k|                  "Unsupported range type given as input to a scanning "
  248|  95.6k|                  "function.\n"
  249|  95.6k|                  "file_marker_found cannot be used as an "
  250|  95.6k|                  "source range type to scn::scan.\n"
  251|  95.6k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  95.6k|                  "and do not provide an explicit source range, "
  253|  95.6k|                  "or use scn::scan with a FILE* directly.");
  254|  95.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  95.6k|                  "\n"
  256|  95.6k|                  "Unsupported range type given as input to a scanning "
  257|  95.6k|                  "function.\n"
  258|  95.6k|                  "In order to be scannable, a range needs to satisfy "
  259|  95.6k|                  "`forward_range`. `input_range` is not sufficient.");
  260|  95.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  95.6k|                  "\n"
  262|  95.6k|                  "Unsupported range type given as input to a scanning "
  263|  95.6k|                  "function.\n"
  264|  95.6k|                  "A range needs to model forward_range and have a valid "
  265|  95.6k|                  "character type (char or wchar_t) to be scannable.\n"
  266|  95.6k|                  "Examples of scannable ranges are std::string, "
  267|  95.6k|                  "std::string_view, "
  268|  95.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  95.6k|                  "See the scnlib documentation for more details.");
  270|       |
  271|  95.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  95.6k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|  95.6k|{
  196|  95.6k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|  95.6k|        return file_marker_found{};
  198|  95.6k|    }
  199|  95.6k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|  95.6k|        if constexpr (ranges::input_range<Range>) {
  201|  95.6k|            return insufficient_range{};
  202|  95.6k|        }
  203|  95.6k|        else {
  204|  95.6k|            return invalid_input_range{};
  205|  95.6k|        }
  206|  95.6k|    }
  207|  95.6k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|  95.6k|        return invalid_char_type{};
  209|  95.6k|    }
  210|  95.6k|    else {
  211|  95.6k|        return make_forward_scan_buffer(r);
  212|  95.6k|    }
  213|  95.6k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|   677k|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|   152k|    {
   45|   152k|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|   152k|    {
   66|   152k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 152k]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|   152k|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|   152k|        do_check_arg_id(id);
   74|   152k|        return id;
   75|   152k|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|   152k|{
  210|   152k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|   152k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|   152k|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|   144k|    {
   61|   144k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|   144k|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|   296k|    {
   50|   296k|        return m_format.data();
   51|   296k|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|   180k|    {
   45|   180k|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|   180k|    {
   66|   180k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 180k]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|   180k|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|   180k|        do_check_arg_id(id);
   74|   180k|        return id;
   75|   180k|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|   180k|{
  210|   180k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|   180k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|   180k|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|   166k|    {
   61|   166k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|   166k|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|   347k|    {
   50|   347k|        return m_format.data();
   51|   347k|    }

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   594k|    {
  482|   594k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   594k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|   594k|    {
  473|   594k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   594k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   283k|    {
  482|   283k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   283k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|   283k|    {
  473|   283k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   283k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   640k|    {
  482|   640k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   640k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|   640k|    {
  473|   640k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   640k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|   129k|    {
  549|   129k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   129k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|   129k|    {
  541|   129k|        return ranges::distance(lhs, rhs);
  542|   129k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   149k|    {
  482|   149k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   149k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSD_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSI_EEEEE15difference_typeEE4typeELm8EEmNS5_13make_unsignedISP_E4typeEE4typeE_EEOSI_:
  472|   149k|    {
  473|   149k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   149k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  7.12k|    {
  513|  7.12k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  7.12k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  7.12k|    {
  498|  7.12k|        it.batch_advance(n);
  499|  7.12k|        return it;
  500|  7.12k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  1.42k|    {
  549|  1.42k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.42k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  1.42k|    {
  534|  1.42k|        return rhs.position() - lhs.position();
  535|  1.42k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   252k|    {
  482|   252k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   252k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|   252k|    {
  473|   252k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   252k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|   111k|    {
  549|   111k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   111k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|   111k|    {
  541|   111k|        return ranges::distance(lhs, rhs);
  542|   111k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   131k|    {
  482|   131k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   131k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSD_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSI_EEEEE15difference_typeEE4typeELm8EEmNS5_13make_unsignedISP_E4typeEE4typeE_EEOSI_:
  472|   131k|    {
  473|   131k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   131k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  5.81k|    {
  513|  5.81k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  5.81k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  5.81k|    {
  498|  5.81k|        it.batch_advance(n);
  499|  5.81k|        return it;
  500|  5.81k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  33.7k|    {
  549|  33.7k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  33.7k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  33.7k|    {
  534|  33.7k|        return rhs.position() - lhs.position();
  535|  33.7k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|   294k|{
  343|   294k|    return {ranges::next(ranges::begin(source), n),
  344|   294k|            make_vscan_result_range_end(source)};
  345|   294k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   294k|{
  330|   294k|    return ranges::end(source);
  331|   294k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|   147k|    {
  253|   147k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|   294k|    {
  104|   294k|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
   38|   148k|    {
   39|   148k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2EOSH_:
  244|   147k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEED2Ev:
  248|   294k|    ~scan_result() = default;
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   294k|    {
  121|   294k|        return ranges::begin(m_range);
  122|   294k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEC2ES9_ONSA_5tupleIJSE_EEE:
  252|   147k|    {
  253|   147k|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
   38|   147k|    {
   39|   147k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  1.43k|{
  343|  1.43k|    return {ranges::next(ranges::begin(source), n),
  344|  1.43k|            make_vscan_result_range_end(source)};
  345|  1.43k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  1.43k|{
  330|  1.43k|    return ranges::end(source);
  331|  1.43k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESF_ONS6_5tupleIJSL_EEE:
  252|  1.43k|    {
  253|  1.43k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  1.43k|    {
  104|  1.43k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSM_:
  244|  1.43k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
  248|  2.86k|    ~scan_result() = default;
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  1.43k|    {
  121|  1.43k|        return ranges::begin(m_range);
  122|  1.43k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|   253k|{
  343|   253k|    return {ranges::next(ranges::begin(source), n),
  344|   253k|            make_vscan_result_range_end(source)};
  345|   253k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   253k|{
  330|   253k|    return ranges::end(source);
  331|   253k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|   126k|    {
  253|   126k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|   253k|    {
  104|   253k|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
   38|   207k|    {
   39|   207k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2EOSH_:
  244|   126k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEED2Ev:
  248|   253k|    ~scan_result() = default;
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   253k|    {
  121|   253k|        return ranges::begin(m_range);
  122|   253k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEC2ES9_ONSA_5tupleIJSE_EEE:
  252|   126k|    {
  253|   126k|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
   38|   126k|    {
   39|   126k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  80.5k|{
  343|  80.5k|    return {ranges::next(ranges::begin(source), n),
  344|  80.5k|            make_vscan_result_range_end(source)};
  345|  80.5k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  80.5k|{
  330|  80.5k|    return ranges::end(source);
  331|  80.5k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESF_ONS6_5tupleIJSL_EEE:
  252|  80.5k|    {
  253|  80.5k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  80.5k|    {
  104|  80.5k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSM_:
  244|  80.5k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
  248|   161k|    ~scan_result() = default;
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  80.5k|    {
  121|  80.5k|        return ranges::begin(m_range);
  122|  80.5k|    }

_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
  116|  64.2k|{
  117|  64.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  64.2k|}
_ZN3scn2v26detail9scan_implIcJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEEOSP_T2_NS3_5tupleIJS12_EEE:
   76|  64.2k|{
   77|  64.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  64.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  64.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  64.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  64.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|   128k|{
   55|   128k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.54k, False: 119k]
  |  |  ------------------
  ------------------
   56|  8.54k|        return unexpected(result.error());
   57|  8.54k|    }
   58|   119k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   119k|    static_cast<    \
  |  |  247|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   119k|    static_cast<    \
  |  |  247|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   128k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeEN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  200|  64.2k|{
  201|  64.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  64.2k|                                                      format, {});
  203|  64.2k|}
_ZN3scn2v26detail19scan_localized_implIcJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEENS3_6localeEN4nano6ranges9subrange_8subrangeIPKcSG_LNSC_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSI_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESW_NS0_31borrowed_subrange_with_sentinelISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSQ_T3_NS3_5tupleIJS13_EEE:
  162|  64.2k|{
  163|  64.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  64.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  64.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  64.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  64.2k|}
_ZN3scn2v210scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  247|  28.2k|{
  248|  28.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  28.2k|}
_ZN3scn2v26detail15scan_value_implIcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJT0_EEEEEOSN_SZ_:
  228|  28.2k|{
  229|  28.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  28.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  28.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 712, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    712|    }                                                  \
  |  |  |  |   70|  28.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  27.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  27.5k|    static_cast<    \
  |  |  247|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  27.5k|    static_cast<    \
  |  |  247|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  28.2k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEN4nano6ranges9subrange_8subrangeIPKcSC_LNS8_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISK_E4typeEJDpNS13_ISW_E4typeEEEE:
  116|  64.2k|{
  117|  64.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  64.2k|}
_ZN3scn2v26detail9scan_implIcJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSF_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEEOSN_T2_NS3_5tupleIJS10_EEE:
   76|  64.2k|{
   77|  64.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  64.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  64.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  64.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  64.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSH_ISJ_EEONS0_14scan_arg_storeIT0_JSL_EEE:
   54|   128k|{
   55|   128k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.54k, False: 119k]
  |  |  ------------------
  ------------------
   56|  8.54k|        return unexpected(result.error());
   57|  8.54k|    }
   58|   119k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   119k|    static_cast<    \
  |  |  247|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   119k|    static_cast<    \
  |  |  247|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   128k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeEN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS17_ISX_E4typeEEEE:
  200|  64.2k|{
  201|  64.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  64.2k|                                                      format, {});
  203|  64.2k|}
_ZN3scn2v26detail19scan_localized_implIcJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEENS3_6localeEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSO_T3_NS3_5tupleIJS11_EEE:
  162|  64.2k|{
  163|  64.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  64.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  64.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  64.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  64.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  64.2k|    static_cast<    \
  |  |  247|  64.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  64.2k|}
_ZN3scn2v210scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN4nano6ranges9subrange_8subrangeIPKcSC_LNS8_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  247|  28.2k|{
  248|  28.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  28.2k|}
_ZN3scn2v26detail15scan_value_implIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT0_EEEEEOSL_SX_:
  228|  28.2k|{
  229|  28.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  28.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  28.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 712, False: 27.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    712|    }                                                  \
  |  |  |  |   70|  28.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  27.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  27.5k|    static_cast<    \
  |  |  247|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  27.5k|    static_cast<    \
  |  |  247|  27.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  28.2k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_LNSA_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESX_NS0_31borrowed_subrange_with_sentinelISR_Xsr6rangesE14borrowed_rangeISR_EEE4typeEE4typeEJDpT_EEEEEOSR_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISR_E4typeEJDpNS1A_IS13_E4typeEEEE:
  116|  4.98k|{
  117|  4.98k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.98k|}
_ZN3scn2v26detail9scan_implIcJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_LNSB_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSM_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEES10_NS0_31borrowed_subrange_with_sentinelISU_Xsr6rangesE14borrowed_rangeISU_EEE4typeEE4typeEJDpT0_EEEEEOSU_T2_NS3_5tupleIJS17_EEE:
   76|  4.98k|{
   77|  4.98k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.98k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.98k|    static_cast<    \
  |  |  247|  4.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.98k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.98k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.98k|    static_cast<    \
  |  |  247|  4.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.98k|    static_cast<    \
  |  |  247|  4.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.98k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSO_ISQ_EEONS0_14scan_arg_storeIT0_JSS_EEE:
   54|  9.97k|{
   55|  9.97k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.54k, False: 1.43k]
  |  |  ------------------
  ------------------
   56|  8.54k|        return unexpected(result.error());
   57|  8.54k|    }
   58|  1.43k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.43k|    static_cast<    \
  |  |  247|  1.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.43k|    static_cast<    \
  |  |  247|  1.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.97k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_LNSB_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESY_NS0_31borrowed_subrange_with_sentinelISS_Xsr6rangesE14borrowed_rangeISS_EEE4typeEE4typeEJDpT_EEEEERKT0_OSS_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISS_E4typeEJDpNS1E_IS14_E4typeEEEE:
  200|  4.98k|{
  201|  4.98k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.98k|                                                      format, {});
  203|  4.98k|}
_ZN3scn2v26detail19scan_localized_implIcJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEENS3_6localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSG_PKSH_lLl4096EEESL_LNSC_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSN_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEES11_NS0_31borrowed_subrange_with_sentinelISV_Xsr6rangesE14borrowed_rangeISV_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSV_T3_NS3_5tupleIJS18_EEE:
  162|  4.98k|{
  163|  4.98k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.98k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.98k|    static_cast<    \
  |  |  247|  4.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.98k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.98k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.98k|    static_cast<    \
  |  |  247|  4.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.98k|    static_cast<    \
  |  |  247|  4.98k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.98k|}
_ZN3scn2v210scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_LNSA_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESX_NS0_31borrowed_subrange_with_sentinelISR_Xsr6rangesE14borrowed_rangeISR_EEE4typeEE4typeEJT_EEEEEOSR_:
  247|    713|{
  248|    713|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|    713|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|    713|}
_ZN3scn2v26detail15scan_value_implIcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_LNSB_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESY_NS0_31borrowed_subrange_with_sentinelISS_Xsr6rangesE14borrowed_rangeISS_EEE4typeEE4typeEJT0_EEEEEOSS_S14_:
  228|    713|{
  229|    713|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|    713|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|    713|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    713|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    713|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    713|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 712, False: 1]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    712|    }                                                  \
  |  |  |  |   70|    713|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      1|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      1|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      1|    static_cast<    \
  |  |  247|      1|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      1|    static_cast<    \
  |  |  247|      1|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|    713|}
_ZN3scn2v26detail9scan_implIwJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEEOSP_T2_NS3_5tupleIJS12_EEE:
   76|  58.5k|{
   77|  58.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|   117k|{
   55|   117k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.9k, False: 103k]
  |  |  ------------------
  ------------------
   56|  13.9k|        return unexpected(result.error());
   57|  13.9k|    }
   58|   103k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   103k|    static_cast<    \
  |  |  247|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   103k|    static_cast<    \
  |  |  247|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   117k|}
_ZN3scn2v26detail19scan_localized_implIwJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEENS3_6localeEN4nano6ranges9subrange_8subrangeIPKwSG_LNSC_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSI_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESW_NS0_31borrowed_subrange_with_sentinelISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSQ_T3_NS3_5tupleIJS13_EEE:
  162|  58.5k|{
  163|  58.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.5k|}
_ZN3scn2v26detail15scan_value_implIwNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJT0_EEEEEOSN_SZ_:
  228|  24.7k|{
  229|  24.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  24.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  24.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.16k, False: 23.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.16k|    }                                                  \
  |  |  |  |   70|  24.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  23.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  23.5k|    static_cast<    \
  |  |  247|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  23.5k|    static_cast<    \
  |  |  247|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  24.7k|}
_ZN3scn2v26detail9scan_implIwJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSF_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT0_EEEEEOSN_T2_NS3_5tupleIJS10_EEE:
   76|  58.5k|{
   77|  58.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSH_ISJ_EEONS0_14scan_arg_storeIT0_JSL_EEE:
   54|   117k|{
   55|   117k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.9k, False: 103k]
  |  |  ------------------
  ------------------
   56|  13.9k|        return unexpected(result.error());
   57|  13.9k|    }
   58|   103k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   103k|    static_cast<    \
  |  |  247|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   103k|    static_cast<    \
  |  |  247|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   117k|}
_ZN3scn2v26detail19scan_localized_implIwJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEENS3_6localeEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSO_T3_NS3_5tupleIJS11_EEE:
  162|  58.5k|{
  163|  58.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.5k|    static_cast<    \
  |  |  247|  58.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.5k|}
_ZN3scn2v26detail15scan_value_implIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT0_EEEEEOSL_SX_:
  228|  24.7k|{
  229|  24.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  24.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  24.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.16k, False: 23.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.16k|    }                                                  \
  |  |  |  |   70|  24.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  23.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  23.5k|    static_cast<    \
  |  |  247|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  23.5k|    static_cast<    \
  |  |  247|  23.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  24.7k|}
_ZN3scn2v26detail9scan_implIwJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_LNSB_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSM_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEES10_NS0_31borrowed_subrange_with_sentinelISU_Xsr6rangesE14borrowed_rangeISU_EEE4typeEE4typeEJDpT0_EEEEEOSU_T2_NS3_5tupleIJS17_EEE:
   76|  39.4k|{
   77|  39.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  39.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.4k|    static_cast<    \
  |  |  247|  39.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  39.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  39.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.4k|    static_cast<    \
  |  |  247|  39.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.4k|    static_cast<    \
  |  |  247|  39.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  39.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSO_ISQ_EEONS0_14scan_arg_storeIT0_JSS_EEE:
   54|  78.8k|{
   55|  78.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.9k, False: 64.9k]
  |  |  ------------------
  ------------------
   56|  13.9k|        return unexpected(result.error());
   57|  13.9k|    }
   58|  64.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  64.9k|    static_cast<    \
  |  |  247|  64.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  64.9k|    static_cast<    \
  |  |  247|  64.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  78.8k|}
_ZN3scn2v26detail19scan_localized_implIwJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEENS3_6localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSG_PKSH_lLl1024EEESL_LNSC_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSN_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEES11_NS0_31borrowed_subrange_with_sentinelISV_Xsr6rangesE14borrowed_rangeISV_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSV_T3_NS3_5tupleIJS18_EEE:
  162|  39.4k|{
  163|  39.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  39.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.4k|    static_cast<    \
  |  |  247|  39.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  39.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  39.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.4k|    static_cast<    \
  |  |  247|  39.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.4k|    static_cast<    \
  |  |  247|  39.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  39.4k|}
_ZN3scn2v26detail15scan_value_implIwNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_LNSB_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESY_NS0_31borrowed_subrange_with_sentinelISS_Xsr6rangesE14borrowed_rangeISS_EEE4typeEE4typeEJT0_EEEEEOSS_S14_:
  228|  16.7k|{
  229|  16.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  16.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  16.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.16k, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.16k|    }                                                  \
  |  |  |  |   70|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  15.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.6k|    static_cast<    \
  |  |  247|  15.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.6k|    static_cast<    \
  |  |  247|  15.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  16.7k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|  10.6k|{
  486|  10.6k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|  10.6k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|  10.6k|    {
  378|  10.6k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|  10.6k|    {
  360|  10.6k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|  10.6k|    {
  129|  10.6k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|  10.6k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  75.7M|    {
  382|  75.7M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 4.38k, False: 75.7M]
  ------------------
  383|  4.38k|            return false;
  384|  4.38k|        }
  385|  75.7M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 75.6M, False: 7.83k]
  ------------------
  386|  75.6M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  75.6M|                                          this->m_current_view.begin(),
  388|  75.6M|                                          this->m_current_view.end());
  389|  75.6M|        }
  390|  75.7M|        m_latest = *m_cursor;
  391|  75.7M|        ++m_cursor;
  392|  75.7M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  75.7M|        return true;
  394|  75.7M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|  10.6k|    {
   49|  10.6k|        SCN_UNUSED(position);
  ------------------
  |  |  227|  10.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|  10.6k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|  95.6k|{
  486|  95.6k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|  95.6k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|  95.6k|    {
  378|  95.6k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|  95.6k|    {
  360|  95.6k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|  95.6k|    {
  129|  95.6k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|  95.6k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   113M|    {
  382|   113M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 8.85k, False: 113M]
  ------------------
  383|  8.85k|            return false;
  384|  8.85k|        }
  385|   113M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 113M, False: 90.4k]
  ------------------
  386|   113M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   113M|                                          this->m_current_view.begin(),
  388|   113M|                                          this->m_current_view.end());
  389|   113M|        }
  390|   113M|        m_latest = *m_cursor;
  391|   113M|        ++m_cursor;
  392|   113M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   113M|        return true;
  394|   113M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|  95.6k|    {
   49|  95.6k|        SCN_UNUSED(position);
  ------------------
  |  |  227|  95.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|  95.6k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  1.28G|    {
  173|  1.28G|        return m_end == nullptr;
  174|  1.28G|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|  78.1k|    {
  189|  78.1k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 78.1k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  78.1k|        return parent()->get_segment_starting_at(position());
  195|  78.1k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|   757M|    {
  183|   757M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   757M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   757M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|   757M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|  78.1k|    {
   79|  78.1k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  78.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.2k, False: 44.8k]
  |  |  ------------------
  ------------------
   80|  78.1k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  33.2k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  33.2k|        }
   83|  44.8k|        const auto start = pos - m_putback_buffer.size();
   84|  44.8k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  78.1k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|   133k|    {
  168|   133k|        return m_position;
  169|   133k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|  32.0k|    {
  101|  32.0k|        return m_is_contiguous;
  102|  32.0k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  4.19G|    {
  173|  4.19G|        return m_end == nullptr;
  174|  4.19G|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.92M|    {
  189|  1.92M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.92M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.92M|        return parent()->get_segment_starting_at(position());
  195|  1.92M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  2.26G|    {
  183|  2.26G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  2.26G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.26G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  2.26G|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.92M|    {
   79|  1.92M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 992k, False: 930k]
  |  |  ------------------
  ------------------
   80|  1.92M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   992k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   992k|        }
   83|   930k|        const auto start = pos - m_putback_buffer.size();
   84|   930k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   930k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   930k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.92M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  3.53M|    {
  168|  3.53M|        return m_position;
  169|  3.53M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|   286k|    {
  101|   286k|        return m_is_contiguous;
  102|   286k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|  10.6k|{
  322|  10.6k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 10.6k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|  10.6k|    return ranges::subrange{forward_iterator{this, 0},
  327|  10.6k|                            ranges_std::default_sentinel};
  328|  10.6k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|  10.6k|    {
  155|  10.6k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  10.6k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  10.6k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  75.6M|    {
  258|  75.6M|        return x.is_at_end();
  259|  75.6M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|   227M|    {
  302|   227M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 227M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|   227M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 227M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|   227M|        return !read_at_position();
  309|   227M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|   454M|    {
  282|   454M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|   454M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   454M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|   454M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 454M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|   454M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|   454M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 378M, False: 75.7M]
  |  |  ------------------
  ------------------
  289|   378M|            return true;
  290|   378M|        }
  291|       |
  292|   151M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 75.7M, False: 75.7M]
  ------------------
  293|  75.7M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 4.38k, False: 75.7M]
  ------------------
  294|  4.38k|                return false;
  295|  4.38k|            }
  296|  75.7M|        }
  297|  75.7M|        return true;
  298|  75.7M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|   605M|    {
   59|   605M|        return m_putback_buffer.size() + m_current_view.size();
   60|   605M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   151M|    {
  269|   151M|        return !x.is_at_end();
  270|   151M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  75.7M|    {
  217|  75.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  75.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  75.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  75.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 75.7M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  75.7M|        auto res = read_at_position();
  226|  75.7M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  75.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  75.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  75.7M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  75.7M|    {
   90|  75.7M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  75.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.6M, False: 41.9k]
  |  |  ------------------
  ------------------
   91|  75.7M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  75.6M|            return m_putback_buffer[pos];
   93|  75.6M|        }
   94|  41.9k|        const auto start = pos - m_putback_buffer.size();
   95|  41.9k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  75.7M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   151M|    {
  203|   151M|        ++m_position;
  204|   151M|        std::ignore = read_at_position();
  205|   151M|        return *this;
  206|   151M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|  52.5k|    {
  252|  52.5k|        return !(lhs == rhs);
  253|  52.5k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  75.7M|    {
  247|  75.7M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 75.7M, False: 0]
  |  Branch (247:46): [True: 29.0k, False: 75.6M]
  ------------------
  248|  75.7M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|  7.12k|    {
  232|  7.12k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  7.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  7.12k|        return *this;
  235|  7.12k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|  9.25k|    {
   54|  9.25k|        sync(0);
   55|  9.25k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|  95.6k|{
  322|  95.6k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 95.6k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|  95.6k|    return ranges::subrange{forward_iterator{this, 0},
  327|  95.6k|                            ranges_std::default_sentinel};
  328|  95.6k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|  95.6k|    {
  155|  95.6k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|  95.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  95.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  95.6k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|  95.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  95.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  95.6k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|   113M|    {
  258|   113M|        return x.is_at_end();
  259|   113M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|   566M|    {
  302|   566M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 566M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|   566M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 566M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|   566M|        return !read_at_position();
  309|   566M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  1.35G|    {
  282|  1.35G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.35G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  1.35G|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 1.35G]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  1.35G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  1.35G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.24G, False: 113M]
  |  |  ------------------
  ------------------
  289|  1.24G|            return true;
  290|  1.24G|        }
  291|       |
  292|   227M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 113M, False: 113M]
  ------------------
  293|   113M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 8.85k, False: 113M]
  ------------------
  294|  8.85k|                return false;
  295|  8.85k|            }
  296|   113M|        }
  297|   113M|        return true;
  298|   113M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  1.58G|    {
   59|  1.58G|        return m_putback_buffer.size() + m_current_view.size();
   60|  1.58G|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   453M|    {
  269|   453M|        return !x.is_at_end();
  270|   453M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|   566M|    {
  217|   566M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|   566M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   566M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|   566M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 566M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|   566M|        auto res = read_at_position();
  226|   566M|        SCN_EXPECT(res);
  ------------------
  |  |  242|   566M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   566M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|   566M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|   566M|    {
   90|   566M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   566M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 339M, False: 226M]
  |  |  ------------------
  ------------------
   91|   566M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|   339M|            return m_putback_buffer[pos];
   93|   339M|        }
   94|   226M|        const auto start = pos - m_putback_buffer.size();
   95|   226M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   226M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   226M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|   566M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|   227M|    {
  203|   227M|        ++m_position;
  204|   227M|        std::ignore = read_at_position();
  205|   227M|        return *this;
  206|   227M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  1.50M|    {
  252|  1.50M|        return !(lhs == rhs);
  253|  1.50M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|   114M|    {
  247|   114M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 114M, False: 0]
  |  Branch (247:46): [True: 753k, False: 113M]
  ------------------
  248|   114M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  5.81k|    {
  232|  5.81k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  5.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  5.81k|        return *this;
  235|  5.81k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|  15.1k|    {
   54|  15.1k|        sync(0);
   55|  15.1k|    }

_ZN3scn2v26detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   90|  28.9k|{
   91|  28.9k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  242|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|       |
   93|      0|    const auto is_trailing_code_unit = [](char ch) {
   94|  28.9k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
   95|  28.9k|    };
   96|       |
   97|  28.9k|    if (input.size() == 1) {
  ------------------
  |  Branch (97:9): [True: 28.9k, False: 0]
  ------------------
   98|  28.9k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (98:13): [True: 0, False: 28.9k]
  ------------------
   99|      0|            SCN_UNLIKELY_ATTR
  100|      0|            return invalid_code_point;
  101|      0|        }
  102|  28.9k|        return static_cast<char32_t>(input[0]);
  103|  28.9k|    }
  104|       |
  105|      0|    if (input.size() == 2) {
  ------------------
  |  Branch (105:9): [True: 0, False: 0]
  ------------------
  106|      0|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (106:13): [True: 0, False: 0]
  ------------------
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|            return invalid_code_point;
  109|      0|        }
  110|      0|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (110:13): [True: 0, False: 0]
  ------------------
  111|      0|            SCN_UNLIKELY_ATTR
  112|      0|            return invalid_code_point;
  113|      0|        }
  114|       |
  115|      0|        char32_t cp{};
  116|      0|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
  117|      0|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
  118|      0|        return cp;
  119|      0|    }
  120|       |
  121|      0|    if (input.size() == 3) {
  ------------------
  |  Branch (121:9): [True: 0, False: 0]
  ------------------
  122|      0|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (122:13): [True: 0, False: 0]
  ------------------
  123|      0|            SCN_UNLIKELY_ATTR
  124|      0|            return invalid_code_point;
  125|      0|        }
  126|      0|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (126:13): [True: 0, False: 0]
  ------------------
  127|      0|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (127:13): [True: 0, False: 0]
  ------------------
  128|      0|            SCN_UNLIKELY_ATTR
  129|      0|            return invalid_code_point;
  130|      0|        }
  131|       |
  132|      0|        char32_t cp{};
  133|      0|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
  134|      0|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
  135|      0|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
  136|      0|        return cp;
  137|      0|    }
  138|       |
  139|      0|    if (input.size() == 4) {
  ------------------
  |  Branch (139:9): [True: 0, False: 0]
  ------------------
  140|      0|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (140:13): [True: 0, False: 0]
  ------------------
  141|      0|            SCN_UNLIKELY_ATTR
  142|      0|            return invalid_code_point;
  143|      0|        }
  144|      0|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (144:13): [True: 0, False: 0]
  ------------------
  145|      0|            SCN_UNLIKELY_ATTR
  146|      0|            return invalid_code_point;
  147|      0|        }
  148|      0|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (148:13): [True: 0, False: 0]
  ------------------
  149|      0|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (149:13): [True: 0, False: 0]
  ------------------
  150|      0|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (150:13): [True: 0, False: 0]
  ------------------
  151|      0|            SCN_UNLIKELY_ATTR
  152|      0|            return invalid_code_point;
  153|      0|        }
  154|       |
  155|      0|        char32_t cp{};
  156|      0|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
  157|      0|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
  158|      0|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
  159|      0|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
  160|      0|        return cp;
  161|      0|    }
  162|       |
  163|      0|    SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  164|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  165|      0|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|  2.55M|{
   72|  2.55M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  2.55M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  2.55M|    }
   75|  2.55M|    else if constexpr (sizeof(U) == 2) {
   76|  2.55M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  2.55M|    }
   78|  2.55M|    else {
   79|       |        // utf-32
   80|  2.55M|        static_assert(sizeof(U) == 4);
   81|  2.55M|        SCN_UNUSED(ch);
   82|  2.55M|        return 1;
   83|  2.55M|    }
   84|  2.55M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|  2.55M|{
   36|  2.55M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|  2.55M|    SCN_GCC_COMPAT_PUSH
   39|  2.55M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|  2.55M|    constexpr char lengths[] =
   41|  2.55M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|  2.55M|        "\1\1\1\1\1\1\1\1"
   43|  2.55M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|  2.55M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|  2.55M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|  2.55M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|  2.55M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|  2.55M|    SCN_GCC_COMPAT_POP
   50|  2.55M|}
_ZN3scn2v26detail32decode_utf_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  247|  28.9k|{
  248|  28.9k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (248:19): [Folded - Ignored]
  ------------------
  249|  28.9k|        return decode_utf8_code_point_exhaustive(input);
  250|  28.9k|    }
  251|  28.9k|    else if constexpr (sizeof(CharT) == 2) {
  252|  28.9k|        return decode_utf16_code_point_exhaustive(input);
  253|  28.9k|    }
  254|  28.9k|    else {
  255|  28.9k|        SCN_EXPECT(input.size() == 1);
  256|  28.9k|        return static_cast<char32_t>(input.front());
  257|  28.9k|    }
  258|  28.9k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|   238M|{
   72|   238M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   238M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   238M|    }
   75|   238M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|   238M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   238M|    }
   78|   238M|    else {
   79|       |        // utf-32
   80|   238M|        static_assert(sizeof(U) == 4);
   81|   238M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|   238M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|   238M|        return 1;
   83|   238M|    }
   84|   238M|}
_ZN3scn2v26detail32decode_utf_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  247|  41.9k|{
  248|  41.9k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (248:19): [Folded - Ignored]
  ------------------
  249|  41.9k|        return decode_utf8_code_point_exhaustive(input);
  250|  41.9k|    }
  251|  41.9k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (251:24): [Folded - Ignored]
  ------------------
  252|  41.9k|        return decode_utf16_code_point_exhaustive(input);
  253|  41.9k|    }
  254|  41.9k|    else {
  255|  41.9k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  242|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  256|      0|        return static_cast<char32_t>(input.front());
  257|  41.9k|    }
  258|  41.9k|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   169k|{
   36|   169k|#define SCN_VISIT(Type)                                         \
   37|   169k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   169k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   169k|    }                                                           \
   40|   169k|    else {                                                      \
   41|   169k|        return vis(monostate_val);                              \
   42|   169k|    }
   43|       |
   44|   169k|    monostate monostate_val{};
   45|       |
   46|   169k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 169k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 169k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 169k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 169k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 169k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 169k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 169k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 169k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 169k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 169k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 169k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 169k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 169k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 169k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 169k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 169k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 169k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 169k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|  84.7k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 84.7k, False: 84.7k]
  ------------------
   84|  84.7k|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|  84.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  84.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  84.7k|    }                                                           \
  |  |   40|  84.7k|    else {                                                      \
  |  |   41|  84.7k|        return vis(monostate_val);                              \
  |  |   42|  84.7k|    }
  ------------------
   85|  84.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 84.7k, False: 84.7k]
  ------------------
   86|  84.7k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  84.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  84.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  84.7k|    }                                                           \
  |  |   40|  84.7k|    else {                                                      \
  |  |   41|  84.7k|        return vis(monostate_val);                              \
  |  |   42|  84.7k|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 169k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 169k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 169k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 169k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 169k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 169k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 169k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   169k|            SCN_CLANG_POP
  114|   169k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   169k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.13k|{
   36|  2.13k|#define SCN_VISIT(Type)                                         \
   37|  2.13k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.13k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.13k|    }                                                           \
   40|  2.13k|    else {                                                      \
   41|  2.13k|        return vis(monostate_val);                              \
   42|  2.13k|    }
   43|       |
   44|  2.13k|    monostate monostate_val{};
   45|       |
   46|  2.13k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 2.13k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.13k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 2.13k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.13k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 2.13k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 2.13k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.13k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 2.13k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.13k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 2.13k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.13k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.13k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.13k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.13k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.13k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.13k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.13k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.13k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.13k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|  2.13k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 2.13k, False: 0]
  ------------------
   86|  2.13k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  2.13k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  2.13k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  2.13k|    }                                                           \
  |  |   40|  2.13k|    else {                                                      \
  |  |   41|  2.13k|        return vis(monostate_val);                              \
  |  |   42|  2.13k|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.13k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.13k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.13k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.13k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.13k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.13k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.13k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.13k|            SCN_CLANG_POP
  114|  2.13k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.13k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   138k|{
   36|   138k|#define SCN_VISIT(Type)                                         \
   37|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   138k|    }                                                           \
   40|   138k|    else {                                                      \
   41|   138k|        return vis(monostate_val);                              \
   42|   138k|    }
   43|       |
   44|   138k|    monostate monostate_val{};
   45|       |
   46|   138k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 138k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 138k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 138k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 138k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 138k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 138k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 138k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 138k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 138k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 138k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 138k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 138k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 138k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 138k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 138k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 138k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 138k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 138k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|  69.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 69.1k, False: 69.1k]
  ------------------
   84|  69.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|  69.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  69.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  69.1k|    }                                                           \
  |  |   40|  69.1k|    else {                                                      \
  |  |   41|  69.1k|        return vis(monostate_val);                              \
  |  |   42|  69.1k|    }
  ------------------
   85|  69.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 69.1k, False: 69.1k]
  ------------------
   86|  69.1k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  69.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  69.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  69.1k|    }                                                           \
  |  |   40|  69.1k|    else {                                                      \
  |  |   41|  69.1k|        return vis(monostate_val);                              \
  |  |   42|  69.1k|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 138k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 138k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 138k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 138k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 138k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 138k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 138k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   138k|            SCN_CLANG_POP
  114|   138k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   138k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  5.70k|{
   36|  5.70k|#define SCN_VISIT(Type)                                         \
   37|  5.70k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  5.70k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  5.70k|    }                                                           \
   40|  5.70k|    else {                                                      \
   41|  5.70k|        return vis(monostate_val);                              \
   42|  5.70k|    }
   43|       |
   44|  5.70k|    monostate monostate_val{};
   45|       |
   46|  5.70k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 5.70k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 5.70k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 5.70k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 5.70k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 5.70k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 5.70k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 5.70k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 5.70k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 5.70k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 5.70k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 5.70k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 5.70k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 5.70k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 5.70k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 5.70k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 5.70k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 5.70k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 5.70k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 5.70k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|  5.70k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 5.70k, False: 0]
  ------------------
   86|  5.70k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  5.70k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.70k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.70k|    }                                                           \
  |  |   40|  5.70k|    else {                                                      \
  |  |   41|  5.70k|        return vis(monostate_val);                              \
  |  |   42|  5.70k|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 5.70k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 5.70k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 5.70k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 5.70k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 5.70k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 5.70k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 5.70k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  5.70k|            SCN_CLANG_POP
  114|  5.70k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  5.70k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   148k|{
   36|   148k|#define SCN_VISIT(Type)                                         \
   37|   148k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   148k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   148k|    }                                                           \
   40|   148k|    else {                                                      \
   41|   148k|        return vis(monostate_val);                              \
   42|   148k|    }
   43|       |
   44|   148k|    monostate monostate_val{};
   45|       |
   46|   148k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 148k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 148k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 148k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 148k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 148k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 148k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 148k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 148k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 148k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 148k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 148k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 148k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 148k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 148k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 148k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 148k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 148k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 148k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 148k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 148k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|  74.2k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 74.2k, False: 74.2k]
  ------------------
   88|  74.2k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|  74.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  74.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  74.2k|    }                                                           \
  |  |   40|  74.2k|    else {                                                      \
  |  |   41|  74.2k|        return vis(monostate_val);                              \
  |  |   42|  74.2k|    }
  ------------------
   89|  74.2k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 74.2k, False: 74.2k]
  ------------------
   90|  74.2k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  74.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  74.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  74.2k|    }                                                           \
  |  |   40|  74.2k|    else {                                                      \
  |  |   41|  74.2k|        return vis(monostate_val);                              \
  |  |   42|  74.2k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 148k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 148k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 148k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 148k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 148k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   148k|            SCN_CLANG_POP
  114|   148k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   148k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   125k|{
   36|   125k|#define SCN_VISIT(Type)                                         \
   37|   125k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   125k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   125k|    }                                                           \
   40|   125k|    else {                                                      \
   41|   125k|        return vis(monostate_val);                              \
   42|   125k|    }
   43|       |
   44|   125k|    monostate monostate_val{};
   45|       |
   46|   125k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 125k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 125k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 125k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 125k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 125k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 125k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 125k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 125k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 125k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 125k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 125k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 125k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 125k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 125k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 125k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 125k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 125k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 125k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 125k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 125k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|  62.9k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 62.9k, False: 62.9k]
  ------------------
   88|  62.9k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|  62.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  62.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  62.9k|    }                                                           \
  |  |   40|  62.9k|    else {                                                      \
  |  |   41|  62.9k|        return vis(monostate_val);                              \
  |  |   42|  62.9k|    }
  ------------------
   89|  62.9k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 62.9k, False: 62.9k]
  ------------------
   90|  62.9k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  62.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  62.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  62.9k|    }                                                           \
  |  |   40|  62.9k|    else {                                                      \
  |  |   41|  62.9k|        return vis(monostate_val);                              \
  |  |   42|  62.9k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 125k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 125k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 125k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 125k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 125k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   125k|            SCN_CLANG_POP
  114|   125k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   125k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  50.3k|{
   36|  50.3k|#define SCN_VISIT(Type)                                         \
   37|  50.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  50.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  50.3k|    }                                                           \
   40|  50.3k|    else {                                                      \
   41|  50.3k|        return vis(monostate_val);                              \
   42|  50.3k|    }
   43|       |
   44|  50.3k|    monostate monostate_val{};
   45|       |
   46|  50.3k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 50.3k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 50.3k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 50.3k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 50.3k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 50.3k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 50.3k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 50.3k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 50.3k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 50.3k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 50.3k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 50.3k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 50.3k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 50.3k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 50.3k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 50.3k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 50.3k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 50.3k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 50.3k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 50.3k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 50.3k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 50.3k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|  50.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 50.3k, False: 0]
  ------------------
   90|  50.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  50.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  50.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  50.3k|    }                                                           \
  |  |   40|  50.3k|    else {                                                      \
  |  |   41|  50.3k|        return vis(monostate_val);                              \
  |  |   42|  50.3k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 50.3k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 50.3k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 50.3k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 50.3k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 50.3k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  50.3k|            SCN_CLANG_POP
  114|  50.3k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  50.3k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  40.6k|{
   36|  40.6k|#define SCN_VISIT(Type)                                         \
   37|  40.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  40.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  40.6k|    }                                                           \
   40|  40.6k|    else {                                                      \
   41|  40.6k|        return vis(monostate_val);                              \
   42|  40.6k|    }
   43|       |
   44|  40.6k|    monostate monostate_val{};
   45|       |
   46|  40.6k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 40.6k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 40.6k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 40.6k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 40.6k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 40.6k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 40.6k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 40.6k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 40.6k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 40.6k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 40.6k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 40.6k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 40.6k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 40.6k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 40.6k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 40.6k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 40.6k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 40.6k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 40.6k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 40.6k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 40.6k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 40.6k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|  40.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 40.6k, False: 0]
  ------------------
   90|  40.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  40.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  40.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  40.6k|    }                                                           \
  |  |   40|  40.6k|    else {                                                      \
  |  |   41|  40.6k|        return vis(monostate_val);                              \
  |  |   42|  40.6k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 40.6k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 40.6k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 40.6k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 40.6k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 40.6k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  40.6k|            SCN_CLANG_POP
  114|  40.6k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  40.6k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   128k|{
  174|   128k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   128k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|   128k|{
  111|   128k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   128k|    auto result = vscan_impl(buffer, format, args);
  114|   128k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.54k, False: 119k]
  |  |  ------------------
  ------------------
  115|  8.54k|        return unexpected(result.error());
  116|  8.54k|    }
  117|   119k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   128k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   128k|{
  192|   128k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   128k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|   128k|{
  127|   128k|#if !SCN_DISABLE_LOCALE
  128|   128k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   128k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   128k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   128k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   128k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.54k, False: 119k]
  |  |  ------------------
  ------------------
  135|  8.54k|        return unexpected(result.error());
  136|  8.54k|    }
  137|   119k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   128k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  56.4k|{
  205|  56.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  56.4k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  56.4k|{
  151|  56.4k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  56.4k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  56.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.42k, False: 55.0k]
  |  |  ------------------
  ------------------
  155|  1.42k|        return unexpected(result.error());
  156|  1.42k|    }
  157|  55.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  56.4k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  4.98k|{
  174|  4.98k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  4.98k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|  4.98k|{
  111|  4.98k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  4.98k|    auto result = vscan_impl(buffer, format, args);
  114|  4.98k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.27k, False: 715]
  |  |  ------------------
  ------------------
  115|  4.27k|        return unexpected(result.error());
  116|  4.27k|    }
  117|    715|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|    715|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.98k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  4.98k|{
  192|  4.98k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  4.98k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|  4.98k|{
  127|  4.98k|#if !SCN_DISABLE_LOCALE
  128|  4.98k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  4.98k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  4.98k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  4.98k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  4.98k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.27k, False: 715]
  |  |  ------------------
  ------------------
  135|  4.27k|        return unexpected(result.error());
  136|  4.27k|    }
  137|    715|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|    715|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  4.98k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|    713|{
  205|    713|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|    713|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|    713|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|    713|{
  151|    713|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|    713|    auto result = detail::vscan_value_impl(buffer, arg);
  154|    713|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|    713|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 712, False: 1]
  |  |  ------------------
  ------------------
  155|    712|        return unexpected(result.error());
  156|    712|    }
  157|      1|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      1|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|    713|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|   117k|{
  111|   117k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   117k|    auto result = vscan_impl(buffer, format, args);
  114|   117k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.9k, False: 103k]
  |  |  ------------------
  ------------------
  115|  13.9k|        return unexpected(result.error());
  116|  13.9k|    }
  117|   103k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   117k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|   117k|{
  127|   117k|#if !SCN_DISABLE_LOCALE
  128|   117k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   117k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   117k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   117k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   117k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.9k, False: 103k]
  |  |  ------------------
  ------------------
  135|  13.9k|        return unexpected(result.error());
  136|  13.9k|    }
  137|   103k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   117k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  49.4k|{
  151|  49.4k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  49.4k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  49.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  49.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.32k, False: 47.1k]
  |  |  ------------------
  ------------------
  155|  2.32k|        return unexpected(result.error());
  156|  2.32k|    }
  157|  47.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  49.4k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|  39.4k|{
  111|  39.4k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  39.4k|    auto result = vscan_impl(buffer, format, args);
  114|  39.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.97k, False: 32.4k]
  |  |  ------------------
  ------------------
  115|  6.97k|        return unexpected(result.error());
  116|  6.97k|    }
  117|  32.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  39.4k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|  39.4k|{
  127|  39.4k|#if !SCN_DISABLE_LOCALE
  128|  39.4k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  39.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  39.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  39.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  39.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  39.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.97k, False: 32.4k]
  |  |  ------------------
  ------------------
  135|  6.97k|        return unexpected(result.error());
  136|  6.97k|    }
  137|  32.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  39.4k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  16.7k|{
  151|  16.7k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  16.7k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  16.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.16k, False: 15.6k]
  |  |  ------------------
  ------------------
  155|  1.16k|        return unexpected(result.error());
  156|  1.16k|    }
  157|  15.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  16.7k|}

_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEEOSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS16_ISZ_E4typeEEEE:
   89|  58.5k|{
   90|  58.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.5k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   117k|{
   45|   117k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   117k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeEN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEELPv0ELSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEERKT0_OSO_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISO_E4typeEJDpNS1A_IS10_E4typeEEEE:
  124|  58.5k|{
  125|  58.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.5k|                                                         format, {});
  127|  58.5k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   117k|{
   61|   117k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   117k|}
_ZN3scn2v210scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJT_EEEEEOSN_:
  158|  24.7k|{
  159|  24.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  24.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  24.7k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  49.4k|{
   73|  49.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  49.4k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
   89|  58.5k|{
   90|  58.5k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.5k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeEN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  124|  58.5k|{
  125|  58.5k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.5k|                                                         format, {});
  127|  58.5k|}
_ZN3scn2v210scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  158|  24.7k|{
  159|  24.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  24.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  24.7k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_LNSA_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESY_NS0_31borrowed_subrange_with_sentinelISS_Xsr6rangesE14borrowed_rangeISS_EEE4typeEE4typeEJDpT_EEEEEOSS_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISS_E4typeEJDpNS1B_IS14_E4typeEEEE:
   89|  39.4k|{
   90|  39.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.4k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  39.4k|{
   45|  39.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  39.4k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_LNSB_13subrange_kindE1EEELPv0ELSN_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESZ_NS0_31borrowed_subrange_with_sentinelIST_Xsr6rangesE14borrowed_rangeIST_EEE4typeEE4typeEJDpT_EEEEERKT0_OST_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityIST_E4typeEJDpNS1F_IS15_E4typeEEEE:
  124|  39.4k|{
  125|  39.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  39.4k|                                                         format, {});
  127|  39.4k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  39.4k|{
   61|  39.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  39.4k|}
_ZN3scn2v210scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_LNSA_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESY_NS0_31borrowed_subrange_with_sentinelISS_Xsr6rangesE14borrowed_rangeISS_EEE4typeEE4typeEJT_EEEEEOSS_:
  158|  16.7k|{
  159|  16.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  16.7k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  16.7k|{
   73|  16.7k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  16.7k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   700k|            {
 2693|   700k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   700k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   700k|            {
 2672|   700k|                return decay_copy(t.begin());
 2673|   700k|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|  6.62M|    {
 2606|  6.62M|        return std::forward<T>(t);
 2607|  6.62M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|   594k|            {
 3178|   594k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|   594k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|   594k|            {
 3158|   594k|                return t.data();
 3159|   594k|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|   594k|    {
 6095|   594k|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 3.37k, False: 591k]
  ------------------
 6096|   594k|                   ? nullptr
 6097|   594k|                   : std::addressof(*ranges::begin(derived()));
 6098|   594k|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|   594k|            {
 3127|   594k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|   594k|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|   594k|            {
 3098|   594k|                return bool((std::forward<T>(t).empty()));
 3099|   594k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  1.23M|        {
 6454|  1.23M|            return data_.begin_ == data_.end_;
 6455|  1.23M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  1.18M|    {
 6049|  1.18M|        return static_cast<const D&>(*this);
 6050|  1.18M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  1.82M|            {
 2693|  1.82M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.82M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  1.82M|            {
 2672|  1.82M|                return decay_copy(t.begin());
 2673|  1.82M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  3.53M|        {
 6444|  3.53M|            return data_.begin_;
 6445|  3.53M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|   594k|            {
 3038|   594k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   594k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   594k|            {
 3000|   594k|                return decay_copy(std::forward<T>(t).size());
 3001|   594k|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  1.84M|    {
 2606|  1.84M|        return std::forward<T>(t);
 2607|  1.84M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  1.30M|        {
 6462|  1.30M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  1.30M|                return data_.size_;
 6464|  1.30M|            }
 6465|  1.30M|            else {
 6466|  1.30M|                return data_.end_ - data_.begin_;
 6467|  1.30M|            }
 6468|  1.30M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|   927k|            {
 3788|   927k|                ranges::advance(x, n);
 3789|   927k|                return x;
 3790|   927k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|   927k|            {
 3678|   927k|                fn::impl(i, n);
 3679|   927k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|   927k|            {
 3562|   927k|                r += n;
 3563|   927k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  1.57M|            {
 2693|  1.57M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.57M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  1.57M|            {
 2672|  1.57M|                return decay_copy(t.begin());
 2673|  1.57M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   299k|            {
 2759|   299k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   299k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|   299k|            {
 2739|   299k|                return decay_copy(std::forward<T>(t).end());
 2740|   299k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.79M|        {
 6449|  1.79M|            return data_.end_;
 6450|  1.79M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  1.00M|            {
 2759|  1.00M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.00M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  1.00M|            {
 2739|  1.00M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.00M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  2.07M|        {
 6375|  2.07M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  2.07M|        {
 6294|  2.07M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  9.25k|            {
 2693|  9.25k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.25k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|  9.25k|            {
 2672|  9.25k|                return decay_copy(t.begin());
 2673|  9.25k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  75.7M|    {
 2606|  75.7M|        return std::forward<T>(t);
 2607|  75.7M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  12.1k|            {
 2693|  12.1k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  12.1k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  12.1k|            {
 2672|  12.1k|                return decay_copy(t.begin());
 2673|  12.1k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  13.5k|        {
 6444|  13.5k|            return data_.begin_;
 6445|  13.5k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  75.7M|            {
 2759|  75.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  75.7M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  75.7M|            {
 2739|  75.7M|                return decay_copy(std::forward<T>(t).end());
 2740|  75.7M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  75.7M|        {
 6449|  75.7M|            return data_.end_;
 6450|  75.7M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  1.43k|            {
 3788|  1.43k|                ranges::advance(x, n);
 3789|  1.43k|                return x;
 3790|  1.43k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  1.43k|            {
 3678|  1.43k|                fn::impl(i, n);
 3679|  1.43k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  1.43k|            {
 3562|  1.43k|                r += n;
 3563|  1.43k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  10.6k|            {
 2759|  10.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.6k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  10.6k|            {
 2739|  10.6k|                return decay_copy(std::forward<T>(t).end());
 2740|  10.6k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|  12.1k|        {
 6375|  12.1k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|  12.1k|        {
 6294|  12.1k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  1.43k|            {
 2693|  1.43k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.43k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  1.43k|            {
 2672|  1.43k|                return decay_copy(t.begin());
 2673|  1.43k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   198k|            {
 2693|   198k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   198k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   198k|            {
 2672|   198k|                return decay_copy(t.begin());
 2673|   198k|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|  15.6M|    {
 2606|  15.6M|        return std::forward<T>(t);
 2607|  15.6M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|   283k|            {
 3178|   283k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|   283k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|   283k|            {
 3158|   283k|                return t.data();
 3159|   283k|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|   283k|    {
 6095|   283k|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 4.47k, False: 279k]
  ------------------
 6096|   283k|                   ? nullptr
 6097|   283k|                   : std::addressof(*ranges::begin(derived()));
 6098|   283k|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|   283k|            {
 3127|   283k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|   283k|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|   283k|            {
 3098|   283k|                return bool((std::forward<T>(t).empty()));
 3099|   283k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|   536k|        {
 6454|   536k|            return data_.begin_ == data_.end_;
 6455|   536k|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|   562k|    {
 6049|   562k|        return static_cast<const D&>(*this);
 6050|   562k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  1.61M|            {
 2693|  1.61M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.61M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  1.61M|            {
 2672|  1.61M|                return decay_copy(t.begin());
 2673|  1.61M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  2.98M|        {
 6444|  2.98M|            return data_.begin_;
 6445|  2.98M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|   283k|            {
 3038|   283k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   283k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   283k|            {
 3000|   283k|                return decay_copy(std::forward<T>(t).size());
 3001|   283k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|   536k|        {
 6462|   536k|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|   536k|                return data_.size_;
 6464|   536k|            }
 6465|   536k|            else {
 6466|   536k|                return data_.end_ - data_.begin_;
 6467|   536k|            }
 6468|   536k|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|   253k|            {
 3788|   253k|                ranges::advance(x, n);
 3789|   253k|                return x;
 3790|   253k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|   253k|            {
 3678|   253k|                fn::impl(i, n);
 3679|   253k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|   253k|            {
 3562|   253k|                r += n;
 3563|   253k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  1.23M|            {
 2693|  1.23M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.23M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  1.23M|            {
 2672|  1.23M|                return decay_copy(t.begin());
 2673|  1.23M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  6.18M|            {
 2759|  6.18M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.18M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  6.18M|            {
 2739|  6.18M|                return decay_copy(std::forward<T>(t).end());
 2740|  6.18M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  11.8M|        {
 6449|  11.8M|            return data_.end_;
 6450|  11.8M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|   946k|            {
 2759|   946k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   946k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|   946k|            {
 2739|   946k|                return decay_copy(std::forward<T>(t).end());
 2740|   946k|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  1.95M|        {
 6375|  1.95M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  1.95M|        {
 6294|  1.95M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  15.1k|            {
 2693|  15.1k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  15.1k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|  15.1k|            {
 2672|  15.1k|                return decay_copy(t.begin());
 2673|  15.1k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|   114M|    {
 2606|   114M|        return std::forward<T>(t);
 2607|   114M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   176k|            {
 2693|   176k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   176k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   176k|            {
 2672|   176k|                return decay_copy(t.begin());
 2673|   176k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   256k|        {
 6444|   256k|            return data_.begin_;
 6445|   256k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   113M|            {
 2759|   113M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   113M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   113M|            {
 2739|   113M|                return decay_copy(std::forward<T>(t).end());
 2740|   113M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   113M|        {
 6449|   113M|            return data_.end_;
 6450|   113M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  80.5k|            {
 3788|  80.5k|                ranges::advance(x, n);
 3789|  80.5k|                return x;
 3790|  80.5k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  80.5k|            {
 3678|  80.5k|                fn::impl(i, n);
 3679|  80.5k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  80.5k|            {
 3562|  80.5k|                r += n;
 3563|  80.5k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  95.6k|            {
 2759|  95.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  95.6k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  95.6k|            {
 2739|  95.6k|                return decay_copy(std::forward<T>(t).end());
 2740|  95.6k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   176k|        {
 6375|   176k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   176k|        {
 6294|   176k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  80.5k|            {
 2693|  80.5k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  80.5k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  80.5k|            {
 2672|  80.5k|                return decay_copy(t.begin());
 2673|  80.5k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|   141k|        {
 6444|   141k|            return data_.begin_;
 6445|   141k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  3.15M|        {
 6444|  3.15M|            return data_.begin_;
 6445|  3.15M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  1.28M|    {
 6044|  1.28M|        return static_cast<D&>(*this);
 6045|  1.28M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|   640k|            {
 3098|   640k|                return bool((std::forward<T>(t).empty()));
 3099|   640k|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|   640k|            {
 3127|   640k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|   640k|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|   640k|    {
 6085|   640k|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 640k]
  ------------------
 6086|   640k|                   ? nullptr
 6087|   640k|                   : std::addressof(*ranges::begin(derived()));
 6088|   640k|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  1.22M|            {
 2739|  1.22M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.22M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  1.22M|            {
 2759|  1.22M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.22M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|   505k|    {
 6044|   505k|        return static_cast<D&>(*this);
 6045|   505k|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|   252k|            {
 3098|   252k|                return bool((std::forward<T>(t).empty()));
 3099|   252k|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|   252k|            {
 3127|   252k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|   252k|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|   252k|    {
 6085|   252k|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 252k]
  ------------------
 6086|   252k|                   ? nullptr
 6087|   252k|                   : std::addressof(*ranges::begin(derived()));
 6088|   252k|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  5.45M|            {
 2739|  5.45M|                return decay_copy(std::forward<T>(t).end());
 2740|  5.45M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  5.45M|            {
 2759|  5.45M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  5.45M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|   714k|            {
 3038|   714k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   714k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|   714k|            {
 3000|   714k|                return decay_copy(std::forward<T>(t).size());
 3001|   714k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|   640k|            {
 3178|   640k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|   640k|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|   640k|            {
 3158|   640k|                return t.data();
 3159|   640k|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|   280k|    {
 2606|   280k|        return std::forward<T>(t);
 2607|   280k|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  73.7k|            {
 3077|  73.7k|                return fn::impl(std::forward<T>(t));
 3078|  73.7k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  73.7k|            {
 3067|  73.7k|                return static_cast<ssize_return_t<T>>(
 3068|  73.7k|                    ranges::size(std::forward<T>(t)));
 3069|  73.7k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKcS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbcESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  4.36k|        {
 6793|  4.36k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  4.36k|                                    proj);
 6795|  4.36k|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_N3scn2v24impl12function_refIFbcESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  4.36k|        {
 6761|  10.8k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 10.8k, False: 28]
  ------------------
 6762|  10.8k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 4.33k, False: 6.52k]
  ------------------
 6763|  4.33k|                    return first;
 6764|  4.33k|                }
 6765|  6.52k|                ++first;
 6766|  6.52k|            }
 6767|     28|            return first;
 6768|  4.36k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  10.8k|            {
 1300|  10.8k|                return fn::impl(std::forward<F>(f),
 1301|  10.8k|                                std::forward<Args>(args)...);
 1302|  10.8k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  10.8k|            {
 1289|  10.8k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  10.8k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  3.16M|            {
 1300|  3.16M|                return fn::impl(std::forward<F>(f),
 1301|  3.16M|                                std::forward<Args>(args)...);
 1302|  3.16M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  3.16M|            {
 1289|  3.16M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  3.16M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  3.16M|    {
 1142|  3.16M|        return std::forward<T>(t);
 1143|  3.16M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|   149k|            {
 3178|   149k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|   149k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|   149k|            {
 3158|   149k|                return t.data();
 3159|   149k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|   149k|            {
 3038|   149k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   149k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESD_E4typeEOSF_NS1_12priority_tagILm2EEE:
 2999|   149k|            {
 3000|   149k|                return decay_copy(std::forward<T>(t).size());
 3001|   149k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  1.26M|            {
 3756|  1.26M|                return fn::impl(std::move(first), std::move(last));
 3757|  1.26M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  1.26M|            {
 3716|  1.26M|                return s - i;
 3717|  1.26M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  56.1k|        {
 6375|  56.1k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  56.1k|        {
 6294|  56.1k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  43.4k|            {
 2693|  43.4k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  43.4k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  43.4k|            {
 2672|  43.4k|                return decay_copy(t.begin());
 2673|  43.4k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|   132k|    {
 2606|   132k|        return std::forward<T>(t);
 2607|   132k|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  87.9k|            {
 2759|  87.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  87.9k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  87.9k|            {
 2739|  87.9k|                return decay_copy(std::forward<T>(t).end());
 2740|  87.9k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  2.79M|    {
 2606|  2.79M|        return std::forward<T>(t);
 2607|  2.79M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|   115k|        {
 6449|   115k|            return data_.end_;
 6450|   115k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  82.2k|        {
 6444|  82.2k|            return data_.begin_;
 6445|  82.2k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  82.2k|        {
 6449|  82.2k|            return data_.end_;
 6450|  82.2k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  29.7k|        {
 6375|  29.7k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  29.7k|        {
 6294|  29.7k|        }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|  2.84k|        {
 6793|  2.84k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  2.84k|                                    proj);
 6795|  2.84k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  2.84k|        {
 6761|  4.27k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 4.26k, False: 2]
  ------------------
 6762|  4.26k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 2.84k, False: 1.42k]
  ------------------
 6763|  2.84k|                    return first;
 6764|  2.84k|                }
 6765|  1.42k|                ++first;
 6766|  1.42k|            }
 6767|      2|            return first;
 6768|  2.84k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  4.26k|            {
 1300|  4.26k|                return fn::impl(std::forward<F>(f),
 1301|  4.26k|                                std::forward<Args>(args)...);
 1302|  4.26k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  4.26k|            {
 1289|  4.26k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  4.26k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  4.26k|            {
 1300|  4.26k|                return fn::impl(std::forward<F>(f),
 1301|  4.26k|                                std::forward<Args>(args)...);
 1302|  4.26k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  4.26k|            {
 1289|  4.26k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  4.26k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|  4.26k|    {
 1142|  4.26k|        return std::forward<T>(t);
 1143|  4.26k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  27.0k|            {
 2759|  27.0k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  27.0k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  27.0k|            {
 2739|  27.0k|                return decay_copy(std::forward<T>(t).end());
 2740|  27.0k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  89.3k|            {
 2693|  89.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  89.3k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  89.3k|            {
 2672|  89.3k|                return decay_copy(t.begin());
 2673|  89.3k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__15decayIT_E4typeEOSD_:
 2605|  57.4k|    {
 2606|  57.4k|        return std::forward<T>(t);
 2607|  57.4k|    }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__15decayIT_E4typeEOSI_:
 2605|  19.1k|    {
 2606|  19.1k|        return std::forward<T>(t);
 2607|  19.1k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  38.2k|            {
 2693|  38.2k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  38.2k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  38.2k|            {
 2672|  38.2k|                return decay_copy(t.begin());
 2673|  38.2k|            }
_ZNK4nano6ranges6detail4end_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  19.1k|            {
 2759|  19.1k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  19.1k|            }
_ZN4nano6ranges6detail4end_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSQ_NS1_12priority_tagILm1EEE:
 2738|  19.1k|            {
 2739|  19.1k|                return decay_copy(std::forward<T>(t).end());
 2740|  19.1k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  9.57k|            {
 2693|  9.57k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.57k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  9.57k|            {
 2672|  9.57k|                return decay_copy(t.begin());
 2673|  9.57k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_LNS0_13subrange_kindE0EE5beginEv:
 6443|  9.57k|        {
 6444|  9.57k|            return data_.begin_;
 6445|  9.57k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  9.57k|            {
 2759|  9.57k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  9.57k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEESE_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  9.57k|            {
 2739|  9.57k|                return decay_copy(std::forward<T>(t).end());
 2740|  9.57k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_LNS0_13subrange_kindE0EE3endEv:
 6448|  9.57k|        {
 6449|  9.57k|            return data_.end_;
 6450|  9.57k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_LNS0_13subrange_kindE0EEC2ISA_Lb0EvEET_SA_:
 6374|  9.57k|        {
 6375|  9.57k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_Lb0EEC2EOSA_SC_:
 6293|  9.57k|        {
 6294|  9.57k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EESN_E4typeESN_SO_:
 3797|  19.1k|            {
 3798|  19.1k|                ranges::advance(x, bound);
 3799|  19.1k|                return x;
 3800|  19.1k|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EEvE4typeERSN_SO_:
 3685|  19.1k|            {
 3686|  19.1k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  19.1k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEEvRT_T0_NS1_12priority_tagILm0EEE:
 3609|  19.1k|            {
 3610|  1.40M|                while (i != bound) {
  ------------------
  |  Branch (3610:24): [True: 1.38M, False: 19.1k]
  ------------------
 3611|  1.38M|                    ++i;
 3612|  1.38M|                }
 3613|  19.1k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEEEENSt3__15decayIT_E4typeEOSG_:
 2605|  5.69k|    {
 2606|  5.69k|        return std::forward<T>(t);
 2607|  5.69k|    }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS4_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEE8sentinelILb1EEEEENSt3__15decayIT_E4typeEOSL_:
 2605|  1.42k|    {
 2606|  1.42k|        return std::forward<T>(t);
 2607|  1.42k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS6_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSK_:
 2692|  2.84k|            {
 2693|  2.84k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.84k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS6_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESN_E4typeEOSM_NS1_12priority_tagILm1EEE:
 2671|  2.84k|            {
 2672|  2.84k|                return decay_copy(t.begin());
 2673|  2.84k|            }
_ZNK4nano6ranges6detail4end_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS6_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSK_:
 2758|  1.42k|            {
 2759|  1.42k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.42k|            }
_ZN4nano6ranges6detail4end_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS6_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSI_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISE_SF_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOST_NS1_12priority_tagILm1EEE:
 2738|  1.42k|            {
 2739|  1.42k|                return decay_copy(std::forward<T>(t).end());
 2740|  1.42k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS8_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEESH_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSL_:
 2692|  1.42k|            {
 2693|  1.42k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.42k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS8_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEESH_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESO_E4typeEOSN_NS1_12priority_tagILm1EEE:
 2671|  1.42k|            {
 2672|  1.42k|                return decay_copy(t.begin());
 2673|  1.42k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEESD_LNS0_13subrange_kindE0EE5beginEv:
 6443|  1.42k|        {
 6444|  1.42k|            return data_.begin_;
 6445|  1.42k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS8_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEESH_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSL_:
 2758|  1.42k|            {
 2759|  1.42k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.42k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS8_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEESH_LNS0_13subrange_kindE0EEESH_SH_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSP_NS1_12priority_tagILm1EEE:
 2738|  1.42k|            {
 2739|  1.42k|                return decay_copy(std::forward<T>(t).end());
 2740|  1.42k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEESD_LNS0_13subrange_kindE0EE3endEv:
 6448|  1.42k|        {
 6449|  1.42k|            return data_.end_;
 6450|  1.42k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEESD_LNS0_13subrange_kindE0EEC2ISD_Lb0EvEET_SD_:
 6374|  1.42k|        {
 6375|  1.42k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEESD_Lb0EEC2EOSD_SF_:
 6293|  1.42k|        {
 6294|  1.42k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS6_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEENS7_15take_width_viewINS0_9subrange_8subrangeISD_SE_LNS0_13subrange_kindE0EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SQ_EESQ_E4typeESQ_SR_:
 3797|  1.42k|            {
 3798|  1.42k|                ranges::advance(x, bound);
 3799|  1.42k|                return x;
 3800|  1.42k|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS6_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEENS7_15take_width_viewINS0_9subrange_8subrangeISD_SE_LNS0_13subrange_kindE0EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SQ_EEvE4typeERSQ_SR_:
 3685|  1.42k|            {
 3686|  1.42k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.42k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS6_6detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tEEENS7_15take_width_viewINS0_9subrange_8subrangeISD_SE_LNS0_13subrange_kindE0EEEE8sentinelILb1EEEEEvRT_T0_NS1_12priority_tagILm0EEE:
 3609|  1.42k|            {
 3610|  75.6M|                while (i != bound) {
  ------------------
  |  Branch (3610:24): [True: 75.6M, False: 1.42k]
  ------------------
 3611|  75.6M|                    ++i;
 3612|  75.6M|                }
 3613|  1.42k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|   252k|            {
 3178|   252k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|   252k|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|   252k|            {
 3158|   252k|                return t.data();
 3159|   252k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|   252k|            {
 3038|   252k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   252k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|   252k|            {
 3000|   252k|                return decay_copy(std::forward<T>(t).size());
 3001|   252k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKwS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbwESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  5.78k|        {
 6793|  5.78k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  5.78k|                                    proj);
 6795|  5.78k|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKwS5_N3scn2v24impl12function_refIFbwESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  5.78k|        {
 6761|  10.8k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 10.7k, False: 44]
  ------------------
 6762|  10.7k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 5.74k, False: 5.03k]
  ------------------
 6763|  5.74k|                    return first;
 6764|  5.74k|                }
 6765|  5.03k|                ++first;
 6766|  5.03k|            }
 6767|     44|            return first;
 6768|  5.78k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  10.7k|            {
 1300|  10.7k|                return fn::impl(std::forward<F>(f),
 1301|  10.7k|                                std::forward<Args>(args)...);
 1302|  10.7k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  10.7k|            {
 1289|  10.7k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  10.7k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  10.7k|            {
 1300|  10.7k|                return fn::impl(std::forward<F>(f),
 1301|  10.7k|                                std::forward<Args>(args)...);
 1302|  10.7k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  10.7k|            {
 1289|  10.7k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  10.7k|            }
_ZNK4nano6ranges8identityclIRKwEEOT_S6_:
 1141|  10.7k|    {
 1142|  10.7k|        return std::forward<T>(t);
 1143|  10.7k|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|   131k|            {
 3178|   131k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|   131k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|   131k|            {
 3158|   131k|                return t.data();
 3159|   131k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|   131k|            {
 3038|   131k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   131k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESD_E4typeEOSF_NS1_12priority_tagILm2EEE:
 2999|   131k|            {
 3000|   131k|                return decay_copy(std::forward<T>(t).size());
 3001|   131k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|   259k|            {
 3756|   259k|                return fn::impl(std::move(first), std::move(last));
 3757|   259k|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|   259k|            {
 3716|   259k|                return s - i;
 3717|   259k|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.13M|        {
 6375|  1.13M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.13M|        {
 6294|  1.13M|        }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__15decayIT_E4typeEOSD_:
 2605|  56.7k|    {
 2606|  56.7k|        return std::forward<T>(t);
 2607|  56.7k|    }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__15decayIT_E4typeEOSI_:
 2605|  18.9k|    {
 2606|  18.9k|        return std::forward<T>(t);
 2607|  18.9k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  37.8k|            {
 2693|  37.8k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  37.8k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  37.8k|            {
 2672|  37.8k|                return decay_copy(t.begin());
 2673|  37.8k|            }
_ZNK4nano6ranges6detail4end_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  18.9k|            {
 2759|  18.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  18.9k|            }
_ZN4nano6ranges6detail4end_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSQ_NS1_12priority_tagILm1EEE:
 2738|  18.9k|            {
 2739|  18.9k|                return decay_copy(std::forward<T>(t).end());
 2740|  18.9k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  9.46k|            {
 2693|  9.46k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.46k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  9.46k|            {
 2672|  9.46k|                return decay_copy(t.begin());
 2673|  9.46k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_LNS0_13subrange_kindE0EE5beginEv:
 6443|  9.46k|        {
 6444|  9.46k|            return data_.begin_;
 6445|  9.46k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  9.46k|            {
 2759|  9.46k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  9.46k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEESE_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  9.46k|            {
 2739|  9.46k|                return decay_copy(std::forward<T>(t).end());
 2740|  9.46k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_LNS0_13subrange_kindE0EE3endEv:
 6448|  9.46k|        {
 6449|  9.46k|            return data_.end_;
 6450|  9.46k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_LNS0_13subrange_kindE0EEC2ISA_Lb0EvEET_SA_:
 6374|  9.46k|        {
 6375|  9.46k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_Lb0EEC2EOSA_SC_:
 6293|  9.46k|        {
 6294|  9.46k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EESN_E4typeESN_SO_:
 3797|  18.9k|            {
 3798|  18.9k|                ranges::advance(x, bound);
 3799|  18.9k|                return x;
 3800|  18.9k|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EEvE4typeERSN_SO_:
 3685|  18.9k|            {
 3686|  18.9k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  18.9k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEEvRT_T0_NS1_12priority_tagILm0EEE:
 3609|  18.9k|            {
 3610|  1.12M|                while (i != bound) {
  ------------------
  |  Branch (3610:24): [True: 1.10M, False: 18.9k]
  ------------------
 3611|  1.10M|                    ++i;
 3612|  1.10M|                }
 3613|  18.9k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   615k|            {
 2693|   615k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   615k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   615k|            {
 2672|   615k|                return decay_copy(t.begin());
 2673|   615k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  3.11M|    {
 2606|  3.11M|        return std::forward<T>(t);
 2607|  3.11M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.93M|            {
 2759|  1.93M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.93M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.93M|            {
 2739|  1.93M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.93M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  2.68M|        {
 6449|  2.68M|            return data_.end_;
 6450|  2.68M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  2.32M|        {
 6444|  2.32M|            return data_.begin_;
 6445|  2.32M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  2.32M|        {
 6449|  2.32M|            return data_.end_;
 6450|  2.32M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   832k|        {
 6375|   832k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   832k|        {
 6294|   832k|        }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|  4.64k|        {
 6793|  4.64k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  4.64k|                                    proj);
 6795|  4.64k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  4.64k|        {
 6761|  9.29k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 9.28k, False: 4]
  ------------------
 6762|  9.28k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 4.64k, False: 4.64k]
  ------------------
 6763|  4.64k|                    return first;
 6764|  4.64k|                }
 6765|  4.64k|                ++first;
 6766|  4.64k|            }
 6767|      4|            return first;
 6768|  4.64k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  9.28k|            {
 1300|  9.28k|                return fn::impl(std::forward<F>(f),
 1301|  9.28k|                                std::forward<Args>(args)...);
 1302|  9.28k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  9.28k|            {
 1289|  9.28k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  9.28k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  9.28k|            {
 1300|  9.28k|                return fn::impl(std::forward<F>(f),
 1301|  9.28k|                                std::forward<Args>(args)...);
 1302|  9.28k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  9.28k|            {
 1289|  9.28k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  9.28k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|  9.28k|    {
 1142|  9.28k|        return std::forward<T>(t);
 1143|  9.28k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   744k|            {
 2759|   744k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   744k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   744k|            {
 2739|   744k|                return decay_copy(std::forward<T>(t).end());
 2740|   744k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  2.49M|            {
 2693|  2.49M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.49M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.49M|            {
 2672|  2.49M|                return decay_copy(t.begin());
 2673|  2.49M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEEEENSt3__15decayIT_E4typeEOSG_:
 2605|  9.29k|    {
 2606|  9.29k|        return std::forward<T>(t);
 2607|  9.29k|    }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS4_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEE8sentinelILb1EEEEENSt3__15decayIT_E4typeEOSL_:
 2605|  2.32k|    {
 2606|  2.32k|        return std::forward<T>(t);
 2607|  2.32k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS6_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSK_:
 2692|  4.64k|            {
 2693|  4.64k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.64k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS6_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESN_E4typeEOSM_NS1_12priority_tagILm1EEE:
 2671|  4.64k|            {
 2672|  4.64k|                return decay_copy(t.begin());
 2673|  4.64k|            }
_ZNK4nano6ranges6detail4end_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS6_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSK_:
 2758|  2.32k|            {
 2759|  2.32k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.32k|            }
_ZN4nano6ranges6detail4end_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeINS6_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSI_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISE_SF_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOST_NS1_12priority_tagILm1EEE:
 2738|  2.32k|            {
 2739|  2.32k|                return decay_copy(std::forward<T>(t).end());
 2740|  2.32k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS8_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEESH_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSL_:
 2692|  2.32k|            {
 2693|  2.32k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.32k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS8_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEESH_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESO_E4typeEOSN_NS1_12priority_tagILm1EEE:
 2671|  2.32k|            {
 2672|  2.32k|                return decay_copy(t.begin());
 2673|  2.32k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEESD_LNS0_13subrange_kindE0EE5beginEv:
 6443|  2.32k|        {
 6444|  2.32k|            return data_.begin_;
 6445|  2.32k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS8_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEESH_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSL_:
 2758|  2.32k|            {
 2759|  2.32k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.32k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS8_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEESH_LNS0_13subrange_kindE0EEESH_SH_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSP_NS1_12priority_tagILm1EEE:
 2738|  2.32k|            {
 2739|  2.32k|                return decay_copy(std::forward<T>(t).end());
 2740|  2.32k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEESD_LNS0_13subrange_kindE0EE3endEv:
 6448|  2.32k|        {
 6449|  2.32k|            return data_.end_;
 6450|  2.32k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEESD_LNS0_13subrange_kindE0EEC2ISD_Lb0EvEET_SD_:
 6374|  2.32k|        {
 6375|  2.32k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS4_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEESD_Lb0EEC2EOSD_SF_:
 6293|  2.32k|        {
 6294|  2.32k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS6_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEENS7_15take_width_viewINS0_9subrange_8subrangeISD_SE_LNS0_13subrange_kindE0EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SQ_EESQ_E4typeESQ_SR_:
 3797|  2.32k|            {
 3798|  2.32k|                ranges::advance(x, bound);
 3799|  2.32k|                return x;
 3800|  2.32k|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS6_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEENS7_15take_width_viewINS0_9subrange_8subrangeISD_SE_LNS0_13subrange_kindE0EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SQ_EEvE4typeERSQ_SR_:
 3685|  2.32k|            {
 3686|  2.32k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  2.32k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS6_6detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tEEENS7_15take_width_viewINS0_9subrange_8subrangeISD_SE_LNS0_13subrange_kindE0EEEE8sentinelILb1EEEEEvRT_T0_NS1_12priority_tagILm0EEE:
 3609|  2.32k|            {
 3610|   112M|                while (i != bound) {
  ------------------
  |  Branch (3610:24): [True: 112M, False: 2.32k]
  ------------------
 3611|   112M|                    ++i;
 3612|   112M|                }
 3613|  2.32k|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_1EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|   379k|        {
 6793|   379k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   379k|                                    proj);
 6795|   379k|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_1NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   379k|        {
 6761|  2.30M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 2.16M, False: 139k]
  ------------------
 6762|  2.16M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 239k, False: 1.92M]
  ------------------
 6763|   239k|                    return first;
 6764|   239k|                }
 6765|  1.92M|                ++first;
 6766|  1.92M|            }
 6767|   139k|            return first;
 6768|   379k|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  2.16M|            {
 1300|  2.16M|                return fn::impl(std::forward<F>(f),
 1301|  2.16M|                                std::forward<Args>(args)...);
 1302|  2.16M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  2.16M|            {
 1289|  2.16M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  2.16M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|   298k|        {
 6793|   298k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   298k|                                    proj);
 6795|   298k|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   298k|        {
 6761|  1.05M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 996k, False: 55.0k]
  ------------------
 6762|   996k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 243k, False: 753k]
  ------------------
 6763|   243k|                    return first;
 6764|   243k|                }
 6765|   753k|                ++first;
 6766|   753k|            }
 6767|  55.0k|            return first;
 6768|   298k|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|   996k|            {
 1300|   996k|                return fn::impl(std::forward<F>(f),
 1301|   996k|                                std::forward<Args>(args)...);
 1302|   996k|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|   996k|            {
 1289|   996k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   996k|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|  11.1k|{
   50|  11.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  11.1k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
   49|  18.7k|{
   50|  18.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  18.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  18.7k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
   49|  6.18k|{
   50|  6.18k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  6.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  6.18k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|   809k|    {
 1191|   809k|        return has_value();
 1192|   809k|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  1.59M|    {
  189|  1.59M|        return m_has_value;
  190|  1.59M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  73.0k|    {
 1197|  73.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  73.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  73.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  73.0k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  73.0k|    {
  172|  73.0k|        return m_unexpected;
  173|  73.0k|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|   517k|    {
   72|   517k|        return m_unexpected;
   73|   517k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|   252k|    {
   58|   252k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   252k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   252k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|  18.5k|    {
 1078|  18.5k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|  18.5k|    {
  151|  18.5k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|   302k|    {
   67|   302k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   302k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   302k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   313k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|   712k|    {
 1251|   712k|        return value();
 1252|   712k|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|   712k|    {
 1221|   712k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   712k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   712k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   712k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|   712k|    {
  155|   712k|        return m_value;
  156|   712k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|   294k|    {
 1034|   294k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|   294k|    {
  142|   294k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   313k|    {
 1191|   313k|        return has_value();
 1192|   313k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   627k|    {
  189|   627k|        return m_has_value;
  190|   627k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  18.5k|    {
 1197|  18.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  18.5k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  18.5k|    {
  172|  18.5k|        return m_unexpected;
  173|  18.5k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  9.25k|    {
 1078|  9.25k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  9.25k|    {
  312|  9.25k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  9.25k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  9.25k|    {
  373|  9.25k|        scn::detail::construct_at(unexpected_ptr(),
  374|  9.25k|                                  std::forward<Args>(args)...);
  375|  9.25k|        m_has_value = false;
  376|  9.25k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|  48.7k|{
  102|  48.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  48.7k|        T(std::forward<Args>(args)...);
  104|  48.7k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  18.5k|    {
  403|  18.5k|        return reinterpret_cast<unexpected<E>*>(
  404|  18.5k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  18.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  18.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   156k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   156k|    {
  317|   156k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 147k, False: 9.25k]
  ------------------
  318|   147k|            destroy_value();
  319|   147k|        }
  320|  9.25k|        else {
  321|  9.25k|            destroy_unexpected();
  322|  9.25k|        }
  323|   156k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   461k|    {
  361|   461k|        return m_has_value;
  362|   461k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   147k|    {
  380|   147k|        scn::detail::destroy_at(value_ptr());
  381|   147k|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEEEvPT_:
  107|   147k|{
  108|   147k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   147k|        for (auto& elem : *p) {
  110|   147k|            scn::detail::destroy_at(std::addressof(elem));
  111|   147k|        }
  112|   147k|    }
  113|   147k|    else {
  114|   147k|        p->~T();
  115|   147k|    }
  116|   147k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   442k|    {
  390|   442k|        return reinterpret_cast<T*>(
  391|   442k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   442k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   442k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  9.25k|    {
  384|  9.25k|        scn::detail::destroy_at(unexpected_ptr());
  385|  9.25k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|  48.7k|{
  108|  48.7k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  48.7k|        for (auto& elem : *p) {
  110|  48.7k|            scn::detail::destroy_at(std::addressof(elem));
  111|  48.7k|        }
  112|  48.7k|    }
  113|  48.7k|    else {
  114|  48.7k|        p->~T();
  115|  48.7k|    }
  116|  48.7k|}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|   239k|    {
 1251|   239k|        return value();
 1252|   239k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|   294k|    {
 1221|   294k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   294k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   294k|    {
  155|   294k|        return m_value;
  156|   294k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|   147k|    {
 1034|   147k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|   147k|    {
  303|   147k|        construct(std::forward<Args>(args)...);
  304|   147k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|   147k|    {
  367|   147k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   147k|        m_has_value = true;
  369|   147k|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|   147k|{
  102|   147k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   147k|        T(std::forward<Args>(args)...);
  104|   147k|}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   156k|    {
 1191|   156k|        return has_value();
 1192|   156k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1273|   147k|    {
 1274|   147k|        return std::addressof(value());
 1275|   147k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISI_LPv0EEERT_v:
 1220|   147k|    {
 1221|   147k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   147k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   147k|    {
  327|   147k|        return *value_ptr();
  328|   147k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|  55.0k|    {
 1263|  55.0k|        return std::move(value());
 1264|  55.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1077|  9.25k|    {
 1078|  9.25k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  150|  9.25k|    {
  151|  9.25k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   156k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1033|   147k|    {
 1034|   147k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENSC_10in_place_tEDpOT_:
  141|   147k|    {
  142|   147k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   156k|    {
 1191|   156k|        return has_value();
 1192|   156k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   304k|    {
  189|   304k|        return m_has_value;
  190|   304k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1273|   147k|    {
 1274|   147k|        return std::addressof(value());
 1275|   147k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1220|   147k|    {
 1221|   147k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   147k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   147k|    {
  155|   147k|        return m_value;
  156|   147k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  9.25k|    {
 1078|  9.25k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|  9.25k|    {
  151|  9.25k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  1.43k|    {
 1034|  1.43k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  1.43k|    {
  142|  1.43k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  10.6k|    {
 1191|  10.6k|        return has_value();
 1192|  10.6k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  21.3k|    {
  189|  21.3k|        return m_has_value;
  190|  21.3k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  9.25k|    {
 1197|  9.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  9.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  9.25k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  9.25k|    {
  172|  9.25k|        return m_unexpected;
  173|  9.25k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISO_LPv0ELSR_0EEEONS0_10unexpectedIT_EE:
 1077|  9.25k|    {
 1078|  9.25k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSP_EvEENS0_10unexpect_tEDpOT_:
  311|  9.25k|    {
  312|  9.25k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  9.25k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESP_EEEvDpOT_:
  372|  9.25k|    {
  373|  9.25k|        scn::detail::construct_at(unexpected_ptr(),
  374|  9.25k|                                  std::forward<Args>(args)...);
  375|  9.25k|        m_has_value = false;
  376|  9.25k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  18.5k|    {
  403|  18.5k|        return reinterpret_cast<unexpected<E>*>(
  404|  18.5k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  18.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  18.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  10.6k|    {
  317|  10.6k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 1.43k, False: 9.25k]
  ------------------
  318|  1.43k|            destroy_value();
  319|  1.43k|        }
  320|  9.25k|        else {
  321|  9.25k|            destroy_unexpected();
  322|  9.25k|        }
  323|  10.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  22.8k|    {
  361|  22.8k|        return m_has_value;
  362|  22.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  1.43k|    {
  380|  1.43k|        scn::detail::destroy_at(value_ptr());
  381|  1.43k|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  107|  1.43k|{
  108|  1.43k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.43k|        for (auto& elem : *p) {
  110|  1.43k|            scn::detail::destroy_at(std::addressof(elem));
  111|  1.43k|        }
  112|  1.43k|    }
  113|  1.43k|    else {
  114|  1.43k|        p->~T();
  115|  1.43k|    }
  116|  1.43k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  4.29k|    {
  390|  4.29k|        return reinterpret_cast<T*>(
  391|  4.29k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  4.29k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  4.29k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  9.25k|    {
  384|  9.25k|        scn::detail::destroy_at(unexpected_ptr());
  385|  9.25k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  1.43k|    {
 1251|  1.43k|        return value();
 1252|  1.43k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  1.43k|    {
 1221|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.43k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.43k|    {
  155|  1.43k|        return m_value;
  156|  1.43k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_vEEOT_:
 1033|  1.43k|    {
 1034|  1.43k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS8_10in_place_tEDpOT_:
  302|  1.43k|    {
  303|  1.43k|        construct(std::forward<Args>(args)...);
  304|  1.43k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSO_EEEvDpOT_:
  366|  1.43k|    {
  367|  1.43k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  1.43k|        m_has_value = true;
  369|  1.43k|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSO_EEEPT_SQ_DpOT0_:
  101|  1.43k|{
  102|  1.43k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  1.43k|        T(std::forward<Args>(args)...);
  104|  1.43k|}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  10.6k|    {
 1191|  10.6k|        return has_value();
 1192|  10.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1273|  1.43k|    {
 1274|  1.43k|        return std::addressof(value());
 1275|  1.43k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISN_LPv0EEERT_v:
 1220|  1.43k|    {
 1221|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.43k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|  1.43k|    {
  327|  1.43k|        return *value_ptr();
  328|  1.43k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|      1|    {
 1263|      1|        return std::move(value());
 1264|      1|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|  30.2k|    {
 1078|  30.2k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|  30.2k|    {
  151|  30.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   283k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|   253k|    {
 1034|   253k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|   253k|    {
  142|   253k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   283k|    {
 1191|   283k|        return has_value();
 1192|   283k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   567k|    {
  189|   567k|        return m_has_value;
  190|   567k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  30.2k|    {
 1197|  30.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  30.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  30.2k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  30.2k|    {
  172|  30.2k|        return m_unexpected;
  173|  30.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  15.1k|    {
 1078|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  15.1k|    {
  312|  15.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  15.1k|    {
  373|  15.1k|        scn::detail::construct_at(unexpected_ptr(),
  374|  15.1k|                                  std::forward<Args>(args)...);
  375|  15.1k|        m_has_value = false;
  376|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  30.2k|    {
  403|  30.2k|        return reinterpret_cast<unexpected<E>*>(
  404|  30.2k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  30.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  30.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   141k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   141k|    {
  317|   141k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 126k, False: 15.1k]
  ------------------
  318|   126k|            destroy_value();
  319|   126k|        }
  320|  15.1k|        else {
  321|  15.1k|            destroy_unexpected();
  322|  15.1k|        }
  323|   141k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   410k|    {
  361|   410k|        return m_has_value;
  362|   410k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   126k|    {
  380|   126k|        scn::detail::destroy_at(value_ptr());
  381|   126k|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEEEvPT_:
  107|   126k|{
  108|   126k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   126k|        for (auto& elem : *p) {
  110|   126k|            scn::detail::destroy_at(std::addressof(elem));
  111|   126k|        }
  112|   126k|    }
  113|   126k|    else {
  114|   126k|        p->~T();
  115|   126k|    }
  116|   126k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   380k|    {
  390|   380k|        return reinterpret_cast<T*>(
  391|   380k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   380k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   380k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  15.1k|    {
  384|  15.1k|        scn::detail::destroy_at(unexpected_ptr());
  385|  15.1k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|   206k|    {
 1251|   206k|        return value();
 1252|   206k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|   253k|    {
 1221|   253k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   253k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   253k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   253k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   253k|    {
  155|   253k|        return m_value;
  156|   253k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|   126k|    {
 1034|   126k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|   126k|    {
  303|   126k|        construct(std::forward<Args>(args)...);
  304|   126k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|   126k|    {
  367|   126k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   126k|        m_has_value = true;
  369|   126k|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|   126k|{
  102|   126k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   126k|        T(std::forward<Args>(args)...);
  104|   126k|}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   141k|    {
 1191|   141k|        return has_value();
 1192|   141k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1273|   126k|    {
 1274|   126k|        return std::addressof(value());
 1275|   126k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISI_LPv0EEERT_v:
 1220|   126k|    {
 1221|   126k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   126k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   126k|    {
  327|   126k|        return *value_ptr();
  328|   126k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|  47.1k|    {
 1263|  47.1k|        return std::move(value());
 1264|  47.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1077|  15.1k|    {
 1078|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  150|  15.1k|    {
  151|  15.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   141k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1033|   126k|    {
 1034|   126k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENSC_10in_place_tEDpOT_:
  141|   126k|    {
  142|   126k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   141k|    {
 1191|   141k|        return has_value();
 1192|   141k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   268k|    {
  189|   268k|        return m_has_value;
  190|   268k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1273|   126k|    {
 1274|   126k|        return std::addressof(value());
 1275|   126k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1220|   126k|    {
 1221|   126k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   126k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   126k|    {
  155|   126k|        return m_value;
  156|   126k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  15.1k|    {
 1078|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|  15.1k|    {
  151|  15.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  95.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  80.5k|    {
 1034|  80.5k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  80.5k|    {
  142|  80.5k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  95.6k|    {
 1191|  95.6k|        return has_value();
 1192|  95.6k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   191k|    {
  189|   191k|        return m_has_value;
  190|   191k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  15.1k|    {
 1197|  15.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  15.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  15.1k|    {
  172|  15.1k|        return m_unexpected;
  173|  15.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISO_LPv0ELSR_0EEEONS0_10unexpectedIT_EE:
 1077|  15.1k|    {
 1078|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSP_EvEENS0_10unexpect_tEDpOT_:
  311|  15.1k|    {
  312|  15.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESP_EEEvDpOT_:
  372|  15.1k|    {
  373|  15.1k|        scn::detail::construct_at(unexpected_ptr(),
  374|  15.1k|                                  std::forward<Args>(args)...);
  375|  15.1k|        m_has_value = false;
  376|  15.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  30.2k|    {
  403|  30.2k|        return reinterpret_cast<unexpected<E>*>(
  404|  30.2k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  30.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  30.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  95.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  95.6k|    {
  317|  95.6k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 80.5k, False: 15.1k]
  ------------------
  318|  80.5k|            destroy_value();
  319|  80.5k|        }
  320|  15.1k|        else {
  321|  15.1k|            destroy_unexpected();
  322|  15.1k|        }
  323|  95.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   271k|    {
  361|   271k|        return m_has_value;
  362|   271k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  80.5k|    {
  380|  80.5k|        scn::detail::destroy_at(value_ptr());
  381|  80.5k|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  107|  80.5k|{
  108|  80.5k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  80.5k|        for (auto& elem : *p) {
  110|  80.5k|            scn::detail::destroy_at(std::addressof(elem));
  111|  80.5k|        }
  112|  80.5k|    }
  113|  80.5k|    else {
  114|  80.5k|        p->~T();
  115|  80.5k|    }
  116|  80.5k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   241k|    {
  390|   241k|        return reinterpret_cast<T*>(
  391|   241k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   241k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   241k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  15.1k|    {
  384|  15.1k|        scn::detail::destroy_at(unexpected_ptr());
  385|  15.1k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  64.9k|    {
 1251|  64.9k|        return value();
 1252|  64.9k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  80.5k|    {
 1221|  80.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  80.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  80.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  80.5k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  80.5k|    {
  155|  80.5k|        return m_value;
  156|  80.5k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_vEEOT_:
 1033|  80.5k|    {
 1034|  80.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS8_10in_place_tEDpOT_:
  302|  80.5k|    {
  303|  80.5k|        construct(std::forward<Args>(args)...);
  304|  80.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSO_EEEvDpOT_:
  366|  80.5k|    {
  367|  80.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  80.5k|        m_has_value = true;
  369|  80.5k|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSO_EEEPT_SQ_DpOT0_:
  101|  80.5k|{
  102|  80.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  80.5k|        T(std::forward<Args>(args)...);
  104|  80.5k|}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  95.6k|    {
 1191|  95.6k|        return has_value();
 1192|  95.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1273|  80.5k|    {
 1274|  80.5k|        return std::addressof(value());
 1275|  80.5k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISN_LPv0EEERT_v:
 1220|  80.5k|    {
 1221|  80.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  80.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  80.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  80.5k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|  80.5k|    {
  327|  80.5k|        return *value_ptr();
  328|  80.5k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  15.6k|    {
 1263|  15.6k|        return std::move(value());
 1264|  15.6k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|   307k|    {
 1405|   307k|        return detail::transform_error_impl(std::move(*this),
 1406|   307k|                                            std::forward<F>(f));
 1407|   307k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|   307k|{
  927|   307k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   307k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   307k|        if (SCN_LIKELY(exp.has_value())) {
  930|   307k|            return result(*std::forward<Exp>(exp));
  931|   307k|        }
  932|       |
  933|   307k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   307k|        return result(unexpect, monostate{});
  935|   307k|    }
  936|   307k|    else {
  937|   307k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   307k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   307k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 301k, False: 6.32k]
  |  |  ------------------
  ------------------
  939|   307k|                   ? result(*std::forward<Exp>(exp))
  940|   307k|                   : result(unexpect,
  941|  6.32k|                            std::invoke(std::forward<F>(f),
  942|  6.32k|                                        std::forward<Exp>(exp).error()));
  943|   307k|    }
  944|   307k|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|   763k|    {
  189|   763k|        return m_has_value;
  190|   763k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|   301k|    {
 1263|   301k|        return std::move(value());
 1264|   301k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|   375k|    {
 1221|   375k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   375k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   375k|    {
  155|   375k|        return m_value;
  156|   375k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|   596k|    {
 1034|   596k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|   596k|    {
  142|   596k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   619k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  6.32k|    {
 1207|  6.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  6.32k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  6.32k|    {
  172|  6.32k|        return m_unexpected;
  173|  6.32k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|  29.2k|    {
   72|  29.2k|        return m_unexpected;
   73|  29.2k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  6.32k|    {
 1088|  6.32k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  21.9k|    {
  151|  21.9k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|   619k|    {
 1191|   619k|        return has_value();
 1192|   619k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  1.23M|    {
  189|  1.23M|        return m_has_value;
  190|  1.23M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|  21.9k|    {
 1197|  21.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  21.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  21.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  21.9k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  21.9k|    {
  172|  21.9k|        return m_unexpected;
  173|  21.9k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  15.6k|    {
 1078|  15.6k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|   466k|    {
 1263|   466k|        return std::move(value());
 1264|   466k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|   598k|    {
 1221|   598k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   598k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   598k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   598k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|   598k|    {
  155|   598k|        return m_value;
  156|   598k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|  36.0k|    {
   58|  36.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  36.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  36.0k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  73.0k|    {
 1078|  73.0k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  73.0k|    {
  151|  73.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   703k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  14.5k|    {
   58|  14.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  14.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  14.5k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  6.44k|    {
 1078|  6.44k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  6.44k|    {
  151|  6.44k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  14.6k|    {
   67|  14.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  14.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  14.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   381k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|   375k|    {
 1034|   375k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|   375k|    {
  142|   375k|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  73.7k|    {
 1191|  73.7k|        return has_value();
 1192|  73.7k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  73.6k|    {
 1251|  73.6k|        return value();
 1252|  73.6k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|    120|    {
   58|    120|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|    120|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|    120|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|   131k|    {
 1251|   131k|        return value();
 1252|   131k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|   630k|    {
 1034|   630k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|   630k|    {
  142|   630k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|      9|    {
 1078|      9|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|      9|    {
  151|      9|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.83k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  7.83k|    {
 1034|  7.83k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  7.83k|    {
  142|  7.83k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  7.83k|    {
 1405|  7.83k|        return detail::transform_error_impl(std::move(*this),
 1406|  7.83k|                                            std::forward<F>(f));
 1407|  7.83k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  7.83k|{
  927|  7.83k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  7.83k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  7.83k|        if (SCN_LIKELY(exp.has_value())) {
  930|  7.83k|            return result(*std::forward<Exp>(exp));
  931|  7.83k|        }
  932|       |
  933|  7.83k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  7.83k|        return result(unexpect, monostate{});
  935|  7.83k|    }
  936|  7.83k|    else {
  937|  7.83k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  7.83k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  7.83k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.83k, False: 9]
  |  |  ------------------
  ------------------
  939|  7.83k|                   ? result(*std::forward<Exp>(exp))
  940|  7.83k|                   : result(unexpect,
  941|      9|                            std::invoke(std::forward<F>(f),
  942|      9|                                        std::forward<Exp>(exp).error()));
  943|  7.83k|    }
  944|  7.83k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  15.6k|    {
  189|  15.6k|        return m_has_value;
  190|  15.6k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  7.83k|    {
 1263|  7.83k|        return std::move(value());
 1264|  7.83k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  7.83k|    {
 1221|  7.83k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.83k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  7.83k|    {
  155|  7.83k|        return m_value;
  156|  7.83k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|  9.26k|    {
 1034|  9.26k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  9.26k|    {
  142|  9.26k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  18.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|      9|    {
 1207|      9|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|      9|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      9|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|      9|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|      9|    {
  172|      9|        return m_unexpected;
  173|      9|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|      9|    {
 1088|      9|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  7.83k|    {
  151|  7.83k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  7.83k|    {
 1078|  7.83k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  2.85k|    {
 1251|  2.85k|        return value();
 1252|  2.85k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|  10.6k|    {
 1221|  10.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  10.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  37.0k|    {
  189|  37.0k|        return m_has_value;
  190|  37.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|  10.6k|    {
  155|  10.6k|        return m_value;
  156|  10.6k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  18.5k|    {
 1191|  18.5k|        return has_value();
 1192|  18.5k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|  7.83k|    {
 1197|  7.83k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  7.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  7.83k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  7.83k|    {
  172|  7.83k|        return m_unexpected;
  173|  7.83k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|  7.83k|    {
 1263|  7.83k|        return std::move(value());
 1264|  7.83k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.04k|    {
 1078|  1.04k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|  1.04k|    {
  151|  1.04k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  19.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1033|  18.1k|    {
 1034|  18.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  18.1k|    {
  142|  18.1k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1190|  19.1k|    {
 1191|  19.1k|        return has_value();
 1192|  19.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  188|  38.2k|    {
  189|  38.2k|        return m_has_value;
  190|  38.2k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1196|  1.04k|    {
 1197|  1.04k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.04k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.04k|    {
  172|  1.04k|        return m_unexpected;
  173|  1.04k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1262|  18.1k|    {
 1263|  18.1k|        return std::move(value());
 1264|  18.1k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1220|  18.1k|    {
 1221|  18.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  18.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  154|  18.1k|    {
  155|  18.1k|        return m_value;
  156|  18.1k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1033|  1.54k|    {
 1034|  1.54k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.54k|    {
  142|  1.54k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  1.42k|    {
 1078|  1.42k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  1.42k|    {
  151|  1.42k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.42k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|      2|    {
 1034|      2|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|      2|    {
  142|      2|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEEcvbEv:
 1190|  1.42k|    {
 1191|  1.42k|        return has_value();
 1192|  1.42k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.84k|    {
  189|  2.84k|        return m_has_value;
  190|  2.84k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEE5errorEv:
 1196|  1.42k|    {
 1197|  1.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.42k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.42k|    {
  172|  1.42k|        return m_unexpected;
  173|  1.42k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|      2|    {
 1263|      2|        return std::move(value());
 1264|      2|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|      2|    {
 1221|      2|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|      2|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      2|    {
  155|      2|        return m_value;
  156|      2|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1033|  1.42k|    {
 1034|  1.42k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.42k|    {
  142|  1.42k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  7.60k|    {
 1078|  7.60k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  7.60k|    {
  151|  7.60k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   274k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|   266k|    {
 1034|   266k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|   266k|    {
  142|   266k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|   274k|    {
 1405|   274k|        return detail::transform_error_impl(std::move(*this),
 1406|   274k|                                            std::forward<F>(f));
 1407|   274k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|   274k|{
  927|   274k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   274k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   274k|        if (SCN_LIKELY(exp.has_value())) {
  930|   274k|            return result(*std::forward<Exp>(exp));
  931|   274k|        }
  932|       |
  933|   274k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   274k|        return result(unexpect, monostate{});
  935|   274k|    }
  936|   274k|    else {
  937|   274k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   274k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   274k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 266k, False: 7.60k]
  |  |  ------------------
  ------------------
  939|   274k|                   ? result(*std::forward<Exp>(exp))
  940|   274k|                   : result(unexpect,
  941|  7.60k|                            std::invoke(std::forward<F>(f),
  942|  7.60k|                                        std::forward<Exp>(exp).error()));
  943|   274k|    }
  944|   274k|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|   548k|    {
  189|   548k|        return m_has_value;
  190|   548k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|   266k|    {
 1263|   266k|        return std::move(value());
 1264|   266k|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|   266k|    {
 1221|   266k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   266k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   266k|    {
  155|   266k|        return m_value;
  156|   266k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|   520k|    {
 1034|   520k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|   520k|    {
  142|   520k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   554k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|  7.60k|    {
 1207|  7.60k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  7.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  7.60k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  7.60k|    {
  172|  7.60k|        return m_unexpected;
  173|  7.60k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  7.60k|    {
 1088|  7.60k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  33.1k|    {
  151|  33.1k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  25.5k|    {
 1078|  25.5k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|   113k|    {
 1251|   113k|        return value();
 1252|   113k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|   521k|    {
 1221|   521k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   521k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   521k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   521k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  1.10M|    {
  189|  1.10M|        return m_has_value;
  190|  1.10M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|   521k|    {
  155|   521k|        return m_value;
  156|   521k|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|   554k|    {
 1191|   554k|        return has_value();
 1192|   554k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|  33.1k|    {
 1197|  33.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  33.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  33.1k|    {
  172|  33.1k|        return m_unexpected;
  173|  33.1k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|   408k|    {
 1263|   408k|        return std::move(value());
 1264|   408k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  12.7k|    {
 1078|  12.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  13.3k|    {
  151|  13.3k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   186k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   170k|    {
 1034|   170k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   170k|    {
  142|   170k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   186k|    {
 1191|   186k|        return has_value();
 1192|   186k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|   373k|    {
  189|   373k|        return m_has_value;
  190|   373k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|  13.3k|    {
 1197|  13.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  13.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  13.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  13.3k|    {
  172|  13.3k|        return m_unexpected;
  173|  13.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  36.0k|    {
 1251|  36.0k|        return value();
 1252|  36.0k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   173k|    {
 1221|   173k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   173k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   173k|    {
  155|   173k|        return m_value;
  156|   173k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  2.48k|    {
 1078|  2.48k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|  2.48k|    {
  151|  2.48k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  18.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1033|  16.4k|    {
 1034|  16.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  16.4k|    {
  142|  16.4k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1190|  18.9k|    {
 1191|  18.9k|        return has_value();
 1192|  18.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  188|  37.8k|    {
  189|  37.8k|        return m_has_value;
  190|  37.8k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1196|  2.48k|    {
 1197|  2.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.48k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  2.48k|    {
  172|  2.48k|        return m_unexpected;
  173|  2.48k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1262|  16.4k|    {
 1263|  16.4k|        return std::move(value());
 1264|  16.4k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1220|  16.4k|    {
 1221|  16.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  154|  16.4k|    {
  155|  16.4k|        return m_value;
  156|  16.4k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1033|  1.18k|    {
 1034|  1.18k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.18k|    {
  142|  1.18k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    599|    {
 1078|    599|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    599|    {
  151|    599|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  90.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  90.3k|    {
 1034|  90.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  90.3k|    {
  142|  90.3k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  90.9k|    {
 1405|  90.9k|        return detail::transform_error_impl(std::move(*this),
 1406|  90.9k|                                            std::forward<F>(f));
 1407|  90.9k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  90.9k|{
  927|  90.9k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  90.9k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  90.9k|        if (SCN_LIKELY(exp.has_value())) {
  930|  90.9k|            return result(*std::forward<Exp>(exp));
  931|  90.9k|        }
  932|       |
  933|  90.9k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  90.9k|        return result(unexpect, monostate{});
  935|  90.9k|    }
  936|  90.9k|    else {
  937|  90.9k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  90.9k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  90.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 90.3k, False: 599]
  |  |  ------------------
  ------------------
  939|  90.9k|                   ? result(*std::forward<Exp>(exp))
  940|  90.9k|                   : result(unexpect,
  941|    599|                            std::invoke(std::forward<F>(f),
  942|    599|                                        std::forward<Exp>(exp).error()));
  943|  90.9k|    }
  944|  90.9k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|   181k|    {
  189|   181k|        return m_has_value;
  190|   181k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  90.3k|    {
 1263|  90.3k|        return std::move(value());
 1264|  90.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  90.3k|    {
 1221|  90.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  90.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  90.3k|    {
  155|  90.3k|        return m_value;
  156|  90.3k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    599|    {
 1207|    599|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    599|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    599|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    599|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    599|    {
  172|    599|        return m_unexpected;
  173|    599|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|    599|    {
 1088|    599|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   137k|    {
 1263|   137k|        return std::move(value());
 1264|   137k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  2.15k|    {
 1078|  2.15k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  2.15k|    {
  151|  2.15k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.32k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|    170|    {
 1034|    170|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|    170|    {
  142|    170|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEEcvbEv:
 1190|  2.32k|    {
 1191|  2.32k|        return has_value();
 1192|  2.32k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.64k|    {
  189|  4.64k|        return m_has_value;
  190|  4.64k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEE5errorEv:
 1196|  2.15k|    {
 1197|  2.15k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.15k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  2.15k|    {
  172|  2.15k|        return m_unexpected;
  173|  2.15k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|    170|    {
 1263|    170|        return std::move(value());
 1264|    170|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|    170|    {
 1221|    170|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    170|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    170|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|    170|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENS0_10scan_errorELb1EE9get_valueEv:
  154|    170|    {
  155|    170|        return m_value;
  156|    170|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1033|  2.32k|    {
 1034|  2.32k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.32k|    {
  142|  2.32k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.42k|{
  200|  1.42k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.42k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  1.42k|{
  180|  1.42k|    return p;
  181|  1.42k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.42k|{
  200|  1.42k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.42k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  1.42k|{
  180|  1.42k|    return p;
  181|  1.42k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.42k|{
  200|  1.42k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.42k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  1.42k|{
  180|  1.42k|    return p;
  181|  1.42k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.59M|{
  200|  4.59M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.59M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.65M|{
  180|  4.65M|    return p;
  181|  4.65M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.54M|{
  200|  1.54M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.54M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  1.54M|{
  180|  1.54M|    return p;
  181|  1.54M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  59.5k|{
  200|  59.5k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  59.5k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.54M|{
  200|  1.54M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.54M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  3.20M|{
  180|  3.20M|    return p;
  181|  3.20M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.66M|{
  200|  1.66M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.66M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  4.91k|    {
  242|  4.91k|        return static_cast<size_type>(m_end - m_ptr);
  243|  4.91k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|    712|    {
  181|    712|        return m_ptr;
  182|    712|    }
_ZN3scn2v24spanIKhE3endEv:
  184|    712|    {
  185|    712|        return m_end;
  186|    712|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|    712|    {
  238|    712|        return m_ptr;
  239|    712|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|    712|    {
  120|    712|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  4.27k|    {
  181|  4.27k|        return m_ptr;
  182|  4.27k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  4.27k|    {
  185|  4.27k|        return m_end;
  186|  4.27k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|    712|    {
  120|    712|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  6.97k|    {
  181|  6.97k|        return m_ptr;
  182|  6.97k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  6.97k|    {
  185|  6.97k|        return m_end;
  186|  6.97k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|    713|    {
  120|    713|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|   774k|    {
  120|   774k|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|   774k|    {
  238|   774k|        return m_ptr;
  239|   774k|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|   774k|    {
  242|   774k|        return static_cast<size_type>(m_end - m_ptr);
  243|   774k|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  7.12k|{
   60|  7.12k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  7.12k|                                          const CharT*, const CharT*>) {
   62|  7.12k|        return {first, last};
   63|  7.12k|    }
   64|  7.12k|    else {
   65|  7.12k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  7.12k|    }
   67|  7.12k|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|   854k|{
   60|   854k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|   854k|                                          const CharT*, const CharT*>) {
   62|   854k|        return {first, last};
   63|   854k|    }
   64|   854k|    else {
   65|   854k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|   854k|    }
   67|   854k|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  1.39M|{
   44|  1.39M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  1.39M|                                          decltype(first), decltype(last)> &&
   46|  1.39M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  1.39M|        return {first, last};
   48|  1.39M|    }
   49|  1.39M|    else {
   50|  1.39M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  1.39M|                                       to_address(first), to_address(last)))};
   52|  1.39M|    }
   53|  1.39M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  1.64M|{
   75|  1.64M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  1.64M|                      typename std::basic_string_view<CharT>::iterator,
   77|  1.64M|                      decltype(it)> &&
   78|  1.64M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  1.64M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  1.64M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  1.64M|        return it;
   81|  1.64M|    }
   82|  1.64M|    else {
   83|  1.64M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  1.64M|    }
   85|  1.64M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|  7.83k|{
   54|  7.83k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|  7.83k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|  7.83k|        return true;
   57|  7.83k|    }
   58|  7.83k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|  7.83k|                           ranges::iterator_t<Range>,
   60|  7.83k|                           typename detail::basic_scan_buffer<
   61|  7.83k|                               detail::char_t<Range>>::forward_iterator>) {
   62|  7.83k|        auto beg = ranges::begin(r);
   63|  7.83k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 7.83k, False: 0]
  ------------------
   64|  7.83k|            return false;
   65|  7.83k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|  7.83k|    else {
   79|  7.83k|        return false;
   80|  7.83k|    }
   81|  7.83k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|  10.6k|{
  112|  10.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|  10.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|  10.6k|        return r;
  115|  10.6k|    }
  116|  10.6k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|  10.6k|                           ranges::iterator_t<Range>,
  118|  10.6k|                           typename detail::basic_scan_buffer<
  119|  10.6k|                               detail::char_t<Range>>::forward_iterator>) {
  120|  10.6k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  10.6k|            auto seg = ranges::begin(r).contiguous_segment();
  122|  10.6k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|  10.6k|                ranges::begin(r), ranges::end(r)));
  124|  10.6k|            return seg.substr(0, std::min(seg.size(), dist));
  125|  10.6k|        }
  126|  10.6k|        else {
  127|  10.6k|            return ranges::begin(r).contiguous_segment();
  128|  10.6k|        }
  129|  10.6k|    }
  130|  10.6k|    else {
  131|  10.6k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|  10.6k|    }
  133|  10.6k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|  90.9k|{
   54|  90.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|  90.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|  90.9k|        return true;
   57|  90.9k|    }
   58|  90.9k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|  90.9k|                           ranges::iterator_t<Range>,
   60|  90.9k|                           typename detail::basic_scan_buffer<
   61|  90.9k|                               detail::char_t<Range>>::forward_iterator>) {
   62|  90.9k|        auto beg = ranges::begin(r);
   63|  90.9k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 90.9k, False: 0]
  ------------------
   64|  90.9k|            return false;
   65|  90.9k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|  90.9k|    else {
   79|  90.9k|        return false;
   80|  90.9k|    }
   81|  90.9k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   166k|{
  112|   166k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   166k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   166k|        return r;
  115|   166k|    }
  116|   166k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   166k|                           ranges::iterator_t<Range>,
  118|   166k|                           typename detail::basic_scan_buffer<
  119|   166k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   166k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   166k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   166k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   166k|                ranges::begin(r), ranges::end(r)));
  124|   166k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   166k|        }
  126|   166k|        else {
  127|   166k|            return ranges::begin(r).contiguous_segment();
  128|   166k|        }
  129|   166k|    }
  130|   166k|    else {
  131|   166k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   166k|    }
  133|   166k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|   280k|{
  235|   280k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   280k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   280k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   280k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|   280k|    }
  240|   280k|    else {
  241|   280k|        return contiguous_range_factory{SCN_FWD(range)};
  242|   280k|    }
  243|   280k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|   280k|    {
   50|   280k|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  1.68M|    {
   63|  1.68M|        return sv;
   64|  1.68M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|   362k|{
  235|   362k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   362k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   362k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   362k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|   362k|    }
  240|   362k|    else {
  241|   362k|        return contiguous_range_factory{SCN_FWD(range)};
  242|   362k|    }
  243|   362k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|   362k|    {
   50|   362k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  40.8k|    {
  142|  40.8k|        return m_view;
  143|  40.8k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  40.7k|    ~contiguous_range_factory() = default;
_ZNK3scn2v24impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
  146|  20.9k|    {
  147|  20.9k|        return m_storage.has_value();
  148|  20.9k|    }
_ZNR3scn2v24impl24contiguous_range_factoryIcE20get_allocated_stringEv:
  151|  10.4k|    {
  152|  10.4k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  10.4k|    }
_ZN3scn2v24impl22make_contiguous_bufferIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|   277k|{
  235|   277k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   277k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   277k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   277k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|   277k|    }
  240|   277k|    else {
  241|   277k|        return contiguous_range_factory{SCN_FWD(range)};
  242|   277k|    }
  243|   277k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|   277k|    {
   50|   277k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  29.7k|{
  235|  29.7k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  29.7k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  29.7k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  29.7k|        return string_view_wrapper{SCN_FWD(range)};
  239|  29.7k|    }
  240|  29.7k|    else {
  241|  29.7k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  29.7k|    }
  243|  29.7k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  29.7k|    {
   97|  29.7k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  29.7k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  29.7k|    {
  181|  29.7k|        using value_t = ranges::range_value_t<Range>;
  182|  29.7k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  29.7k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  29.7k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  29.7k|            m_storage.reset();
  186|  29.7k|            m_view = string_view_type{ranges::data(range),
  187|  29.7k|                                      ranges_polyfill::usize(range)};
  188|  29.7k|        }
  189|  29.7k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  29.7k|                                          std::basic_string<CharT>>) {
  191|  29.7k|            m_storage.emplace(SCN_FWD(range));
  192|  29.7k|            m_view = string_view_type{*m_storage};
  193|  29.7k|        }
  194|  29.7k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  29.7k|                                          typename detail::basic_scan_buffer<
  196|  29.7k|                                              value_t>::forward_iterator> &&
  197|  29.7k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  29.7k|            auto beg_seg = range.begin().contiguous_segment();
  199|  29.7k|            auto end_seg = range.end().contiguous_segment();
  200|  29.7k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.2k, False: 3.56k]
  |  |  ------------------
  ------------------
  201|  29.7k|                             detail::to_address(end_seg.end()))) {
  202|  26.2k|                auto& str = m_storage.emplace();
  203|  26.2k|                str.reserve(range.end().position() - range.begin().position());
  204|  26.2k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  26.2k|                m_view = string_view_type{str};
  206|  26.2k|                return;
  207|  26.2k|            }
  208|       |
  209|  3.56k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  3.56k|                                                            end_seg.data());
  211|  3.56k|            m_storage.reset();
  212|  3.56k|        }
  213|  29.7k|        else {
  214|  29.7k|            auto& str = m_storage.emplace();
  215|  29.7k|            if constexpr (ranges::sized_range<Range>) {
  216|  29.7k|                str.reserve(ranges_polyfill::usize(range));
  217|  29.7k|            }
  218|  29.7k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  29.7k|                      std::back_inserter(str));
  220|  29.7k|            m_view = string_view_type{str};
  221|  29.7k|        }
  222|  29.7k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  9.57k|{
  235|  9.57k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  9.57k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  9.57k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  9.57k|        return string_view_wrapper{SCN_FWD(range)};
  239|  9.57k|    }
  240|  9.57k|    else {
  241|  9.57k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  9.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  9.57k|    }
  243|  9.57k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  9.57k|    {
   97|  9.57k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  9.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  9.57k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  9.57k|    {
  181|  9.57k|        using value_t = ranges::range_value_t<Range>;
  182|  9.57k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  9.57k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  9.57k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  9.57k|            m_storage.reset();
  186|  9.57k|            m_view = string_view_type{ranges::data(range),
  187|  9.57k|                                      ranges_polyfill::usize(range)};
  188|  9.57k|        }
  189|  9.57k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  9.57k|                                          std::basic_string<CharT>>) {
  191|  9.57k|            m_storage.emplace(SCN_FWD(range));
  192|  9.57k|            m_view = string_view_type{*m_storage};
  193|  9.57k|        }
  194|  9.57k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  9.57k|                                          typename detail::basic_scan_buffer<
  196|  9.57k|                                              value_t>::forward_iterator> &&
  197|  9.57k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  9.57k|            auto beg_seg = range.begin().contiguous_segment();
  199|  9.57k|            auto end_seg = range.end().contiguous_segment();
  200|  9.57k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  9.57k|                             detail::to_address(end_seg.end()))) {
  202|  9.57k|                auto& str = m_storage.emplace();
  203|  9.57k|                str.reserve(range.end().position() - range.begin().position());
  204|  9.57k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  9.57k|                m_view = string_view_type{str};
  206|  9.57k|                return;
  207|  9.57k|            }
  208|       |
  209|  9.57k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  9.57k|                                                            end_seg.data());
  211|  9.57k|            m_storage.reset();
  212|  9.57k|        }
  213|  9.57k|        else {
  214|  9.57k|            auto& str = m_storage.emplace();
  215|  9.57k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (215:27): [Folded - Ignored]
  ------------------
  216|  9.57k|                str.reserve(ranges_polyfill::usize(range));
  217|  9.57k|            }
  218|  9.57k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  9.57k|                      std::back_inserter(str));
  220|  9.57k|            m_view = string_view_type{str};
  221|  9.57k|        }
  222|  9.57k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEESE_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  1.42k|{
  235|  1.42k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.42k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.42k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.42k|        return string_view_wrapper{SCN_FWD(range)};
  239|  1.42k|    }
  240|  1.42k|    else {
  241|  1.42k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  1.42k|    }
  243|  1.42k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEESG_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  1.42k|    {
   97|  1.42k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  1.42k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEESG_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  1.42k|    {
  181|  1.42k|        using value_t = ranges::range_value_t<Range>;
  182|  1.42k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.42k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.42k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.42k|            m_storage.reset();
  186|  1.42k|            m_view = string_view_type{ranges::data(range),
  187|  1.42k|                                      ranges_polyfill::usize(range)};
  188|  1.42k|        }
  189|  1.42k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.42k|                                          std::basic_string<CharT>>) {
  191|  1.42k|            m_storage.emplace(SCN_FWD(range));
  192|  1.42k|            m_view = string_view_type{*m_storage};
  193|  1.42k|        }
  194|  1.42k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  1.42k|                                          typename detail::basic_scan_buffer<
  196|  1.42k|                                              value_t>::forward_iterator> &&
  197|  1.42k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  1.42k|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.42k|            auto end_seg = range.end().contiguous_segment();
  200|  1.42k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.42k|                             detail::to_address(end_seg.end()))) {
  202|  1.42k|                auto& str = m_storage.emplace();
  203|  1.42k|                str.reserve(range.end().position() - range.begin().position());
  204|  1.42k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.42k|                m_view = string_view_type{str};
  206|  1.42k|                return;
  207|  1.42k|            }
  208|       |
  209|  1.42k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.42k|                                                            end_seg.data());
  211|  1.42k|            m_storage.reset();
  212|  1.42k|        }
  213|  1.42k|        else {
  214|  1.42k|            auto& str = m_storage.emplace();
  215|  1.42k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (215:27): [Folded - Ignored]
  ------------------
  216|  1.42k|                str.reserve(ranges_polyfill::usize(range));
  217|  1.42k|            }
  218|  1.42k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.42k|                      std::back_inserter(str));
  220|  1.42k|            m_view = string_view_type{str};
  221|  1.42k|        }
  222|  1.42k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|   252k|{
  235|   252k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   252k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   252k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   252k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|   252k|    }
  240|   252k|    else {
  241|   252k|        return contiguous_range_factory{SCN_FWD(range)};
  242|   252k|    }
  243|   252k|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|   252k|    {
   50|   252k|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|   371k|    {
   63|   371k|        return sv;
   64|   371k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|   921k|    {
  142|   921k|        return m_view;
  143|   921k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|   843k|    ~contiguous_range_factory() = default;
_ZNK3scn2v24impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
  146|  99.7k|    {
  147|  99.7k|        return m_storage.has_value();
  148|  99.7k|    }
_ZNR3scn2v24impl24contiguous_range_factoryIwE20get_allocated_stringEv:
  151|  11.0k|    {
  152|  11.0k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  11.0k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  9.46k|{
  235|  9.46k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  9.46k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  9.46k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  9.46k|        return string_view_wrapper{SCN_FWD(range)};
  239|  9.46k|    }
  240|  9.46k|    else {
  241|  9.46k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  9.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  9.46k|    }
  243|  9.46k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  9.46k|    {
   97|  9.46k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  9.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  9.46k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  9.46k|    {
  181|  9.46k|        using value_t = ranges::range_value_t<Range>;
  182|  9.46k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  9.46k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  9.46k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  9.46k|            m_storage.reset();
  186|  9.46k|            m_view = string_view_type{ranges::data(range),
  187|  9.46k|                                      ranges_polyfill::usize(range)};
  188|  9.46k|        }
  189|  9.46k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  9.46k|                                          std::basic_string<CharT>>) {
  191|  9.46k|            m_storage.emplace(SCN_FWD(range));
  192|  9.46k|            m_view = string_view_type{*m_storage};
  193|  9.46k|        }
  194|  9.46k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  9.46k|                                          typename detail::basic_scan_buffer<
  196|  9.46k|                                              value_t>::forward_iterator> &&
  197|  9.46k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  9.46k|            auto beg_seg = range.begin().contiguous_segment();
  199|  9.46k|            auto end_seg = range.end().contiguous_segment();
  200|  9.46k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  9.46k|                             detail::to_address(end_seg.end()))) {
  202|  9.46k|                auto& str = m_storage.emplace();
  203|  9.46k|                str.reserve(range.end().position() - range.begin().position());
  204|  9.46k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  9.46k|                m_view = string_view_type{str};
  206|  9.46k|                return;
  207|  9.46k|            }
  208|       |
  209|  9.46k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  9.46k|                                                            end_seg.data());
  211|  9.46k|            m_storage.reset();
  212|  9.46k|        }
  213|  9.46k|        else {
  214|  9.46k|            auto& str = m_storage.emplace();
  215|  9.46k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (215:27): [Folded - Ignored]
  ------------------
  216|  9.46k|                str.reserve(ranges_polyfill::usize(range));
  217|  9.46k|            }
  218|  9.46k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  9.46k|                      std::back_inserter(str));
  220|  9.46k|            m_view = string_view_type{str};
  221|  9.46k|        }
  222|  9.46k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   832k|{
  235|   832k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   832k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   832k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   832k|        return string_view_wrapper{SCN_FWD(range)};
  239|   832k|    }
  240|   832k|    else {
  241|   832k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   832k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   832k|    }
  243|   832k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   832k|    {
   97|   832k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   832k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   832k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   832k|    {
  181|   832k|        using value_t = ranges::range_value_t<Range>;
  182|   832k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   832k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   832k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   832k|            m_storage.reset();
  186|   832k|            m_view = string_view_type{ranges::data(range),
  187|   832k|                                      ranges_polyfill::usize(range)};
  188|   832k|        }
  189|   832k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   832k|                                          std::basic_string<CharT>>) {
  191|   832k|            m_storage.emplace(SCN_FWD(range));
  192|   832k|            m_view = string_view_type{*m_storage};
  193|   832k|        }
  194|   832k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   832k|                                          typename detail::basic_scan_buffer<
  196|   832k|                                              value_t>::forward_iterator> &&
  197|   832k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   832k|            auto beg_seg = range.begin().contiguous_segment();
  199|   832k|            auto end_seg = range.end().contiguous_segment();
  200|   832k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 748k, False: 83.6k]
  |  |  ------------------
  ------------------
  201|   832k|                             detail::to_address(end_seg.end()))) {
  202|   748k|                auto& str = m_storage.emplace();
  203|   748k|                str.reserve(range.end().position() - range.begin().position());
  204|   748k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   748k|                m_view = string_view_type{str};
  206|   748k|                return;
  207|   748k|            }
  208|       |
  209|  83.6k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  83.6k|                                                            end_seg.data());
  211|  83.6k|            m_storage.reset();
  212|  83.6k|        }
  213|   832k|        else {
  214|   832k|            auto& str = m_storage.emplace();
  215|   832k|            if constexpr (ranges::sized_range<Range>) {
  216|   832k|                str.reserve(ranges_polyfill::usize(range));
  217|   832k|            }
  218|   832k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   832k|                      std::back_inserter(str));
  220|   832k|            m_view = string_view_type{str};
  221|   832k|        }
  222|   832k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEESE_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  2.32k|{
  235|  2.32k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.32k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.32k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.32k|        return string_view_wrapper{SCN_FWD(range)};
  239|  2.32k|    }
  240|  2.32k|    else {
  241|  2.32k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  2.32k|    }
  243|  2.32k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEESG_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  2.32k|    {
   97|  2.32k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  2.32k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEESG_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  2.32k|    {
  181|  2.32k|        using value_t = ranges::range_value_t<Range>;
  182|  2.32k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  2.32k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  2.32k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  2.32k|            m_storage.reset();
  186|  2.32k|            m_view = string_view_type{ranges::data(range),
  187|  2.32k|                                      ranges_polyfill::usize(range)};
  188|  2.32k|        }
  189|  2.32k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  2.32k|                                          std::basic_string<CharT>>) {
  191|  2.32k|            m_storage.emplace(SCN_FWD(range));
  192|  2.32k|            m_view = string_view_type{*m_storage};
  193|  2.32k|        }
  194|  2.32k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  2.32k|                                          typename detail::basic_scan_buffer<
  196|  2.32k|                                              value_t>::forward_iterator> &&
  197|  2.32k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  2.32k|            auto beg_seg = range.begin().contiguous_segment();
  199|  2.32k|            auto end_seg = range.end().contiguous_segment();
  200|  2.32k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  2.32k|                             detail::to_address(end_seg.end()))) {
  202|  2.32k|                auto& str = m_storage.emplace();
  203|  2.32k|                str.reserve(range.end().position() - range.begin().position());
  204|  2.32k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  2.32k|                m_view = string_view_type{str};
  206|  2.32k|                return;
  207|  2.32k|            }
  208|       |
  209|  2.32k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  2.32k|                                                            end_seg.data());
  211|  2.32k|            m_storage.reset();
  212|  2.32k|        }
  213|  2.32k|        else {
  214|  2.32k|            auto& str = m_storage.emplace();
  215|  2.32k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (215:27): [Folded - Ignored]
  ------------------
  216|  2.32k|                str.reserve(ranges_polyfill::usize(range));
  217|  2.32k|            }
  218|  2.32k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  2.32k|                      std::back_inserter(str));
  220|  2.32k|            m_view = string_view_type{str};
  221|  2.32k|        }
  222|  2.32k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|   588k|{
   97|   588k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   588k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.32k, False: 582k]
  |  |  ------------------
  ------------------
   98|  6.32k|        return eof_error::eof;
   99|  6.32k|    }
  100|   582k|    return eof_error::good;
  101|   588k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|   588k|{
   91|   588k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   588k|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|   588k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   588k|    {
   84|   588k|        return begin == end;
   85|   588k|    }
   86|   588k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  11.3k|{
   97|  11.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9, False: 11.3k]
  |  |  ------------------
  ------------------
   98|      9|        return eof_error::eof;
   99|      9|    }
  100|  11.3k|    return eof_error::good;
  101|  11.3k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  11.3k|{
   91|  11.3k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  11.3k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  11.3k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  11.3k|    {
   84|  11.3k|        return begin == end;
   85|  11.3k|    }
   86|  11.3k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|   519k|{
   97|   519k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.60k, False: 511k]
  |  |  ------------------
  ------------------
   98|  7.60k|        return eof_error::eof;
   99|  7.60k|    }
  100|   511k|    return eof_error::good;
  101|   519k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|   519k|{
   91|   519k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   519k|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|   519k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   519k|    {
   84|   519k|        return begin == end;
   85|   519k|    }
   86|   519k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   174k|{
   97|   174k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 599, False: 173k]
  |  |  ------------------
  ------------------
   98|    599|        return eof_error::eof;
   99|    599|    }
  100|   173k|    return eof_error::good;
  101|   174k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   174k|{
   91|   174k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   174k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   174k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   174k|    {
   84|   174k|        return begin == end;
   85|   174k|    }
   86|   174k|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|   281k|{
  120|   281k|    return find_classic_impl(
  121|   281k|        source, [](char ch) { return is_ascii_space(ch); },
  122|   281k|        [](char32_t cp) { return is_cp_space(cp); });
  123|   281k|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|   284k|{
  128|   284k|    return find_classic_impl(
  129|   284k|        source, [](char ch) { return !is_ascii_space(ch); },
  130|   284k|        [](char32_t cp) { return !is_cp_space(cp); });
  131|   284k|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_1ZNS1_30find_classic_space_narrow_fastES8_E3$_2EEPKcS8_T_T0_:
   43|   281k|{
   44|   281k|    auto it = source.begin();
   45|       |
   46|   517k|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 511k, False: 6.35k]
  ------------------
   47|   511k|        auto sv =
   48|   511k|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|   511k|                .substr(0, 8);
   50|       |
   51|   511k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 379k, False: 132k]
  ------------------
   52|   379k|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|   379k|            it = detail::make_string_view_iterator(source, tmp_it);
   54|   379k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 239k, False: 139k]
  ------------------
   55|   239k|                break;
   56|   239k|            }
   57|   139k|            continue;
   58|   379k|        }
   59|       |
   60|   491k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 394k, False: 96.7k]
  ------------------
   61|   394k|            auto tmp =
   62|   394k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   394k|            auto res = get_next_code_point(tmp);
   64|   394k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 35.2k, False: 359k]
  ------------------
   65|  35.2k|                return it;
   66|  35.2k|            }
   67|   359k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|   359k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|   359k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|   359k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|   359k|        }
   71|   132k|    }
   72|       |
   73|   246k|    return detail::make_string_view_iterator(source, it);
   74|   281k|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|   848k|{
   31|   848k|    static_assert(sizeof(*source.data()) == 1);
   32|   848k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|   848k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   848k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|   848k|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|   848k|    return has_byte_greater(word, 127) != 0;
   37|   848k|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEc:
  121|  2.16M|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_2clEDi:
  122|   394k|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|   284k|{
   44|   284k|    auto it = source.begin();
   45|       |
   46|   340k|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 337k, False: 2.95k]
  ------------------
   47|   337k|        auto sv =
   48|   337k|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|   337k|                .substr(0, 8);
   50|       |
   51|   337k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 298k, False: 39.6k]
  ------------------
   52|   298k|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|   298k|            it = detail::make_string_view_iterator(source, tmp_it);
   54|   298k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 243k, False: 55.0k]
  ------------------
   55|   243k|                break;
   56|   243k|            }
   57|  55.0k|            continue;
   58|   298k|        }
   59|       |
   60|  83.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 82.5k, False: 1.16k]
  ------------------
   61|  82.5k|            auto tmp =
   62|  82.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  82.5k|            auto res = get_next_code_point(tmp);
   64|  82.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 38.4k, False: 44.0k]
  ------------------
   65|  38.4k|                return it;
   66|  38.4k|            }
   67|  44.0k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  44.0k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  44.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  44.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  44.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  44.0k|        }
   71|  39.6k|    }
   72|       |
   73|   245k|    return detail::make_string_view_iterator(source, it);
   74|   284k|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|   996k|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|  82.5k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|   280k|{
  300|   280k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   280k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   280k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   280k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|   280k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   280k|        return ranges::next(ranges::begin(range),
  306|   280k|                            ranges::distance(buf.view().begin(), it));
  307|   280k|    }
  308|   280k|    else {
  309|   280k|        auto it = ranges::begin(range);
  310|       |
  311|   280k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|   280k|            auto seg = get_contiguous_beginning(range);
  313|   280k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   280k|                seg_it != seg.end()) {
  315|   280k|                return ranges_polyfill::batch_next(
  316|   280k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   280k|            }
  318|   280k|            ranges_polyfill::batch_next(it, seg.size());
  319|   280k|        }
  320|       |
  321|   280k|        return read_while_code_point(
  322|   280k|            SCN_FWD(range),
  323|   280k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   280k|    }
  325|   280k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  4.36k|{
  139|  4.36k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  4.36k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  4.36k|{
  131|  4.36k|    return ranges::find_if(range, pred);
  132|  4.36k|}
_ZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
  269|   277k|{
  270|   277k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|   277k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|   277k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|   277k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  274|   277k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|   277k|        return ranges::next(ranges::begin(range),
  276|   277k|                            ranges::distance(buf.view().begin(), it));
  277|   277k|    }
  278|   277k|    else {
  279|   277k|        auto it = ranges::begin(range);
  280|       |
  281|   277k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  282|   277k|            auto seg = get_contiguous_beginning(range);
  283|   277k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|   277k|                seg_it != seg.end()) {
  285|   277k|                return ranges_polyfill::batch_next(
  286|   277k|                    it, ranges::distance(seg.begin(), seg_it));
  287|   277k|            }
  288|   277k|            ranges_polyfill::batch_next(it, seg.size());
  289|   277k|        }
  290|       |
  291|   277k|        return read_until_code_point(
  292|   277k|            ranges::subrange{it, ranges::end(range)},
  293|   277k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|   277k|    }
  295|   277k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|  3.56k|{
  300|  3.56k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  3.56k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  3.56k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  3.56k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  3.56k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  3.56k|        return ranges::next(ranges::begin(range),
  306|  3.56k|                            ranges::distance(buf.view().begin(), it));
  307|  3.56k|    }
  308|  3.56k|    else {
  309|  3.56k|        auto it = ranges::begin(range);
  310|       |
  311|  3.56k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  3.56k|            auto seg = get_contiguous_beginning(range);
  313|  3.56k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  3.56k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 3.56k, False: 0]
  ------------------
  315|  3.56k|                return ranges_polyfill::batch_next(
  316|  3.56k|                    it, ranges::distance(seg.begin(), seg_it));
  317|  3.56k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  3.56k|    }
  325|  3.56k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|  3.56k|{
  178|  3.56k|    static_assert(ranges::contiguous_range<Range> &&
  179|  3.56k|                  ranges::sized_range<Range>);
  180|       |
  181|  3.56k|    std::array<char32_t, 16> cp_buf{};
  182|  3.56k|    std::array<uint8_t, 16> idx_buf{};
  183|  3.56k|    auto it = ranges::begin(range);
  184|  7.12k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 3.56k, False: 3.56k]
  ------------------
  185|  3.56k|        auto chunk_begin = it;
  186|  3.56k|        size_t code_point_count = 0;
  187|  3.56k|        uint8_t code_unit_idx = 0;
  188|  7.12k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 7.12k, False: 0]
  |  Branch (188:52): [True: 3.56k, False: 3.56k]
  ------------------
  189|  3.56k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 3.56k, False: 0]
  ------------------
  190|  3.56k|                idx_buf[code_point_count] = code_unit_idx;
  191|  3.56k|                ++code_point_count;
  192|  3.56k|            }
  193|  3.56k|            ++it;
  194|  3.56k|            ++code_unit_idx;
  195|  3.56k|        }
  196|       |
  197|  3.56k|        auto input = detail::make_string_view_from_pointers(
  198|  3.56k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  3.56k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  3.56k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  3.56k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  3.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.56k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  7.12k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 3.56k, False: 3.56k]
  ------------------
  217|  3.56k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 3.56k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|  3.56k|        }
  221|  3.56k|    }
  222|       |
  223|  3.56k|    return it;
  224|  3.56k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|  24.8k|{
   42|  24.8k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  24.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|  24.8k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  24.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.55k, False: 21.2k]
  |  |  ------------------
  ------------------
   48|  7.11k|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 7.10k, False: 5]
  ------------------
   49|  7.10k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 3.55k, False: 3.55k]
  ------------------
   50|  3.55k|                break;
   51|  3.55k|            }
   52|  7.10k|        }
   53|       |
   54|  3.55k|        return {it, make_contiguous_buffer(
   55|  3.55k|                        ranges::subrange{ranges::begin(range), it})};
   56|  3.55k|    }
   57|       |
   58|  21.2k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 21.2k, False: 0]
  ------------------
   59|  21.2k|        ++it;
   60|  21.2k|        return {it, make_contiguous_buffer(
   61|  21.2k|                        ranges::subrange{ranges::begin(range), it})};
   62|  21.2k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  21.2k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|  2.84k|{
  139|  2.84k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  2.84k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|  2.84k|{
  131|  2.84k|    return ranges::find_if(range, pred);
  132|  2.84k|}
_ZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_:
  269|  3.56k|{
  270|  3.56k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  3.56k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  3.56k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  3.56k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|  3.56k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  3.56k|        return ranges::next(ranges::begin(range),
  276|  3.56k|                            ranges::distance(buf.view().begin(), it));
  277|  3.56k|    }
  278|  3.56k|    else {
  279|  3.56k|        auto it = ranges::begin(range);
  280|       |
  281|  3.56k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|  3.56k|            auto seg = get_contiguous_beginning(range);
  283|  3.56k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  3.56k|                seg_it != seg.end()) {
  ------------------
  |  Branch (284:17): [True: 0, False: 3.56k]
  ------------------
  285|      0|                return ranges_polyfill::batch_next(
  286|      0|                    it, ranges::distance(seg.begin(), seg_it));
  287|      0|            }
  288|  3.56k|            ranges_polyfill::batch_next(it, seg.size());
  289|  3.56k|        }
  290|       |
  291|  3.56k|        return read_until_code_point(
  292|  3.56k|            ranges::subrange{it, ranges::end(range)},
  293|  3.56k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  3.56k|    }
  295|  3.56k|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  230|  3.56k|{
  231|  3.56k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  3.56k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  3.56k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|  3.56k|    }
  235|  3.56k|    else {
  236|  3.56k|        auto it = ranges::begin(range);
  237|  3.56k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  3.56k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  3.56k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 3.56k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  24.8k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 24.8k, False: 30]
  ------------------
  246|  24.8k|            const auto [iter, value] =
  247|  24.8k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  24.8k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  24.8k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 3.53k, False: 21.2k]
  ------------------
  250|  3.53k|                return it;
  251|  3.53k|            }
  252|  21.2k|            it = iter;
  253|  21.2k|        }
  254|       |
  255|     30|        return it;
  256|  3.56k|    }
  257|  3.56k|}
_ZZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_ENKUlDiE_clEDi:
  293|  28.3k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|   245k|{
  300|   245k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   245k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   245k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   245k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   245k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   245k|        return ranges::next(ranges::begin(range),
  306|   245k|                            ranges::distance(buf.view().begin(), it));
  307|   245k|    }
  308|   245k|    else {
  309|   245k|        auto it = ranges::begin(range);
  310|       |
  311|   245k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   245k|            auto seg = get_contiguous_beginning(range);
  313|   245k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   245k|                seg_it != seg.end()) {
  315|   245k|                return ranges_polyfill::batch_next(
  316|   245k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   245k|            }
  318|   245k|            ranges_polyfill::batch_next(it, seg.size());
  319|   245k|        }
  320|       |
  321|   245k|        return read_while_code_point(
  322|   245k|            SCN_FWD(range),
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   245k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   245k|    }
  325|   245k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|   245k|{
  264|   245k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   245k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|   245k|{
  231|   245k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   245k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   245k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|   245k|    }
  235|   245k|    else {
  236|   245k|        auto it = ranges::begin(range);
  237|   245k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   245k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   245k|            seg_it != seg.end()) {
  241|   245k|            return ranges_polyfill::batch_next(
  242|   245k|                it, ranges::distance(seg.begin(), seg_it));
  243|   245k|        }
  244|       |
  245|   245k|        while (it != ranges::end(range)) {
  246|   245k|            const auto [iter, value] =
  247|   245k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   245k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   245k|            if (pred(cp)) {
  250|   245k|                return it;
  251|   245k|            }
  252|   245k|            it = iter;
  253|   245k|        }
  254|       |
  255|   245k|        return it;
  256|   245k|    }
  257|   245k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|   245k|{
  178|   245k|    static_assert(ranges::contiguous_range<Range> &&
  179|   245k|                  ranges::sized_range<Range>);
  180|       |
  181|   245k|    std::array<char32_t, 16> cp_buf{};
  182|   245k|    std::array<uint8_t, 16> idx_buf{};
  183|   245k|    auto it = ranges::begin(range);
  184|   266k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 263k, False: 3.13k]
  ------------------
  185|   263k|        auto chunk_begin = it;
  186|   263k|        size_t code_point_count = 0;
  187|   263k|        uint8_t code_unit_idx = 0;
  188|  4.35M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 4.09M, False: 250k]
  |  Branch (188:52): [True: 4.08M, False: 12.8k]
  ------------------
  189|  4.08M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 4.08M, False: 0]
  ------------------
  190|  4.08M|                idx_buf[code_point_count] = code_unit_idx;
  191|  4.08M|                ++code_point_count;
  192|  4.08M|            }
  193|  4.08M|            ++it;
  194|  4.08M|            ++code_unit_idx;
  195|  4.08M|        }
  196|       |
  197|   263k|        auto input = detail::make_string_view_from_pointers(
  198|   263k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   263k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   263k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   263k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   995k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 973k, False: 21.6k]
  ------------------
  217|   973k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 241k, False: 731k]
  ------------------
  218|   241k|                return chunk_begin + idx_buf[i];
  219|   241k|            }
  220|   973k|        }
  221|   263k|    }
  222|       |
  223|  3.13k|    return it;
  224|   245k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|   973k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  5.78k|{
  139|  5.78k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  5.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  5.78k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  5.78k|{
  131|  5.78k|    return ranges::find_if(range, pred);
  132|  5.78k|}
_ZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
  269|   241k|{
  270|   241k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|   241k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|   241k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|   241k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|   241k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|   241k|        return ranges::next(ranges::begin(range),
  276|   241k|                            ranges::distance(buf.view().begin(), it));
  277|   241k|    }
  278|   241k|    else {
  279|   241k|        auto it = ranges::begin(range);
  280|       |
  281|   241k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|   241k|            auto seg = get_contiguous_beginning(range);
  283|   241k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|   241k|                seg_it != seg.end()) {
  285|   241k|                return ranges_polyfill::batch_next(
  286|   241k|                    it, ranges::distance(seg.begin(), seg_it));
  287|   241k|            }
  288|   241k|            ranges_polyfill::batch_next(it, seg.size());
  289|   241k|        }
  290|       |
  291|   241k|        return read_until_code_point(
  292|   241k|            ranges::subrange{it, ranges::end(range)},
  293|   241k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|   241k|    }
  295|   241k|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  230|   241k|{
  231|   241k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   241k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   241k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|   241k|    }
  235|   241k|    else {
  236|   241k|        auto it = ranges::begin(range);
  237|   241k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   241k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   241k|            seg_it != seg.end()) {
  241|   241k|            return ranges_polyfill::batch_next(
  242|   241k|                it, ranges::distance(seg.begin(), seg_it));
  243|   241k|        }
  244|       |
  245|   241k|        while (it != ranges::end(range)) {
  246|   241k|            const auto [iter, value] =
  247|   241k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   241k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   241k|            if (pred(cp)) {
  250|   241k|                return it;
  251|   241k|            }
  252|   241k|            it = iter;
  253|   241k|        }
  254|       |
  255|   241k|        return it;
  256|   241k|    }
  257|   241k|}
_ZN3scn2v24impl27read_until_code_point_eagerIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  177|   241k|{
  178|   241k|    static_assert(ranges::contiguous_range<Range> &&
  179|   241k|                  ranges::sized_range<Range>);
  180|       |
  181|   241k|    std::array<char32_t, 16> cp_buf{};
  182|   241k|    std::array<uint8_t, 16> idx_buf{};
  183|   241k|    auto it = ranges::begin(range);
  184|   348k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 340k, False: 8.09k]
  ------------------
  185|   340k|        auto chunk_begin = it;
  186|   340k|        size_t code_point_count = 0;
  187|   340k|        uint8_t code_unit_idx = 0;
  188|  5.66M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 5.33M, False: 325k]
  |  Branch (188:52): [True: 5.32M, False: 15.0k]
  ------------------
  189|  5.32M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 5.32M, False: 0]
  ------------------
  190|  5.32M|                idx_buf[code_point_count] = code_unit_idx;
  191|  5.32M|                ++code_point_count;
  192|  5.32M|            }
  193|  5.32M|            ++it;
  194|  5.32M|            ++code_unit_idx;
  195|  5.32M|        }
  196|       |
  197|   340k|        auto input = detail::make_string_view_from_pointers(
  198|   340k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   340k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   340k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   340k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 340k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  2.99M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 2.88M, False: 107k]
  ------------------
  217|  2.88M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 233k, False: 2.65M]
  ------------------
  218|   233k|                return chunk_begin + idx_buf[i];
  219|   233k|            }
  220|  2.88M|        }
  221|   340k|    }
  222|       |
  223|  8.09k|    return it;
  224|   241k|}
_ZZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_ENKUlDiE_clEDi:
  293|  2.88M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   166k|{
  178|   166k|    static_assert(ranges::contiguous_range<Range> &&
  179|   166k|                  ranges::sized_range<Range>);
  180|       |
  181|   166k|    std::array<char32_t, 16> cp_buf{};
  182|   166k|    std::array<uint8_t, 16> idx_buf{};
  183|   166k|    auto it = ranges::begin(range);
  184|   328k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 166k, False: 161k]
  ------------------
  185|   166k|        auto chunk_begin = it;
  186|   166k|        size_t code_point_count = 0;
  187|   166k|        uint8_t code_unit_idx = 0;
  188|   333k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 333k, False: 0]
  |  Branch (188:52): [True: 166k, False: 166k]
  ------------------
  189|   166k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 166k, False: 0]
  ------------------
  190|   166k|                idx_buf[code_point_count] = code_unit_idx;
  191|   166k|                ++code_point_count;
  192|   166k|            }
  193|   166k|            ++it;
  194|   166k|            ++code_unit_idx;
  195|   166k|        }
  196|       |
  197|   166k|        auto input = detail::make_string_view_from_pointers(
  198|   166k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   166k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   166k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   166k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   328k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 166k, False: 161k]
  ------------------
  217|   166k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 5.81k, False: 161k]
  ------------------
  218|  5.81k|                return chunk_begin + idx_buf[i];
  219|  5.81k|            }
  220|   166k|        }
  221|   166k|    }
  222|       |
  223|   161k|    return it;
  224|   166k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|  83.4k|{
  300|  83.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  83.4k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  83.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  83.4k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  83.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  83.4k|        return ranges::next(ranges::begin(range),
  306|  83.4k|                            ranges::distance(buf.view().begin(), it));
  307|  83.4k|    }
  308|  83.4k|    else {
  309|  83.4k|        auto it = ranges::begin(range);
  310|       |
  311|  83.4k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  83.4k|            auto seg = get_contiguous_beginning(range);
  313|  83.4k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  83.4k|                seg_it != seg.end()) {
  315|  83.4k|                return ranges_polyfill::batch_next(
  316|  83.4k|                    it, ranges::distance(seg.begin(), seg_it));
  317|  83.4k|            }
  318|  83.4k|            ranges_polyfill::batch_next(it, seg.size());
  319|  83.4k|        }
  320|       |
  321|  83.4k|        return read_while_code_point(
  322|  83.4k|            SCN_FWD(range),
  ------------------
  |  |  248|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  83.4k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  83.4k|    }
  325|  83.4k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|  83.4k|{
  264|  83.4k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  83.4k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|  83.4k|{
  231|  83.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  83.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  83.4k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|  83.4k|    }
  235|  83.4k|    else {
  236|  83.4k|        auto it = ranges::begin(range);
  237|  83.4k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  83.4k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  83.4k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 5.81k, False: 77.6k]
  ------------------
  241|  5.81k|            return ranges_polyfill::batch_next(
  242|  5.81k|                it, ranges::distance(seg.begin(), seg_it));
  243|  5.81k|        }
  244|       |
  245|   194k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 194k, False: 85]
  ------------------
  246|   194k|            const auto [iter, value] =
  247|   194k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   194k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   194k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 77.6k, False: 116k]
  ------------------
  250|  77.6k|                return it;
  251|  77.6k|            }
  252|   116k|            it = iter;
  253|   116k|        }
  254|       |
  255|     85|        return it;
  256|  77.6k|    }
  257|  83.4k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   746k|{
   42|   746k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   746k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   746k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   746k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   746k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   746k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 746k, False: 0]
  ------------------
   59|   746k|        ++it;
   60|   746k|        return {it, make_contiguous_buffer(
   61|   746k|                        ranges::subrange{ranges::begin(range), it})};
   62|   746k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   746k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   278k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|  4.64k|{
  139|  4.64k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  4.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  4.64k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|  4.64k|{
  131|  4.64k|    return ranges::find_if(range, pred);
  132|  4.64k|}
_ZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_:
  269|  83.4k|{
  270|  83.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  83.4k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  83.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  83.4k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|  83.4k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  83.4k|        return ranges::next(ranges::begin(range),
  276|  83.4k|                            ranges::distance(buf.view().begin(), it));
  277|  83.4k|    }
  278|  83.4k|    else {
  279|  83.4k|        auto it = ranges::begin(range);
  280|       |
  281|  83.4k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|  83.4k|            auto seg = get_contiguous_beginning(range);
  283|  83.4k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  83.4k|                seg_it != seg.end()) {
  285|  83.4k|                return ranges_polyfill::batch_next(
  286|  83.4k|                    it, ranges::distance(seg.begin(), seg_it));
  287|  83.4k|            }
  288|  83.4k|            ranges_polyfill::batch_next(it, seg.size());
  289|  83.4k|        }
  290|       |
  291|  83.4k|        return read_until_code_point(
  292|  83.4k|            ranges::subrange{it, ranges::end(range)},
  293|  83.4k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  83.4k|    }
  295|  83.4k|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  230|  83.4k|{
  231|  83.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  83.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  83.4k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|  83.4k|    }
  235|  83.4k|    else {
  236|  83.4k|        auto it = ranges::begin(range);
  237|  83.4k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  83.4k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  83.4k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 83.4k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   552k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 551k, False: 350]
  ------------------
  246|   551k|            const auto [iter, value] =
  247|   551k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   551k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   551k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 83.0k, False: 468k]
  ------------------
  250|  83.0k|                return it;
  251|  83.0k|            }
  252|   468k|            it = iter;
  253|   468k|        }
  254|       |
  255|    350|        return it;
  256|  83.4k|    }
  257|  83.4k|}
_ZZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_ENKUlDiE_clEDi:
  293|   635k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });

_ZN3scn2v24impl25read_exactly_n_code_unitsIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__19enable_ifIX5rangeISD_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeE:
   47|  73.7k|{
   48|  73.7k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  73.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  73.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  73.7k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  73.7k|        const auto sz = ranges::ssize(range);
   52|  73.7k|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 120, False: 73.6k]
  ------------------
   53|    120|            return unexpected(eof_error::eof);
   54|    120|        }
   55|       |
   56|  73.6k|        return ranges::next(ranges::begin(range), count);
   57|  73.7k|    }
   58|  73.7k|    else {
   59|  73.7k|        auto it = ranges::begin(range);
   60|  73.7k|        if (guaranteed_minimum_size(range) >= count) {
   61|  73.7k|            return ranges_polyfill::batch_next(it, count);
   62|  73.7k|        }
   63|       |
   64|  73.7k|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  73.7k|             ++i, (void)++it) {
   66|  73.7k|            if (it == ranges::end(range)) {
   67|  73.7k|                return unexpected(eof_error::eof);
   68|  73.7k|            }
   69|  73.7k|        }
   70|       |
   71|  73.7k|        return it;
   72|  73.7k|    }
   73|  73.7k|}
_ZN3scn2v24impl8read_allIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
   29|  19.1k|{
   30|  19.1k|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  19.1k|}
_ZN3scn2v24impl8read_allIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tELNS5_13subrange_kindE0EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_:
   29|  1.42k|{
   30|  1.42k|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.42k|}
_ZN3scn2v24impl8read_allIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
   29|  18.9k|{
   30|  18.9k|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  18.9k|}
_ZN3scn2v24impl8read_allIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tELNS5_13subrange_kindE0EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_:
   29|  2.32k|{
   30|  2.32k|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  2.32k|}

_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginISA_Li0EEEDav:
  485|  38.2k|    {
  486|  38.2k|        return counted_width_iterator{ranges::begin(m_base),
  487|  38.2k|                                      ranges::end(m_base), m_count};
  488|  38.2k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
   53|  38.2k|    {
   54|  38.2k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE3endISA_Li0EEEDav:
  500|  19.1k|    {
  501|  19.1k|        return sentinel<true>{ranges::end(m_base)};
  502|  19.1k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE8sentinelILb1EEC2ES8_:
  415|  19.1k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
  106|  2.07M|    {
  107|  2.07M|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  2.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|      0|        _increment_current();
  109|  2.07M|        return *this;
  110|  2.07M|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
  360|  2.07M|    {
  361|  2.07M|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (361:13): [True: 1.74M, False: 328k]
  ------------------
  362|  1.74M|            auto cplen = _get_cp_length_at_current();
  363|  1.74M|            m_multibyte_left = cplen - 1;
  364|  1.74M|            m_count -= _get_width_at_current_cp_start(cplen);
  365|  1.74M|        }
  366|   328k|        else {
  367|   328k|            --m_multibyte_left;
  368|   328k|        }
  369|       |
  370|  2.07M|        ++m_current;
  371|  2.07M|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
  327|  1.74M|    {
  328|  1.74M|        return static_cast<difference_type>(
  329|  1.74M|            code_point_length_by_starting_code_unit(*m_current));
  330|  1.74M|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
  333|  1.74M|    {
  334|  1.74M|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  153|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.06k, False: 1.74M]
  |  |  ------------------
  ------------------
  335|  1.06k|            return 0;
  336|  1.06k|        }
  337|       |
  338|  1.74M|        if (cplen == 1) {
  ------------------
  |  Branch (338:13): [True: 1.67M, False: 73.7k]
  ------------------
  339|  1.67M|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  340|      0|            auto cp = static_cast<char32_t>(*m_current);
  341|  1.67M|            return static_cast<difference_type>(calculate_valid_text_width(cp));
  342|  1.67M|        }
  343|       |
  344|  73.7k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
  345|  73.7k|                                           cplen);
  346|  73.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 120, False: 73.6k]
  |  |  ------------------
  ------------------
  347|    120|            return 0;
  348|    120|        }
  349|       |
  350|  73.6k|        auto cp_view = make_contiguous_buffer(ranges::subrange{m_current, *r});
  351|  73.6k|        if (SCN_UNLIKELY(!validate_unicode(cp_view.view()))) {
  ------------------
  |  |  153|  73.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.72k, False: 69.9k]
  |  |  ------------------
  ------------------
  352|  3.72k|            return 0;
  353|  3.72k|        }
  354|       |
  355|  69.9k|        return static_cast<difference_type>(
  356|  69.9k|            calculate_valid_text_width(cp_view.view()));
  357|  73.6k|    }
_ZN3scn2v24impl27counted_width_iterator_implneIPKcS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  202|   701k|    {
  203|   701k|        return !(a == b);
  204|   701k|    }
_ZN3scn2v24impl27counted_width_iterator_impleqIPKcS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  194|   701k|    {
  195|   701k|        return a.m_current == b.m_current;
  196|   701k|    }
_ZN3scn2v24impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  435|  1.40M|        {
  436|  1.40M|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (436:21): [True: 17.4k, False: 1.38M]
  |  Branch (436:39): [True: 16.4k, False: 1.02k]
  ------------------
  437|  1.40M|                   y.base() == x.m_end;
  ------------------
  |  Branch (437:20): [True: 2.71k, False: 1.38M]
  ------------------
  438|  1.40M|        }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
   88|  1.40M|    {
   89|  1.40M|        return m_count;
   90|  1.40M|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
   92|  17.4k|    {
   93|  17.4k|        return m_multibyte_left;
   94|  17.4k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
   97|   692k|    {
   98|   692k|        return *m_current;
   99|   692k|    }
_ZN3scn2v24implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  446|  1.40M|        {
  447|  1.40M|            return !(y == x);
  448|  1.40M|        }
_ZNK3scn2v24impl14_take_width_fnclIRN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEERKiEEDTtlNS1_15take_width_viewEscDtfp_Efp_scDtfp0_Efp0_EEOT_OT0_:
  546|  19.1k|    {
  547|  19.1k|        return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                      return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  548|  19.1k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2ESA_l:
  466|  19.1k|    {
  467|  19.1k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
   84|  1.42M|    {
   85|  1.42M|        return m_current;
   86|  1.42M|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEE5beginISD_Li0EEEDav:
  485|  2.84k|    {
  486|  2.84k|        return counted_width_iterator{ranges::begin(m_base),
  487|  2.84k|                                      ranges::end(m_base), m_count};
  488|  2.84k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEC2ES7_SA_l:
   53|  2.84k|    {
   54|  2.84k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEE3endISD_Li0EEEDav:
  500|  1.42k|    {
  501|  1.42k|        return sentinel<true>{ranges::end(m_base)};
  502|  1.42k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEE8sentinelILb1EEC2ESB_:
  415|  1.42k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEppEv:
  106|   151M|    {
  107|   151M|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|   151M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   151M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|      0|        _increment_current();
  109|   151M|        return *this;
  110|   151M|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEE18_increment_currentEv:
  360|   151M|    {
  361|   151M|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (361:13): [True: 5.69k, False: 151M]
  ------------------
  362|  5.69k|            auto cplen = _get_cp_length_at_current();
  363|  5.69k|            m_multibyte_left = cplen - 1;
  364|  5.69k|            m_count -= _get_width_at_current_cp_start(cplen);
  365|  5.69k|        }
  366|   151M|        else {
  367|   151M|            --m_multibyte_left;
  368|   151M|        }
  369|       |
  370|   151M|        ++m_current;
  371|   151M|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEE25_get_cp_length_at_currentEv:
  327|  5.69k|    {
  328|  5.69k|        return static_cast<difference_type>(
  329|  5.69k|            code_point_length_by_starting_code_unit(*m_current));
  330|  5.69k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEE30_get_width_at_current_cp_startEl:
  333|  5.69k|    {
  334|  5.69k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  153|  5.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.84k, False: 2.84k]
  |  |  ------------------
  ------------------
  335|  2.84k|            return 0;
  336|  2.84k|        }
  337|       |
  338|  2.84k|        if (cplen == 1) {
  ------------------
  |  Branch (338:13): [True: 2.84k, False: 0]
  ------------------
  339|  2.84k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  2.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  340|      0|            auto cp = static_cast<char32_t>(*m_current);
  341|  2.84k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
  342|  2.84k|        }
  343|       |
  344|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
  345|      0|                                           cplen);
  346|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  347|      0|            return 0;
  348|      0|        }
  349|       |
  350|      0|        auto cp_view = make_contiguous_buffer(ranges::subrange{m_current, *r});
  351|      0|        if (SCN_UNLIKELY(!validate_unicode(cp_view.view()))) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return 0;
  353|      0|        }
  354|       |
  355|      0|        return static_cast<difference_type>(
  356|      0|            calculate_valid_text_width(cp_view.view()));
  357|      0|    }
_ZN3scn2v24impl27counted_width_iterator_implneINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S7_EEbE4typeERKNS2_22counted_width_iteratorIS7_SA_EERKNSG_ISD_T0_EE:
  202|  75.6M|    {
  203|  75.6M|        return !(a == b);
  204|  75.6M|    }
_ZN3scn2v24impl27counted_width_iterator_impleqINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S7_EEbE4typeERKNS2_22counted_width_iteratorIS7_SA_EERKNSG_ISD_T0_EE:
  194|  75.6M|    {
  195|  75.6M|        return a.m_current == b.m_current;
  196|  75.6M|    }
_ZN3scn2v24impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEERKNS1_15take_width_viewINS9_9subrange_8subrangeIS7_SA_LNS9_13subrange_kindE0EEEE8sentinelILb1EEE:
  435|  75.6M|        {
  436|  75.6M|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (436:21): [True: 0, False: 75.6M]
  |  Branch (436:39): [True: 0, False: 0]
  ------------------
  437|  75.6M|                   y.base() == x.m_end;
  ------------------
  |  Branch (437:20): [True: 1.42k, False: 75.6M]
  ------------------
  438|  75.6M|        }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEE5countEv:
   88|  75.6M|    {
   89|  75.6M|        return m_count;
   90|  75.6M|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEdeEv:
   97|  75.6M|    {
   98|  75.6M|        return *m_current;
   99|  75.6M|    }
_ZN3scn2v24implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEERKNS1_15take_width_viewINS9_9subrange_8subrangeIS7_SA_LNS9_13subrange_kindE0EEEE8sentinelILb1EEE:
  446|  75.6M|        {
  447|  75.6M|            return !(y == x);
  448|  75.6M|        }
_ZNK3scn2v24impl14_take_width_fnclIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tELNS5_13subrange_kindE0EEERKiEEDTtlNS1_15take_width_viewEscDtfp_Efp_scDtfp0_Efp0_EEOT_OT0_:
  546|  1.42k|    {
  547|  1.42k|        return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                      return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  548|  1.42k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEC2ESD_l:
  466|  1.42k|    {
  467|  1.42k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEE4baseEv:
   84|  75.6M|    {
   85|  75.6M|        return m_current;
   86|  75.6M|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginISA_Li0EEEDav:
  485|  37.8k|    {
  486|  37.8k|        return counted_width_iterator{ranges::begin(m_base),
  487|  37.8k|                                      ranges::end(m_base), m_count};
  488|  37.8k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
   53|  37.8k|    {
   54|  37.8k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE3endISA_Li0EEEDav:
  500|  18.9k|    {
  501|  18.9k|        return sentinel<true>{ranges::end(m_base)};
  502|  18.9k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE8sentinelILb1EEC2ES8_:
  415|  18.9k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
  106|  1.65M|    {
  107|  1.65M|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|      0|        _increment_current();
  109|  1.65M|        return *this;
  110|  1.65M|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
  360|  1.65M|    {
  361|  1.65M|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (361:13): [True: 1.65M, False: 0]
  ------------------
  362|  1.65M|            auto cplen = _get_cp_length_at_current();
  363|  1.65M|            m_multibyte_left = cplen - 1;
  364|  1.65M|            m_count -= _get_width_at_current_cp_start(cplen);
  365|  1.65M|        }
  366|      0|        else {
  367|      0|            --m_multibyte_left;
  368|      0|        }
  369|       |
  370|  1.65M|        ++m_current;
  371|  1.65M|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
  327|  1.65M|    {
  328|  1.65M|        return static_cast<difference_type>(
  329|  1.65M|            code_point_length_by_starting_code_unit(*m_current));
  330|  1.65M|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
  333|  1.65M|    {
  334|  1.65M|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  153|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.65M]
  |  |  ------------------
  ------------------
  335|      0|            return 0;
  336|      0|        }
  337|       |
  338|  1.65M|        if (cplen == 1) {
  ------------------
  |  Branch (338:13): [True: 1.65M, False: 0]
  ------------------
  339|  1.65M|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  340|      0|            auto cp = static_cast<char32_t>(*m_current);
  341|  1.65M|            return static_cast<difference_type>(calculate_valid_text_width(cp));
  342|  1.65M|        }
  343|       |
  344|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
  345|      0|                                           cplen);
  346|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  347|      0|            return 0;
  348|      0|        }
  349|       |
  350|      0|        auto cp_view = make_contiguous_buffer(ranges::subrange{m_current, *r});
  351|      0|        if (SCN_UNLIKELY(!validate_unicode(cp_view.view()))) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return 0;
  353|      0|        }
  354|       |
  355|      0|        return static_cast<difference_type>(
  356|      0|            calculate_valid_text_width(cp_view.view()));
  357|      0|    }
_ZN3scn2v24impl27counted_width_iterator_implneIPKwS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  202|   562k|    {
  203|   562k|        return !(a == b);
  204|   562k|    }
_ZN3scn2v24impl27counted_width_iterator_impleqIPKwS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  194|   562k|    {
  195|   562k|        return a.m_current == b.m_current;
  196|   562k|    }
_ZN3scn2v24impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  435|  1.12M|        {
  436|  1.12M|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (436:21): [True: 15.4k, False: 1.10M]
  |  Branch (436:39): [True: 15.4k, False: 0]
  ------------------
  437|  1.12M|                   y.base() == x.m_end;
  ------------------
  |  Branch (437:20): [True: 3.48k, False: 1.10M]
  ------------------
  438|  1.12M|        }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
   88|  1.12M|    {
   89|  1.12M|        return m_count;
   90|  1.12M|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
   92|  15.4k|    {
   93|  15.4k|        return m_multibyte_left;
   94|  15.4k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
   97|   552k|    {
   98|   552k|        return *m_current;
   99|   552k|    }
_ZN3scn2v24implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  446|  1.12M|        {
  447|  1.12M|            return !(y == x);
  448|  1.12M|        }
_ZNK3scn2v24impl14_take_width_fnclIRN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEERKiEEDTtlNS1_15take_width_viewEscDtfp_Efp_scDtfp0_Efp0_EEOT_OT0_:
  546|  18.9k|    {
  547|  18.9k|        return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                      return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  548|  18.9k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2ESA_l:
  466|  18.9k|    {
  467|  18.9k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
   84|  1.14M|    {
   85|  1.14M|        return m_current;
   86|  1.14M|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEE5beginISD_Li0EEEDav:
  485|  4.64k|    {
  486|  4.64k|        return counted_width_iterator{ranges::begin(m_base),
  487|  4.64k|                                      ranges::end(m_base), m_count};
  488|  4.64k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEC2ES7_SA_l:
   53|  4.64k|    {
   54|  4.64k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEE3endISD_Li0EEEDav:
  500|  2.32k|    {
  501|  2.32k|        return sentinel<true>{ranges::end(m_base)};
  502|  2.32k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEE8sentinelILb1EEC2ESB_:
  415|  2.32k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEppEv:
  106|   225M|    {
  107|   225M|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|   225M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   225M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|      0|        _increment_current();
  109|   225M|        return *this;
  110|   225M|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEE18_increment_currentEv:
  360|   225M|    {
  361|   225M|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (361:13): [True: 225M, False: 0]
  ------------------
  362|   225M|            auto cplen = _get_cp_length_at_current();
  363|   225M|            m_multibyte_left = cplen - 1;
  364|   225M|            m_count -= _get_width_at_current_cp_start(cplen);
  365|   225M|        }
  366|      0|        else {
  367|      0|            --m_multibyte_left;
  368|      0|        }
  369|       |
  370|   225M|        ++m_current;
  371|   225M|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEE25_get_cp_length_at_currentEv:
  327|   225M|    {
  328|   225M|        return static_cast<difference_type>(
  329|   225M|            code_point_length_by_starting_code_unit(*m_current));
  330|   225M|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEE30_get_width_at_current_cp_startEl:
  333|   225M|    {
  334|   225M|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  153|   225M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 225M]
  |  |  ------------------
  ------------------
  335|      0|            return 0;
  336|      0|        }
  337|       |
  338|   225M|        if (cplen == 1) {
  ------------------
  |  Branch (338:13): [True: 225M, False: 0]
  ------------------
  339|   225M|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|   225M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   225M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  340|      0|            auto cp = static_cast<char32_t>(*m_current);
  341|   225M|            return static_cast<difference_type>(calculate_valid_text_width(cp));
  342|   225M|        }
  343|       |
  344|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
  345|      0|                                           cplen);
  346|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  347|      0|            return 0;
  348|      0|        }
  349|       |
  350|      0|        auto cp_view = make_contiguous_buffer(ranges::subrange{m_current, *r});
  351|      0|        if (SCN_UNLIKELY(!validate_unicode(cp_view.view()))) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return 0;
  353|      0|        }
  354|       |
  355|      0|        return static_cast<difference_type>(
  356|      0|            calculate_valid_text_width(cp_view.view()));
  357|      0|    }
_ZN3scn2v24impl27counted_width_iterator_implneINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S7_EEbE4typeERKNS2_22counted_width_iteratorIS7_SA_EERKNSG_ISD_T0_EE:
  202|   112M|    {
  203|   112M|        return !(a == b);
  204|   112M|    }
_ZN3scn2v24impl27counted_width_iterator_impleqINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S7_EEbE4typeERKNS2_22counted_width_iteratorIS7_SA_EERKNSG_ISD_T0_EE:
  194|   112M|    {
  195|   112M|        return a.m_current == b.m_current;
  196|   112M|    }
_ZN3scn2v24impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEERKNS1_15take_width_viewINS9_9subrange_8subrangeIS7_SA_LNS9_13subrange_kindE0EEEE8sentinelILb1EEE:
  435|   112M|        {
  436|   112M|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (436:21): [True: 0, False: 112M]
  |  Branch (436:39): [True: 0, False: 0]
  ------------------
  437|   112M|                   y.base() == x.m_end;
  ------------------
  |  Branch (437:20): [True: 2.32k, False: 112M]
  ------------------
  438|   112M|        }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEE5countEv:
   88|   112M|    {
   89|   112M|        return m_count;
   90|   112M|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEdeEv:
   97|   112M|    {
   98|   112M|        return *m_current;
   99|   112M|    }
_ZN3scn2v24implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEERKNS1_15take_width_viewINS9_9subrange_8subrangeIS7_SA_LNS9_13subrange_kindE0EEEE8sentinelILb1EEE:
  446|   112M|        {
  447|   112M|            return !(y == x);
  448|   112M|        }
_ZNK3scn2v24impl14_take_width_fnclIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tELNS5_13subrange_kindE0EEERKiEEDTtlNS1_15take_width_viewEscDtfp_Efp_scDtfp0_Efp0_EEOT_OT0_:
  546|  2.32k|    {
  547|  2.32k|        return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                      return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  548|  2.32k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEC2ESD_l:
  466|  2.32k|    {
  467|  2.32k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEE4baseEv:
   84|   112M|    {
   85|   112M|        return m_current;
   86|   112M|    }

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|   289k|{
   33|   289k|    static_assert(std::is_same_v<Locale, std::locale>);
   34|   289k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|   280k|{
   46|   280k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 280k, False: 0]
  ------------------
   47|   280k|        auto it = read_while_classic_space(range);
   48|   280k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   280k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.95k, False: 277k]
  |  |  ------------------
  ------------------
   50|  2.95k|            return unexpected(e);
   51|  2.95k|        }
   52|       |
   53|   277k|        return it;
   54|   280k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   280k|}
_ZN3scn2v24impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|   138k|{
  107|   138k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|   138k|        dest.assign(source.view());
  109|   138k|    }
  110|   138k|    else {
  111|   138k|        return transcode_impl(source.view(), dest);
  112|   138k|    }
  113|       |
  114|   138k|    return {};
  115|   138k|}
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|  3.56k|{
   46|  3.56k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 3.56k, False: 0]
  ------------------
   47|  3.56k|        auto it = read_while_classic_space(range);
   48|  3.56k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  3.56k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.56k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|  3.56k|        return it;
   54|  3.56k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  3.56k|}
_ZN3scn2v24impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|  10.4k|{
   88|  10.4k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|  10.4k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (89:13): [True: 10.4k, False: 7]
  ------------------
   90|  10.4k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  246|  10.4k|    static_cast<    \
  |  |  247|  10.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   91|  10.4k|        }
   92|      7|        else {
   93|      7|            dest.assign(source.view());
   94|      7|        }
   95|  10.4k|    }
   96|  10.4k|    else {
   97|  10.4k|        return transcode_impl(source.view(), dest);
   98|  10.4k|    }
   99|       |
  100|  10.4k|    return {};
  101|  10.4k|}
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|   310k|    {
   35|   310k|        return m_msg == nullptr;
   36|   310k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|   144k|    {
  131|   144k|        reader_error_handler eh{};
  132|   144k|        get_derived().check_specs_impl(specs, eh);
  133|   144k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|   144k|        return {};
  137|   144k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
  141|   144k|    {
  142|   144k|        return static_cast<Derived&>(*this);
  143|   144k|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|   245k|{
   46|   245k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 245k, False: 0]
  ------------------
   47|   245k|        auto it = read_while_classic_space(range);
   48|   245k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   245k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.13k, False: 241k]
  |  |  ------------------
  ------------------
   50|  3.13k|            return unexpected(e);
   51|  3.13k|        }
   52|       |
   53|   241k|        return it;
   54|   245k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   245k|}
_ZN3scn2v24impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|   118k|{
  107|   118k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|   118k|        dest.assign(source.view());
  109|   118k|    }
  110|   118k|    else {
  111|   118k|        return transcode_impl(source.view(), dest);
  112|   118k|    }
  113|       |
  114|   118k|    return {};
  115|   118k|}
_ZN3scn2v24impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|   166k|    {
  131|   166k|        reader_error_handler eh{};
  132|   166k|        get_derived().check_specs_impl(specs, eh);
  133|   166k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|   166k|        return {};
  137|   166k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
  141|   166k|    {
  142|   166k|        return static_cast<Derived&>(*this);
  143|   166k|    }
_ZN3scn2v24impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|  88.7k|{
   88|  88.7k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|  88.7k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (89:13): [True: 11.0k, False: 77.7k]
  ------------------
   90|  11.0k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  246|  11.0k|    static_cast<    \
  |  |  247|  11.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   91|  11.0k|        }
   92|  77.7k|        else {
   93|  77.7k|            dest.assign(source.view());
   94|  77.7k|        }
   95|  88.7k|    }
   96|  88.7k|    else {
   97|  88.7k|        return transcode_impl(source.view(), dest);
   98|  88.7k|    }
   99|       |
  100|  88.7k|    return {};
  101|  88.7k|}
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|  83.4k|{
   46|  83.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 83.4k, False: 0]
  ------------------
   47|  83.4k|        auto it = read_while_classic_space(range);
   48|  83.4k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  83.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85, False: 83.4k]
  |  |  ------------------
  ------------------
   50|     85|            return unexpected(e);
   51|     85|        }
   52|       |
   53|  83.4k|        return it;
   54|  83.4k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  83.4k|}

_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|   307k|{
   43|   307k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.37k, False: 304k]
  |  |  ------------------
  ------------------
   44|  3.37k|        return unexpected(e);
   45|  3.37k|    }
   46|       |
   47|   304k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 23.5k, False: 280k]
  ------------------
   48|  23.5k|        return ranges::begin(range);
   49|  23.5k|    }
   50|       |
   51|   280k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   304k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
  121|  84.7k|    {
  122|  84.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  84.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  84.7k|                          basic_contiguous_scan_context<char_type>>) {
  126|  84.7k|            auto rd = make_reader<T, char_type>();
  127|  84.7k|            return impl(rd, range, value);
  128|  84.7k|        }
  129|  84.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  84.7k|            auto rd = make_reader<T, char_type>();
  131|  84.7k|            if (!is_segment_contiguous(range)) {
  132|  84.7k|                return impl(rd, range, value);
  133|  84.7k|            }
  134|  84.7k|            auto crange = get_as_contiguous(range);
  135|  84.7k|            SCN_TRY(it, impl(rd, crange, value));
  136|  84.7k|            return ranges_polyfill::batch_next(
  137|  84.7k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  84.7k|        }
  139|  84.7k|        else {
  140|  84.7k|            SCN_EXPECT(false);
  141|  84.7k|            SCN_UNREACHABLE;
  142|  84.7k|        }
  143|  84.7k|    }
_ZN3scn2v24impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
   56|   153k|{
   57|   153k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|   153k|        return reader_impl_for_bool<CharT>{};
   59|   153k|    }
   60|   153k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|   153k|        return reader_impl_for_char<CharT>{};
   62|   153k|    }
   63|   153k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|   153k|        return reader_impl_for_wchar<CharT>{};
   65|   153k|    }
   66|   153k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|   153k|        return reader_impl_for_code_point<CharT>{};
   68|   153k|    }
   69|   153k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|   153k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|   153k|        return reader_impl_for_string<CharT>{};
   72|   153k|    }
   73|   153k|    else if constexpr (std::is_same_v<T, std::string> ||
   74|   153k|                       std::is_same_v<T, std::wstring>) {
   75|   153k|        return reader_impl_for_string<CharT>{};
   76|   153k|    }
   77|   153k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|   153k|                       std::is_same_v<T, wregex_matches>) {
   79|   153k|        return reader_impl_for_regex_matches<CharT>{};
   80|   153k|    }
   81|   153k|    else if constexpr (std::is_same_v<T, void*>) {
   82|   153k|        return reader_impl_for_voidptr<CharT>{};
   83|   153k|    }
   84|   153k|    else if constexpr (std::is_floating_point_v<T>) {
   85|   153k|        return reader_impl_for_float<CharT>{};
   86|   153k|    }
   87|   153k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|   153k|                       !std::is_same_v<T, wchar_t> &&
   89|   153k|                       !std::is_same_v<T, char32_t> &&
   90|   153k|                       !std::is_same_v<T, bool>) {
   91|   153k|        return reader_impl_for_int<CharT>{};
   92|   153k|    }
   93|   153k|    else {
   94|   153k|        return reader_impl_for_monostate<CharT>{};
   95|   153k|    }
   96|   153k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  111|  84.7k|    {
  112|  84.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  84.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  84.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  84.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  84.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.35k, False: 83.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.35k|    }                                                  \
  |  |  |  |   70|  84.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  83.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  83.3k|                    .transform_error(make_eof_scan_error));
  115|  83.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  83.3k|                               loc);
  117|  84.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
  121|  84.7k|    {
  122|  84.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  84.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  84.7k|                          basic_contiguous_scan_context<char_type>>) {
  126|  84.7k|            auto rd = make_reader<T, char_type>();
  127|  84.7k|            return impl(rd, range, value);
  128|  84.7k|        }
  129|  84.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  84.7k|            auto rd = make_reader<T, char_type>();
  131|  84.7k|            if (!is_segment_contiguous(range)) {
  132|  84.7k|                return impl(rd, range, value);
  133|  84.7k|            }
  134|  84.7k|            auto crange = get_as_contiguous(range);
  135|  84.7k|            SCN_TRY(it, impl(rd, crange, value));
  136|  84.7k|            return ranges_polyfill::batch_next(
  137|  84.7k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  84.7k|        }
  139|  84.7k|        else {
  140|  84.7k|            SCN_EXPECT(false);
  141|  84.7k|            SCN_UNREACHABLE;
  142|  84.7k|        }
  143|  84.7k|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
   56|   161k|{
   57|   161k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|   161k|        return reader_impl_for_bool<CharT>{};
   59|   161k|    }
   60|   161k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|   161k|        return reader_impl_for_char<CharT>{};
   62|   161k|    }
   63|   161k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|   161k|        return reader_impl_for_wchar<CharT>{};
   65|   161k|    }
   66|   161k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|   161k|        return reader_impl_for_code_point<CharT>{};
   68|   161k|    }
   69|   161k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|   161k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|   161k|        return reader_impl_for_string<CharT>{};
   72|   161k|    }
   73|   161k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|   161k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|   161k|        return reader_impl_for_string<CharT>{};
   76|   161k|    }
   77|   161k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|   161k|                       std::is_same_v<T, wregex_matches>) {
   79|   161k|        return reader_impl_for_regex_matches<CharT>{};
   80|   161k|    }
   81|   161k|    else if constexpr (std::is_same_v<T, void*>) {
   82|   161k|        return reader_impl_for_voidptr<CharT>{};
   83|   161k|    }
   84|   161k|    else if constexpr (std::is_floating_point_v<T>) {
   85|   161k|        return reader_impl_for_float<CharT>{};
   86|   161k|    }
   87|   161k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|   161k|                       !std::is_same_v<T, wchar_t> &&
   89|   161k|                       !std::is_same_v<T, char32_t> &&
   90|   161k|                       !std::is_same_v<T, bool>) {
   91|   161k|        return reader_impl_for_int<CharT>{};
   92|   161k|    }
   93|   161k|    else {
   94|   161k|        return reader_impl_for_monostate<CharT>{};
   95|   161k|    }
   96|   161k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|  84.7k|    {
  112|  84.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  84.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  84.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  84.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  84.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.35k, False: 83.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.35k|    }                                                  \
  |  |  |  |   70|  84.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  83.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  83.3k|                    .transform_error(make_eof_scan_error));
  115|  83.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  83.3k|                               loc);
  117|  84.7k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|  7.83k|{
   43|  7.83k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9, False: 7.83k]
  |  |  ------------------
  ------------------
   44|      9|        return unexpected(e);
   45|      9|    }
   46|       |
   47|  7.83k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 4.27k, False: 3.56k]
  ------------------
   48|  4.27k|        return ranges::begin(range);
   49|  4.27k|    }
   50|       |
   51|  3.56k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  3.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  7.83k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  2.13k|    {
  122|  2.13k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  2.13k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  2.13k|            auto rd = make_reader<T, char_type>();
  127|  2.13k|            return impl(rd, range, value);
  128|  2.13k|        }
  129|  2.13k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  2.13k|            auto rd = make_reader<T, char_type>();
  131|  2.13k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 2.13k, False: 0]
  ------------------
  132|  2.13k|                return impl(rd, range, value);
  133|  2.13k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  2.13k|        else {
  140|  2.13k|            SCN_EXPECT(false);
  141|  2.13k|            SCN_UNREACHABLE;
  142|  2.13k|        }
  143|  2.13k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKST_RT1_:
  111|  2.13k|    {
  112|  2.13k|        SCN_TRY(it,
  ------------------
  |  |   71|  2.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 2.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  2.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  2.13k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  2.13k|                    .transform_error(make_eof_scan_error));
  115|  2.13k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  2.13k|                               loc);
  117|  2.13k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
  222|  69.1k|    {
  223|  69.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  69.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  69.1k|                          basic_contiguous_scan_context<char_type>>) {
  227|  69.1k|            auto rd = make_reader<T, char_type>();
  228|  69.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  69.1k|            return impl(rd, range, value);
  233|  69.1k|        }
  234|  69.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  69.1k|            auto rd = make_reader<T, char_type>();
  236|  69.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  69.1k|                return unexpected(e);
  238|  69.1k|            }
  239|       |
  240|  69.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  69.1k|                return impl(rd, range, value);
  242|  69.1k|            }
  243|       |
  244|  69.1k|            auto crange = get_as_contiguous(range);
  245|  69.1k|            SCN_TRY(it, impl(rd, crange, value));
  246|  69.1k|            return ranges_polyfill::batch_next(
  247|  69.1k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  69.1k|        }
  249|  69.1k|        else {
  250|  69.1k|            SCN_EXPECT(false);
  251|  69.1k|            SCN_UNREACHABLE;
  252|  69.1k|        }
  253|  69.1k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  204|  69.1k|    {
  205|  69.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  69.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.81k, False: 67.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.81k|    }                                                  \
  |  |  |  |   70|  69.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  67.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  67.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  67.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  67.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 9.57k, False: 57.7k]
  ------------------
  212|  9.57k|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|  9.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 524, False: 9.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    524|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    524|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    524|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    524|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    524|    }                                                  \
  |  |  |  |   70|  9.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|  9.05k|                                        value, loc));
  214|  9.05k|            return w_it.base();
  215|  9.57k|        }
  216|       |
  217|  57.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  67.3k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
  222|  69.1k|    {
  223|  69.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  69.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  69.1k|                          basic_contiguous_scan_context<char_type>>) {
  227|  69.1k|            auto rd = make_reader<T, char_type>();
  228|  69.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  69.1k|            return impl(rd, range, value);
  233|  69.1k|        }
  234|  69.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  69.1k|            auto rd = make_reader<T, char_type>();
  236|  69.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  69.1k|                return unexpected(e);
  238|  69.1k|            }
  239|       |
  240|  69.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  69.1k|                return impl(rd, range, value);
  242|  69.1k|            }
  243|       |
  244|  69.1k|            auto crange = get_as_contiguous(range);
  245|  69.1k|            SCN_TRY(it, impl(rd, crange, value));
  246|  69.1k|            return ranges_polyfill::batch_next(
  247|  69.1k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  69.1k|        }
  249|  69.1k|        else {
  250|  69.1k|            SCN_EXPECT(false);
  251|  69.1k|            SCN_UNREACHABLE;
  252|  69.1k|        }
  253|  69.1k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  69.1k|    {
  205|  69.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  69.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.81k, False: 67.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.81k|    }                                                  \
  |  |  |  |   70|  69.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  67.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  67.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  67.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  67.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 9.57k, False: 57.7k]
  ------------------
  212|  9.57k|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|  9.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 524, False: 9.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    524|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    524|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    524|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    524|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    524|    }                                                  \
  |  |  |  |   70|  9.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  9.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|  9.05k|                                        value, loc));
  214|  9.05k|            return w_it.base();
  215|  9.57k|        }
  216|       |
  217|  57.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  67.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  5.70k|    {
  223|  5.70k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.70k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.70k|            auto rd = make_reader<T, char_type>();
  228|  5.70k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  5.70k|                return unexpected(e);
  230|  5.70k|            }
  231|       |
  232|  5.70k|            return impl(rd, range, value);
  233|  5.70k|        }
  234|  5.70k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  5.70k|            auto rd = make_reader<T, char_type>();
  236|  5.70k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.70k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  5.70k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 5.70k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  5.70k|                return impl(rd, range, value);
  242|  5.70k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  5.70k|        else {
  250|  5.70k|            SCN_EXPECT(false);
  251|  5.70k|            SCN_UNREACHABLE;
  252|  5.70k|        }
  253|  5.70k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKST_RT1_:
  204|  5.70k|    {
  205|  5.70k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 5.69k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  5.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  5.69k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  5.69k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  5.69k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  5.69k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 1.42k, False: 4.27k]
  ------------------
  212|  1.42k|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|  1.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.42k, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.42k|    }                                                  \
  |  |  |  |   70|  1.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      2|                                        value, loc));
  214|      2|            return w_it.base();
  215|  1.42k|        }
  216|       |
  217|  4.27k|        return rd.read_specs(subr, specs, value, loc);
  218|  5.69k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|   274k|{
   43|   274k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.47k, False: 269k]
  |  |  ------------------
  ------------------
   44|  4.47k|        return unexpected(e);
   45|  4.47k|    }
   46|       |
   47|   269k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 24.7k, False: 245k]
  ------------------
   48|  24.7k|        return ranges::begin(range);
   49|  24.7k|    }
   50|       |
   51|   245k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   269k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
  121|  74.2k|    {
  122|  74.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  74.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  74.2k|                          basic_contiguous_scan_context<char_type>>) {
  126|  74.2k|            auto rd = make_reader<T, char_type>();
  127|  74.2k|            return impl(rd, range, value);
  128|  74.2k|        }
  129|  74.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  74.2k|            auto rd = make_reader<T, char_type>();
  131|  74.2k|            if (!is_segment_contiguous(range)) {
  132|  74.2k|                return impl(rd, range, value);
  133|  74.2k|            }
  134|  74.2k|            auto crange = get_as_contiguous(range);
  135|  74.2k|            SCN_TRY(it, impl(rd, crange, value));
  136|  74.2k|            return ranges_polyfill::batch_next(
  137|  74.2k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  74.2k|        }
  139|  74.2k|        else {
  140|  74.2k|            SCN_EXPECT(false);
  141|  74.2k|            SCN_UNREACHABLE;
  142|  74.2k|        }
  143|  74.2k|    }
_ZN3scn2v24impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
   56|   137k|{
   57|   137k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|   137k|        return reader_impl_for_bool<CharT>{};
   59|   137k|    }
   60|   137k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|   137k|        return reader_impl_for_char<CharT>{};
   62|   137k|    }
   63|   137k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|   137k|        return reader_impl_for_wchar<CharT>{};
   65|   137k|    }
   66|   137k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|   137k|        return reader_impl_for_code_point<CharT>{};
   68|   137k|    }
   69|   137k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|   137k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|   137k|        return reader_impl_for_string<CharT>{};
   72|   137k|    }
   73|   137k|    else if constexpr (std::is_same_v<T, std::string> ||
   74|   137k|                       std::is_same_v<T, std::wstring>) {
   75|   137k|        return reader_impl_for_string<CharT>{};
   76|   137k|    }
   77|   137k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|   137k|                       std::is_same_v<T, wregex_matches>) {
   79|   137k|        return reader_impl_for_regex_matches<CharT>{};
   80|   137k|    }
   81|   137k|    else if constexpr (std::is_same_v<T, void*>) {
   82|   137k|        return reader_impl_for_voidptr<CharT>{};
   83|   137k|    }
   84|   137k|    else if constexpr (std::is_floating_point_v<T>) {
   85|   137k|        return reader_impl_for_float<CharT>{};
   86|   137k|    }
   87|   137k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|   137k|                       !std::is_same_v<T, wchar_t> &&
   89|   137k|                       !std::is_same_v<T, char32_t> &&
   90|   137k|                       !std::is_same_v<T, bool>) {
   91|   137k|        return reader_impl_for_int<CharT>{};
   92|   137k|    }
   93|   137k|    else {
   94|   137k|        return reader_impl_for_monostate<CharT>{};
   95|   137k|    }
   96|   137k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  111|  74.2k|    {
  112|  74.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  74.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.62k, False: 72.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.62k|    }                                                  \
  |  |  |  |   70|  74.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  72.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  72.5k|                    .transform_error(make_eof_scan_error));
  115|  72.5k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  72.5k|                               loc);
  117|  74.2k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
  121|  74.2k|    {
  122|  74.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  74.2k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  74.2k|                          basic_contiguous_scan_context<char_type>>) {
  126|  74.2k|            auto rd = make_reader<T, char_type>();
  127|  74.2k|            return impl(rd, range, value);
  128|  74.2k|        }
  129|  74.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  74.2k|            auto rd = make_reader<T, char_type>();
  131|  74.2k|            if (!is_segment_contiguous(range)) {
  132|  74.2k|                return impl(rd, range, value);
  133|  74.2k|            }
  134|  74.2k|            auto crange = get_as_contiguous(range);
  135|  74.2k|            SCN_TRY(it, impl(rd, crange, value));
  136|  74.2k|            return ranges_polyfill::batch_next(
  137|  74.2k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  74.2k|        }
  139|  74.2k|        else {
  140|  74.2k|            SCN_EXPECT(false);
  141|  74.2k|            SCN_UNREACHABLE;
  142|  74.2k|        }
  143|  74.2k|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
   56|   228k|{
   57|   228k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|   228k|        return reader_impl_for_bool<CharT>{};
   59|   228k|    }
   60|   228k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|   228k|        return reader_impl_for_char<CharT>{};
   62|   228k|    }
   63|   228k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|   228k|        return reader_impl_for_wchar<CharT>{};
   65|   228k|    }
   66|   228k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|   228k|        return reader_impl_for_code_point<CharT>{};
   68|   228k|    }
   69|   228k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|   228k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|   228k|        return reader_impl_for_string<CharT>{};
   72|   228k|    }
   73|   228k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|   228k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|   228k|        return reader_impl_for_string<CharT>{};
   76|   228k|    }
   77|   228k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|   228k|                       std::is_same_v<T, wregex_matches>) {
   79|   228k|        return reader_impl_for_regex_matches<CharT>{};
   80|   228k|    }
   81|   228k|    else if constexpr (std::is_same_v<T, void*>) {
   82|   228k|        return reader_impl_for_voidptr<CharT>{};
   83|   228k|    }
   84|   228k|    else if constexpr (std::is_floating_point_v<T>) {
   85|   228k|        return reader_impl_for_float<CharT>{};
   86|   228k|    }
   87|   228k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|   228k|                       !std::is_same_v<T, wchar_t> &&
   89|   228k|                       !std::is_same_v<T, char32_t> &&
   90|   228k|                       !std::is_same_v<T, bool>) {
   91|   228k|        return reader_impl_for_int<CharT>{};
   92|   228k|    }
   93|   228k|    else {
   94|   228k|        return reader_impl_for_monostate<CharT>{};
   95|   228k|    }
   96|   228k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|  74.2k|    {
  112|  74.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  74.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.62k, False: 72.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.62k|    }                                                  \
  |  |  |  |   70|  74.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  72.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  72.5k|                    .transform_error(make_eof_scan_error));
  115|  72.5k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  72.5k|                               loc);
  117|  74.2k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
  222|  62.9k|    {
  223|  62.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  62.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  62.9k|                          basic_contiguous_scan_context<char_type>>) {
  227|  62.9k|            auto rd = make_reader<T, char_type>();
  228|  62.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 62.9k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  62.9k|            return impl(rd, range, value);
  233|  62.9k|        }
  234|  62.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  62.9k|            auto rd = make_reader<T, char_type>();
  236|  62.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  62.9k|                return unexpected(e);
  238|  62.9k|            }
  239|       |
  240|  62.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  62.9k|                return impl(rd, range, value);
  242|  62.9k|            }
  243|       |
  244|  62.9k|            auto crange = get_as_contiguous(range);
  245|  62.9k|            SCN_TRY(it, impl(rd, crange, value));
  246|  62.9k|            return ranges_polyfill::batch_next(
  247|  62.9k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  62.9k|        }
  249|  62.9k|        else {
  250|  62.9k|            SCN_EXPECT(false);
  251|  62.9k|            SCN_UNREACHABLE;
  252|  62.9k|        }
  253|  62.9k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  204|  62.9k|    {
  205|  62.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  62.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  62.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  62.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 60.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  62.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  60.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  60.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  60.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  60.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 9.46k, False: 51.2k]
  ------------------
  212|  9.46k|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|  9.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.24k, False: 8.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.24k|    }                                                  \
  |  |  |  |   70|  9.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|  8.22k|                                        value, loc));
  214|  8.22k|            return w_it.base();
  215|  9.46k|        }
  216|       |
  217|  51.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  60.7k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
  222|  62.9k|    {
  223|  62.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  62.9k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  62.9k|                          basic_contiguous_scan_context<char_type>>) {
  227|  62.9k|            auto rd = make_reader<T, char_type>();
  228|  62.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 62.9k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  62.9k|            return impl(rd, range, value);
  233|  62.9k|        }
  234|  62.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  62.9k|            auto rd = make_reader<T, char_type>();
  236|  62.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  62.9k|                return unexpected(e);
  238|  62.9k|            }
  239|       |
  240|  62.9k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  62.9k|                return impl(rd, range, value);
  242|  62.9k|            }
  243|       |
  244|  62.9k|            auto crange = get_as_contiguous(range);
  245|  62.9k|            SCN_TRY(it, impl(rd, crange, value));
  246|  62.9k|            return ranges_polyfill::batch_next(
  247|  62.9k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  62.9k|        }
  249|  62.9k|        else {
  250|  62.9k|            SCN_EXPECT(false);
  251|  62.9k|            SCN_UNREACHABLE;
  252|  62.9k|        }
  253|  62.9k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  62.9k|    {
  205|  62.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  62.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  62.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  62.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 60.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  62.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  60.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  60.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  60.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  60.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 9.46k, False: 51.2k]
  ------------------
  212|  9.46k|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|  9.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.24k, False: 8.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.24k|    }                                                  \
  |  |  |  |   70|  9.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|  8.22k|                                        value, loc));
  214|  8.22k|            return w_it.base();
  215|  9.46k|        }
  216|       |
  217|  51.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  60.7k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|  90.9k|{
   43|  90.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 514, False: 90.4k]
  |  |  ------------------
  ------------------
   44|    514|        return unexpected(e);
   45|    514|    }
   46|       |
   47|  90.4k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 6.96k, False: 83.4k]
  ------------------
   48|  6.96k|        return ranges::begin(range);
   49|  6.96k|    }
   50|       |
   51|  83.4k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  90.4k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  50.3k|    {
  122|  50.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  50.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  50.3k|            auto rd = make_reader<T, char_type>();
  127|  50.3k|            return impl(rd, range, value);
  128|  50.3k|        }
  129|  50.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  50.3k|            auto rd = make_reader<T, char_type>();
  131|  50.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 50.3k, False: 0]
  ------------------
  132|  50.3k|                return impl(rd, range, value);
  133|  50.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  50.3k|        else {
  140|  50.3k|            SCN_EXPECT(false);
  141|  50.3k|            SCN_UNREACHABLE;
  142|  50.3k|        }
  143|  50.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKST_RT1_:
  111|  50.3k|    {
  112|  50.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 255, False: 50.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    255|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    255|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    255|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    255|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    255|    }                                                  \
  |  |  |  |   70|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  50.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  50.0k|                    .transform_error(make_eof_scan_error));
  115|  50.0k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  50.0k|                               loc);
  117|  50.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  40.6k|    {
  223|  40.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  40.6k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  40.6k|            auto rd = make_reader<T, char_type>();
  228|  40.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  40.6k|                return unexpected(e);
  230|  40.6k|            }
  231|       |
  232|  40.6k|            return impl(rd, range, value);
  233|  40.6k|        }
  234|  40.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  40.6k|            auto rd = make_reader<T, char_type>();
  236|  40.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  40.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 40.6k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  40.6k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 40.6k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  40.6k|                return impl(rd, range, value);
  242|  40.6k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  40.6k|        else {
  250|  40.6k|            SCN_EXPECT(false);
  251|  40.6k|            SCN_UNREACHABLE;
  252|  40.6k|        }
  253|  40.6k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKST_RT1_:
  204|  40.6k|    {
  205|  40.6k|        SCN_TRY(it,
  ------------------
  |  |   71|  40.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  40.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 344, False: 40.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    344|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    344|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    344|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    344|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    344|    }                                                  \
  |  |  |  |   70|  40.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  40.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  40.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  40.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  40.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 2.32k, False: 38.0k]
  ------------------
  212|  2.32k|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|  2.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.15k, False: 170]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.15k|    }                                                  \
  |  |  |  |   70|  2.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    170|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    170|                                        value, loc));
  214|    170|            return w_it.base();
  215|  2.32k|        }
  216|       |
  217|  38.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  40.3k|    }

_ZN3scn2v24impl13string_readerIcEC2Ev:
  450|   315k|    constexpr string_reader() = default;
_ZNK3scn2v24impl13string_readerIcE19skip_ws_before_readEv:
  493|   315k|    {
  494|   315k|        return m_type == reader_type::word;
  495|   315k|    }
_ZN3scn2v24impl13string_readerIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RT0_NS0_6detail10locale_refE:
  500|  83.3k|    {
  501|  83.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  83.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  83.3k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  83.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  83.3k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__117basic_string_viewIT0_NSK_11char_traitsISM_EEEE:
  120|  83.3k|    {
  121|  83.3k|        return read_string_view_impl(range, read_until_classic_space(range),
  122|  83.3k|                                     value);
  123|  83.3k|    }
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEE:
   62|   138k|{
   63|   138k|    static_assert(
   64|   138k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|   138k|    auto src = [&]() {
   67|   138k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|   138k|            return make_contiguous_buffer(
   69|   138k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|   138k|        }
   71|   138k|        else {
   72|   138k|            return make_contiguous_buffer(
   73|   138k|                ranges::subrange{ranges::begin(range), result});
   74|   138k|        }
   75|   138k|    }();
   76|   138k|    using src_type = decltype(src);
   77|       |
   78|   138k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|   138k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|   138k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|   138k|                                     "Cannot read a string_view from "
   87|   138k|                                     "this source range (would require "
   88|   138k|                                     "transcoding)");
   89|   138k|    }
   90|   138k|    else {
   91|   138k|        const auto view = src.view();
   92|   138k|        value = std::basic_string_view<ValueCharT>(
   93|   138k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|   138k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 1.31k, False: 137k]
  ------------------
   96|  1.31k|            return unexpected_scan_error(
   97|  1.31k|                scan_error::invalid_scanned_value,
   98|  1.31k|                "Invalid encoding in scanned string_view");
   99|  1.31k|        }
  100|       |
  101|   137k|        return SCN_MOVE(result);
  ------------------
  |  |  246|   137k|    static_cast<    \
  |  |  247|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|   138k|    }
  103|   138k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEEENKUlvE_clEv:
   66|   138k|    auto src = [&]() {
   67|   138k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|   138k|            return make_contiguous_buffer(
   69|   138k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|   138k|        }
   71|   138k|        else {
   72|   138k|            return make_contiguous_buffer(
   73|   138k|                ranges::subrange{ranges::begin(range), result});
   74|   138k|        }
   75|   138k|    }();
_ZN3scn2v24impl13string_readerIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|  83.3k|    {
  501|  83.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  83.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  83.3k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  83.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  83.3k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|  83.3k|    {
  113|  83.3k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  83.3k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|   138k|{
   40|   138k|    static_assert(
   41|   138k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|   138k|    auto src =
   44|   138k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|   138k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 1.31k, False: 137k]
  ------------------
   46|  1.31k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|  1.31k|                                     "Invalid encoding in scanned string");
   48|  1.31k|    }
   49|   137k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|   137k|    static_cast<    \
  |  |  247|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|   137k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|   137k|    return SCN_MOVE(result);
  ------------------
  |  |  246|   137k|    static_cast<    \
  |  |  247|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|   137k|}
_ZN3scn2v24impl13string_readerIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_NS9_10locale_refE:
  500|  2.13k|    {
  501|  2.13k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  2.13k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  2.13k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  2.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  2.13k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEE:
  112|  2.13k|    {
  113|  2.13k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  2.13k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEESA_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_OT0_RNSt3__112basic_stringIT1_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
   39|  3.56k|{
   40|  3.56k|    static_assert(
   41|  3.56k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  3.56k|    auto src =
   44|  3.56k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  3.56k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 3.55k, False: 5]
  ------------------
   46|  3.55k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|  3.55k|                                     "Invalid encoding in scanned string");
   48|  3.55k|    }
   49|      5|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|      5|    static_cast<    \
  |  |  247|      5|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|      5|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      5|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|      5|    return SCN_MOVE(result);
  ------------------
  |  |  246|      5|    static_cast<    \
  |  |  247|      5|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|      5|}
_ZN3scn2v24impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  454|   144k|    {
  455|   144k|        detail::check_string_type_specs(specs, eh);
  456|       |
  457|   144k|        SCN_GCC_PUSH
  458|   144k|        SCN_GCC_IGNORE("-Wswitch")
  459|   144k|        SCN_GCC_IGNORE("-Wswitch-default")
  460|       |
  461|   144k|        SCN_CLANG_PUSH
  462|   144k|        SCN_CLANG_IGNORE("-Wswitch")
  463|   144k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  464|       |
  465|   144k|        switch (specs.type) {
  ------------------
  |  Branch (465:17): [True: 0, False: 144k]
  ------------------
  466|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (466:13): [True: 0, False: 144k]
  ------------------
  467|   114k|            case detail::presentation_type::string:
  ------------------
  |  Branch (467:13): [True: 114k, False: 29.6k]
  ------------------
  468|   114k|                m_type = reader_type::word;
  469|   114k|                break;
  470|       |
  471|  22.3k|            case detail::presentation_type::character:
  ------------------
  |  Branch (471:13): [True: 22.3k, False: 121k]
  ------------------
  472|  22.3k|                m_type = reader_type::character;
  473|  22.3k|                break;
  474|       |
  475|  7.24k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (475:13): [True: 7.24k, False: 136k]
  ------------------
  476|  7.24k|                m_type = reader_type::character_set;
  477|  7.24k|                break;
  478|       |
  479|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (479:13): [True: 0, False: 144k]
  ------------------
  480|      0|                m_type = reader_type::regex;
  481|      0|                break;
  482|       |
  483|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (483:13): [True: 0, False: 144k]
  ------------------
  484|      0|                m_type = reader_type::regex_escaped;
  485|      0|                break;
  486|   144k|        }
  487|       |
  488|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
  489|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
  490|   144k|    }
_ZN3scn2v24impl13string_readerIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
  511|  9.57k|    {
  512|  9.57k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  9.57k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  9.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  9.57k|    }
_ZN3scn2v24impl13string_readerIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_:
  528|  9.57k|    {
  529|  9.57k|        SCN_CLANG_PUSH
  530|  9.57k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  9.57k|        switch (m_type) {
  533|      0|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 0, False: 9.57k]
  ------------------
  534|      0|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|      0|                                                            value);
  536|       |
  537|  9.57k|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 9.57k, False: 0]
  ------------------
  538|  9.57k|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  9.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|  9.57k|                                                                 value);
  540|       |
  541|      0|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 0, False: 9.57k]
  ------------------
  542|      0|                return character_set_reader_impl<SourceCharT>{}.read(
  543|      0|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 9.57k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 9.57k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 9.57k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  9.57k|        }
  563|       |
  564|  9.57k|        SCN_CLANG_POP
  565|  9.57k|    }
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEE:
   62|  9.57k|{
   63|  9.57k|    static_assert(
   64|  9.57k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  9.57k|    auto src = [&]() {
   67|  9.57k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  9.57k|            return make_contiguous_buffer(
   69|  9.57k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  9.57k|        }
   71|  9.57k|        else {
   72|  9.57k|            return make_contiguous_buffer(
   73|  9.57k|                ranges::subrange{ranges::begin(range), result});
   74|  9.57k|        }
   75|  9.57k|    }();
   76|  9.57k|    using src_type = decltype(src);
   77|       |
   78|  9.57k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  9.57k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  9.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  9.57k|                                     "Cannot read a string_view from "
   87|  9.57k|                                     "this source range (would require "
   88|  9.57k|                                     "transcoding)");
   89|  9.57k|    }
   90|  9.57k|    else {
   91|  9.57k|        const auto view = src.view();
   92|  9.57k|        value = std::basic_string_view<ValueCharT>(
   93|  9.57k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  9.57k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 524, False: 9.05k]
  ------------------
   96|    524|            return unexpected_scan_error(
   97|    524|                scan_error::invalid_scanned_value,
   98|    524|                "Invalid encoding in scanned string_view");
   99|    524|        }
  100|       |
  101|  9.05k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  9.05k|    static_cast<    \
  |  |  247|  9.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  9.57k|    }
  103|  9.57k|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEEENKUlvE_clEv:
   66|  9.57k|    auto src = [&]() {
   67|  9.57k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  9.57k|            return make_contiguous_buffer(
   69|  9.57k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  9.57k|        }
   71|  9.57k|        else {
   72|  9.57k|            return make_contiguous_buffer(
   73|  9.57k|                ranges::subrange{ranges::begin(range), result});
   74|  9.57k|        }
   75|  9.57k|    }();
_ZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  204|  9.57k|    {
  205|  9.57k|        return read_impl(
  206|  9.57k|            range,
  207|  9.57k|            [&](auto&& rng) {
  208|  9.57k|                return read_string_view_impl(rng, read_all(rng), value);
  209|  9.57k|            },
  210|  9.57k|            detail::priority_tag<1>{});
  211|  9.57k|    }
_ZN3scn2v24impl21character_reader_implIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__117basic_string_viewIT0_NSN_11char_traitsISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISW_EEE4typeEEESW_OSP_NS0_6detail12priority_tagILm1EEE:
  219|  9.57k|    {
  220|  9.57k|        return read_cb(range);
  221|  9.57k|    }
_ZZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  207|  9.57k|            [&](auto&& rng) {
  208|  9.57k|                return read_string_view_impl(rng, read_all(rng), value);
  209|  9.57k|            },
_ZN3scn2v24impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
  347|  7.21k|        {
  348|  7.21k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (348:17): [True: 7.21k, False: 0]
  ------------------
  349|  7.21k|                return {};
  350|  7.21k|            }
  351|       |
  352|      0|            auto charset_string = specs.charset_string<SourceCharT>();
  353|      0|            auto it = detail::to_address(charset_string.begin());
  354|      0|            auto set = detail::parse_presentation_set(
  355|      0|                it, detail::to_address(charset_string.end()), nonascii);
  356|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  357|      0|                return nonascii.err;
  358|      0|            }
  359|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  360|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  361|       |
  362|      0|            ranges::sort(nonascii.extra_ranges);
  363|      0|            return {};
  364|      0|        }
_ZNK3scn2v24impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
  321|  11.6k|        {
  322|  11.6k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  242|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  323|      0|            const auto val =
  324|  11.6k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
  325|  11.6k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
  326|  11.6k|                    (val % 8)) &
  327|  11.6k|                   1u;
  328|  11.6k|        }
_ZNK3scn2v24impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
  372|  15.1k|        {
  373|  15.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (373:17): [True: 3.52k, False: 11.6k]
  ------------------
  374|  3.52k|                return false;
  375|  3.52k|            }
  376|       |
  377|  11.6k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
  378|  15.1k|        }
_ZN3scn2v24impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
  318|  7.21k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v24impl13string_readerIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refE:
  511|  57.7k|    {
  512|  57.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  57.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  57.7k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  57.7k|    }
_ZN3scn2v24impl13string_readerIcE9read_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_:
  528|  57.7k|    {
  529|  57.7k|        SCN_CLANG_PUSH
  530|  57.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  57.7k|        switch (m_type) {
  533|  55.5k|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 55.5k, False: 2.18k]
  ------------------
  534|  55.5k|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  55.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|  55.5k|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 57.7k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  2.18k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 2.18k, False: 55.5k]
  ------------------
  542|  2.18k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  2.18k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 57.7k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 57.7k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 57.7k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  57.7k|        }
  563|       |
  564|  57.7k|        SCN_CLANG_POP
  565|  57.7k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__117basic_string_viewIT0_NSL_11char_traitsISN_EEEE:
  120|  55.5k|    {
  121|  55.5k|        return read_string_view_impl(range, read_until_classic_space(range),
  122|  55.5k|                                     value);
  123|  55.5k|    }
_ZN3scn2v24impl25character_set_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSP_11char_traitsISR_EEEE:
  307|  2.18k|    {
  308|  2.18k|        auto it = read_source_impl(range, {specs});
  309|  2.18k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.41k, False: 772]
  |  |  ------------------
  ------------------
  310|  1.41k|            return unexpected(it.error());
  311|  1.41k|        }
  312|       |
  313|    772|        return read_string_view_impl(range, *it, value);
  314|  2.18k|    }
_ZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperE:
  397|  4.36k|    {
  398|  4.36k|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|  4.36k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|  4.36k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.36k]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|  4.36k|        read_source_callback cb_wrapper{helper};
  406|       |
  407|  4.36k|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 0, False: 4.36k]
  ------------------
  408|      0|            const auto cb = [&](char32_t cp) {
  409|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|      0|            };
  411|       |
  412|      0|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 0, False: 0]
  ------------------
  413|      0|                auto it = read_until_code_point(range, cb);
  414|      0|                return check_nonempty(it, range);
  415|      0|            }
  416|      0|            auto it = read_while_code_point(range, cb);
  417|      0|            return check_nonempty(it, range);
  418|      0|        }
  419|       |
  420|  4.36k|        const auto cb = [&](SourceCharT ch) {
  421|  4.36k|            return cb_wrapper.on_ascii_only(ch);
  422|  4.36k|        };
  423|       |
  424|  4.36k|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 0, False: 4.36k]
  ------------------
  425|      0|            auto it = read_until_code_unit(range, cb);
  426|      0|            return check_nonempty(it, range);
  427|      0|        }
  428|  4.36k|        auto it = read_while_code_unit(range, cb);
  429|  4.36k|        return check_nonempty(it, range);
  430|  4.36k|    }
_ZN3scn2v24impl25character_set_reader_implIcE14check_nonemptyIPKcN4nano6ranges9subrange_8subrangeIS6_S6_LNS8_13subrange_kindE1EEEEENS0_13scan_expectedIT_EERKSE_RKT0_:
  435|  4.36k|    {
  436|  4.36k|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 2.82k, False: 1.54k]
  ------------------
  437|  2.82k|            return unexpected_scan_error(
  438|  2.82k|                scan_error::invalid_scanned_value,
  439|  2.82k|                "No characters matched in [character set]");
  440|  2.82k|        }
  441|       |
  442|  1.54k|        return it;
  443|  4.36k|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlcE_clEc:
  420|  10.8k|        const auto cb = [&](SourceCharT ch) {
  421|  10.8k|            return cb_wrapper.on_ascii_only(ch);
  422|  10.8k|        };
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEE:
   62|    772|{
   63|    772|    static_assert(
   64|    772|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    772|    auto src = [&]() {
   67|    772|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    772|            return make_contiguous_buffer(
   69|    772|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    772|        }
   71|    772|        else {
   72|    772|            return make_contiguous_buffer(
   73|    772|                ranges::subrange{ranges::begin(range), result});
   74|    772|        }
   75|    772|    }();
   76|    772|    using src_type = decltype(src);
   77|       |
   78|    772|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    772|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    772|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    772|                                     "Cannot read a string_view from "
   87|    772|                                     "this source range (would require "
   88|    772|                                     "transcoding)");
   89|    772|    }
   90|    772|    else {
   91|    772|        const auto view = src.view();
   92|    772|        value = std::basic_string_view<ValueCharT>(
   93|    772|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    772|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 0, False: 772]
  ------------------
   96|      0|            return unexpected_scan_error(
   97|      0|                scan_error::invalid_scanned_value,
   98|      0|                "Invalid encoding in scanned string_view");
   99|      0|        }
  100|       |
  101|    772|        return SCN_MOVE(result);
  ------------------
  |  |  246|    772|    static_cast<    \
  |  |  247|    772|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    772|    }
  103|    772|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEEENKUlvE_clEv:
   66|    772|    auto src = [&]() {
   67|    772|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    772|            return make_contiguous_buffer(
   69|    772|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    772|        }
   71|    772|        else {
   72|    772|            return make_contiguous_buffer(
   73|    772|                ranges::subrange{ranges::begin(range), result});
   74|    772|        }
   75|    772|    }();
_ZN3scn2v24impl13string_readerIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|  9.57k|    {
  512|  9.57k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  9.57k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  9.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  9.57k|    }
_ZN3scn2v24impl13string_readerIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|  9.57k|    {
  529|  9.57k|        SCN_CLANG_PUSH
  530|  9.57k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  9.57k|        switch (m_type) {
  533|      0|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 0, False: 9.57k]
  ------------------
  534|      0|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|      0|                                                            value);
  536|       |
  537|  9.57k|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 9.57k, False: 0]
  ------------------
  538|  9.57k|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  9.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|  9.57k|                                                                 value);
  540|       |
  541|      0|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 0, False: 9.57k]
  ------------------
  542|      0|                return character_set_reader_impl<SourceCharT>{}.read(
  543|      0|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 9.57k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 9.57k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 9.57k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  9.57k|        }
  563|       |
  564|  9.57k|        SCN_CLANG_POP
  565|  9.57k|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|  9.57k|{
   40|  9.57k|    static_assert(
   41|  9.57k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  9.57k|    auto src =
   44|  9.57k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  9.57k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 524, False: 9.05k]
  ------------------
   46|    524|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    524|                                     "Invalid encoding in scanned string");
   48|    524|    }
   49|  9.05k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  9.05k|    static_cast<    \
  |  |  247|  9.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  9.05k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  9.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 9.05k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  9.05k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  9.05k|    static_cast<    \
  |  |  247|  9.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  9.05k|}
_ZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|  9.57k|    {
  193|  9.57k|        return read_impl(
  194|  9.57k|            range,
  195|  9.57k|            [&](auto&& rng) {
  196|  9.57k|                return read_string_impl(rng, read_all(rng), value);
  197|  9.57k|            },
  198|  9.57k|            detail::priority_tag<1>{});
  199|  9.57k|    }
_ZN3scn2v24impl21character_reader_implIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|  9.57k|    {
  220|  9.57k|        return read_cb(range);
  221|  9.57k|    }
_ZZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|  9.57k|            [&](auto&& rng) {
  196|  9.57k|                return read_string_impl(rng, read_all(rng), value);
  197|  9.57k|            },
_ZN3scn2v24impl13string_readerIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  57.7k|    {
  512|  57.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  57.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  57.7k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  57.7k|    }
_ZN3scn2v24impl13string_readerIcE9read_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  57.7k|    {
  529|  57.7k|        SCN_CLANG_PUSH
  530|  57.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  57.7k|        switch (m_type) {
  533|  55.5k|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 55.5k, False: 2.18k]
  ------------------
  534|  55.5k|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  55.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|  55.5k|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 57.7k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  2.18k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 2.18k, False: 55.5k]
  ------------------
  542|  2.18k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  2.18k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 57.7k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 57.7k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 57.7k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  57.7k|        }
  563|       |
  564|  57.7k|        SCN_CLANG_POP
  565|  57.7k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|  55.5k|    {
  113|  55.5k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  55.5k|    }
_ZN3scn2v24impl25character_set_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|  2.18k|    {
  294|  2.18k|        auto it = read_source_impl(range, {specs});
  295|  2.18k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.41k, False: 772]
  |  |  ------------------
  ------------------
  296|  1.41k|            return unexpected(it.error());
  297|  1.41k|        }
  298|       |
  299|    772|        return read_string_impl(range, *it, value);
  300|  2.18k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|    772|{
   40|    772|    static_assert(
   41|    772|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    772|    auto src =
   44|    772|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    772|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 772]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|    772|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    772|    static_cast<    \
  |  |  247|    772|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    772|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    772|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 772]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    772|    return SCN_MOVE(result);
  ------------------
  |  |  246|    772|    static_cast<    \
  |  |  247|    772|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    772|}
_ZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS3_12specs_helperE:
  397|  2.84k|    {
  398|  2.84k|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|  2.84k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|  2.84k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.84k]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|  2.84k|        read_source_callback cb_wrapper{helper};
  406|       |
  407|  2.84k|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 0, False: 2.84k]
  ------------------
  408|      0|            const auto cb = [&](char32_t cp) {
  409|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|      0|            };
  411|       |
  412|      0|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 0, False: 0]
  ------------------
  413|      0|                auto it = read_until_code_point(range, cb);
  414|      0|                return check_nonempty(it, range);
  415|      0|            }
  416|      0|            auto it = read_while_code_point(range, cb);
  417|      0|            return check_nonempty(it, range);
  418|      0|        }
  419|       |
  420|  2.84k|        const auto cb = [&](SourceCharT ch) {
  421|  2.84k|            return cb_wrapper.on_ascii_only(ch);
  422|  2.84k|        };
  423|       |
  424|  2.84k|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 0, False: 2.84k]
  ------------------
  425|      0|            auto it = read_until_code_unit(range, cb);
  426|      0|            return check_nonempty(it, range);
  427|      0|        }
  428|  2.84k|        auto it = read_while_code_unit(range, cb);
  429|  2.84k|        return check_nonempty(it, range);
  430|  2.84k|    }
_ZN3scn2v24impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges9subrange_8subrangeIS8_NSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS0_13scan_expectedIT_EERKSH_RKT0_:
  435|  2.84k|    {
  436|  2.84k|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 1.42k, False: 1.42k]
  ------------------
  437|  1.42k|            return unexpected_scan_error(
  438|  1.42k|                scan_error::invalid_scanned_value,
  439|  1.42k|                "No characters matched in [character set]");
  440|  1.42k|        }
  441|       |
  442|  1.42k|        return it;
  443|  2.84k|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS3_12specs_helperEENKUlcE_clEc:
  420|  4.26k|        const auto cb = [&](SourceCharT ch) {
  421|  4.26k|            return cb_wrapper.on_ascii_only(ch);
  422|  4.26k|        };
_ZN3scn2v24impl13string_readerIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RKNSA_12format_specsERT0_NSA_10locale_refE:
  511|  1.42k|    {
  512|  1.42k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.42k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  1.42k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  1.42k|    }
_ZN3scn2v24impl13string_readerIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENSt3__112basic_stringIcNSI_11char_traitsIcEENSI_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RKNSA_12format_specsERT0_:
  528|  1.42k|    {
  529|  1.42k|        SCN_CLANG_PUSH
  530|  1.42k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  1.42k|        switch (m_type) {
  533|      0|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 0, False: 1.42k]
  ------------------
  534|      0|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|      0|                                                            value);
  536|       |
  537|  1.42k|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 1.42k, False: 0]
  ------------------
  538|  1.42k|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|  1.42k|                                                                 value);
  540|       |
  541|      0|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 0, False: 1.42k]
  ------------------
  542|      0|                return character_set_reader_impl<SourceCharT>{}.read(
  543|      0|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 1.42k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 1.42k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 1.42k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  1.42k|        }
  563|       |
  564|  1.42k|        SCN_CLANG_POP
  565|  1.42k|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tELNS5_13subrange_kindE0EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorISB_SC_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESM_OT0_RNSt3__112basic_stringIT1_NSR_11char_traitsIST_EENSR_9allocatorIST_EEEE:
   39|  1.42k|{
   40|  1.42k|    static_assert(
   41|  1.42k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.42k|    auto src =
   44|  1.42k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.42k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 1.42k, False: 2]
  ------------------
   46|  1.42k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|  1.42k|                                     "Invalid encoding in scanned string");
   48|  1.42k|    }
   49|      2|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|      2|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|      2|    return SCN_MOVE(result);
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|      2|}
_ZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  192|  1.42k|    {
  193|  1.42k|        return read_impl(
  194|  1.42k|            range,
  195|  1.42k|            [&](auto&& rng) {
  196|  1.42k|                return read_string_impl(rng, read_all(rng), value);
  197|  1.42k|            },
  198|  1.42k|            detail::priority_tag<1>{});
  199|  1.42k|    }
_ZN3scn2v24impl21character_reader_implIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_4readINS1_15take_width_viewISF_EEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEEEUlSP_E_EENSJ_INSK_IRNSH_ISL_EEXsr6rangesE14borrowed_rangeIS11_EEE4typeEEES11_OSS_NS9_12priority_tagILm1EEE:
  219|  1.42k|    {
  220|  1.42k|        return read_cb(range);
  221|  1.42k|    }
_ZZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEEENKUlSO_E_clIRSH_EEDaSO_:
  195|  1.42k|            [&](auto&& rng) {
  196|  1.42k|                return read_string_impl(rng, read_all(rng), value);
  197|  1.42k|            },
_ZN3scn2v24impl13string_readerIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  511|  4.27k|    {
  512|  4.27k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  4.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  4.27k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  4.27k|    }
_ZN3scn2v24impl13string_readerIcE9read_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNS9_12format_specsERT0_:
  528|  4.27k|    {
  529|  4.27k|        SCN_CLANG_PUSH
  530|  4.27k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  4.27k|        switch (m_type) {
  533|  1.42k|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 1.42k, False: 2.84k]
  ------------------
  534|  1.42k|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|  1.42k|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 4.27k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  2.84k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 2.84k, False: 1.42k]
  ------------------
  542|  2.84k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  2.84k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 4.27k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 4.27k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 4.27k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  4.27k|        }
  563|       |
  564|  4.27k|        SCN_CLANG_POP
  565|  4.27k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RNSt3__112basic_stringIT0_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
  112|  1.42k|    {
  113|  1.42k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  1.42k|    }
_ZN3scn2v24impl25character_set_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERNSt3__112basic_stringIT0_NSR_11char_traitsIST_EENSR_9allocatorIST_EEEE:
  293|  2.84k|    {
  294|  2.84k|        auto it = read_source_impl(range, {specs});
  295|  2.84k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.42k, False: 1.42k]
  |  |  ------------------
  ------------------
  296|  1.42k|            return unexpected(it.error());
  297|  1.42k|        }
  298|       |
  299|  1.42k|        return read_string_impl(range, *it, value);
  300|  2.84k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEERSA_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_OT0_RNSt3__112basic_stringIT1_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEE:
   39|  1.42k|{
   40|  1.42k|    static_assert(
   41|  1.42k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.42k|    auto src =
   44|  1.42k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.42k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 1.42k]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|  1.42k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.42k|    static_cast<    \
  |  |  247|  1.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.42k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.42k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.42k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.42k|    static_cast<    \
  |  |  247|  1.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.42k|}
_ZN3scn2v24impl13string_readerIwEC2Ev:
  450|   365k|    constexpr string_reader() = default;
_ZNK3scn2v24impl13string_readerIwE19skip_ws_before_readEv:
  493|   365k|    {
  494|   365k|        return m_type == reader_type::word;
  495|   365k|    }
_ZN3scn2v24impl13string_readerIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIwNSD_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RT0_NS0_6detail10locale_refE:
  500|  72.5k|    {
  501|  72.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  72.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  72.5k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  72.5k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__117basic_string_viewIT0_NSK_11char_traitsISM_EEEE:
  120|  72.5k|    {
  121|  72.5k|        return read_string_view_impl(range, read_until_classic_space(range),
  122|  72.5k|                                     value);
  123|  72.5k|    }
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEE:
   62|   120k|{
   63|   120k|    static_assert(
   64|   120k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|   120k|    auto src = [&]() {
   67|   120k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|   120k|            return make_contiguous_buffer(
   69|   120k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|   120k|        }
   71|   120k|        else {
   72|   120k|            return make_contiguous_buffer(
   73|   120k|                ranges::subrange{ranges::begin(range), result});
   74|   120k|        }
   75|   120k|    }();
   76|   120k|    using src_type = decltype(src);
   77|       |
   78|   120k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|   120k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|   120k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|   120k|                                     "Cannot read a string_view from "
   87|   120k|                                     "this source range (would require "
   88|   120k|                                     "transcoding)");
   89|   120k|    }
   90|   120k|    else {
   91|   120k|        const auto view = src.view();
   92|   120k|        value = std::basic_string_view<ValueCharT>(
   93|   120k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|   120k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 3.11k, False: 117k]
  ------------------
   96|  3.11k|            return unexpected_scan_error(
   97|  3.11k|                scan_error::invalid_scanned_value,
   98|  3.11k|                "Invalid encoding in scanned string_view");
   99|  3.11k|        }
  100|       |
  101|   117k|        return SCN_MOVE(result);
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|   120k|    }
  103|   120k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEEENKUlvE_clEv:
   66|   120k|    auto src = [&]() {
   67|   120k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|   120k|            return make_contiguous_buffer(
   69|   120k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|   120k|        }
   71|   120k|        else {
   72|   120k|            return make_contiguous_buffer(
   73|   120k|                ranges::subrange{ranges::begin(range), result});
   74|   120k|        }
   75|   120k|    }();
_ZN3scn2v24impl13string_readerIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSD_11char_traitsIwEENSD_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|  72.5k|    {
  501|  72.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  72.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  72.5k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  72.5k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|  72.5k|    {
  113|  72.5k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  72.5k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|   120k|{
   40|   120k|    static_assert(
   41|   120k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|   120k|    auto src =
   44|   120k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|   120k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 3.11k, False: 117k]
  ------------------
   46|  3.11k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|  3.11k|                                     "Invalid encoding in scanned string");
   48|  3.11k|    }
   49|   117k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|   117k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 117k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|   117k|    return SCN_MOVE(result);
  ------------------
  |  |  246|   117k|    static_cast<    \
  |  |  247|   117k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|   117k|}
_ZN3scn2v24impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  454|   166k|    {
  455|   166k|        detail::check_string_type_specs(specs, eh);
  456|       |
  457|   166k|        SCN_GCC_PUSH
  458|   166k|        SCN_GCC_IGNORE("-Wswitch")
  459|   166k|        SCN_GCC_IGNORE("-Wswitch-default")
  460|       |
  461|   166k|        SCN_CLANG_PUSH
  462|   166k|        SCN_CLANG_IGNORE("-Wswitch")
  463|   166k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  464|       |
  465|   166k|        switch (specs.type) {
  ------------------
  |  Branch (465:17): [True: 0, False: 166k]
  ------------------
  466|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (466:13): [True: 0, False: 166k]
  ------------------
  467|   132k|            case detail::presentation_type::string:
  ------------------
  |  Branch (467:13): [True: 132k, False: 34.0k]
  ------------------
  468|   132k|                m_type = reader_type::word;
  469|   132k|                break;
  470|       |
  471|  23.5k|            case detail::presentation_type::character:
  ------------------
  |  Branch (471:13): [True: 23.5k, False: 142k]
  ------------------
  472|  23.5k|                m_type = reader_type::character;
  473|  23.5k|                break;
  474|       |
  475|  10.4k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (475:13): [True: 10.4k, False: 156k]
  ------------------
  476|  10.4k|                m_type = reader_type::character_set;
  477|  10.4k|                break;
  478|       |
  479|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (479:13): [True: 0, False: 166k]
  ------------------
  480|      0|                m_type = reader_type::regex;
  481|      0|                break;
  482|       |
  483|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (483:13): [True: 0, False: 166k]
  ------------------
  484|      0|                m_type = reader_type::regex_escaped;
  485|      0|                break;
  486|   166k|        }
  487|       |
  488|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
  489|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
  490|   166k|    }
_ZN3scn2v24impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
  347|  10.4k|        {
  348|  10.4k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (348:17): [True: 10.4k, False: 0]
  ------------------
  349|  10.4k|                return {};
  350|  10.4k|            }
  351|       |
  352|      0|            auto charset_string = specs.charset_string<SourceCharT>();
  353|      0|            auto it = detail::to_address(charset_string.begin());
  354|      0|            auto set = detail::parse_presentation_set(
  355|      0|                it, detail::to_address(charset_string.end()), nonascii);
  356|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  357|      0|                return nonascii.err;
  358|      0|            }
  359|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  360|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  361|       |
  362|      0|            ranges::sort(nonascii.extra_ranges);
  363|      0|            return {};
  364|      0|        }
_ZNK3scn2v24impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
  321|  12.5k|        {
  322|  12.5k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  242|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  323|      0|            const auto val =
  324|  12.5k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
  325|  12.5k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
  326|  12.5k|                    (val % 8)) &
  327|  12.5k|                   1u;
  328|  12.5k|        }
_ZNK3scn2v24impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
  372|  20.0k|        {
  373|  20.0k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (373:17): [True: 7.46k, False: 12.5k]
  ------------------
  374|  7.46k|                return false;
  375|  7.46k|            }
  376|       |
  377|  12.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
  378|  20.0k|        }
_ZN3scn2v24impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
  318|  10.4k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperE:
  397|  5.78k|    {
  398|  5.78k|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|  5.78k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|  5.78k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.78k]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|  5.78k|        read_source_callback cb_wrapper{helper};
  406|       |
  407|  5.78k|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 0, False: 5.78k]
  ------------------
  408|      0|            const auto cb = [&](char32_t cp) {
  409|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|      0|            };
  411|       |
  412|      0|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 0, False: 0]
  ------------------
  413|      0|                auto it = read_until_code_point(range, cb);
  414|      0|                return check_nonempty(it, range);
  415|      0|            }
  416|      0|            auto it = read_while_code_point(range, cb);
  417|      0|            return check_nonempty(it, range);
  418|      0|        }
  419|       |
  420|  5.78k|        const auto cb = [&](SourceCharT ch) {
  421|  5.78k|            return cb_wrapper.on_ascii_only(ch);
  422|  5.78k|        };
  423|       |
  424|  5.78k|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 0, False: 5.78k]
  ------------------
  425|      0|            auto it = read_until_code_unit(range, cb);
  426|      0|            return check_nonempty(it, range);
  427|      0|        }
  428|  5.78k|        auto it = read_while_code_unit(range, cb);
  429|  5.78k|        return check_nonempty(it, range);
  430|  5.78k|    }
_ZN3scn2v24impl25character_set_reader_implIwE14check_nonemptyIPKwN4nano6ranges9subrange_8subrangeIS6_S6_LNS8_13subrange_kindE1EEEEENS0_13scan_expectedIT_EERKSE_RKT0_:
  435|  5.78k|    {
  436|  5.78k|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 4.60k, False: 1.18k]
  ------------------
  437|  4.60k|            return unexpected_scan_error(
  438|  4.60k|                scan_error::invalid_scanned_value,
  439|  4.60k|                "No characters matched in [character set]");
  440|  4.60k|        }
  441|       |
  442|  1.18k|        return it;
  443|  5.78k|    }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlwE_clEw:
  420|  10.7k|        const auto cb = [&](SourceCharT ch) {
  421|  10.7k|            return cb_wrapper.on_ascii_only(ch);
  422|  10.7k|        };
_ZN3scn2v24impl13string_readerIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
  511|  9.46k|    {
  512|  9.46k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.46k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  9.46k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  9.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  9.46k|    }
_ZN3scn2v24impl13string_readerIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_:
  528|  9.46k|    {
  529|  9.46k|        SCN_CLANG_PUSH
  530|  9.46k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  9.46k|        switch (m_type) {
  533|      0|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 0, False: 9.46k]
  ------------------
  534|      0|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|      0|                                                            value);
  536|       |
  537|  9.46k|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 9.46k, False: 0]
  ------------------
  538|  9.46k|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  9.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|  9.46k|                                                                 value);
  540|       |
  541|      0|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 0, False: 9.46k]
  ------------------
  542|      0|                return character_set_reader_impl<SourceCharT>{}.read(
  543|      0|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 9.46k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 9.46k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 9.46k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  9.46k|        }
  563|       |
  564|  9.46k|        SCN_CLANG_POP
  565|  9.46k|    }
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEE:
   62|  9.46k|{
   63|  9.46k|    static_assert(
   64|  9.46k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  9.46k|    auto src = [&]() {
   67|  9.46k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  9.46k|            return make_contiguous_buffer(
   69|  9.46k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  9.46k|        }
   71|  9.46k|        else {
   72|  9.46k|            return make_contiguous_buffer(
   73|  9.46k|                ranges::subrange{ranges::begin(range), result});
   74|  9.46k|        }
   75|  9.46k|    }();
   76|  9.46k|    using src_type = decltype(src);
   77|       |
   78|  9.46k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  9.46k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  9.46k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  9.46k|                                     "Cannot read a string_view from "
   87|  9.46k|                                     "this source range (would require "
   88|  9.46k|                                     "transcoding)");
   89|  9.46k|    }
   90|  9.46k|    else {
   91|  9.46k|        const auto view = src.view();
   92|  9.46k|        value = std::basic_string_view<ValueCharT>(
   93|  9.46k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  9.46k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 1.24k, False: 8.22k]
  ------------------
   96|  1.24k|            return unexpected_scan_error(
   97|  1.24k|                scan_error::invalid_scanned_value,
   98|  1.24k|                "Invalid encoding in scanned string_view");
   99|  1.24k|        }
  100|       |
  101|  8.22k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  8.22k|    static_cast<    \
  |  |  247|  8.22k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  9.46k|    }
  103|  9.46k|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEEENKUlvE_clEv:
   66|  9.46k|    auto src = [&]() {
   67|  9.46k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  9.46k|            return make_contiguous_buffer(
   69|  9.46k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  9.46k|        }
   71|  9.46k|        else {
   72|  9.46k|            return make_contiguous_buffer(
   73|  9.46k|                ranges::subrange{ranges::begin(range), result});
   74|  9.46k|        }
   75|  9.46k|    }();
_ZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  204|  9.46k|    {
  205|  9.46k|        return read_impl(
  206|  9.46k|            range,
  207|  9.46k|            [&](auto&& rng) {
  208|  9.46k|                return read_string_view_impl(rng, read_all(rng), value);
  209|  9.46k|            },
  210|  9.46k|            detail::priority_tag<1>{});
  211|  9.46k|    }
_ZN3scn2v24impl21character_reader_implIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__117basic_string_viewIT0_NSN_11char_traitsISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISW_EEE4typeEEESW_OSP_NS0_6detail12priority_tagILm1EEE:
  219|  9.46k|    {
  220|  9.46k|        return read_cb(range);
  221|  9.46k|    }
_ZZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  207|  9.46k|            [&](auto&& rng) {
  208|  9.46k|                return read_string_view_impl(rng, read_all(rng), value);
  209|  9.46k|            },
_ZN3scn2v24impl13string_readerIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refE:
  511|  51.2k|    {
  512|  51.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  51.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  51.2k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  51.2k|    }
_ZN3scn2v24impl13string_readerIwE9read_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_:
  528|  51.2k|    {
  529|  51.2k|        SCN_CLANG_PUSH
  530|  51.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  51.2k|        switch (m_type) {
  533|  48.3k|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 48.3k, False: 2.89k]
  ------------------
  534|  48.3k|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  48.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|  48.3k|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 51.2k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  2.89k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 2.89k, False: 48.3k]
  ------------------
  542|  2.89k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  2.89k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  2.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 51.2k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 51.2k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 51.2k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  51.2k|        }
  563|       |
  564|  51.2k|        SCN_CLANG_POP
  565|  51.2k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__117basic_string_viewIT0_NSL_11char_traitsISN_EEEE:
  120|  48.3k|    {
  121|  48.3k|        return read_string_view_impl(range, read_until_classic_space(range),
  122|  48.3k|                                     value);
  123|  48.3k|    }
_ZN3scn2v24impl25character_set_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSP_11char_traitsISR_EEEE:
  307|  2.89k|    {
  308|  2.89k|        auto it = read_source_impl(range, {specs});
  309|  2.89k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.30k, False: 590]
  |  |  ------------------
  ------------------
  310|  2.30k|            return unexpected(it.error());
  311|  2.30k|        }
  312|       |
  313|    590|        return read_string_view_impl(range, *it, value);
  314|  2.89k|    }
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEE:
   62|    590|{
   63|    590|    static_assert(
   64|    590|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    590|    auto src = [&]() {
   67|    590|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    590|            return make_contiguous_buffer(
   69|    590|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    590|        }
   71|    590|        else {
   72|    590|            return make_contiguous_buffer(
   73|    590|                ranges::subrange{ranges::begin(range), result});
   74|    590|        }
   75|    590|    }();
   76|    590|    using src_type = decltype(src);
   77|       |
   78|    590|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    590|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    590|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    590|                                     "Cannot read a string_view from "
   87|    590|                                     "this source range (would require "
   88|    590|                                     "transcoding)");
   89|    590|    }
   90|    590|    else {
   91|    590|        const auto view = src.view();
   92|    590|        value = std::basic_string_view<ValueCharT>(
   93|    590|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    590|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 0, False: 590]
  ------------------
   96|      0|            return unexpected_scan_error(
   97|      0|                scan_error::invalid_scanned_value,
   98|      0|                "Invalid encoding in scanned string_view");
   99|      0|        }
  100|       |
  101|    590|        return SCN_MOVE(result);
  ------------------
  |  |  246|    590|    static_cast<    \
  |  |  247|    590|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    590|    }
  103|    590|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEEENKUlvE_clEv:
   66|    590|    auto src = [&]() {
   67|    590|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    590|            return make_contiguous_buffer(
   69|    590|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    590|        }
   71|    590|        else {
   72|    590|            return make_contiguous_buffer(
   73|    590|                ranges::subrange{ranges::begin(range), result});
   74|    590|        }
   75|    590|    }();
_ZN3scn2v24impl13string_readerIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|  9.46k|    {
  512|  9.46k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  9.46k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  9.46k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  9.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  9.46k|    }
_ZN3scn2v24impl13string_readerIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|  9.46k|    {
  529|  9.46k|        SCN_CLANG_PUSH
  530|  9.46k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  9.46k|        switch (m_type) {
  533|      0|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 0, False: 9.46k]
  ------------------
  534|      0|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|      0|                                                            value);
  536|       |
  537|  9.46k|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 9.46k, False: 0]
  ------------------
  538|  9.46k|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  9.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|  9.46k|                                                                 value);
  540|       |
  541|      0|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 0, False: 9.46k]
  ------------------
  542|      0|                return character_set_reader_impl<SourceCharT>{}.read(
  543|      0|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 9.46k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 9.46k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 9.46k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  9.46k|        }
  563|       |
  564|  9.46k|        SCN_CLANG_POP
  565|  9.46k|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|  9.46k|{
   40|  9.46k|    static_assert(
   41|  9.46k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  9.46k|    auto src =
   44|  9.46k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  9.46k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 1.24k, False: 8.22k]
  ------------------
   46|  1.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|  1.24k|                                     "Invalid encoding in scanned string");
   48|  1.24k|    }
   49|  8.22k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  8.22k|    static_cast<    \
  |  |  247|  8.22k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  8.22k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  8.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.22k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  8.22k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  8.22k|    static_cast<    \
  |  |  247|  8.22k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  8.22k|}
_ZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|  9.46k|    {
  193|  9.46k|        return read_impl(
  194|  9.46k|            range,
  195|  9.46k|            [&](auto&& rng) {
  196|  9.46k|                return read_string_impl(rng, read_all(rng), value);
  197|  9.46k|            },
  198|  9.46k|            detail::priority_tag<1>{});
  199|  9.46k|    }
_ZN3scn2v24impl21character_reader_implIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|  9.46k|    {
  220|  9.46k|        return read_cb(range);
  221|  9.46k|    }
_ZZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|  9.46k|            [&](auto&& rng) {
  196|  9.46k|                return read_string_impl(rng, read_all(rng), value);
  197|  9.46k|            },
_ZN3scn2v24impl13string_readerIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  51.2k|    {
  512|  51.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  51.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  51.2k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  51.2k|    }
_ZN3scn2v24impl13string_readerIwE9read_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  51.2k|    {
  529|  51.2k|        SCN_CLANG_PUSH
  530|  51.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  51.2k|        switch (m_type) {
  533|  48.3k|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 48.3k, False: 2.89k]
  ------------------
  534|  48.3k|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  48.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|  48.3k|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 51.2k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  2.89k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 2.89k, False: 48.3k]
  ------------------
  542|  2.89k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  2.89k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  2.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 51.2k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 51.2k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 51.2k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  51.2k|        }
  563|       |
  564|  51.2k|        SCN_CLANG_POP
  565|  51.2k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|  48.3k|    {
  113|  48.3k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  48.3k|    }
_ZN3scn2v24impl25character_set_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|  2.89k|    {
  294|  2.89k|        auto it = read_source_impl(range, {specs});
  295|  2.89k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.30k, False: 590]
  |  |  ------------------
  ------------------
  296|  2.30k|            return unexpected(it.error());
  297|  2.30k|        }
  298|       |
  299|    590|        return read_string_impl(range, *it, value);
  300|  2.89k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|    590|{
   40|    590|    static_assert(
   41|    590|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    590|    auto src =
   44|    590|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    590|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 590]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|    590|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    590|    static_cast<    \
  |  |  247|    590|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    590|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 590]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    590|    return SCN_MOVE(result);
  ------------------
  |  |  246|    590|    static_cast<    \
  |  |  247|    590|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    590|}
_ZN3scn2v24impl13string_readerIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_NS9_10locale_refE:
  500|  50.0k|    {
  501|  50.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  50.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  50.0k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  50.0k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEE:
  112|  50.0k|    {
  113|  50.0k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  50.0k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEESA_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_OT0_RNSt3__112basic_stringIT1_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
   39|  83.4k|{
   40|  83.4k|    static_assert(
   41|  83.4k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  83.4k|    auto src =
   44|  83.4k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  83.4k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 5.38k, False: 78.0k]
  ------------------
   46|  5.38k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|  5.38k|                                     "Invalid encoding in scanned string");
   48|  5.38k|    }
   49|  78.0k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  78.0k|    static_cast<    \
  |  |  247|  78.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  78.0k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 78.0k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  78.0k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  78.0k|    static_cast<    \
  |  |  247|  78.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  78.0k|}
_ZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS3_12specs_helperE:
  397|  4.64k|    {
  398|  4.64k|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|  4.64k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|  4.64k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.64k]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|  4.64k|        read_source_callback cb_wrapper{helper};
  406|       |
  407|  4.64k|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 0, False: 4.64k]
  ------------------
  408|      0|            const auto cb = [&](char32_t cp) {
  409|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|      0|            };
  411|       |
  412|      0|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 0, False: 0]
  ------------------
  413|      0|                auto it = read_until_code_point(range, cb);
  414|      0|                return check_nonempty(it, range);
  415|      0|            }
  416|      0|            auto it = read_while_code_point(range, cb);
  417|      0|            return check_nonempty(it, range);
  418|      0|        }
  419|       |
  420|  4.64k|        const auto cb = [&](SourceCharT ch) {
  421|  4.64k|            return cb_wrapper.on_ascii_only(ch);
  422|  4.64k|        };
  423|       |
  424|  4.64k|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 0, False: 4.64k]
  ------------------
  425|      0|            auto it = read_until_code_unit(range, cb);
  426|      0|            return check_nonempty(it, range);
  427|      0|        }
  428|  4.64k|        auto it = read_while_code_unit(range, cb);
  429|  4.64k|        return check_nonempty(it, range);
  430|  4.64k|    }
_ZN3scn2v24impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges9subrange_8subrangeIS8_NSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS0_13scan_expectedIT_EERKSH_RKT0_:
  435|  4.64k|    {
  436|  4.64k|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 2.32k, False: 2.32k]
  ------------------
  437|  2.32k|            return unexpected_scan_error(
  438|  2.32k|                scan_error::invalid_scanned_value,
  439|  2.32k|                "No characters matched in [character set]");
  440|  2.32k|        }
  441|       |
  442|  2.32k|        return it;
  443|  4.64k|    }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS3_12specs_helperEENKUlwE_clEw:
  420|  9.28k|        const auto cb = [&](SourceCharT ch) {
  421|  9.28k|            return cb_wrapper.on_ascii_only(ch);
  422|  9.28k|        };
_ZN3scn2v24impl13string_readerIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENSt3__112basic_stringIwNSI_11char_traitsIwEENSI_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RKNSA_12format_specsERT0_NSA_10locale_refE:
  511|  2.32k|    {
  512|  2.32k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  2.32k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  2.32k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  2.32k|    }
_ZN3scn2v24impl13string_readerIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENSt3__112basic_stringIwNSI_11char_traitsIwEENSI_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RKNSA_12format_specsERT0_:
  528|  2.32k|    {
  529|  2.32k|        SCN_CLANG_PUSH
  530|  2.32k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  2.32k|        switch (m_type) {
  533|      0|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 0, False: 2.32k]
  ------------------
  534|      0|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|      0|                                                            value);
  536|       |
  537|  2.32k|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 2.32k, False: 0]
  ------------------
  538|  2.32k|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  2.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|  2.32k|                                                                 value);
  540|       |
  541|      0|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 0, False: 2.32k]
  ------------------
  542|      0|                return character_set_reader_impl<SourceCharT>{}.read(
  543|      0|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 2.32k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 2.32k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 2.32k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  2.32k|        }
  563|       |
  564|  2.32k|        SCN_CLANG_POP
  565|  2.32k|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tELNS5_13subrange_kindE0EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorISB_SC_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESM_OT0_RNSt3__112basic_stringIT1_NSR_11char_traitsIST_EENSR_9allocatorIST_EEEE:
   39|  2.32k|{
   40|  2.32k|    static_assert(
   41|  2.32k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  2.32k|    auto src =
   44|  2.32k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  2.32k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 2.15k, False: 170]
  ------------------
   46|  2.15k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|  2.15k|                                     "Invalid encoding in scanned string");
   48|  2.15k|    }
   49|    170|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    170|    static_cast<    \
  |  |  247|    170|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    170|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    170|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 170]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    170|    return SCN_MOVE(result);
  ------------------
  |  |  246|    170|    static_cast<    \
  |  |  247|    170|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    170|}
_ZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  192|  2.32k|    {
  193|  2.32k|        return read_impl(
  194|  2.32k|            range,
  195|  2.32k|            [&](auto&& rng) {
  196|  2.32k|                return read_string_impl(rng, read_all(rng), value);
  197|  2.32k|            },
  198|  2.32k|            detail::priority_tag<1>{});
  199|  2.32k|    }
_ZN3scn2v24impl21character_reader_implIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_4readINS1_15take_width_viewISF_EEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEEEUlSP_E_EENSJ_INSK_IRNSH_ISL_EEXsr6rangesE14borrowed_rangeIS11_EEE4typeEEES11_OSS_NS9_12priority_tagILm1EEE:
  219|  2.32k|    {
  220|  2.32k|        return read_cb(range);
  221|  2.32k|    }
_ZZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEEENKUlSO_E_clIRSH_EEDaSO_:
  195|  2.32k|            [&](auto&& rng) {
  196|  2.32k|                return read_string_impl(rng, read_all(rng), value);
  197|  2.32k|            },
_ZN3scn2v24impl13string_readerIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  511|  38.0k|    {
  512|  38.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  38.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  38.0k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  38.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  38.0k|    }
_ZN3scn2v24impl13string_readerIwE9read_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNS9_12format_specsERT0_:
  528|  38.0k|    {
  529|  38.0k|        SCN_CLANG_PUSH
  530|  38.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  38.0k|        switch (m_type) {
  533|  33.3k|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 33.3k, False: 4.64k]
  ------------------
  534|  33.3k|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|  33.3k|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 38.0k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  4.64k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 4.64k, False: 33.3k]
  ------------------
  542|  4.64k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  4.64k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  4.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      0|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 0, False: 38.0k]
  ------------------
  547|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      0|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      0|                    specs.regexp_flags, value);
  550|       |
  551|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 0, False: 38.0k]
  ------------------
  552|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|      0|                    SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|      0|                    get_unescaped_regex_pattern(
  555|      0|                        specs.charset_string<SourceCharT>()),
  556|      0|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 38.0k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  38.0k|        }
  563|       |
  564|  38.0k|        SCN_CLANG_POP
  565|  38.0k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RNSt3__112basic_stringIT0_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
  112|  33.3k|    {
  113|  33.3k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  33.3k|    }
_ZN3scn2v24impl25character_set_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERNSt3__112basic_stringIT0_NSR_11char_traitsIST_EENSR_9allocatorIST_EEEE:
  293|  4.64k|    {
  294|  4.64k|        auto it = read_source_impl(range, {specs});
  295|  4.64k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.32k, False: 2.32k]
  |  |  ------------------
  ------------------
  296|  2.32k|            return unexpected(it.error());
  297|  2.32k|        }
  298|       |
  299|  2.32k|        return read_string_impl(range, *it, value);
  300|  4.64k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEERSA_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_OT0_RNSt3__112basic_stringIT1_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEE:
   39|  2.32k|{
   40|  2.32k|    static_assert(
   41|  2.32k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  2.32k|    auto src =
   44|  2.32k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  2.32k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 2.32k]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|  2.32k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  2.32k|    static_cast<    \
  |  |  247|  2.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  2.32k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.32k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  2.32k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  2.32k|    static_cast<    \
  |  |  247|  2.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  2.32k|}

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|  2.52M|{
  110|  2.52M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  2.52M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   469k|{
   89|   469k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 469k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|   469k|    constexpr auto enc = get_encoding<CharT>();
   94|   469k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   469k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   469k|    }
   97|   469k|    else if constexpr (enc == encoding::utf16) {
   98|   469k|        return simdutf::validate_utf16(
   99|   469k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   469k|    }
  101|   469k|    else if constexpr (enc == encoding::utf32) {
  102|   469k|        return simdutf::validate_utf32(
  103|   469k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   469k|    }
  105|   469k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  3.56k|{
  449|  3.56k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 3.56k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  3.56k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  3.56k|        SCN_EXPECT(output.size() >= input.size());
  455|  3.56k|        std::memcpy(output.data(), input.data(),
  456|  3.56k|                    input.size() * sizeof(SourceCharT));
  457|  3.56k|        return input.size();
  458|  3.56k|    }
  459|       |
  460|  3.56k|    const auto result = [&]() {
  461|  3.56k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  3.56k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  3.56k|        if constexpr (src_enc == encoding::utf8) {
  465|  3.56k|            if constexpr (dest_enc == encoding::utf16) {
  466|  3.56k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  3.56k|                    input.data(), input.size(),
  468|  3.56k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  3.56k|            }
  470|  3.56k|            else {
  471|  3.56k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  3.56k|                    input.data(), input.size(),
  473|  3.56k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  3.56k|            }
  475|  3.56k|        }
  476|  3.56k|        else if constexpr (src_enc == encoding::utf16) {
  477|  3.56k|            if constexpr (dest_enc == encoding::utf8) {
  478|  3.56k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  3.56k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  3.56k|                    input.size(), output.data());
  481|  3.56k|            }
  482|  3.56k|            else {
  483|  3.56k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  3.56k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  3.56k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  3.56k|            }
  487|  3.56k|        }
  488|  3.56k|        else if constexpr (src_enc == encoding::utf32) {
  489|  3.56k|            if constexpr (dest_enc == encoding::utf8) {
  490|  3.56k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  3.56k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  3.56k|                    input.size(), output.data());
  493|  3.56k|            }
  494|  3.56k|            else {
  495|  3.56k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  3.56k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  3.56k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  3.56k|            }
  499|  3.56k|        }
  500|  3.56k|    }();
  501|       |
  502|  3.56k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|  3.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.56k]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|  3.56k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|  3.56k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|  3.56k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|  3.56k|    const auto result = [&]() {
  461|  3.56k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  3.56k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  3.56k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|  3.56k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|  3.56k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  3.56k|                    input.data(), input.size(),
  468|  3.56k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  3.56k|            }
  470|  3.56k|            else {
  471|  3.56k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  3.56k|                    input.data(), input.size(),
  473|  3.56k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  3.56k|            }
  475|  3.56k|        }
  476|  3.56k|        else if constexpr (src_enc == encoding::utf16) {
  477|  3.56k|            if constexpr (dest_enc == encoding::utf8) {
  478|  3.56k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  3.56k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  3.56k|                    input.size(), output.data());
  481|  3.56k|            }
  482|  3.56k|            else {
  483|  3.56k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  3.56k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  3.56k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  3.56k|            }
  487|  3.56k|        }
  488|  3.56k|        else if constexpr (src_enc == encoding::utf32) {
  489|  3.56k|            if constexpr (dest_enc == encoding::utf8) {
  490|  3.56k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  3.56k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  3.56k|                    input.size(), output.data());
  493|  3.56k|            }
  494|  3.56k|            else {
  495|  3.56k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  3.56k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  3.56k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  3.56k|            }
  499|  3.56k|        }
  500|  3.56k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|  24.8k|{
  116|  24.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  24.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|  24.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.55k, False: 21.2k]
  |  |  ------------------
  ------------------
  120|  3.55k|        return detail::invalid_code_point;
  121|  3.55k|    }
  122|       |
  123|  21.2k|    constexpr auto enc = get_encoding<CharT>();
  124|  21.2k|    char32_t output{};
  125|  21.2k|    size_t ret{};
  126|  21.2k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  21.2k|#ifndef NDEBUG
  128|  21.2k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 21.2k, False: 0]
  ------------------
  129|  21.2k|            auto len =
  130|  21.2k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  21.2k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  242|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|  21.2k|        }
  133|      0|#endif
  134|      0|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  21.2k|    }
  136|      0|    else if constexpr (enc == encoding::utf16) {
  137|      0|#ifndef NDEBUG
  138|      0|        if (validate_unicode(input)) {
  139|      0|            auto len = simdutf::utf32_length_from_utf16(
  140|      0|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|      0|            SCN_EXPECT(len == 1);
  142|      0|        }
  143|      0|#endif
  144|      0|        ret = simdutf::convert_utf16_to_utf32(
  145|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|      0|    }
  147|      0|    else if constexpr (enc == encoding::utf32) {
  148|      0|        output = static_cast<char32_t>(input[0]);
  149|      0|        ret = output < detail::invalid_code_point;
  150|      0|    }
  151|       |
  152|  21.2k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 21.2k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|  21.2k|    return static_cast<char32_t>(output);
  156|  21.2k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   477k|{
  263|   477k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   477k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   477k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   477k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.0k, False: 462k]
  |  |  ------------------
  ------------------
  267|  15.0k|        return {get_start_of_next_code_point(input),
  268|  15.0k|                detail::invalid_code_point};
  269|  15.0k|    }
  270|   462k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   462k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 570, False: 461k]
  |  |  ------------------
  ------------------
  271|    570|        return {input.end(), detail::invalid_code_point};
  272|    570|    }
  273|       |
  274|   461k|    constexpr auto enc = get_encoding<CharT>();
  275|   461k|    std::size_t result{1};
  276|   461k|    char32_t output{};
  277|   461k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   461k|        result = simdutf::convert_utf8_to_utf32(
  279|   461k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   461k|    }
  281|   461k|    else if constexpr (enc == encoding::utf16) {
  282|   461k|        result = simdutf::convert_utf16_to_utf32(
  283|   461k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   461k|    }
  285|   461k|    else if constexpr (enc == encoding::utf32) {
  286|   461k|        SCN_EXPECT(len == 1);
  287|   461k|        output = static_cast<char32_t>(input[0]);
  288|   461k|    }
  289|       |
  290|   461k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   461k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 88.0k, False: 373k]
  |  |  ------------------
  ------------------
  291|  88.0k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  88.0k|                detail::invalid_code_point};
  293|  88.0k|    }
  294|       |
  295|   373k|    return {input.begin() + len, output};
  296|   461k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|   103k|{
  248|   103k|    auto it = input.begin();
  249|   164k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 164k, False: 320]
  ------------------
  250|   164k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 102k, False: 61.7k]
  ------------------
  251|   102k|            break;
  252|   102k|        }
  253|   164k|    }
  254|       |
  255|   103k|    return it;
  256|   103k|}
_ZN3scn2v24impl25for_each_code_point_validIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
  681|  69.9k|{
  682|  69.9k|    auto it = input.begin();
  683|   139k|    while (it != input.end()) {
  ------------------
  |  Branch (683:12): [True: 69.9k, False: 69.9k]
  ------------------
  684|  69.9k|        auto res = get_next_code_point_valid(
  685|  69.9k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
  686|  69.9k|        cb(res.value);
  687|  69.9k|        it = detail::make_string_view_iterator(input, res.iterator);
  688|  69.9k|    }
  689|  69.9k|}
_ZN3scn2v24impl25get_next_code_point_validIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  216|  69.9k|{
  217|  69.9k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  69.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  69.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|  69.9k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  69.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  69.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|       |
  220|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  221|  69.9k|    SCN_EXPECT(len != 0);
  ------------------
  |  |  242|  69.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  69.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|      0|    constexpr auto enc = get_encoding<CharT>();
  224|  69.9k|    char32_t output{};
  225|  69.9k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (225:19): [Folded - Ignored]
  ------------------
  226|  69.9k|        const auto ret = simdutf::convert_valid_utf8_to_utf32(
  227|  69.9k|            reinterpret_cast<const char*>(input.data()), len, &output);
  228|  69.9k|        SCN_EXPECT(ret == 1);
  ------------------
  |  |  242|  69.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  69.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  229|  69.9k|    }
  230|      0|    else if constexpr (enc == encoding::utf16) {
  231|      0|        const auto ret = simdutf::convert_valid_utf16_to_utf32(
  232|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  233|      0|        SCN_EXPECT(ret == 1);
  234|      0|    }
  235|      0|    else if constexpr (enc == encoding::utf32) {
  236|      0|        output = static_cast<char32_t>(input[0]);
  237|      0|    }
  238|       |
  239|      0|    return iterator_value_result<
  240|  69.9k|        ranges::iterator_t<std::basic_string_view<CharT>>, char32_t>{
  241|  69.9k|        input.begin() + len, static_cast<char32_t>(output)};
  242|  69.9k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|   238M|{
  110|   238M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   238M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|   771k|{
  449|   771k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 771k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|   771k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|   771k|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|   771k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   771k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|   771k|                    input.size() * sizeof(SourceCharT));
  457|   771k|        return input.size();
  458|   771k|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   746k|{
  116|   746k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   746k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   746k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   746k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   746k|    constexpr auto enc = get_encoding<CharT>();
  124|   746k|    char32_t output{};
  125|   746k|    size_t ret{};
  126|   746k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   746k|#ifndef NDEBUG
  128|   746k|        if (validate_unicode(input)) {
  129|   746k|            auto len =
  130|   746k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   746k|            SCN_EXPECT(len == 1);
  132|   746k|        }
  133|   746k|#endif
  134|   746k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   746k|    }
  136|   746k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|   746k|#ifndef NDEBUG
  138|   746k|        if (validate_unicode(input)) {
  139|   746k|            auto len = simdutf::utf32_length_from_utf16(
  140|   746k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|   746k|            SCN_EXPECT(len == 1);
  142|   746k|        }
  143|   746k|#endif
  144|   746k|        ret = simdutf::convert_utf16_to_utf32(
  145|   746k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|   746k|    }
  147|   746k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|   746k|        output = static_cast<char32_t>(input[0]);
  149|   746k|        ret = output < detail::invalid_code_point;
  150|   746k|    }
  151|       |
  152|   746k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.38k, False: 741k]
  |  |  ------------------
  ------------------
  153|  5.38k|        return detail::invalid_code_point;
  154|  5.38k|    }
  155|   741k|    return static_cast<char32_t>(output);
  156|   746k|}
_ZN3scn2v24impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   350k|{
   89|   350k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 350k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|   350k|    constexpr auto enc = get_encoding<CharT>();
   94|   350k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   350k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   350k|    }
   97|   350k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (97:24): [Folded - Ignored]
  ------------------
   98|   350k|        return simdutf::validate_utf16(
   99|   350k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   350k|    }
  101|   350k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (101:24): [Folded - Ignored]
  ------------------
  102|   350k|        return simdutf::validate_utf32(
  103|   350k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   350k|    }
  105|   350k|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  5.27M|{
   29|       |    // Pattern_White_Space property
   30|  5.27M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 4.94M, False: 338k]
  |  Branch (30:27): [True: 750k, False: 4.19M]
  ------------------
   31|  5.27M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 532k, False: 3.99M]
  ------------------
   32|  5.27M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 17.0k, False: 3.97M]
  ------------------
   33|  5.27M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 19.0k, False: 3.96M]
  ------------------
   34|  5.27M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 1.18k, False: 3.95M]
  ------------------
   35|  5.27M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 6.08k, False: 3.95M]
  ------------------
   36|  5.27M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 3.95M]
  ------------------
   37|  5.27M|}

_ZN3scn2v24impl13is_ascii_charEc:
   68|  39.3k|{
   69|  39.3k|    return static_cast<unsigned char>(ch) <= 127;
   70|  39.3k|}
_ZN3scn2v24impl13is_ascii_charEw:
   73|  20.0k|{
   74|  20.0k|#if WCHAR_MIN < 0
   75|  20.0k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (75:12): [True: 19.6k, False: 428]
  |  Branch (75:23): [True: 12.5k, False: 7.03k]
  ------------------
   76|       |#else
   77|       |    return ch <= 127;
   78|       |#endif
   79|  20.0k|}
_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  3.15M|{
   58|  3.15M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  3.15M|        static_cast<unsigned char>(ch))];
   60|  3.15M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|   848k|{
   92|   848k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|   848k|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|   144k|    {
   57|   144k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|   412k|    {
   61|   412k|        return m_current;
   62|   412k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|   268k|    {
   66|   268k|        return m_range.end();
   67|   268k|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|   129k|    {
   81|   129k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|   129k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   129k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|   129k|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|   129k|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 129k]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|   129k|        }
   87|   129k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   129k|    static_cast<    \
  |  |  247|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|   129k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|   138k|    {
   71|   138k|        return ranges::subrange{begin(), end()};
   72|   138k|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|   135k|    {
   57|   135k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|   372k|    {
   61|   372k|        return m_current;
   62|   372k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|   237k|    {
   66|   237k|        return m_range.end();
   67|   237k|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|   111k|    {
   81|   111k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|   111k|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|   111k|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 111k]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|   111k|        }
   87|   111k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   111k|    static_cast<    \
  |  |  247|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|   111k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|   125k|    {
   71|   125k|        return ranges::subrange{begin(), end()};
   72|   125k|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|  30.2k|    {
  205|  30.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  30.2k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  7.21k|    {
  196|  7.21k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|  15.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  15.1k|              cvref<T> obj = *get<T>(fn);
  187|  15.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  15.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  15.1k|              }
  190|  15.1k|              else {
  191|  15.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  15.1k|              }
  193|  15.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|  15.1k|    {
  126|  15.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  15.1k|            return static_cast<T*>(s.m_cp);
  128|  15.1k|        }
  129|  15.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  15.1k|            return static_cast<T*>(s.m_p);
  131|  15.1k|        }
  132|  15.1k|        else {
  133|  15.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  15.1k|        }
  135|  15.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|  7.21k|        {
  104|  7.21k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  6.05M|    {
  205|  6.05M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  6.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  6.05M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   328k|    {
  196|   328k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  1.25M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.25M|              cvref<T> obj = *get<T>(fn);
  187|  1.25M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.25M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.25M|              }
  190|  1.25M|              else {
  191|  1.25M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.25M|              }
  193|  1.25M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  1.25M|    {
  126|  1.25M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.25M|            return static_cast<T*>(s.m_cp);
  128|  1.25M|        }
  129|  1.25M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.25M|            return static_cast<T*>(s.m_p);
  131|  1.25M|        }
  132|  1.25M|        else {
  133|  1.25M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.25M|        }
  135|  1.25M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|   328k|        {
  104|   328k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_SO_LPv0EEESN_:
  195|  3.56k|    {
  196|  3.56k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  185|  28.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  28.3k|              cvref<T> obj = *get<T>(fn);
  187|  28.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  28.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  28.3k|              }
  190|  28.3k|              else {
  191|  28.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  28.3k|              }
  193|  28.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_EEDaNS3_7storageE:
  125|  28.3k|    {
  126|  28.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  28.3k|            return static_cast<T*>(s.m_cp);
  128|  28.3k|        }
  129|  28.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  28.3k|            return static_cast<T*>(s.m_p);
  131|  28.3k|        }
  132|  28.3k|        else {
  133|  28.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  28.3k|        }
  135|  28.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_LPv0EEEPSK_:
  103|  3.56k|        {
  104|  3.56k|        }
_ZNK3scn2v24impl12function_refIFvDiES3_EclEDi:
  204|  69.9k|    {
  205|  69.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  69.9k|    }
_ZN3scn2v24impl12function_refIFvDiES3_EC2IZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEENS1_20text_width_algorithmEEUlDiE_SE_LPv0EEEOS9_:
  195|  69.9k|    {
  196|  69.9k|    }
_ZZN3scn2v24impl12function_refIFvDiES3_EC1IZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEENS1_20text_width_algorithmEEUlDiE_SE_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESJ_Di:
  185|  69.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  69.9k|              cvref<T> obj = *get<T>(fn);
  187|  69.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  69.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  69.9k|              }
  190|  69.9k|              else {
  191|  69.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  69.9k|              }
  193|  69.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEENS1_20text_width_algorithmEEUlDiE_EEDaNS3_7storageE:
  125|  69.9k|    {
  126|  69.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  69.9k|            return static_cast<T*>(s.m_cp);
  128|  69.9k|        }
  129|  69.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  69.9k|            return static_cast<T*>(s.m_p);
  131|  69.9k|        }
  132|  69.9k|        else {
  133|  69.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  69.9k|        }
  135|  69.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEENS1_20text_width_algorithmEEUlDiE_LPv0EEEPS9_:
  103|  69.9k|        {
  104|  69.9k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlcE_SR_LPv0EEESO_:
  195|  4.36k|    {
  196|  4.36k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlcE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  185|  10.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  10.8k|              cvref<T> obj = *get<T>(fn);
  187|  10.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  10.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  10.8k|              }
  190|  10.8k|              else {
  191|  10.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  10.8k|              }
  193|  10.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  125|  10.8k|    {
  126|  10.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  10.8k|            return static_cast<T*>(s.m_cp);
  128|  10.8k|        }
  129|  10.8k|        else if constexpr (std::is_object_v<T>) {
  130|  10.8k|            return static_cast<T*>(s.m_p);
  131|  10.8k|        }
  132|  10.8k|        else {
  133|  10.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  10.8k|        }
  135|  10.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlcE_LPv0EEEPKSK_:
  108|  4.36k|        {
  109|  4.36k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_NS7_12specs_helperEEUlcE_SU_LPv0EEESR_:
  195|  2.84k|    {
  196|  2.84k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_NS7_12specs_helperEEUlcE_SU_LPv0EEESR_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  185|  4.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  4.26k|              cvref<T> obj = *get<T>(fn);
  187|  4.26k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  4.26k|                  obj(static_cast<decltype(args)>(args)...);
  189|  4.26k|              }
  190|  4.26k|              else {
  191|  4.26k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  4.26k|              }
  193|  4.26k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  125|  4.26k|    {
  126|  4.26k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  4.26k|            return static_cast<T*>(s.m_cp);
  128|  4.26k|        }
  129|  4.26k|        else if constexpr (std::is_object_v<T>) {
  130|  4.26k|            return static_cast<T*>(s.m_p);
  131|  4.26k|        }
  132|  4.26k|        else {
  133|  4.26k|            return reinterpret_cast<T*>(s.m_fp);
  134|  4.26k|        }
  135|  4.26k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_NS7_12specs_helperEEUlcE_LPv0EEEPKSN_:
  108|  2.84k|        {
  109|  2.84k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|   245k|    {
  196|   245k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|   973k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   973k|              cvref<T> obj = *get<T>(fn);
  187|   973k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   973k|                  obj(static_cast<decltype(args)>(args)...);
  189|   973k|              }
  190|   973k|              else {
  191|   973k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   973k|              }
  193|   973k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|   973k|    {
  126|   973k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   973k|            return static_cast<T*>(s.m_cp);
  128|   973k|        }
  129|   973k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   973k|            return static_cast<T*>(s.m_p);
  131|   973k|        }
  132|   973k|        else {
  133|   973k|            return reinterpret_cast<T*>(s.m_fp);
  134|   973k|        }
  135|   973k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|   245k|        {
  104|   245k|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  40.1k|    {
  205|  40.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  40.1k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  10.4k|    {
  196|  10.4k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  20.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.0k|              cvref<T> obj = *get<T>(fn);
  187|  20.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.0k|              }
  190|  20.0k|              else {
  191|  20.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.0k|              }
  193|  20.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  20.0k|    {
  126|  20.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.0k|            return static_cast<T*>(s.m_cp);
  128|  20.0k|        }
  129|  20.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.0k|            return static_cast<T*>(s.m_p);
  131|  20.0k|        }
  132|  20.0k|        else {
  133|  20.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.0k|        }
  135|  20.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|  10.4k|        {
  104|  10.4k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_SL_LPv0EEESK_:
  195|   241k|    {
  196|   241k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_SL_LPv0EEESK_ENKUlNS1_12fnref_detail4base7storageEDiE_clESP_Di:
  185|  2.88M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  2.88M|              cvref<T> obj = *get<T>(fn);
  187|  2.88M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  2.88M|                  obj(static_cast<decltype(args)>(args)...);
  189|  2.88M|              }
  190|  2.88M|              else {
  191|  2.88M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  2.88M|              }
  193|  2.88M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_EUlDiE_EEDaNS3_7storageE:
  125|  2.88M|    {
  126|  2.88M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  2.88M|            return static_cast<T*>(s.m_cp);
  128|  2.88M|        }
  129|  2.88M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  2.88M|            return static_cast<T*>(s.m_p);
  131|  2.88M|        }
  132|  2.88M|        else {
  133|  2.88M|            return reinterpret_cast<T*>(s.m_fp);
  134|  2.88M|        }
  135|  2.88M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_LPv0EEEPSH_:
  103|   241k|        {
  104|   241k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlwE_SR_LPv0EEESO_:
  195|  5.78k|    {
  196|  5.78k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlwE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  185|  10.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  10.7k|              cvref<T> obj = *get<T>(fn);
  187|  10.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  10.7k|                  obj(static_cast<decltype(args)>(args)...);
  189|  10.7k|              }
  190|  10.7k|              else {
  191|  10.7k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  10.7k|              }
  193|  10.7k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  125|  10.7k|    {
  126|  10.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  10.7k|            return static_cast<T*>(s.m_cp);
  128|  10.7k|        }
  129|  10.7k|        else if constexpr (std::is_object_v<T>) {
  130|  10.7k|            return static_cast<T*>(s.m_p);
  131|  10.7k|        }
  132|  10.7k|        else {
  133|  10.7k|            return reinterpret_cast<T*>(s.m_fp);
  134|  10.7k|        }
  135|  10.7k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlwE_LPv0EEEPKSK_:
  108|  5.78k|        {
  109|  5.78k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|  83.4k|    {
  196|  83.4k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   278k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   278k|              cvref<T> obj = *get<T>(fn);
  187|   278k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   278k|                  obj(static_cast<decltype(args)>(args)...);
  189|   278k|              }
  190|   278k|              else {
  191|   278k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   278k|              }
  193|   278k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   278k|    {
  126|   278k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   278k|            return static_cast<T*>(s.m_cp);
  128|   278k|        }
  129|   278k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   278k|            return static_cast<T*>(s.m_p);
  131|   278k|        }
  132|   278k|        else {
  133|   278k|            return reinterpret_cast<T*>(s.m_fp);
  134|   278k|        }
  135|   278k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|  83.4k|        {
  104|  83.4k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_SO_LPv0EEESN_:
  195|  83.4k|    {
  196|  83.4k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  185|   635k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   635k|              cvref<T> obj = *get<T>(fn);
  187|   635k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   635k|                  obj(static_cast<decltype(args)>(args)...);
  189|   635k|              }
  190|   635k|              else {
  191|   635k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   635k|              }
  193|   635k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_EEDaNS3_7storageE:
  125|   635k|    {
  126|   635k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   635k|            return static_cast<T*>(s.m_cp);
  128|   635k|        }
  129|   635k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   635k|            return static_cast<T*>(s.m_p);
  131|   635k|        }
  132|   635k|        else {
  133|   635k|            return reinterpret_cast<T*>(s.m_fp);
  134|   635k|        }
  135|   635k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_LPv0EEEPSK_:
  103|  83.4k|        {
  104|  83.4k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_NS7_12specs_helperEEUlwE_SU_LPv0EEESR_:
  195|  4.64k|    {
  196|  4.64k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_NS7_12specs_helperEEUlwE_SU_LPv0EEESR_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  185|  9.28k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  9.28k|              cvref<T> obj = *get<T>(fn);
  187|  9.28k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  9.28k|                  obj(static_cast<decltype(args)>(args)...);
  189|  9.28k|              }
  190|  9.28k|              else {
  191|  9.28k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  9.28k|              }
  193|  9.28k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  125|  9.28k|    {
  126|  9.28k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  9.28k|            return static_cast<T*>(s.m_cp);
  128|  9.28k|        }
  129|  9.28k|        else if constexpr (std::is_object_v<T>) {
  130|  9.28k|            return static_cast<T*>(s.m_p);
  131|  9.28k|        }
  132|  9.28k|        else {
  133|  9.28k|            return reinterpret_cast<T*>(s.m_fp);
  134|  9.28k|        }
  135|  9.28k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_NS7_12specs_helperEEUlwE_LPv0EEEPKSN_:
  108|  4.64k|        {
  109|  4.64k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  14.5k|{
   44|  14.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  14.5k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  1.29M|{
   30|  1.29M|    return e != eof_error::good;
   31|  1.29M|}

_ZN3scn2v24impl26calculate_valid_text_widthIvEEmDiNS1_20text_width_algorithmE:
  106|   229M|{
  107|   229M|    SCN_GCC_PUSH
  108|   229M|    SCN_GCC_IGNORE("-Wswitch-enum")
  109|       |
  110|   229M|    SCN_CLANG_PUSH
  111|   229M|    SCN_CLANG_IGNORE("-Wcovered-switch-default")
  112|       |
  113|   229M|    switch (algo) {
  114|      0|        case text_width_algorithm::wcswidth: {
  ------------------
  |  Branch (114:9): [True: 0, False: 229M]
  ------------------
  115|      0|#if SCN_POSIX
  116|      0|            set_clocale_classic_guard clocale_guard{LC_CTYPE};
  117|       |
  118|      0|            std::wstring winput;
  119|      0|            transcode_valid_to_string(std::u32string_view{&cp, 1}, winput);
  120|      0|            const auto n = ::wcswidth(winput.data(), winput.size());
  121|      0|            SCN_ENSURE(n != -1);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  122|      0|            return static_cast<size_t>(n);
  123|       |#else
  124|       |            SCN_ASSERT(false, "No wcswidth");
  125|       |            SCN_UNREACHABLE;
  126|       |#endif
  127|      0|        }
  128|       |
  129|      0|        case text_width_algorithm::code_units: {
  ------------------
  |  Branch (129:9): [True: 0, False: 229M]
  ------------------
  130|      0|            std::wstring winput;
  131|      0|            transcode_valid_to_string(std::u32string_view{&cp, 1}, winput);
  132|      0|            return winput.size();
  133|      0|        }
  134|       |
  135|      0|        case text_width_algorithm::code_points: {
  ------------------
  |  Branch (135:9): [True: 0, False: 229M]
  ------------------
  136|      0|            return 1;
  137|      0|        }
  138|       |
  139|   229M|        case text_width_algorithm::fmt_v10: {
  ------------------
  |  Branch (139:9): [True: 229M, False: 0]
  ------------------
  140|   229M|            return calculate_text_width_for_fmt_v10(cp);
  141|      0|        }
  142|       |
  143|      0|        default:
  ------------------
  |  Branch (143:9): [True: 0, False: 229M]
  ------------------
  144|      0|            SCN_ASSERT(false, "Not implemented");
  ------------------
  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  ------------------
  145|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  146|   229M|    }
  147|       |    SCN_CLANG_POP    // -Wcovered-switch-default
  148|       |        SCN_GCC_POP  // -Wswitch-enum
  149|   229M|}
_ZN3scn2v24impl32calculate_text_width_for_fmt_v10EDi:
   78|   229M|{
   79|   229M|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (79:9): [True: 63.3M, False: 165M]
  ------------------
   80|   229M|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (80:10): [True: 21.1k, False: 63.3M]
  ------------------
   81|  63.3M|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (81:10): [True: 0, False: 63.3M]
  ------------------
   82|  63.3M|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (82:10): [True: 6, False: 63.3M]
  ------------------
   83|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
   84|  63.3M|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (84:11): [True: 60.7M, False: 2.66M]
  |  Branch (84:27): [True: 455k, False: 60.2M]
  |  Branch (84:43): [True: 434k, False: 21.3k]
  ------------------
   85|  63.3M|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (85:11): [True: 60.2M, False: 2.70M]
  |  Branch (85:27): [True: 34.6k, False: 60.1M]
  ------------------
   86|  63.3M|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (86:11): [True: 60.1M, False: 2.73M]
  |  Branch (86:27): [True: 10.5k, False: 60.1M]
  ------------------
   87|  63.3M|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (87:11): [True: 60.1M, False: 2.73M]
  |  Branch (87:27): [True: 20.2k, False: 60.1M]
  ------------------
   88|  63.3M|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (88:11): [True: 60.1M, False: 2.73M]
  |  Branch (88:27): [True: 17.8k, False: 60.1M]
  ------------------
   89|  63.3M|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (89:11): [True: 60.1M, False: 2.73M]
  |  Branch (89:27): [True: 14.2k, False: 60.1M]
  ------------------
   90|  63.3M|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (90:11): [True: 60.0M, False: 2.76M]
  |  Branch (90:27): [True: 4.13k, False: 60.0M]
  ------------------
   91|  63.3M|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (91:11): [True: 59.3M, False: 3.44M]
  |  Branch (91:28): [True: 9.63k, False: 59.3M]
  ------------------
   92|  63.3M|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (92:11): [True: 59.3M, False: 3.44M]
  |  Branch (92:28): [True: 18.5k, False: 59.3M]
  ------------------
   93|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
   94|  63.3M|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (94:11): [True: 59.9M, False: 2.84M]
  |  Branch (94:28): [True: 597k, False: 59.3M]
  ------------------
   95|       |         // Supplemental Symbols and Pictographs:
   96|  63.3M|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (96:11): [True: 59.3M, False: 2.84M]
  |  Branch (96:28): [True: 72, False: 59.3M]
  ------------------
   97|  1.18M|        return 2;
   98|  1.18M|    }
   99|   228M|    return 1;
  100|   229M|}
_ZN3scn2v24impl26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_20text_width_algorithmE:
  155|  69.9k|{
  156|  69.9k|    SCN_GCC_PUSH
  157|  69.9k|    SCN_GCC_IGNORE("-Wswitch-enum")
  158|       |
  159|  69.9k|    SCN_CLANG_PUSH
  160|  69.9k|    SCN_CLANG_IGNORE("-Wcovered-switch-default")
  161|       |
  162|  69.9k|    switch (algo) {
  163|      0|        case text_width_algorithm::wcswidth: {
  ------------------
  |  Branch (163:9): [True: 0, False: 69.9k]
  ------------------
  164|      0|#if SCN_POSIX
  165|      0|            set_clocale_classic_guard clocale_guard{LC_CTYPE};
  166|       |
  167|      0|            std::wstring winput;
  168|      0|            transcode_valid_to_string(input, winput);
  169|      0|            const auto n = ::wcswidth(winput.data(), winput.size());
  170|      0|            SCN_ENSURE(n != -1);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  171|      0|            return static_cast<size_t>(n);
  172|       |#else
  173|       |            SCN_ASSERT(false, "No wcswidth");
  174|       |            SCN_UNREACHABLE;
  175|       |#endif
  176|      0|        }
  177|       |
  178|      0|        case text_width_algorithm::code_units: {
  ------------------
  |  Branch (178:9): [True: 0, False: 69.9k]
  ------------------
  179|      0|            return input.size();
  180|      0|        }
  181|       |
  182|      0|        case text_width_algorithm::code_points: {
  ------------------
  |  Branch (182:9): [True: 0, False: 69.9k]
  ------------------
  183|      0|            return count_valid_code_points(input);
  184|      0|        }
  185|       |
  186|  69.9k|        case text_width_algorithm::fmt_v10: {
  ------------------
  |  Branch (186:9): [True: 69.9k, False: 0]
  ------------------
  187|  69.9k|            size_t count{0};
  188|  69.9k|            for_each_code_point_valid(input, [&count](char32_t cp) {
  189|  69.9k|                count += calculate_text_width_for_fmt_v10(cp);
  190|  69.9k|            });
  191|  69.9k|            return count;
  192|      0|        }
  193|       |
  194|      0|        default:
  ------------------
  |  Branch (194:9): [True: 0, False: 69.9k]
  ------------------
  195|      0|            SCN_ASSERT(false, "Not implemented");
  ------------------
  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  ------------------
  196|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  197|  69.9k|    }
  198|       |    SCN_CLANG_POP    // -Wcovered-switch-default
  199|       |        SCN_GCC_POP  // -Wswitch-enum
  200|  69.9k|}
_ZZN3scn2v24impl26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_20text_width_algorithmEENKUlDiE_clEDi:
  188|  69.9k|            for_each_code_point_valid(input, [&count](char32_t cp) {
  189|  69.9k|                count += calculate_text_width_for_fmt_v10(cp);
  190|  69.9k|            });

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|   128k|{
  587|   128k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|   128k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|  4.98k|{
  595|  4.98k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|  4.98k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  4.98k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 715, False: 4.27k]
  |  |  ------------------
  ------------------
  597|    715|        source.sync(*n);
  598|    715|    }
  599|  4.27k|    else {
  600|  4.27k|        source.sync_all();
  601|  4.27k|    }
  602|  4.98k|    return n;
  603|  4.98k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|   117k|{
  611|   117k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|   117k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|  39.4k|{
  619|  39.4k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|  39.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  39.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.4k, False: 6.97k]
  |  |  ------------------
  ------------------
  621|  32.4k|        source.sync(*n);
  622|  32.4k|    }
  623|  6.97k|    else {
  624|  6.97k|        source.sync_all();
  625|  6.97k|    }
  626|  39.4k|    return n;
  627|  39.4k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|   128k|{
  544|   128k|    return vscan_internal(source, format, args);
  545|   128k|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|  4.98k|{
  550|  4.98k|    auto n = vscan_internal(source, format, args);
  551|  4.98k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  4.98k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 715, False: 4.27k]
  |  |  ------------------
  ------------------
  552|    715|        source.sync(*n);
  553|    715|    }
  554|  4.27k|    else {
  555|  4.27k|        source.sync_all();
  556|  4.27k|    }
  557|  4.98k|    return n;
  558|  4.98k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|   117k|{
  564|   117k|    return vscan_internal(source, format, args);
  565|   117k|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|  39.4k|{
  570|  39.4k|    auto n = vscan_internal(source, format, args);
  571|  39.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  39.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.4k, False: 6.97k]
  |  |  ------------------
  ------------------
  572|  32.4k|        source.sync(*n);
  573|  32.4k|    }
  574|  6.97k|    else {
  575|  6.97k|        source.sync_all();
  576|  6.97k|    }
  577|  39.4k|    return n;
  578|  39.4k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|  56.4k|{
  654|  56.4k|    return vscan_value_internal(source, arg);
  655|  56.4k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|    713|{
  659|    713|    auto n = vscan_value_internal(source, arg);
  660|    713|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|    713|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1, False: 712]
  |  |  ------------------
  ------------------
  661|      1|        source.sync(*n);
  662|      1|    }
  663|    712|    else {
  664|    712|        source.sync_all();
  665|    712|    }
  666|    713|    return n;
  667|    713|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|  49.4k|{
  673|  49.4k|    return vscan_value_internal(source, arg);
  674|  49.4k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  16.7k|{
  679|  16.7k|    auto n = vscan_value_internal(source, arg);
  680|  16.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  16.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 15.6k, False: 1.16k]
  |  |  ------------------
  ------------------
  681|  15.6k|        source.sync(*n);
  682|  15.6k|    }
  683|  1.16k|    else {
  684|  1.16k|        source.sync_all();
  685|  1.16k|    }
  686|  16.7k|    return n;
  687|  16.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|  9.97k|{
  476|  9.97k|    const auto argcount = args.size();
  477|  9.97k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 1.42k, False: 8.54k]
  |  Branch (477:60): [True: 1.42k, False: 0]
  ------------------
  478|  1.42k|        auto arg = args.get(0);
  479|  1.42k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.42k|    static_cast<    \
  |  |  247|  1.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  1.42k|    }
  481|       |
  482|  8.54k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 8.54k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|  8.54k|    SCN_UNLIKELY_ATTR
  490|  8.54k|    {
  491|  8.54k|        auto handler = format_handler<false, CharT>{
  492|  8.54k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  8.54k|    static_cast<    \
  |  |  247|  8.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  8.54k|    static_cast<    \
  |  |  247|  8.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|  8.54k|        return vscan_parse_format_string(format, handler);
  494|  8.54k|    }
  495|  8.54k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|   266k|{
   36|   266k|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 152k, False: 114k]
  ------------------
   37|   152k|        return false;
   38|   152k|    }
   39|   114k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 114k, False: 0]
  |  Branch (39:39): [True: 114k, False: 0]
  ------------------
   40|   266k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  2.13k|{
   69|  2.13k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.13k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  2.13k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  2.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 2.13k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  2.13k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  2.13k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  2.13k|    static_cast<    \
  |  |  247|  2.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  2.13k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  2.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.13k, False: 3]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.13k|    }                                                  \
  |  |  |  |   70|  2.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      3|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      3|    return it.position();
   86|  2.13k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|   144k|    {
  314|   144k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|   333k|    {
  133|   333k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|   333k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|   144k|    {
  264|   144k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   144k|{
  441|   144k|    const auto beg = handler.get_ctx().begin();
  442|   144k|    detail::parse_format_string<false>(format, handler);
  443|   144k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 129k]
  |  |  ------------------
  ------------------
  444|  14.2k|        return unexpected(handler.error);
  445|  14.2k|    }
  446|   129k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   144k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|   968k|    {
  425|   968k|        return ctx.get();
  426|   968k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|   968k|    {
  268|   968k|        return contiguous_ctx;
  269|   968k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|   273k|    {
  318|   273k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 273k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   273k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|   144k|{
   92|   144k|    auto arg = ctx.arg(id);
   93|   144k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   144k|    return arg;
   97|   144k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|   333k|    {
  208|   333k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|   333k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|   333k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|   333k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 333k, False: 0]
  |  |  ------------------
  ------------------
  218|   333k|            visited_args_lower64 |= (1ull << id);
  219|   333k|            return;
  220|   333k|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|   333k|    {
  193|   333k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 333k]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|   333k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|   333k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 333k, False: 0]
  |  |  ------------------
  ------------------
  199|   333k|            return (visited_args_lower64 >> id) & 1ull;
  200|   333k|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|   333k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|  33.7k|    {
  177|  33.7k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.7k, False: 0]
  |  |  ------------------
  ------------------
  178|  33.7k|            error = err;
  179|  33.7k|        }
  180|  33.7k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|   144k|    {
  347|   144k|        return parse_ctx.next_arg_id();
  348|   144k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|   144k|    {
  388|   144k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   144k|        set_arg_as_visited(arg_id);
  390|       |
  391|   144k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 144k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   144k|        auto specs = detail::format_specs{};
  401|   144k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   144k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   144k|            arg.type()};
  404|       |
  405|   144k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   144k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 144k]
  |  Branch (406:29): [True: 0, False: 144k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   144k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.69k, False: 138k]
  |  |  ------------------
  ------------------
  412|  5.69k|            return parse_ctx.begin();
  413|  5.69k|        }
  414|   138k|        parse_ctx.advance_to(begin);
  415|       |
  416|   138k|        on_visit_scan_arg(
  417|   138k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   138k|                                           get_ctx().locale()},
  419|   138k|            arg);
  420|   138k|        return parse_ctx.begin();
  421|   144k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|   144k|    {
  112|   144k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|   138k|    {
  359|   138k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 138k]
  |  Branch (359:23): [True: 0, False: 138k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   138k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   138k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.54k, False: 129k]
  |  |  ------------------
  ------------------
  366|  8.54k|            on_error(r.error());
  367|  8.54k|        }
  368|   129k|        else {
  369|   129k|            get_ctx().advance_to(*r);
  370|   129k|        }
  371|   138k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|  22.4k|    {
  172|  22.4k|        SCN_UNLIKELY_ATTR
  173|  22.4k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|  22.4k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|   333k|    {
  140|   333k|        {
  141|   333k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 333k]
  ------------------
  142|   333k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 333k]
  ------------------
  143|   333k|                                      ? std::numeric_limits<uint64_t>::max()
  144|   333k|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|   333k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 333k]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|   333k|        }
  150|       |
  151|   333k|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 333k, False: 0]
  ------------------
  152|   333k|            return;
  153|   333k|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|   333k|    {
  188|   333k|        return error;
  189|   333k|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|   976k|    {
  184|   976k|        return static_cast<bool>(error);
  185|   976k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|  8.54k|    {
  314|  8.54k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|  8.54k|    {
  241|  8.54k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  8.54k|{
  441|  8.54k|    const auto beg = handler.get_ctx().begin();
  442|  8.54k|    detail::parse_format_string<false>(format, handler);
  443|  8.54k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  8.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.12k, False: 1.42k]
  |  |  ------------------
  ------------------
  444|  7.12k|        return unexpected(handler.error);
  445|  7.12k|    }
  446|  1.42k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  8.54k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  39.9k|    {
  425|  39.9k|        return ctx.get();
  426|  39.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  39.9k|    {
  245|  39.9k|        return ctx;
  246|  39.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|  9.97k|    {
  318|  9.97k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 9.97k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  9.97k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|  8.54k|{
   92|  8.54k|    auto arg = ctx.arg(id);
   93|  8.54k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  8.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8.54k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  8.54k|    return arg;
   97|  8.54k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|  8.54k|    {
  347|  8.54k|        return parse_ctx.next_arg_id();
  348|  8.54k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|  8.54k|    {
  388|  8.54k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  8.54k|        set_arg_as_visited(arg_id);
  390|       |
  391|  8.54k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 8.54k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  8.54k|        auto specs = detail::format_specs{};
  401|  8.54k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  8.54k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  8.54k|            arg.type()};
  404|       |
  405|  8.54k|        begin = detail::parse_format_specs(begin, end, handler);
  406|  8.54k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 8.54k]
  |  Branch (406:29): [True: 0, False: 8.54k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  8.54k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  8.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.84k, False: 5.70k]
  |  |  ------------------
  ------------------
  412|  2.84k|            return parse_ctx.begin();
  413|  2.84k|        }
  414|  5.70k|        parse_ctx.advance_to(begin);
  415|       |
  416|  5.70k|        on_visit_scan_arg(
  417|  5.70k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  5.70k|                                           get_ctx().locale()},
  419|  5.70k|            arg);
  420|  5.70k|        return parse_ctx.begin();
  421|  8.54k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|  8.54k|    {
  112|  8.54k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|  5.70k|    {
  359|  5.70k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 5.70k]
  |  Branch (359:23): [True: 0, False: 5.70k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  5.70k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  5.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  5.70k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  5.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.27k, False: 1.42k]
  |  |  ------------------
  ------------------
  366|  4.27k|            on_error(r.error());
  367|  4.27k|        }
  368|  1.42k|        else {
  369|  1.42k|            get_ctx().advance_to(*r);
  370|  1.42k|        }
  371|  5.70k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|   257k|{
  456|   257k|    const auto argcount = args.size();
  457|   257k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 112k, False: 144k]
  |  Branch (457:60): [True: 112k, False: 0]
  ------------------
  458|   112k|        auto arg = args.get(0);
  459|   112k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   112k|    static_cast<    \
  |  |  247|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   112k|    }
  461|       |
  462|   144k|    auto handler = format_handler<true, CharT>{
  463|   144k|        ranges::subrange<const CharT*>{source.data(),
  464|   144k|                                       source.data() + source.size()},
  465|   144k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   144k|    static_cast<    \
  |  |  247|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   144k|    static_cast<    \
  |  |  247|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|   144k|    return vscan_parse_format_string(format, handler);
  467|   257k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   169k|{
   49|   169k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 169k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   169k|    auto reader =
   55|   169k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   169k|            ranges::subrange<const CharT*>{source.data(),
   57|   169k|                                           source.data() + source.size()},
   58|   169k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   169k|    static_cast<    \
  |  |  247|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   169k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.27k, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.27k|    }                                                  \
  |  |  |  |   70|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   165k|    return ranges::distance(source.data(), it);
   61|   169k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|   234k|{
  456|   234k|    const auto argcount = args.size();
  457|   234k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 98.9k, False: 135k]
  |  Branch (457:60): [True: 98.9k, False: 0]
  ------------------
  458|  98.9k|        auto arg = args.get(0);
  459|  98.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  98.9k|    static_cast<    \
  |  |  247|  98.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  98.9k|    }
  461|       |
  462|   135k|    auto handler = format_handler<true, CharT>{
  463|   135k|        ranges::subrange<const CharT*>{source.data(),
  464|   135k|                                       source.data() + source.size()},
  465|   135k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   135k|    static_cast<    \
  |  |  247|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   135k|    static_cast<    \
  |  |  247|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|   135k|    return vscan_parse_format_string(format, handler);
  467|   234k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|   312k|{
   36|   312k|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 180k, False: 132k]
  ------------------
   37|   180k|        return false;
   38|   180k|    }
   39|   132k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 132k, False: 0]
  |  Branch (39:39): [True: 132k, False: 0]
  ------------------
   40|   312k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   148k|{
   49|   148k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   148k|    auto reader =
   55|   148k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   148k|            ranges::subrange<const CharT*>{source.data(),
   57|   148k|                                           source.data() + source.size()},
   58|   148k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   148k|    static_cast<    \
  |  |  247|   148k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   148k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.97k, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.97k|    }                                                  \
  |  |  |  |   70|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   141k|    return ranges::distance(source.data(), it);
   61|   148k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|   135k|    {
  314|   135k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|   135k|    {
  264|   135k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   135k|{
  441|   135k|    const auto beg = handler.get_ctx().begin();
  442|   135k|    detail::parse_format_string<false>(format, handler);
  443|   135k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.2k, False: 111k]
  |  |  ------------------
  ------------------
  444|  23.2k|        return unexpected(handler.error);
  445|  23.2k|    }
  446|   111k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   135k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|   880k|    {
  425|   880k|        return ctx.get();
  426|   880k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|   880k|    {
  268|   880k|        return contiguous_ctx;
  269|   880k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|   247k|    {
  318|   247k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 247k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   247k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|   135k|{
   92|   135k|    auto arg = ctx.arg(id);
   93|   135k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   135k|    return arg;
   97|   135k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|   135k|    {
  347|   135k|        return parse_ctx.next_arg_id();
  348|   135k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|   135k|    {
  388|   135k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   135k|        set_arg_as_visited(arg_id);
  390|       |
  391|   135k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 135k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   135k|        auto specs = detail::format_specs{};
  401|   135k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   135k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   135k|            arg.type()};
  404|       |
  405|   135k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   135k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 135k]
  |  Branch (406:29): [True: 0, False: 135k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   135k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.29k, False: 125k]
  |  |  ------------------
  ------------------
  412|  9.29k|            return parse_ctx.begin();
  413|  9.29k|        }
  414|   125k|        parse_ctx.advance_to(begin);
  415|       |
  416|   125k|        on_visit_scan_arg(
  417|   125k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   125k|                                           get_ctx().locale()},
  419|   125k|            arg);
  420|   125k|        return parse_ctx.begin();
  421|   135k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|   135k|    {
  112|   135k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|   125k|    {
  359|   125k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 125k]
  |  Branch (359:23): [True: 0, False: 125k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   125k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   125k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.9k, False: 111k]
  |  |  ------------------
  ------------------
  366|  13.9k|            on_error(r.error());
  367|  13.9k|        }
  368|   111k|        else {
  369|   111k|            get_ctx().advance_to(*r);
  370|   111k|        }
  371|   125k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|  78.8k|{
  476|  78.8k|    const auto argcount = args.size();
  477|  78.8k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 33.5k, False: 45.3k]
  |  Branch (477:60): [True: 33.5k, False: 0]
  ------------------
  478|  33.5k|        auto arg = args.get(0);
  479|  33.5k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  33.5k|    static_cast<    \
  |  |  247|  33.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  33.5k|    }
  481|       |
  482|  45.3k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 45.3k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|  45.3k|    SCN_UNLIKELY_ATTR
  490|  45.3k|    {
  491|  45.3k|        auto handler = format_handler<false, CharT>{
  492|  45.3k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  45.3k|    static_cast<    \
  |  |  247|  45.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  45.3k|    static_cast<    \
  |  |  247|  45.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|  45.3k|        return vscan_parse_format_string(format, handler);
  494|  45.3k|    }
  495|  45.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  50.3k|{
   69|  50.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 50.3k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  50.3k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  50.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 50.3k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  50.3k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  50.3k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  50.3k|    static_cast<    \
  |  |  247|  50.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  50.3k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.48k, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.48k|    }                                                  \
  |  |  |  |   70|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  46.8k|    return it.position();
   86|  50.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|  45.3k|    {
  314|  45.3k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|  45.3k|    {
  241|  45.3k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  45.3k|{
  441|  45.3k|    const auto beg = handler.get_ctx().begin();
  442|  45.3k|    detail::parse_format_string<false>(format, handler);
  443|  45.3k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 11.6k, False: 33.7k]
  |  |  ------------------
  ------------------
  444|  11.6k|        return unexpected(handler.error);
  445|  11.6k|    }
  446|  33.7k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  45.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|   284k|    {
  425|   284k|        return ctx.get();
  426|   284k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|   284k|    {
  245|   284k|        return ctx;
  246|   284k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|  79.0k|    {
  318|  79.0k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 79.0k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  79.0k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|  45.3k|{
   92|  45.3k|    auto arg = ctx.arg(id);
   93|  45.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.3k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  45.3k|    return arg;
   97|  45.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|  45.3k|    {
  347|  45.3k|        return parse_ctx.next_arg_id();
  348|  45.3k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|  45.3k|    {
  388|  45.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  45.3k|        set_arg_as_visited(arg_id);
  390|       |
  391|  45.3k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 45.3k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  45.3k|        auto specs = detail::format_specs{};
  401|  45.3k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  45.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  45.3k|            arg.type()};
  404|       |
  405|  45.3k|        begin = detail::parse_format_specs(begin, end, handler);
  406|  45.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 45.3k]
  |  Branch (406:29): [True: 0, False: 45.3k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  45.3k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.64k, False: 40.6k]
  |  |  ------------------
  ------------------
  412|  4.64k|            return parse_ctx.begin();
  413|  4.64k|        }
  414|  40.6k|        parse_ctx.advance_to(begin);
  415|       |
  416|  40.6k|        on_visit_scan_arg(
  417|  40.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  40.6k|                                           get_ctx().locale()},
  419|  40.6k|            arg);
  420|  40.6k|        return parse_ctx.begin();
  421|  45.3k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|  45.3k|    {
  112|  45.3k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|  40.6k|    {
  359|  40.6k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 40.6k]
  |  Branch (359:23): [True: 0, False: 40.6k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  40.6k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  40.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  40.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.97k, False: 33.7k]
  |  |  ------------------
  ------------------
  366|  6.97k|            on_error(r.error());
  367|  6.97k|        }
  368|  33.7k|        else {
  369|  33.7k|            get_ctx().advance_to(*r);
  370|  33.7k|        }
  371|  40.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  56.4k|{
  502|  56.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  56.4k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|    713|{
  502|    713|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|    713|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|    713|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  49.4k|{
  502|  49.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  49.4k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  16.7k|{
  502|  16.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  16.7k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|    712|{
   52|    712|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|    712|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    712|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|    712|    std::copy(data.begin(), data.end(),
   57|    712|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    712|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    712|    const auto wsv_reinterpret_size =
   62|    712|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 70, False: 642]
  ------------------
   63|    712|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    712|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|    712|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    712|    std::wstring_view wsv_transcoded;
   69|    712|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 450, False: 262]
  ------------------
   70|    450|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|    450|        else {
   79|    450|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|    450|            wstring_buffer_transcoded_wide.resize(size);
   81|    450|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|    450|                sv.data(), sv.size(),
   83|    450|                reinterpret_cast<char32_t*>(
   84|    450|                    wstring_buffer_transcoded_wide.data()));
   85|    450|        }
   86|    450|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|    450|    }
   88|       |
   89|    712|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|    712|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|    712|{
  140|    712|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|    712|    auto& buf = get_format_string_view_buffer<CharT>();
  142|    712|    buf.resize(sizeof...(Args));
  143|    712|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|    712|    return {buf.data(), buf.size()};
  145|    712|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|    712|{
  126|    712|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|    712|        return format_string_view_buffer;
  128|    712|    }
  129|    712|    else {
  130|    712|        return wformat_string_view_buffer;
  131|    712|    }
  132|    712|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|    712|{
  200|    712|    do_basic_run_for_source<CharT>(data, format_strings);
  201|    712|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|    712|                                   format_strings);
  203|    712|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_NS_2v24spanIKNS9_IT_NS4_ISF_EEEEEE:
  150|    712|{
  151|       |    // Regular scan
  152|  4.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 4.27k, False: 712]
  ------------------
  153|  4.27k|        auto it = scn::ranges::begin(source);
  154|  64.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  64.2k|            auto result = scn::scan<T>(
  156|  64.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  64.2k|                scn::runtime_format(f));
  158|  64.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 4.27k, False: 59.9k]
  ------------------
  159|  4.27k|                break;
  160|  4.27k|            }
  161|  59.9k|            it = result->begin();
  162|  59.9k|        }
  163|  4.27k|    }
  164|       |
  165|       |    // scan localized
  166|  4.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 4.27k, False: 712]
  ------------------
  167|  4.27k|        auto it = scn::ranges::begin(source);
  168|  64.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  64.2k|            auto result = scn::scan<T>(
  170|  64.2k|                global_locale,
  171|  64.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  64.2k|                scn::runtime_format(f));
  173|  64.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 4.27k, False: 59.9k]
  ------------------
  174|  4.27k|                break;
  175|  4.27k|            }
  176|  59.9k|            it = result->begin();
  177|  59.9k|        }
  178|  4.27k|    }
  179|       |
  180|       |    // scan_value
  181|    712|    {
  182|    712|        auto it = scn::ranges::begin(source);
  183|  28.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  28.2k|            auto result = scn::scan_value<T>(
  185|  28.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  28.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 712, False: 27.5k]
  ------------------
  187|    712|                break;
  188|    712|            }
  189|  27.5k|            it = result->begin();
  190|  27.5k|        }
  191|    712|    }
  192|    712|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|    712|{
  151|       |    // Regular scan
  152|  4.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 4.27k, False: 712]
  ------------------
  153|  4.27k|        auto it = scn::ranges::begin(source);
  154|  64.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  64.2k|            auto result = scn::scan<T>(
  156|  64.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  64.2k|                scn::runtime_format(f));
  158|  64.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 4.27k, False: 59.9k]
  ------------------
  159|  4.27k|                break;
  160|  4.27k|            }
  161|  59.9k|            it = result->begin();
  162|  59.9k|        }
  163|  4.27k|    }
  164|       |
  165|       |    // scan localized
  166|  4.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 4.27k, False: 712]
  ------------------
  167|  4.27k|        auto it = scn::ranges::begin(source);
  168|  64.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  64.2k|            auto result = scn::scan<T>(
  170|  64.2k|                global_locale,
  171|  64.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  64.2k|                scn::runtime_format(f));
  173|  64.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 4.27k, False: 59.9k]
  ------------------
  174|  4.27k|                break;
  175|  4.27k|            }
  176|  59.9k|            it = result->begin();
  177|  59.9k|        }
  178|  4.27k|    }
  179|       |
  180|       |    // scan_value
  181|    712|    {
  182|    712|        auto it = scn::ranges::begin(source);
  183|  28.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  28.2k|            auto result = scn::scan_value<T>(
  185|  28.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  28.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 712, False: 27.5k]
  ------------------
  187|    712|                break;
  188|    712|            }
  189|  27.5k|            it = result->begin();
  190|  27.5k|        }
  191|    712|    }
  192|    712|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS4_ISH_EEEEEE:
  150|    712|{
  151|       |    // Regular scan
  152|  4.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 4.27k, False: 712]
  ------------------
  153|  4.27k|        auto it = scn::ranges::begin(source);
  154|  4.98k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  4.98k|            auto result = scn::scan<T>(
  156|  4.98k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  4.98k|                scn::runtime_format(f));
  158|  4.98k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 4.27k, False: 715]
  ------------------
  159|  4.27k|                break;
  160|  4.27k|            }
  161|    715|            it = result->begin();
  162|    715|        }
  163|  4.27k|    }
  164|       |
  165|       |    // scan localized
  166|  4.27k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 4.27k, False: 712]
  ------------------
  167|  4.27k|        auto it = scn::ranges::begin(source);
  168|  4.98k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.98k|            auto result = scn::scan<T>(
  170|  4.98k|                global_locale,
  171|  4.98k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  4.98k|                scn::runtime_format(f));
  173|  4.98k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 4.27k, False: 715]
  ------------------
  174|  4.27k|                break;
  175|  4.27k|            }
  176|    715|            it = result->begin();
  177|    715|        }
  178|  4.27k|    }
  179|       |
  180|       |    // scan_value
  181|    712|    {
  182|    712|        auto it = scn::ranges::begin(source);
  183|    713|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|    713|            auto result = scn::scan_value<T>(
  185|    713|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|    713|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 712, False: 1]
  ------------------
  187|    712|                break;
  188|    712|            }
  189|      1|            it = result->begin();
  190|      1|        }
  191|    712|    }
  192|    712|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|    712|{
  109|    712|    using char_type = ranges::range_value_t<Source>;
  110|    712|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|    712|    std::copy(ranges::begin(source), ranges::end(source),
  112|    712|              std::back_inserter(deque));
  113|    712|    return deque;
  114|    712|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|    712|{
   98|    712|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|    712|        return noncontiguous_buffer;
  100|    712|    }
  101|    712|    else {
  102|    712|        return wnoncontiguous_buffer;
  103|    712|    }
  104|    712|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|    712|{
  140|    712|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|    712|    auto& buf = get_format_string_view_buffer<CharT>();
  142|    712|    buf.resize(sizeof...(Args));
  143|    712|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|    712|    return {buf.data(), buf.size()};
  145|    712|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|    712|{
  126|    712|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|    712|        return format_string_view_buffer;
  128|    712|    }
  129|    712|    else {
  130|    712|        return wformat_string_view_buffer;
  131|    712|    }
  132|    712|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  1.16k|{
  200|  1.16k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  1.16k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  1.16k|                                   format_strings);
  203|  1.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_NS_2v24spanIKNS9_IT_NS4_ISF_EEEEEE:
  150|  1.16k|{
  151|       |    // Regular scan
  152|  6.97k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 6.97k, False: 1.16k]
  ------------------
  153|  6.97k|        auto it = scn::ranges::begin(source);
  154|  58.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.5k|            auto result = scn::scan<T>(
  156|  58.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.5k|                scn::runtime_format(f));
  158|  58.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.97k, False: 51.5k]
  ------------------
  159|  6.97k|                break;
  160|  6.97k|            }
  161|  51.5k|            it = result->begin();
  162|  51.5k|        }
  163|  6.97k|    }
  164|       |
  165|       |    // scan localized
  166|  6.97k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 6.97k, False: 1.16k]
  ------------------
  167|  6.97k|        auto it = scn::ranges::begin(source);
  168|  58.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.5k|            auto result = scn::scan<T>(
  170|  58.5k|                global_locale,
  171|  58.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.5k|                scn::runtime_format(f));
  173|  58.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 6.97k, False: 51.5k]
  ------------------
  174|  6.97k|                break;
  175|  6.97k|            }
  176|  51.5k|            it = result->begin();
  177|  51.5k|        }
  178|  6.97k|    }
  179|       |
  180|       |    // scan_value
  181|  1.16k|    {
  182|  1.16k|        auto it = scn::ranges::begin(source);
  183|  24.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  24.7k|            auto result = scn::scan_value<T>(
  185|  24.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  24.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.16k, False: 23.5k]
  ------------------
  187|  1.16k|                break;
  188|  1.16k|            }
  189|  23.5k|            it = result->begin();
  190|  23.5k|        }
  191|  1.16k|    }
  192|  1.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.16k|{
  151|       |    // Regular scan
  152|  6.97k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 6.97k, False: 1.16k]
  ------------------
  153|  6.97k|        auto it = scn::ranges::begin(source);
  154|  58.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.5k|            auto result = scn::scan<T>(
  156|  58.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.5k|                scn::runtime_format(f));
  158|  58.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.97k, False: 51.5k]
  ------------------
  159|  6.97k|                break;
  160|  6.97k|            }
  161|  51.5k|            it = result->begin();
  162|  51.5k|        }
  163|  6.97k|    }
  164|       |
  165|       |    // scan localized
  166|  6.97k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 6.97k, False: 1.16k]
  ------------------
  167|  6.97k|        auto it = scn::ranges::begin(source);
  168|  58.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.5k|            auto result = scn::scan<T>(
  170|  58.5k|                global_locale,
  171|  58.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.5k|                scn::runtime_format(f));
  173|  58.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 6.97k, False: 51.5k]
  ------------------
  174|  6.97k|                break;
  175|  6.97k|            }
  176|  51.5k|            it = result->begin();
  177|  51.5k|        }
  178|  6.97k|    }
  179|       |
  180|       |    // scan_value
  181|  1.16k|    {
  182|  1.16k|        auto it = scn::ranges::begin(source);
  183|  24.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  24.7k|            auto result = scn::scan_value<T>(
  185|  24.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  24.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.16k, False: 23.5k]
  ------------------
  187|  1.16k|                break;
  188|  1.16k|            }
  189|  23.5k|            it = result->begin();
  190|  23.5k|        }
  191|  1.16k|    }
  192|  1.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS4_ISH_EEEEEE:
  150|  1.16k|{
  151|       |    // Regular scan
  152|  6.97k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 6.97k, False: 1.16k]
  ------------------
  153|  6.97k|        auto it = scn::ranges::begin(source);
  154|  39.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  39.4k|            auto result = scn::scan<T>(
  156|  39.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.4k|                scn::runtime_format(f));
  158|  39.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.97k, False: 32.4k]
  ------------------
  159|  6.97k|                break;
  160|  6.97k|            }
  161|  32.4k|            it = result->begin();
  162|  32.4k|        }
  163|  6.97k|    }
  164|       |
  165|       |    // scan localized
  166|  6.97k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 6.97k, False: 1.16k]
  ------------------
  167|  6.97k|        auto it = scn::ranges::begin(source);
  168|  39.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  39.4k|            auto result = scn::scan<T>(
  170|  39.4k|                global_locale,
  171|  39.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  39.4k|                scn::runtime_format(f));
  173|  39.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 6.97k, False: 32.4k]
  ------------------
  174|  6.97k|                break;
  175|  6.97k|            }
  176|  32.4k|            it = result->begin();
  177|  32.4k|        }
  178|  6.97k|    }
  179|       |
  180|       |    // scan_value
  181|  1.16k|    {
  182|  1.16k|        auto it = scn::ranges::begin(source);
  183|  16.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  16.7k|            auto result = scn::scan_value<T>(
  185|  16.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  16.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.16k, False: 15.6k]
  ------------------
  187|  1.16k|                break;
  188|  1.16k|            }
  189|  15.6k|            it = result->begin();
  190|  15.6k|        }
  191|  1.16k|    }
  192|  1.16k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  1.16k|{
  109|  1.16k|    using char_type = ranges::range_value_t<Source>;
  110|  1.16k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  1.16k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  1.16k|              std::back_inserter(deque));
  113|  1.16k|    return deque;
  114|  1.16k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  1.16k|{
   98|  1.16k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  1.16k|        return noncontiguous_buffer;
  100|  1.16k|    }
  101|  1.16k|    else {
  102|  1.16k|        return wnoncontiguous_buffer;
  103|  1.16k|    }
  104|  1.16k|}

LLVMFuzzerTestOneInput:
   57|    713|{
   58|    713|    scn::fuzz::run({data, size});
   59|    713|    return 0;
   60|    713|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|    713|{
   36|    713|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 712]
  |  Branch (36:42): [True: 0, False: 712]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    712|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|    712|    auto f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}", "{:64U}",
   43|    712|                                      "{:[A-Za-z]}");
   44|    712|    do_basic_run(sv, f);
   45|       |
   46|    712|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:L}", L"{:s}", L"{:64c}",
   47|    712|                                          L"{:64U}", L"{:[A-Za-z]}");
   48|    712|    do_basic_run(wsv_reinterpret, wf);
   49|    712|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 450, False: 262]
  ------------------
   50|    450|        do_basic_run(wsv_transcode, wf);
   51|    450|    }
   52|    712|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|    712|{
   25|    712|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    712|                                                           format_strings);
   27|    712|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    712|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    712|            source, format_strings);
   30|    712|    }
   31|    712|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|    712|{
   25|    712|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    712|                                                           format_strings);
   27|    712|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    712|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    712|            source, format_strings);
   30|    712|    }
   31|    712|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  1.16k|{
   25|  1.16k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.16k|                                                           format_strings);
   27|  1.16k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.16k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.16k|            source, format_strings);
   30|  1.16k|    }
   31|  1.16k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  1.16k|{
   25|  1.16k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.16k|                                                           format_strings);
   27|  1.16k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.16k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.16k|            source, format_strings);
   30|  1.16k|    }
   31|  1.16k|}

